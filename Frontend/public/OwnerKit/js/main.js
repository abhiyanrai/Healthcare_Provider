// modules are defined as an array
// [ module function, map of requires ]
//
// map of requires is short require name -> numeric require
//
// anything defined in a previous bundle is accessed via the
// orig method which is the require for previous bundles

(function (modules, entry, mainEntry, parcelRequireName, globalName) {
    /* eslint-disable no-undef */
    var globalObject =
      typeof globalThis !== 'undefined'
        ? globalThis
        : typeof self !== 'undefined'
        ? self
        : typeof window !== 'undefined'
        ? window
        : typeof global !== 'undefined'
        ? global
        : {};
    /* eslint-enable no-undef */
  
    // Save the require from previous bundle to this closure if any
    var previousRequire =
      typeof globalObject[parcelRequireName] === 'function' &&
      globalObject[parcelRequireName];
  
    var cache = previousRequire.cache || {};
    // Do not use `require` to prevent Webpack from trying to bundle this call
    var nodeRequire =
      typeof module !== 'undefined' &&
      typeof module.require === 'function' &&
      module.require.bind(module);
  
    function newRequire(name, jumped) {
      if (!cache[name]) {
        if (!modules[name]) {
          // if we cannot find the module within our internal map or
          // cache jump to the current global require ie. the last bundle
          // that was added to the page.
          var currentRequire =
            typeof globalObject[parcelRequireName] === 'function' &&
            globalObject[parcelRequireName];
          if (!jumped && currentRequire) {
            return currentRequire(name, true);
          }
  
          // If there are other bundles on this page the require from the
          // previous one is saved to 'previousRequire'. Repeat this as
          // many times as there are bundles until the module is found or
          // we exhaust the require chain.
          if (previousRequire) {
            return previousRequire(name, true);
          }
  
          // Try the node require function if it exists.
          if (nodeRequire && typeof name === 'string') {
            return nodeRequire(name);
          }
  
          var err = new Error("Cannot find module '" + name + "'");
          err.code = 'MODULE_NOT_FOUND';
          throw err;
        }
  
        localRequire.resolve = resolve;
        localRequire.cache = {};
  
        var module = (cache[name] = new newRequire.Module(name));
  
        modules[name][0].call(
          module.exports,
          localRequire,
          module,
          module.exports,
          this
        );
      }
  
      return cache[name].exports;
  
      function localRequire(x) {
        var res = localRequire.resolve(x);
        return res === false ? {} : newRequire(res);
      }
  
      function resolve(x) {
        var id = modules[name][1][x];
        return id != null ? id : x;
      }
    }
  
    function Module(moduleName) {
      this.id = moduleName;
      this.bundle = newRequire;
      this.exports = {};
    }
  
    newRequire.isParcelRequire = true;
    newRequire.Module = Module;
    newRequire.modules = modules;
    newRequire.cache = cache;
    newRequire.parent = previousRequire;
    newRequire.register = function (id, exports) {
      modules[id] = [
        function (require, module) {
          module.exports = exports;
        },
        {},
      ];
    };
  
    Object.defineProperty(newRequire, 'root', {
      get: function () {
        return globalObject[parcelRequireName];
      },
    });
  
    globalObject[parcelRequireName] = newRequire;
  
    for (var i = 0; i < entry.length; i++) {
      newRequire(entry[i]);
    }
  
    if (mainEntry) {
      // Expose entry point to Node, AMD or browser globals
      // Based on https://github.com/ForbesLindesay/umd/blob/master/template.js
      var mainExports = newRequire(mainEntry);
  
      // CommonJS
      if (typeof exports === 'object' && typeof module !== 'undefined') {
        module.exports = mainExports;
  
        // RequireJS
      } else if (typeof define === 'function' && define.amd) {
        define(function () {
          return mainExports;
        });
  
        // <script>
      } else if (globalName) {
        this[globalName] = mainExports;
      }
    }
  })({"89Gua":[function(require,module,exports) {
  "use strict";
  var HMR_HOST = null;
  var HMR_PORT = 50950;
  var HMR_SECURE = false;
  var HMR_ENV_HASH = "62b4c8a1dd9cbcca";
  module.bundle.HMR_BUNDLE_ID = "f1a33f3a193ef3c0";
  function _toConsumableArray(arr) {
      return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
  }
  function _nonIterableSpread() {
      throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  function _iterableToArray(iter) {
      if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
  }
  function _arrayWithoutHoles(arr) {
      if (Array.isArray(arr)) return _arrayLikeToArray(arr);
  }
  function _createForOfIteratorHelper(o, allowArrayLike) {
      var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
      if (!it) {
          if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
              if (it) o = it;
              var i = 0;
              var F = function F() {
              };
              return {
                  s: F,
                  n: function n() {
                      if (i >= o.length) return {
                          done: true
                      };
                      return {
                          done: false,
                          value: o[i++]
                      };
                  },
                  e: function e(_e) {
                      throw _e;
                  },
                  f: F
              };
          }
          throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
      }
      var normalCompletion = true, didErr = false, err;
      return {
          s: function s() {
              it = it.call(o);
          },
          n: function n() {
              var step = it.next();
              normalCompletion = step.done;
              return step;
          },
          e: function e(_e2) {
              didErr = true;
              err = _e2;
          },
          f: function f() {
              try {
                  if (!normalCompletion && it.return != null) it.return();
              } finally{
                  if (didErr) throw err;
              }
          }
      };
  }
  function _unsupportedIterableToArray(o, minLen) {
      if (!o) return;
      if (typeof o === "string") return _arrayLikeToArray(o, minLen);
      var n = Object.prototype.toString.call(o).slice(8, -1);
      if (n === "Object" && o.constructor) n = o.constructor.name;
      if (n === "Map" || n === "Set") return Array.from(o);
      if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
  }
  function _arrayLikeToArray(arr, len) {
      if (len == null || len > arr.length) len = arr.length;
      for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];
      return arr2;
  }
  /* global HMR_HOST, HMR_PORT, HMR_ENV_HASH, HMR_SECURE */ /*::
  import type {
    HMRAsset,
    HMRMessage,
  } from '@parcel/reporter-dev-server/src/HMRServer.js';
  interface ParcelRequire {
    (string): mixed;
    cache: {|[string]: ParcelModule|};
    hotData: mixed;
    Module: any;
    parent: ?ParcelRequire;
    isParcelRequire: true;
    modules: {|[string]: [Function, {|[string]: string|}]|};
    HMR_BUNDLE_ID: string;
    root: ParcelRequire;
  }
  interface ParcelModule {
    hot: {|
      data: mixed,
      accept(cb: (Function) => void): void,
      dispose(cb: (mixed) => void): void,
      // accept(deps: Array<string> | string, cb: (Function) => void): void,
      // decline(): void,
      _acceptCallbacks: Array<(Function) => void>,
      _disposeCallbacks: Array<(mixed) => void>,
    |};
  }
  declare var module: {bundle: ParcelRequire, ...};
  declare var HMR_HOST: string;
  declare var HMR_PORT: string;
  declare var HMR_ENV_HASH: string;
  declare var HMR_SECURE: boolean;
  */ var OVERLAY_ID = '__parcel__error__overlay__';
  var OldModule = module.bundle.Module;
  function Module(moduleName) {
      OldModule.call(this, moduleName);
      this.hot = {
          data: module.bundle.hotData,
          _acceptCallbacks: [],
          _disposeCallbacks: [],
          accept: function accept(fn) {
              this._acceptCallbacks.push(fn || function() {
              });
          },
          dispose: function dispose(fn) {
              this._disposeCallbacks.push(fn);
          }
      };
      module.bundle.hotData = undefined;
  }
  module.bundle.Module = Module;
  var checkedAssets, acceptedAssets, assetsToAccept;
  function getHostname() {
      return HMR_HOST || (location.protocol.indexOf('http') === 0 ? location.hostname : 'localhost');
  }
  function getPort() {
      return HMR_PORT || location.port;
  } // eslint-disable-next-line no-redeclare
  var parent = module.bundle.parent;
  if ((!parent || !parent.isParcelRequire) && typeof WebSocket !== 'undefined') {
      var hostname = getHostname();
      var port = getPort();
      var protocol = HMR_SECURE || location.protocol == 'https:' && !/localhost|127.0.0.1|0.0.0.0/.test(hostname) ? 'wss' : 'ws';
      var ws = new WebSocket(protocol + '://' + hostname + (port ? ':' + port : '') + '/'); // $FlowFixMe
      ws.onmessage = function(event) {
          checkedAssets = {
          };
          acceptedAssets = {
          };
          assetsToAccept = [];
          var data = JSON.parse(event.data);
          if (data.type === 'update') {
              // Remove error overlay if there is one
              if (typeof document !== 'undefined') removeErrorOverlay();
              var assets = data.assets.filter(function(asset) {
                  return asset.envHash === HMR_ENV_HASH;
              }); // Handle HMR Update
              var handled = assets.every(function(asset) {
                  return asset.type === 'css' || asset.type === 'js' && hmrAcceptCheck(module.bundle.root, asset.id, asset.depsByBundle);
              });
              if (handled) {
                  console.clear();
                  assets.forEach(function(asset) {
                      hmrApply(module.bundle.root, asset);
                  });
                  for(var i = 0; i < assetsToAccept.length; i++){
                      var id = assetsToAccept[i][1];
                      if (!acceptedAssets[id]) hmrAcceptRun(assetsToAccept[i][0], id);
                  }
              } else window.location.reload();
          }
          if (data.type === 'error') {
              // Log parcel errors to console
              var _iterator = _createForOfIteratorHelper(data.diagnostics.ansi), _step;
              try {
                  for(_iterator.s(); !(_step = _iterator.n()).done;){
                      var ansiDiagnostic = _step.value;
                      var stack = ansiDiagnostic.codeframe ? ansiDiagnostic.codeframe : ansiDiagnostic.stack;
                      console.error('🚨 [parcel]: ' + ansiDiagnostic.message + '\n' + stack + '\n\n' + ansiDiagnostic.hints.join('\n'));
                  }
              } catch (err) {
                  _iterator.e(err);
              } finally{
                  _iterator.f();
              }
              if (typeof document !== 'undefined') {
                  // Render the fancy html overlay
                  removeErrorOverlay();
                  var overlay = createErrorOverlay(data.diagnostics.html); // $FlowFixMe
                  document.body.appendChild(overlay);
              }
          }
      };
      ws.onerror = function(e) {
          console.error(e.message);
      };
      ws.onclose = function() {
          console.warn('[parcel] 🚨 Connection to the HMR server was lost');
      };
  }
  function removeErrorOverlay() {
      var overlay = document.getElementById(OVERLAY_ID);
      if (overlay) {
          overlay.remove();
          console.log('[parcel] ✨ Error resolved');
      }
  }
  function createErrorOverlay(diagnostics) {
      var overlay = document.createElement('div');
      overlay.id = OVERLAY_ID;
      var errorHTML = '<div style="background: black; opacity: 0.85; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; font-family: Menlo, Consolas, monospace; z-index: 9999;">';
      var _iterator2 = _createForOfIteratorHelper(diagnostics), _step2;
      try {
          for(_iterator2.s(); !(_step2 = _iterator2.n()).done;){
              var diagnostic = _step2.value;
              var stack = diagnostic.codeframe ? diagnostic.codeframe : diagnostic.stack;
              errorHTML += "\n      <div>\n        <div style=\"font-size: 18px; font-weight: bold; margin-top: 20px;\">\n          \uD83D\uDEA8 ".concat(diagnostic.message, "\n        </div>\n        <pre>").concat(stack, "</pre>\n        <div>\n          ").concat(diagnostic.hints.map(function(hint) {
                  return '<div>💡 ' + hint + '</div>';
              }).join(''), "\n        </div>\n        ").concat(diagnostic.documentation ? "<div>\uD83D\uDCDD <a style=\"color: violet\" href=\"".concat(diagnostic.documentation, "\" target=\"_blank\">Learn more</a></div>") : '', "\n      </div>\n    ");
          }
      } catch (err) {
          _iterator2.e(err);
      } finally{
          _iterator2.f();
      }
      errorHTML += '</div>';
      overlay.innerHTML = errorHTML;
      return overlay;
  }
  function getParents(bundle, id) /*: Array<[ParcelRequire, string]> */ {
      var modules = bundle.modules;
      if (!modules) return [];
      var parents = [];
      var k, d, dep;
      for(k in modules)for(d in modules[k][1]){
          dep = modules[k][1][d];
          if (dep === id || Array.isArray(dep) && dep[dep.length - 1] === id) parents.push([
              bundle,
              k
          ]);
      }
      if (bundle.parent) parents = parents.concat(getParents(bundle.parent, id));
      return parents;
  }
  function updateLink(link) {
      var newLink = link.cloneNode();
      newLink.onload = function() {
          if (link.parentNode !== null) // $FlowFixMe
          link.parentNode.removeChild(link);
      };
      newLink.setAttribute('href', link.getAttribute('href').split('?')[0] + '?' + Date.now()); // $FlowFixMe
      link.parentNode.insertBefore(newLink, link.nextSibling);
  }
  var cssTimeout = null;
  function reloadCSS() {
      if (cssTimeout) return;
      cssTimeout = setTimeout(function() {
          var links = document.querySelectorAll('link[rel="stylesheet"]');
          for(var i = 0; i < links.length; i++){
              // $FlowFixMe[incompatible-type]
              var href = links[i].getAttribute('href');
              var hostname = getHostname();
              var servedFromHMRServer = hostname === 'localhost' ? new RegExp('^(https?:\\/\\/(0.0.0.0|127.0.0.1)|localhost):' + getPort()).test(href) : href.indexOf(hostname + ':' + getPort());
              var absolute = /^https?:\/\//i.test(href) && href.indexOf(window.location.origin) !== 0 && !servedFromHMRServer;
              if (!absolute) updateLink(links[i]);
          }
          cssTimeout = null;
      }, 50);
  }
  function hmrApply(bundle, asset) {
      var modules = bundle.modules;
      if (!modules) return;
      if (asset.type === 'css') reloadCSS();
      else if (asset.type === 'js') {
          var deps = asset.depsByBundle[bundle.HMR_BUNDLE_ID];
          if (deps) {
              if (modules[asset.id]) {
                  // Remove dependencies that are removed and will become orphaned.
                  // This is necessary so that if the asset is added back again, the cache is gone, and we prevent a full page reload.
                  var oldDeps = modules[asset.id][1];
                  for(var dep in oldDeps)if (!deps[dep] || deps[dep] !== oldDeps[dep]) {
                      var id = oldDeps[dep];
                      var parents = getParents(module.bundle.root, id);
                      if (parents.length === 1) hmrDelete(module.bundle.root, id);
                  }
              }
              var fn = new Function('require', 'module', 'exports', asset.output);
              modules[asset.id] = [
                  fn,
                  deps
              ];
          } else if (bundle.parent) hmrApply(bundle.parent, asset);
      }
  }
  function hmrDelete(bundle, id1) {
      var modules = bundle.modules;
      if (!modules) return;
      if (modules[id1]) {
          // Collect dependencies that will become orphaned when this module is deleted.
          var deps = modules[id1][1];
          var orphans = [];
          for(var dep in deps){
              var parents = getParents(module.bundle.root, deps[dep]);
              if (parents.length === 1) orphans.push(deps[dep]);
          } // Delete the module. This must be done before deleting dependencies in case of circular dependencies.
          delete modules[id1];
          delete bundle.cache[id1]; // Now delete the orphans.
          orphans.forEach(function(id) {
              hmrDelete(module.bundle.root, id);
          });
      } else if (bundle.parent) hmrDelete(bundle.parent, id1);
  }
  function hmrAcceptCheck(bundle, id, depsByBundle) {
      if (hmrAcceptCheckOne(bundle, id, depsByBundle)) return true;
       // Traverse parents breadth first. All possible ancestries must accept the HMR update, or we'll reload.
      var parents = getParents(module.bundle.root, id);
      var accepted = false;
      while(parents.length > 0){
          var v = parents.shift();
          var a = hmrAcceptCheckOne(v[0], v[1], null);
          if (a) // If this parent accepts, stop traversing upward, but still consider siblings.
          accepted = true;
          else {
              // Otherwise, queue the parents in the next level upward.
              var p = getParents(module.bundle.root, v[1]);
              if (p.length === 0) {
                  // If there are no parents, then we've reached an entry without accepting. Reload.
                  accepted = false;
                  break;
              }
              parents.push.apply(parents, _toConsumableArray(p));
          }
      }
      return accepted;
  }
  function hmrAcceptCheckOne(bundle, id, depsByBundle) {
      var modules = bundle.modules;
      if (!modules) return;
      if (depsByBundle && !depsByBundle[bundle.HMR_BUNDLE_ID]) {
          // If we reached the root bundle without finding where the asset should go,
          // there's nothing to do. Mark as "accepted" so we don't reload the page.
          if (!bundle.parent) return true;
          return hmrAcceptCheck(bundle.parent, id, depsByBundle);
      }
      if (checkedAssets[id]) return true;
      checkedAssets[id] = true;
      var cached = bundle.cache[id];
      assetsToAccept.push([
          bundle,
          id
      ]);
      if (!cached || cached.hot && cached.hot._acceptCallbacks.length) return true;
  }
  function hmrAcceptRun(bundle, id) {
      var cached = bundle.cache[id];
      bundle.hotData = {
      };
      if (cached && cached.hot) cached.hot.data = bundle.hotData;
      if (cached && cached.hot && cached.hot._disposeCallbacks.length) cached.hot._disposeCallbacks.forEach(function(cb) {
          cb(bundle.hotData);
      });
      delete bundle.cache[id];
      bundle(id);
      cached = bundle.cache[id];
      if (cached && cached.hot && cached.hot._acceptCallbacks.length) cached.hot._acceptCallbacks.forEach(function(cb) {
          var assetsToAlsoAccept = cb(function() {
              return getParents(module.bundle.root, id);
          });
          if (assetsToAlsoAccept && assetsToAccept.length) // $FlowFixMe[method-unbinding]
          assetsToAccept.push.apply(assetsToAccept, assetsToAlsoAccept);
      });
      acceptedAssets[id] = true;
  }
  
  },{}],"iGeph":[function(require,module,exports) {
  // Bootstrap JS
  var bootstrap = require('bootstrap');
  // Charts
  let apexLineChart = require('./apex-charts/line');
  let apexBarChart = require('./apex-charts/bar');
  let apexUsersChart = require('./apex-charts/users');
  let apexSparkChart = require('./apex-charts/spark');
  // Libs
  let datepicker = require('./datepicker');
  document.addEventListener('DOMContentLoaded', ()=>{
      // Line chart
      const lineChartEl = document.querySelector("#chart-line");
      if (lineChartEl) new apexLineChart().init(lineChartEl);
      // Bar chart
      const barChartEl = document.querySelector("#chart-bar");
      if (barChartEl) new apexBarChart().init(barChartEl);
      // Users chart
      const usersChartEl = document.querySelector("#chart-users");
      if (usersChartEl) new apexUsersChart().init(usersChartEl);
      // Spark chart
      const sparkChartsEl = document.querySelectorAll("[data-toggle='spark-chart']");
      if (sparkChartsEl) Array.prototype.forEach.call(sparkChartsEl, function(el) {
          new apexSparkChart().init(el);
      });
      // Light Gallery
      const galleryEl = document.querySelector("#lightgallery");
      if (barChartEl) new lightGallery().init(galleryEl);
      // Datepicker
      const dateRangePickerEl = document.querySelector(".daterangepicker");
      if (dateRangePickerEl) new datepicker().range('.daterangepicker');
      const datepickerEl = document.querySelector(".datepicker");
      if (datepickerEl) new datepicker().init('.datepicker');
  });
  
  },{"bootstrap":"4VxGl","./apex-charts/line":"ixfcR","./apex-charts/bar":"eBeiv","./apex-charts/users":"6kPXv","./apex-charts/spark":"beBa7","./datepicker":"dvEkG"}],"4VxGl":[function(require,module,exports) {
  var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  parcelHelpers.export(exports, "Alert", ()=>Alert
  );
  parcelHelpers.export(exports, "Button", ()=>Button
  );
  parcelHelpers.export(exports, "Carousel", ()=>Carousel
  );
  parcelHelpers.export(exports, "Collapse", ()=>Collapse
  );
  parcelHelpers.export(exports, "Dropdown", ()=>Dropdown
  );
  parcelHelpers.export(exports, "Modal", ()=>Modal
  );
  parcelHelpers.export(exports, "Offcanvas", ()=>Offcanvas
  );
  parcelHelpers.export(exports, "Popover", ()=>Popover
  );
  parcelHelpers.export(exports, "ScrollSpy", ()=>ScrollSpy
  );
  parcelHelpers.export(exports, "Tab", ()=>Tab
  );
  parcelHelpers.export(exports, "Toast", ()=>Toast
  );
  parcelHelpers.export(exports, "Tooltip", ()=>Tooltip
  );
  /*!
    * Bootstrap v5.1.3 (https://getbootstrap.com/)
    * Copyright 2011-2021 The Bootstrap Authors (https://github.com/twbs/bootstrap/graphs/contributors)
    * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
    */ var _core = require("@popperjs/core");
  /**
   * --------------------------------------------------------------------------
   * Bootstrap (v5.1.3): util/index.js
   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
   * --------------------------------------------------------------------------
   */ const MAX_UID = 1000000;
  const MILLISECONDS_MULTIPLIER = 1000;
  const TRANSITION_END = 'transitionend'; // Shoutout AngusCroll (https://goo.gl/pxwQGp)
  const toType = (obj)=>{
      if (obj === null || obj === undefined) return `${obj}`;
      return ({
      }).toString.call(obj).match(/\s([a-z]+)/i)[1].toLowerCase();
  };
  /**
   * --------------------------------------------------------------------------
   * Public Util Api
   * --------------------------------------------------------------------------
   */ const getUID = (prefix)=>{
      do prefix += Math.floor(Math.random() * MAX_UID);
      while (document.getElementById(prefix))
      return prefix;
  };
  const getSelector = (element)=>{
      let selector = element.getAttribute('data-bs-target');
      if (!selector || selector === '#') {
          let hrefAttr = element.getAttribute('href'); // The only valid content that could double as a selector are IDs or classes,
          // so everything starting with `#` or `.`. If a "real" URL is used as the selector,
          // `document.querySelector` will rightfully complain it is invalid.
          // See https://github.com/twbs/bootstrap/issues/32273
          if (!hrefAttr || !hrefAttr.includes('#') && !hrefAttr.startsWith('.')) return null;
           // Just in case some CMS puts out a full URL with the anchor appended
          if (hrefAttr.includes('#') && !hrefAttr.startsWith('#')) hrefAttr = `#${hrefAttr.split('#')[1]}`;
          selector = hrefAttr && hrefAttr !== '#' ? hrefAttr.trim() : null;
      }
      return selector;
  };
  const getSelectorFromElement = (element)=>{
      const selector = getSelector(element);
      if (selector) return document.querySelector(selector) ? selector : null;
      return null;
  };
  const getElementFromSelector = (element)=>{
      const selector = getSelector(element);
      return selector ? document.querySelector(selector) : null;
  };
  const getTransitionDurationFromElement = (element)=>{
      if (!element) return 0;
       // Get transition-duration of the element
      let { transitionDuration , transitionDelay  } = window.getComputedStyle(element);
      const floatTransitionDuration = Number.parseFloat(transitionDuration);
      const floatTransitionDelay = Number.parseFloat(transitionDelay); // Return 0 if element or transition duration is not found
      if (!floatTransitionDuration && !floatTransitionDelay) return 0;
       // If multiple durations are defined, take the first
      transitionDuration = transitionDuration.split(',')[0];
      transitionDelay = transitionDelay.split(',')[0];
      return (Number.parseFloat(transitionDuration) + Number.parseFloat(transitionDelay)) * MILLISECONDS_MULTIPLIER;
  };
  const triggerTransitionEnd = (element)=>{
      element.dispatchEvent(new Event(TRANSITION_END));
  };
  const isElement = (obj)=>{
      if (!obj || typeof obj !== 'object') return false;
      if (typeof obj.jquery !== 'undefined') obj = obj[0];
      return typeof obj.nodeType !== 'undefined';
  };
  const getElement = (obj)=>{
      if (isElement(obj)) // it's a jQuery object or a node element
      return obj.jquery ? obj[0] : obj;
      if (typeof obj === 'string' && obj.length > 0) return document.querySelector(obj);
      return null;
  };
  const typeCheckConfig = (componentName, config, configTypes)=>{
      Object.keys(configTypes).forEach((property)=>{
          const expectedTypes = configTypes[property];
          const value = config[property];
          const valueType = value && isElement(value) ? 'element' : toType(value);
          if (!new RegExp(expectedTypes).test(valueType)) throw new TypeError(`${componentName.toUpperCase()}: Option "${property}" provided type "${valueType}" but expected type "${expectedTypes}".`);
      });
  };
  const isVisible = (element)=>{
      if (!isElement(element) || element.getClientRects().length === 0) return false;
      return getComputedStyle(element).getPropertyValue('visibility') === 'visible';
  };
  const isDisabled = (element)=>{
      if (!element || element.nodeType !== Node.ELEMENT_NODE) return true;
      if (element.classList.contains('disabled')) return true;
      if (typeof element.disabled !== 'undefined') return element.disabled;
      return element.hasAttribute('disabled') && element.getAttribute('disabled') !== 'false';
  };
  const findShadowRoot = (element)=>{
      if (!document.documentElement.attachShadow) return null;
       // Can find the shadow root otherwise it'll return the document
      if (typeof element.getRootNode === 'function') {
          const root = element.getRootNode();
          return root instanceof ShadowRoot ? root : null;
      }
      if (element instanceof ShadowRoot) return element;
       // when we don't find a shadow root
      if (!element.parentNode) return null;
      return findShadowRoot(element.parentNode);
  };
  const noop = ()=>{
  };
  /**
   * Trick to restart an element's animation
   *
   * @param {HTMLElement} element
   * @return void
   *
   * @see https://www.charistheo.io/blog/2021/02/restart-a-css-animation-with-javascript/#restarting-a-css-animation
   */ const reflow = (element)=>{
      // eslint-disable-next-line no-unused-expressions
      element.offsetHeight;
  };
  const getjQuery = ()=>{
      const { jQuery  } = window;
      if (jQuery && !document.body.hasAttribute('data-bs-no-jquery')) return jQuery;
      return null;
  };
  const DOMContentLoadedCallbacks = [];
  const onDOMContentLoaded = (callback1)=>{
      if (document.readyState === 'loading') {
          // add listener on the first call when the document is in loading state
          if (!DOMContentLoadedCallbacks.length) document.addEventListener('DOMContentLoaded', ()=>{
              DOMContentLoadedCallbacks.forEach((callback)=>callback()
              );
          });
          DOMContentLoadedCallbacks.push(callback1);
      } else callback1();
  };
  const isRTL = ()=>document.documentElement.dir === 'rtl'
  ;
  const defineJQueryPlugin = (plugin)=>{
      onDOMContentLoaded(()=>{
          const $ = getjQuery();
          /* istanbul ignore if */ if ($) {
              const name = plugin.NAME;
              const JQUERY_NO_CONFLICT = $.fn[name];
              $.fn[name] = plugin.jQueryInterface;
              $.fn[name].Constructor = plugin;
              $.fn[name].noConflict = ()=>{
                  $.fn[name] = JQUERY_NO_CONFLICT;
                  return plugin.jQueryInterface;
              };
          }
      });
  };
  const execute = (callback)=>{
      if (typeof callback === 'function') callback();
  };
  const executeAfterTransition = (callback, transitionElement, waitForTransition = true)=>{
      if (!waitForTransition) {
          execute(callback);
          return;
      }
      const durationPadding = 5;
      const emulatedDuration = getTransitionDurationFromElement(transitionElement) + durationPadding;
      let called = false;
      const handler = ({ target  })=>{
          if (target !== transitionElement) return;
          called = true;
          transitionElement.removeEventListener(TRANSITION_END, handler);
          execute(callback);
      };
      transitionElement.addEventListener(TRANSITION_END, handler);
      setTimeout(()=>{
          if (!called) triggerTransitionEnd(transitionElement);
      }, emulatedDuration);
  };
  /**
   * Return the previous/next element of a list.
   *
   * @param {array} list    The list of elements
   * @param activeElement   The active element
   * @param shouldGetNext   Choose to get next or previous element
   * @param isCycleAllowed
   * @return {Element|elem} The proper element
   */ const getNextActiveElement = (list, activeElement, shouldGetNext, isCycleAllowed)=>{
      let index = list.indexOf(activeElement); // if the element does not exist in the list return an element depending on the direction and if cycle is allowed
      if (index === -1) return list[!shouldGetNext && isCycleAllowed ? list.length - 1 : 0];
      const listLength = list.length;
      index += shouldGetNext ? 1 : -1;
      if (isCycleAllowed) index = (index + listLength) % listLength;
      return list[Math.max(0, Math.min(index, listLength - 1))];
  };
  /**
   * --------------------------------------------------------------------------
   * Bootstrap (v5.1.3): dom/event-handler.js
   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
   * --------------------------------------------------------------------------
   */ /**
   * ------------------------------------------------------------------------
   * Constants
   * ------------------------------------------------------------------------
   */ const namespaceRegex = /[^.]*(?=\..*)\.|.*/;
  const stripNameRegex = /\..*/;
  const stripUidRegex = /::\d+$/;
  const eventRegistry = {
  }; // Events storage
  let uidEvent = 1;
  const customEvents = {
      mouseenter: 'mouseover',
      mouseleave: 'mouseout'
  };
  const customEventsRegex = /^(mouseenter|mouseleave)/i;
  const nativeEvents = new Set([
      'click',
      'dblclick',
      'mouseup',
      'mousedown',
      'contextmenu',
      'mousewheel',
      'DOMMouseScroll',
      'mouseover',
      'mouseout',
      'mousemove',
      'selectstart',
      'selectend',
      'keydown',
      'keypress',
      'keyup',
      'orientationchange',
      'touchstart',
      'touchmove',
      'touchend',
      'touchcancel',
      'pointerdown',
      'pointermove',
      'pointerup',
      'pointerleave',
      'pointercancel',
      'gesturestart',
      'gesturechange',
      'gestureend',
      'focus',
      'blur',
      'change',
      'reset',
      'select',
      'submit',
      'focusin',
      'focusout',
      'load',
      'unload',
      'beforeunload',
      'resize',
      'move',
      'DOMContentLoaded',
      'readystatechange',
      'error',
      'abort',
      'scroll'
  ]);
  /**
   * ------------------------------------------------------------------------
   * Private methods
   * ------------------------------------------------------------------------
   */ function getUidEvent(element, uid) {
      return uid && `${uid}::${uidEvent++}` || element.uidEvent || uidEvent++;
  }
  function getEvent(element) {
      const uid = getUidEvent(element);
      element.uidEvent = uid;
      eventRegistry[uid] = eventRegistry[uid] || {
      };
      return eventRegistry[uid];
  }
  function bootstrapHandler(element, fn) {
      return function handler(event) {
          event.delegateTarget = element;
          if (handler.oneOff) EventHandler.off(element, event.type, fn);
          return fn.apply(element, [
              event
          ]);
      };
  }
  function bootstrapDelegationHandler(element, selector, fn) {
      return function handler(event) {
          const domElements = element.querySelectorAll(selector);
          for(let { target  } = event; target && target !== this; target = target.parentNode){
              for(let i = domElements.length; i--;)if (domElements[i] === target) {
                  event.delegateTarget = target;
                  if (handler.oneOff) EventHandler.off(element, event.type, selector, fn);
                  return fn.apply(target, [
                      event
                  ]);
              }
          } // To please ESLint
          return null;
      };
  }
  function findHandler(events, handler, delegationSelector = null) {
      const uidEventList = Object.keys(events);
      for(let i = 0, len = uidEventList.length; i < len; i++){
          const event = events[uidEventList[i]];
          if (event.originalHandler === handler && event.delegationSelector === delegationSelector) return event;
      }
      return null;
  }
  function normalizeParams(originalTypeEvent, handler, delegationFn) {
      const delegation = typeof handler === 'string';
      const originalHandler = delegation ? delegationFn : handler;
      let typeEvent = getTypeEvent(originalTypeEvent);
      const isNative = nativeEvents.has(typeEvent);
      if (!isNative) typeEvent = originalTypeEvent;
      return [
          delegation,
          originalHandler,
          typeEvent
      ];
  }
  function addHandler(element, originalTypeEvent, handler, delegationFn, oneOff) {
      if (typeof originalTypeEvent !== 'string' || !element) return;
      if (!handler) {
          handler = delegationFn;
          delegationFn = null;
      } // in case of mouseenter or mouseleave wrap the handler within a function that checks for its DOM position
      // this prevents the handler from being dispatched the same way as mouseover or mouseout does
      if (customEventsRegex.test(originalTypeEvent)) {
          const wrapFn = (fn)=>{
              return function(event) {
                  if (!event.relatedTarget || event.relatedTarget !== event.delegateTarget && !event.delegateTarget.contains(event.relatedTarget)) return fn.call(this, event);
              };
          };
          if (delegationFn) delegationFn = wrapFn(delegationFn);
          else handler = wrapFn(handler);
      }
      const [delegation, originalHandler, typeEvent] = normalizeParams(originalTypeEvent, handler, delegationFn);
      const events = getEvent(element);
      const handlers = events[typeEvent] || (events[typeEvent] = {
      });
      const previousFn = findHandler(handlers, originalHandler, delegation ? handler : null);
      if (previousFn) {
          previousFn.oneOff = previousFn.oneOff && oneOff;
          return;
      }
      const uid = getUidEvent(originalHandler, originalTypeEvent.replace(namespaceRegex, ''));
      const fn1 = delegation ? bootstrapDelegationHandler(element, handler, delegationFn) : bootstrapHandler(element, handler);
      fn1.delegationSelector = delegation ? handler : null;
      fn1.originalHandler = originalHandler;
      fn1.oneOff = oneOff;
      fn1.uidEvent = uid;
      handlers[uid] = fn1;
      element.addEventListener(typeEvent, fn1, delegation);
  }
  function removeHandler(element, events, typeEvent, handler, delegationSelector) {
      const fn = findHandler(events[typeEvent], handler, delegationSelector);
      if (!fn) return;
      element.removeEventListener(typeEvent, fn, Boolean(delegationSelector));
      delete events[typeEvent][fn.uidEvent];
  }
  function removeNamespacedHandlers(element, events, typeEvent, namespace) {
      const storeElementEvent = events[typeEvent] || {
      };
      Object.keys(storeElementEvent).forEach((handlerKey)=>{
          if (handlerKey.includes(namespace)) {
              const event = storeElementEvent[handlerKey];
              removeHandler(element, events, typeEvent, event.originalHandler, event.delegationSelector);
          }
      });
  }
  function getTypeEvent(event) {
      // allow to get the native events from namespaced events ('click.bs.button' --> 'click')
      event = event.replace(stripNameRegex, '');
      return customEvents[event] || event;
  }
  const EventHandler = {
      on (element, event, handler, delegationFn) {
          addHandler(element, event, handler, delegationFn, false);
      },
      one (element, event, handler, delegationFn) {
          addHandler(element, event, handler, delegationFn, true);
      },
      off (element, originalTypeEvent, handler, delegationFn) {
          if (typeof originalTypeEvent !== 'string' || !element) return;
          const [delegation, originalHandler, typeEvent] = normalizeParams(originalTypeEvent, handler, delegationFn);
          const inNamespace = typeEvent !== originalTypeEvent;
          const events = getEvent(element);
          const isNamespace = originalTypeEvent.startsWith('.');
          if (typeof originalHandler !== 'undefined') {
              // Simplest case: handler is passed, remove that listener ONLY.
              if (!events || !events[typeEvent]) return;
              removeHandler(element, events, typeEvent, originalHandler, delegation ? handler : null);
              return;
          }
          if (isNamespace) Object.keys(events).forEach((elementEvent)=>{
              removeNamespacedHandlers(element, events, elementEvent, originalTypeEvent.slice(1));
          });
          const storeElementEvent = events[typeEvent] || {
          };
          Object.keys(storeElementEvent).forEach((keyHandlers)=>{
              const handlerKey = keyHandlers.replace(stripUidRegex, '');
              if (!inNamespace || originalTypeEvent.includes(handlerKey)) {
                  const event = storeElementEvent[keyHandlers];
                  removeHandler(element, events, typeEvent, event.originalHandler, event.delegationSelector);
              }
          });
      },
      trigger (element, event, args) {
          if (typeof event !== 'string' || !element) return null;
          const $ = getjQuery();
          const typeEvent = getTypeEvent(event);
          const inNamespace = event !== typeEvent;
          const isNative = nativeEvents.has(typeEvent);
          let jQueryEvent;
          let bubbles = true;
          let nativeDispatch = true;
          let defaultPrevented = false;
          let evt = null;
          if (inNamespace && $) {
              jQueryEvent = $.Event(event, args);
              $(element).trigger(jQueryEvent);
              bubbles = !jQueryEvent.isPropagationStopped();
              nativeDispatch = !jQueryEvent.isImmediatePropagationStopped();
              defaultPrevented = jQueryEvent.isDefaultPrevented();
          }
          if (isNative) {
              evt = document.createEvent('HTMLEvents');
              evt.initEvent(typeEvent, bubbles, true);
          } else evt = new CustomEvent(event, {
              bubbles,
              cancelable: true
          });
           // merge custom information in our event
          if (typeof args !== 'undefined') Object.keys(args).forEach((key)=>{
              Object.defineProperty(evt, key, {
                  get () {
                      return args[key];
                  }
              });
          });
          if (defaultPrevented) evt.preventDefault();
          if (nativeDispatch) element.dispatchEvent(evt);
          if (evt.defaultPrevented && typeof jQueryEvent !== 'undefined') jQueryEvent.preventDefault();
          return evt;
      }
  };
  /**
   * --------------------------------------------------------------------------
   * Bootstrap (v5.1.3): dom/data.js
   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
   * --------------------------------------------------------------------------
   */ /**
   * ------------------------------------------------------------------------
   * Constants
   * ------------------------------------------------------------------------
   */ const elementMap = new Map();
  const Data = {
      set (element, key, instance) {
          if (!elementMap.has(element)) elementMap.set(element, new Map());
          const instanceMap = elementMap.get(element); // make it clear we only want one instance per element
          // can be removed later when multiple key/instances are fine to be used
          if (!instanceMap.has(key) && instanceMap.size !== 0) {
              // eslint-disable-next-line no-console
              console.error(`Bootstrap doesn't allow more than one instance per element. Bound instance: ${Array.from(instanceMap.keys())[0]}.`);
              return;
          }
          instanceMap.set(key, instance);
      },
      get (element, key) {
          if (elementMap.has(element)) return elementMap.get(element).get(key) || null;
          return null;
      },
      remove (element, key) {
          if (!elementMap.has(element)) return;
          const instanceMap = elementMap.get(element);
          instanceMap.delete(key); // free up element references if there are no instances left for an element
          if (instanceMap.size === 0) elementMap.delete(element);
      }
  };
  /**
   * --------------------------------------------------------------------------
   * Bootstrap (v5.1.3): base-component.js
   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
   * --------------------------------------------------------------------------
   */ /**
   * ------------------------------------------------------------------------
   * Constants
   * ------------------------------------------------------------------------
   */ const VERSION = '5.1.3';
  class BaseComponent {
      dispose() {
          Data.remove(this._element, this.constructor.DATA_KEY);
          EventHandler.off(this._element, this.constructor.EVENT_KEY);
          Object.getOwnPropertyNames(this).forEach((propertyName)=>{
              this[propertyName] = null;
          });
      }
      _queueCallback(callback, element, isAnimated = true) {
          executeAfterTransition(callback, element, isAnimated);
      }
      /** Static */ static getInstance(element) {
          return Data.get(getElement(element), this.DATA_KEY);
      }
      static getOrCreateInstance(element, config = {
      }) {
          return this.getInstance(element) || new this(element, typeof config === 'object' ? config : null);
      }
      static get VERSION() {
          return VERSION;
      }
      static get NAME() {
          throw new Error('You have to implement the static method "NAME", for each component!');
      }
      static get DATA_KEY() {
          return `bs.${this.NAME}`;
      }
      static get EVENT_KEY() {
          return `.${this.DATA_KEY}`;
      }
      constructor(element){
          element = getElement(element);
          if (!element) return;
          this._element = element;
          Data.set(this._element, this.constructor.DATA_KEY, this);
      }
  }
  /**
   * --------------------------------------------------------------------------
   * Bootstrap (v5.1.3): util/component-functions.js
   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
   * --------------------------------------------------------------------------
   */ const enableDismissTrigger = (component, method = 'hide')=>{
      const clickEvent = `click.dismiss${component.EVENT_KEY}`;
      const name = component.NAME;
      EventHandler.on(document, clickEvent, `[data-bs-dismiss="${name}"]`, function(event) {
          if ([
              'A',
              'AREA'
          ].includes(this.tagName)) event.preventDefault();
          if (isDisabled(this)) return;
          const target = getElementFromSelector(this) || this.closest(`.${name}`);
          const instance = component.getOrCreateInstance(target); // Method argument is left, for Alert and only, as it doesn't implement the 'hide' method
          instance[method]();
      });
  };
  /**
   * --------------------------------------------------------------------------
   * Bootstrap (v5.1.3): alert.js
   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
   * --------------------------------------------------------------------------
   */ /**
   * ------------------------------------------------------------------------
   * Constants
   * ------------------------------------------------------------------------
   */ const NAME$d = 'alert';
  const DATA_KEY$c = 'bs.alert';
  const EVENT_KEY$c = `.${DATA_KEY$c}`;
  const EVENT_CLOSE = `close${EVENT_KEY$c}`;
  const EVENT_CLOSED = `closed${EVENT_KEY$c}`;
  const CLASS_NAME_FADE$5 = 'fade';
  const CLASS_NAME_SHOW$8 = 'show';
  /**
   * ------------------------------------------------------------------------
   * Class Definition
   * ------------------------------------------------------------------------
   */ class Alert extends BaseComponent {
      // Getters
      static get NAME() {
          return NAME$d;
      }
      close() {
          const closeEvent = EventHandler.trigger(this._element, EVENT_CLOSE);
          if (closeEvent.defaultPrevented) return;
          this._element.classList.remove(CLASS_NAME_SHOW$8);
          const isAnimated = this._element.classList.contains(CLASS_NAME_FADE$5);
          this._queueCallback(()=>this._destroyElement()
          , this._element, isAnimated);
      }
      _destroyElement() {
          this._element.remove();
          EventHandler.trigger(this._element, EVENT_CLOSED);
          this.dispose();
      }
      static jQueryInterface(config) {
          return this.each(function() {
              const data = Alert.getOrCreateInstance(this);
              if (typeof config !== 'string') return;
              if (data[config] === undefined || config.startsWith('_') || config === 'constructor') throw new TypeError(`No method named "${config}"`);
              data[config](this);
          });
      }
  }
  /**
   * ------------------------------------------------------------------------
   * Data Api implementation
   * ------------------------------------------------------------------------
   */ enableDismissTrigger(Alert, 'close');
  /**
   * ------------------------------------------------------------------------
   * jQuery
   * ------------------------------------------------------------------------
   * add .Alert to jQuery only if jQuery is present
   */ defineJQueryPlugin(Alert);
  /**
   * --------------------------------------------------------------------------
   * Bootstrap (v5.1.3): button.js
   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
   * --------------------------------------------------------------------------
   */ /**
   * ------------------------------------------------------------------------
   * Constants
   * ------------------------------------------------------------------------
   */ const NAME$c = 'button';
  const DATA_KEY$b = 'bs.button';
  const EVENT_KEY$b = `.${DATA_KEY$b}`;
  const DATA_API_KEY$7 = '.data-api';
  const CLASS_NAME_ACTIVE$3 = 'active';
  const SELECTOR_DATA_TOGGLE$5 = '[data-bs-toggle="button"]';
  const EVENT_CLICK_DATA_API$6 = `click${EVENT_KEY$b}${DATA_API_KEY$7}`;
  /**
   * ------------------------------------------------------------------------
   * Class Definition
   * ------------------------------------------------------------------------
   */ class Button extends BaseComponent {
      // Getters
      static get NAME() {
          return NAME$c;
      }
      toggle() {
          // Toggle class and sync the `aria-pressed` attribute with the return value of the `.toggle()` method
          this._element.setAttribute('aria-pressed', this._element.classList.toggle(CLASS_NAME_ACTIVE$3));
      }
      static jQueryInterface(config) {
          return this.each(function() {
              const data = Button.getOrCreateInstance(this);
              if (config === 'toggle') data[config]();
          });
      }
  }
  /**
   * ------------------------------------------------------------------------
   * Data Api implementation
   * ------------------------------------------------------------------------
   */ EventHandler.on(document, EVENT_CLICK_DATA_API$6, SELECTOR_DATA_TOGGLE$5, (event)=>{
      event.preventDefault();
      const button = event.target.closest(SELECTOR_DATA_TOGGLE$5);
      const data = Button.getOrCreateInstance(button);
      data.toggle();
  });
  /**
   * ------------------------------------------------------------------------
   * jQuery
   * ------------------------------------------------------------------------
   * add .Button to jQuery only if jQuery is present
   */ defineJQueryPlugin(Button);
  /**
   * --------------------------------------------------------------------------
   * Bootstrap (v5.1.3): dom/manipulator.js
   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
   * --------------------------------------------------------------------------
   */ function normalizeData(val) {
      if (val === 'true') return true;
      if (val === 'false') return false;
      if (val === Number(val).toString()) return Number(val);
      if (val === '' || val === 'null') return null;
      return val;
  }
  function normalizeDataKey(key) {
      return key.replace(/[A-Z]/g, (chr)=>`-${chr.toLowerCase()}`
      );
  }
  const Manipulator = {
      setDataAttribute (element, key, value) {
          element.setAttribute(`data-bs-${normalizeDataKey(key)}`, value);
      },
      removeDataAttribute (element, key) {
          element.removeAttribute(`data-bs-${normalizeDataKey(key)}`);
      },
      getDataAttributes (element) {
          if (!element) return {
          };
          const attributes = {
          };
          Object.keys(element.dataset).filter((key)=>key.startsWith('bs')
          ).forEach((key)=>{
              let pureKey = key.replace(/^bs/, '');
              pureKey = pureKey.charAt(0).toLowerCase() + pureKey.slice(1, pureKey.length);
              attributes[pureKey] = normalizeData(element.dataset[key]);
          });
          return attributes;
      },
      getDataAttribute (element, key) {
          return normalizeData(element.getAttribute(`data-bs-${normalizeDataKey(key)}`));
      },
      offset (element) {
          const rect = element.getBoundingClientRect();
          return {
              top: rect.top + window.pageYOffset,
              left: rect.left + window.pageXOffset
          };
      },
      position (element) {
          return {
              top: element.offsetTop,
              left: element.offsetLeft
          };
      }
  };
  /**
   * --------------------------------------------------------------------------
   * Bootstrap (v5.1.3): dom/selector-engine.js
   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
   * --------------------------------------------------------------------------
   */ const NODE_TEXT = 3;
  const SelectorEngine = {
      find (selector, element = document.documentElement) {
          return [].concat(...Element.prototype.querySelectorAll.call(element, selector));
      },
      findOne (selector, element = document.documentElement) {
          return Element.prototype.querySelector.call(element, selector);
      },
      children (element, selector) {
          return [].concat(...element.children).filter((child)=>child.matches(selector)
          );
      },
      parents (element, selector) {
          const parents = [];
          let ancestor = element.parentNode;
          while(ancestor && ancestor.nodeType === Node.ELEMENT_NODE && ancestor.nodeType !== NODE_TEXT){
              if (ancestor.matches(selector)) parents.push(ancestor);
              ancestor = ancestor.parentNode;
          }
          return parents;
      },
      prev (element, selector) {
          let previous = element.previousElementSibling;
          while(previous){
              if (previous.matches(selector)) return [
                  previous
              ];
              previous = previous.previousElementSibling;
          }
          return [];
      },
      next (element, selector) {
          let next = element.nextElementSibling;
          while(next){
              if (next.matches(selector)) return [
                  next
              ];
              next = next.nextElementSibling;
          }
          return [];
      },
      focusableChildren (element) {
          const focusables = [
              'a',
              'button',
              'input',
              'textarea',
              'select',
              'details',
              '[tabindex]',
              '[contenteditable="true"]'
          ].map((selector)=>`${selector}:not([tabindex^="-"])`
          ).join(', ');
          return this.find(focusables, element).filter((el)=>!isDisabled(el) && isVisible(el)
          );
      }
  };
  /**
   * --------------------------------------------------------------------------
   * Bootstrap (v5.1.3): carousel.js
   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
   * --------------------------------------------------------------------------
   */ /**
   * ------------------------------------------------------------------------
   * Constants
   * ------------------------------------------------------------------------
   */ const NAME$b = 'carousel';
  const DATA_KEY$a = 'bs.carousel';
  const EVENT_KEY$a = `.${DATA_KEY$a}`;
  const DATA_API_KEY$6 = '.data-api';
  const ARROW_LEFT_KEY = 'ArrowLeft';
  const ARROW_RIGHT_KEY = 'ArrowRight';
  const TOUCHEVENT_COMPAT_WAIT = 500; // Time for mouse compat events to fire after touch
  const SWIPE_THRESHOLD = 40;
  const Default$a = {
      interval: 5000,
      keyboard: true,
      slide: false,
      pause: 'hover',
      wrap: true,
      touch: true
  };
  const DefaultType$a = {
      interval: '(number|boolean)',
      keyboard: 'boolean',
      slide: '(boolean|string)',
      pause: '(string|boolean)',
      wrap: 'boolean',
      touch: 'boolean'
  };
  const ORDER_NEXT = 'next';
  const ORDER_PREV = 'prev';
  const DIRECTION_LEFT = 'left';
  const DIRECTION_RIGHT = 'right';
  const KEY_TO_DIRECTION = {
      [ARROW_LEFT_KEY]: DIRECTION_RIGHT,
      [ARROW_RIGHT_KEY]: DIRECTION_LEFT
  };
  const EVENT_SLIDE = `slide${EVENT_KEY$a}`;
  const EVENT_SLID = `slid${EVENT_KEY$a}`;
  const EVENT_KEYDOWN = `keydown${EVENT_KEY$a}`;
  const EVENT_MOUSEENTER = `mouseenter${EVENT_KEY$a}`;
  const EVENT_MOUSELEAVE = `mouseleave${EVENT_KEY$a}`;
  const EVENT_TOUCHSTART = `touchstart${EVENT_KEY$a}`;
  const EVENT_TOUCHMOVE = `touchmove${EVENT_KEY$a}`;
  const EVENT_TOUCHEND = `touchend${EVENT_KEY$a}`;
  const EVENT_POINTERDOWN = `pointerdown${EVENT_KEY$a}`;
  const EVENT_POINTERUP = `pointerup${EVENT_KEY$a}`;
  const EVENT_DRAG_START = `dragstart${EVENT_KEY$a}`;
  const EVENT_LOAD_DATA_API$2 = `load${EVENT_KEY$a}${DATA_API_KEY$6}`;
  const EVENT_CLICK_DATA_API$5 = `click${EVENT_KEY$a}${DATA_API_KEY$6}`;
  const CLASS_NAME_CAROUSEL = 'carousel';
  const CLASS_NAME_ACTIVE$2 = 'active';
  const CLASS_NAME_SLIDE = 'slide';
  const CLASS_NAME_END = 'carousel-item-end';
  const CLASS_NAME_START = 'carousel-item-start';
  const CLASS_NAME_NEXT = 'carousel-item-next';
  const CLASS_NAME_PREV = 'carousel-item-prev';
  const CLASS_NAME_POINTER_EVENT = 'pointer-event';
  const SELECTOR_ACTIVE$1 = '.active';
  const SELECTOR_ACTIVE_ITEM = '.active.carousel-item';
  const SELECTOR_ITEM = '.carousel-item';
  const SELECTOR_ITEM_IMG = '.carousel-item img';
  const SELECTOR_NEXT_PREV = '.carousel-item-next, .carousel-item-prev';
  const SELECTOR_INDICATORS = '.carousel-indicators';
  const SELECTOR_INDICATOR = '[data-bs-target]';
  const SELECTOR_DATA_SLIDE = '[data-bs-slide], [data-bs-slide-to]';
  const SELECTOR_DATA_RIDE = '[data-bs-ride="carousel"]';
  const POINTER_TYPE_TOUCH = 'touch';
  const POINTER_TYPE_PEN = 'pen';
  /**
   * ------------------------------------------------------------------------
   * Class Definition
   * ------------------------------------------------------------------------
   */ class Carousel extends BaseComponent {
      static get Default() {
          return Default$a;
      }
      static get NAME() {
          return NAME$b;
      }
      next() {
          this._slide(ORDER_NEXT);
      }
      nextWhenVisible() {
          // Don't call next when the page isn't visible
          // or the carousel or its parent isn't visible
          if (!document.hidden && isVisible(this._element)) this.next();
      }
      prev() {
          this._slide(ORDER_PREV);
      }
      pause(event) {
          if (!event) this._isPaused = true;
          if (SelectorEngine.findOne(SELECTOR_NEXT_PREV, this._element)) {
              triggerTransitionEnd(this._element);
              this.cycle(true);
          }
          clearInterval(this._interval);
          this._interval = null;
      }
      cycle(event) {
          if (!event) this._isPaused = false;
          if (this._interval) {
              clearInterval(this._interval);
              this._interval = null;
          }
          if (this._config && this._config.interval && !this._isPaused) {
              this._updateInterval();
              this._interval = setInterval((document.visibilityState ? this.nextWhenVisible : this.next).bind(this), this._config.interval);
          }
      }
      to(index) {
          this._activeElement = SelectorEngine.findOne(SELECTOR_ACTIVE_ITEM, this._element);
          const activeIndex = this._getItemIndex(this._activeElement);
          if (index > this._items.length - 1 || index < 0) return;
          if (this._isSliding) {
              EventHandler.one(this._element, EVENT_SLID, ()=>this.to(index)
              );
              return;
          }
          if (activeIndex === index) {
              this.pause();
              this.cycle();
              return;
          }
          const order = index > activeIndex ? ORDER_NEXT : ORDER_PREV;
          this._slide(order, this._items[index]);
      }
      _getConfig(config) {
          config = {
              ...Default$a,
              ...Manipulator.getDataAttributes(this._element),
              ...typeof config === 'object' ? config : {
              }
          };
          typeCheckConfig(NAME$b, config, DefaultType$a);
          return config;
      }
      _handleSwipe() {
          const absDeltax = Math.abs(this.touchDeltaX);
          if (absDeltax <= SWIPE_THRESHOLD) return;
          const direction = absDeltax / this.touchDeltaX;
          this.touchDeltaX = 0;
          if (!direction) return;
          this._slide(direction > 0 ? DIRECTION_RIGHT : DIRECTION_LEFT);
      }
      _addEventListeners() {
          if (this._config.keyboard) EventHandler.on(this._element, EVENT_KEYDOWN, (event)=>this._keydown(event)
          );
          if (this._config.pause === 'hover') {
              EventHandler.on(this._element, EVENT_MOUSEENTER, (event)=>this.pause(event)
              );
              EventHandler.on(this._element, EVENT_MOUSELEAVE, (event)=>this.cycle(event)
              );
          }
          if (this._config.touch && this._touchSupported) this._addTouchEventListeners();
      }
      _addTouchEventListeners() {
          const hasPointerPenTouch = (event)=>{
              return this._pointerEvent && (event.pointerType === POINTER_TYPE_PEN || event.pointerType === POINTER_TYPE_TOUCH);
          };
          const start = (event)=>{
              if (hasPointerPenTouch(event)) this.touchStartX = event.clientX;
              else if (!this._pointerEvent) this.touchStartX = event.touches[0].clientX;
          };
          const move = (event)=>{
              // ensure swiping with one touch and not pinching
              this.touchDeltaX = event.touches && event.touches.length > 1 ? 0 : event.touches[0].clientX - this.touchStartX;
          };
          const end = (event1)=>{
              if (hasPointerPenTouch(event1)) this.touchDeltaX = event1.clientX - this.touchStartX;
              this._handleSwipe();
              if (this._config.pause === 'hover') {
                  // If it's a touch-enabled device, mouseenter/leave are fired as
                  // part of the mouse compatibility events on first tap - the carousel
                  // would stop cycling until user tapped out of it;
                  // here, we listen for touchend, explicitly pause the carousel
                  // (as if it's the second time we tap on it, mouseenter compat event
                  // is NOT fired) and after a timeout (to allow for mouse compatibility
                  // events to fire) we explicitly restart cycling
                  this.pause();
                  if (this.touchTimeout) clearTimeout(this.touchTimeout);
                  this.touchTimeout = setTimeout((event)=>this.cycle(event)
                  , TOUCHEVENT_COMPAT_WAIT + this._config.interval);
              }
          };
          SelectorEngine.find(SELECTOR_ITEM_IMG, this._element).forEach((itemImg)=>{
              EventHandler.on(itemImg, EVENT_DRAG_START, (event)=>event.preventDefault()
              );
          });
          if (this._pointerEvent) {
              EventHandler.on(this._element, EVENT_POINTERDOWN, (event)=>start(event)
              );
              EventHandler.on(this._element, EVENT_POINTERUP, (event)=>end(event)
              );
              this._element.classList.add(CLASS_NAME_POINTER_EVENT);
          } else {
              EventHandler.on(this._element, EVENT_TOUCHSTART, (event)=>start(event)
              );
              EventHandler.on(this._element, EVENT_TOUCHMOVE, (event)=>move(event)
              );
              EventHandler.on(this._element, EVENT_TOUCHEND, (event)=>end(event)
              );
          }
      }
      _keydown(event) {
          if (/input|textarea/i.test(event.target.tagName)) return;
          const direction = KEY_TO_DIRECTION[event.key];
          if (direction) {
              event.preventDefault();
              this._slide(direction);
          }
      }
      _getItemIndex(element) {
          this._items = element && element.parentNode ? SelectorEngine.find(SELECTOR_ITEM, element.parentNode) : [];
          return this._items.indexOf(element);
      }
      _getItemByOrder(order, activeElement) {
          const isNext = order === ORDER_NEXT;
          return getNextActiveElement(this._items, activeElement, isNext, this._config.wrap);
      }
      _triggerSlideEvent(relatedTarget, eventDirectionName) {
          const targetIndex = this._getItemIndex(relatedTarget);
          const fromIndex = this._getItemIndex(SelectorEngine.findOne(SELECTOR_ACTIVE_ITEM, this._element));
          return EventHandler.trigger(this._element, EVENT_SLIDE, {
              relatedTarget,
              direction: eventDirectionName,
              from: fromIndex,
              to: targetIndex
          });
      }
      _setActiveIndicatorElement(element) {
          if (this._indicatorsElement) {
              const activeIndicator = SelectorEngine.findOne(SELECTOR_ACTIVE$1, this._indicatorsElement);
              activeIndicator.classList.remove(CLASS_NAME_ACTIVE$2);
              activeIndicator.removeAttribute('aria-current');
              const indicators = SelectorEngine.find(SELECTOR_INDICATOR, this._indicatorsElement);
              for(let i = 0; i < indicators.length; i++)if (Number.parseInt(indicators[i].getAttribute('data-bs-slide-to'), 10) === this._getItemIndex(element)) {
                  indicators[i].classList.add(CLASS_NAME_ACTIVE$2);
                  indicators[i].setAttribute('aria-current', 'true');
                  break;
              }
          }
      }
      _updateInterval() {
          const element = this._activeElement || SelectorEngine.findOne(SELECTOR_ACTIVE_ITEM, this._element);
          if (!element) return;
          const elementInterval = Number.parseInt(element.getAttribute('data-bs-interval'), 10);
          if (elementInterval) {
              this._config.defaultInterval = this._config.defaultInterval || this._config.interval;
              this._config.interval = elementInterval;
          } else this._config.interval = this._config.defaultInterval || this._config.interval;
      }
      _slide(directionOrOrder, element) {
          const order = this._directionToOrder(directionOrOrder);
          const activeElement = SelectorEngine.findOne(SELECTOR_ACTIVE_ITEM, this._element);
          const activeElementIndex = this._getItemIndex(activeElement);
          const nextElement = element || this._getItemByOrder(order, activeElement);
          const nextElementIndex = this._getItemIndex(nextElement);
          const isCycling = Boolean(this._interval);
          const isNext = order === ORDER_NEXT;
          const directionalClassName = isNext ? CLASS_NAME_START : CLASS_NAME_END;
          const orderClassName = isNext ? CLASS_NAME_NEXT : CLASS_NAME_PREV;
          const eventDirectionName = this._orderToDirection(order);
          if (nextElement && nextElement.classList.contains(CLASS_NAME_ACTIVE$2)) {
              this._isSliding = false;
              return;
          }
          if (this._isSliding) return;
          const slideEvent = this._triggerSlideEvent(nextElement, eventDirectionName);
          if (slideEvent.defaultPrevented) return;
          if (!activeElement || !nextElement) // Some weirdness is happening, so we bail
          return;
          this._isSliding = true;
          if (isCycling) this.pause();
          this._setActiveIndicatorElement(nextElement);
          this._activeElement = nextElement;
          const triggerSlidEvent = ()=>{
              EventHandler.trigger(this._element, EVENT_SLID, {
                  relatedTarget: nextElement,
                  direction: eventDirectionName,
                  from: activeElementIndex,
                  to: nextElementIndex
              });
          };
          if (this._element.classList.contains(CLASS_NAME_SLIDE)) {
              nextElement.classList.add(orderClassName);
              reflow(nextElement);
              activeElement.classList.add(directionalClassName);
              nextElement.classList.add(directionalClassName);
              const completeCallBack = ()=>{
                  nextElement.classList.remove(directionalClassName, orderClassName);
                  nextElement.classList.add(CLASS_NAME_ACTIVE$2);
                  activeElement.classList.remove(CLASS_NAME_ACTIVE$2, orderClassName, directionalClassName);
                  this._isSliding = false;
                  setTimeout(triggerSlidEvent, 0);
              };
              this._queueCallback(completeCallBack, activeElement, true);
          } else {
              activeElement.classList.remove(CLASS_NAME_ACTIVE$2);
              nextElement.classList.add(CLASS_NAME_ACTIVE$2);
              this._isSliding = false;
              triggerSlidEvent();
          }
          if (isCycling) this.cycle();
      }
      _directionToOrder(direction) {
          if (![
              DIRECTION_RIGHT,
              DIRECTION_LEFT
          ].includes(direction)) return direction;
          if (isRTL()) return direction === DIRECTION_LEFT ? ORDER_PREV : ORDER_NEXT;
          return direction === DIRECTION_LEFT ? ORDER_NEXT : ORDER_PREV;
      }
      _orderToDirection(order) {
          if (![
              ORDER_NEXT,
              ORDER_PREV
          ].includes(order)) return order;
          if (isRTL()) return order === ORDER_PREV ? DIRECTION_LEFT : DIRECTION_RIGHT;
          return order === ORDER_PREV ? DIRECTION_RIGHT : DIRECTION_LEFT;
      }
      static carouselInterface(element, config) {
          const data = Carousel.getOrCreateInstance(element, config);
          let { _config  } = data;
          if (typeof config === 'object') _config = {
              ..._config,
              ...config
          };
          const action = typeof config === 'string' ? config : _config.slide;
          if (typeof config === 'number') data.to(config);
          else if (typeof action === 'string') {
              if (typeof data[action] === 'undefined') throw new TypeError(`No method named "${action}"`);
              data[action]();
          } else if (_config.interval && _config.ride) {
              data.pause();
              data.cycle();
          }
      }
      static jQueryInterface(config) {
          return this.each(function() {
              Carousel.carouselInterface(this, config);
          });
      }
      static dataApiClickHandler(event) {
          const target = getElementFromSelector(this);
          if (!target || !target.classList.contains(CLASS_NAME_CAROUSEL)) return;
          const config = {
              ...Manipulator.getDataAttributes(target),
              ...Manipulator.getDataAttributes(this)
          };
          const slideIndex = this.getAttribute('data-bs-slide-to');
          if (slideIndex) config.interval = false;
          Carousel.carouselInterface(target, config);
          if (slideIndex) Carousel.getInstance(target).to(slideIndex);
          event.preventDefault();
      }
      constructor(element, config){
          super(element);
          this._items = null;
          this._interval = null;
          this._activeElement = null;
          this._isPaused = false;
          this._isSliding = false;
          this.touchTimeout = null;
          this.touchStartX = 0;
          this.touchDeltaX = 0;
          this._config = this._getConfig(config);
          this._indicatorsElement = SelectorEngine.findOne(SELECTOR_INDICATORS, this._element);
          this._touchSupported = 'ontouchstart' in document.documentElement || navigator.maxTouchPoints > 0;
          this._pointerEvent = Boolean(window.PointerEvent);
          this._addEventListeners();
      }
  }
  /**
   * ------------------------------------------------------------------------
   * Data Api implementation
   * ------------------------------------------------------------------------
   */ EventHandler.on(document, EVENT_CLICK_DATA_API$5, SELECTOR_DATA_SLIDE, Carousel.dataApiClickHandler);
  EventHandler.on(window, EVENT_LOAD_DATA_API$2, ()=>{
      const carousels = SelectorEngine.find(SELECTOR_DATA_RIDE);
      for(let i = 0, len = carousels.length; i < len; i++)Carousel.carouselInterface(carousels[i], Carousel.getInstance(carousels[i]));
  });
  /**
   * ------------------------------------------------------------------------
   * jQuery
   * ------------------------------------------------------------------------
   * add .Carousel to jQuery only if jQuery is present
   */ defineJQueryPlugin(Carousel);
  /**
   * --------------------------------------------------------------------------
   * Bootstrap (v5.1.3): collapse.js
   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
   * --------------------------------------------------------------------------
   */ /**
   * ------------------------------------------------------------------------
   * Constants
   * ------------------------------------------------------------------------
   */ const NAME$a = 'collapse';
  const DATA_KEY$9 = 'bs.collapse';
  const EVENT_KEY$9 = `.${DATA_KEY$9}`;
  const DATA_API_KEY$5 = '.data-api';
  const Default$9 = {
      toggle: true,
      parent: null
  };
  const DefaultType$9 = {
      toggle: 'boolean',
      parent: '(null|element)'
  };
  const EVENT_SHOW$5 = `show${EVENT_KEY$9}`;
  const EVENT_SHOWN$5 = `shown${EVENT_KEY$9}`;
  const EVENT_HIDE$5 = `hide${EVENT_KEY$9}`;
  const EVENT_HIDDEN$5 = `hidden${EVENT_KEY$9}`;
  const EVENT_CLICK_DATA_API$4 = `click${EVENT_KEY$9}${DATA_API_KEY$5}`;
  const CLASS_NAME_SHOW$7 = 'show';
  const CLASS_NAME_COLLAPSE = 'collapse';
  const CLASS_NAME_COLLAPSING = 'collapsing';
  const CLASS_NAME_COLLAPSED = 'collapsed';
  const CLASS_NAME_DEEPER_CHILDREN = `:scope .${CLASS_NAME_COLLAPSE} .${CLASS_NAME_COLLAPSE}`;
  const CLASS_NAME_HORIZONTAL = 'collapse-horizontal';
  const WIDTH = 'width';
  const HEIGHT = 'height';
  const SELECTOR_ACTIVES = '.collapse.show, .collapse.collapsing';
  const SELECTOR_DATA_TOGGLE$4 = '[data-bs-toggle="collapse"]';
  /**
   * ------------------------------------------------------------------------
   * Class Definition
   * ------------------------------------------------------------------------
   */ class Collapse extends BaseComponent {
      static get Default() {
          return Default$9;
      }
      static get NAME() {
          return NAME$a;
      }
      toggle() {
          if (this._isShown()) this.hide();
          else this.show();
      }
      show() {
          if (this._isTransitioning || this._isShown()) return;
          let actives = [];
          let activesData;
          if (this._config.parent) {
              const children = SelectorEngine.find(CLASS_NAME_DEEPER_CHILDREN, this._config.parent);
              actives = SelectorEngine.find(SELECTOR_ACTIVES, this._config.parent).filter((elem)=>!children.includes(elem)
              ); // remove children if greater depth
          }
          const container = SelectorEngine.findOne(this._selector);
          if (actives.length) {
              const tempActiveData = actives.find((elem)=>container !== elem
              );
              activesData = tempActiveData ? Collapse.getInstance(tempActiveData) : null;
              if (activesData && activesData._isTransitioning) return;
          }
          const startEvent = EventHandler.trigger(this._element, EVENT_SHOW$5);
          if (startEvent.defaultPrevented) return;
          actives.forEach((elemActive)=>{
              if (container !== elemActive) Collapse.getOrCreateInstance(elemActive, {
                  toggle: false
              }).hide();
              if (!activesData) Data.set(elemActive, DATA_KEY$9, null);
          });
          const dimension = this._getDimension();
          this._element.classList.remove(CLASS_NAME_COLLAPSE);
          this._element.classList.add(CLASS_NAME_COLLAPSING);
          this._element.style[dimension] = 0;
          this._addAriaAndCollapsedClass(this._triggerArray, true);
          this._isTransitioning = true;
          const complete = ()=>{
              this._isTransitioning = false;
              this._element.classList.remove(CLASS_NAME_COLLAPSING);
              this._element.classList.add(CLASS_NAME_COLLAPSE, CLASS_NAME_SHOW$7);
              this._element.style[dimension] = '';
              EventHandler.trigger(this._element, EVENT_SHOWN$5);
          };
          const capitalizedDimension = dimension[0].toUpperCase() + dimension.slice(1);
          const scrollSize = `scroll${capitalizedDimension}`;
          this._queueCallback(complete, this._element, true);
          this._element.style[dimension] = `${this._element[scrollSize]}px`;
      }
      hide() {
          if (this._isTransitioning || !this._isShown()) return;
          const startEvent = EventHandler.trigger(this._element, EVENT_HIDE$5);
          if (startEvent.defaultPrevented) return;
          const dimension = this._getDimension();
          this._element.style[dimension] = `${this._element.getBoundingClientRect()[dimension]}px`;
          reflow(this._element);
          this._element.classList.add(CLASS_NAME_COLLAPSING);
          this._element.classList.remove(CLASS_NAME_COLLAPSE, CLASS_NAME_SHOW$7);
          const triggerArrayLength = this._triggerArray.length;
          for(let i = 0; i < triggerArrayLength; i++){
              const trigger = this._triggerArray[i];
              const elem = getElementFromSelector(trigger);
              if (elem && !this._isShown(elem)) this._addAriaAndCollapsedClass([
                  trigger
              ], false);
          }
          this._isTransitioning = true;
          const complete = ()=>{
              this._isTransitioning = false;
              this._element.classList.remove(CLASS_NAME_COLLAPSING);
              this._element.classList.add(CLASS_NAME_COLLAPSE);
              EventHandler.trigger(this._element, EVENT_HIDDEN$5);
          };
          this._element.style[dimension] = '';
          this._queueCallback(complete, this._element, true);
      }
      _isShown(element = this._element) {
          return element.classList.contains(CLASS_NAME_SHOW$7);
      }
      _getConfig(config) {
          config = {
              ...Default$9,
              ...Manipulator.getDataAttributes(this._element),
              ...config
          };
          config.toggle = Boolean(config.toggle); // Coerce string values
          config.parent = getElement(config.parent);
          typeCheckConfig(NAME$a, config, DefaultType$9);
          return config;
      }
      _getDimension() {
          return this._element.classList.contains(CLASS_NAME_HORIZONTAL) ? WIDTH : HEIGHT;
      }
      _initializeChildren() {
          if (!this._config.parent) return;
          const children = SelectorEngine.find(CLASS_NAME_DEEPER_CHILDREN, this._config.parent);
          SelectorEngine.find(SELECTOR_DATA_TOGGLE$4, this._config.parent).filter((elem)=>!children.includes(elem)
          ).forEach((element)=>{
              const selected = getElementFromSelector(element);
              if (selected) this._addAriaAndCollapsedClass([
                  element
              ], this._isShown(selected));
          });
      }
      _addAriaAndCollapsedClass(triggerArray, isOpen) {
          if (!triggerArray.length) return;
          triggerArray.forEach((elem)=>{
              if (isOpen) elem.classList.remove(CLASS_NAME_COLLAPSED);
              else elem.classList.add(CLASS_NAME_COLLAPSED);
              elem.setAttribute('aria-expanded', isOpen);
          });
      }
      static jQueryInterface(config) {
          return this.each(function() {
              const _config = {
              };
              if (typeof config === 'string' && /show|hide/.test(config)) _config.toggle = false;
              const data = Collapse.getOrCreateInstance(this, _config);
              if (typeof config === 'string') {
                  if (typeof data[config] === 'undefined') throw new TypeError(`No method named "${config}"`);
                  data[config]();
              }
          });
      }
      constructor(element, config){
          super(element);
          this._isTransitioning = false;
          this._config = this._getConfig(config);
          this._triggerArray = [];
          const toggleList = SelectorEngine.find(SELECTOR_DATA_TOGGLE$4);
          for(let i = 0, len = toggleList.length; i < len; i++){
              const elem = toggleList[i];
              const selector = getSelectorFromElement(elem);
              const filterElement = SelectorEngine.find(selector).filter((foundElem)=>foundElem === this._element
              );
              if (selector !== null && filterElement.length) {
                  this._selector = selector;
                  this._triggerArray.push(elem);
              }
          }
          this._initializeChildren();
          if (!this._config.parent) this._addAriaAndCollapsedClass(this._triggerArray, this._isShown());
          if (this._config.toggle) this.toggle();
      }
  }
  /**
   * ------------------------------------------------------------------------
   * Data Api implementation
   * ------------------------------------------------------------------------
   */ EventHandler.on(document, EVENT_CLICK_DATA_API$4, SELECTOR_DATA_TOGGLE$4, function(event) {
      // preventDefault only for <a> elements (which change the URL) not inside the collapsible element
      if (event.target.tagName === 'A' || event.delegateTarget && event.delegateTarget.tagName === 'A') event.preventDefault();
      const selector = getSelectorFromElement(this);
      const selectorElements = SelectorEngine.find(selector);
      selectorElements.forEach((element)=>{
          Collapse.getOrCreateInstance(element, {
              toggle: false
          }).toggle();
      });
  });
  /**
   * ------------------------------------------------------------------------
   * jQuery
   * ------------------------------------------------------------------------
   * add .Collapse to jQuery only if jQuery is present
   */ defineJQueryPlugin(Collapse);
  /**
   * --------------------------------------------------------------------------
   * Bootstrap (v5.1.3): dropdown.js
   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
   * --------------------------------------------------------------------------
   */ /**
   * ------------------------------------------------------------------------
   * Constants
   * ------------------------------------------------------------------------
   */ const NAME$9 = 'dropdown';
  const DATA_KEY$8 = 'bs.dropdown';
  const EVENT_KEY$8 = `.${DATA_KEY$8}`;
  const DATA_API_KEY$4 = '.data-api';
  const ESCAPE_KEY$2 = 'Escape';
  const SPACE_KEY = 'Space';
  const TAB_KEY$1 = 'Tab';
  const ARROW_UP_KEY = 'ArrowUp';
  const ARROW_DOWN_KEY = 'ArrowDown';
  const RIGHT_MOUSE_BUTTON = 2; // MouseEvent.button value for the secondary button, usually the right button
  const REGEXP_KEYDOWN = new RegExp(`${ARROW_UP_KEY}|${ARROW_DOWN_KEY}|${ESCAPE_KEY$2}`);
  const EVENT_HIDE$4 = `hide${EVENT_KEY$8}`;
  const EVENT_HIDDEN$4 = `hidden${EVENT_KEY$8}`;
  const EVENT_SHOW$4 = `show${EVENT_KEY$8}`;
  const EVENT_SHOWN$4 = `shown${EVENT_KEY$8}`;
  const EVENT_CLICK_DATA_API$3 = `click${EVENT_KEY$8}${DATA_API_KEY$4}`;
  const EVENT_KEYDOWN_DATA_API = `keydown${EVENT_KEY$8}${DATA_API_KEY$4}`;
  const EVENT_KEYUP_DATA_API = `keyup${EVENT_KEY$8}${DATA_API_KEY$4}`;
  const CLASS_NAME_SHOW$6 = 'show';
  const CLASS_NAME_DROPUP = 'dropup';
  const CLASS_NAME_DROPEND = 'dropend';
  const CLASS_NAME_DROPSTART = 'dropstart';
  const CLASS_NAME_NAVBAR = 'navbar';
  const SELECTOR_DATA_TOGGLE$3 = '[data-bs-toggle="dropdown"]';
  const SELECTOR_MENU = '.dropdown-menu';
  const SELECTOR_NAVBAR_NAV = '.navbar-nav';
  const SELECTOR_VISIBLE_ITEMS = '.dropdown-menu .dropdown-item:not(.disabled):not(:disabled)';
  const PLACEMENT_TOP = isRTL() ? 'top-end' : 'top-start';
  const PLACEMENT_TOPEND = isRTL() ? 'top-start' : 'top-end';
  const PLACEMENT_BOTTOM = isRTL() ? 'bottom-end' : 'bottom-start';
  const PLACEMENT_BOTTOMEND = isRTL() ? 'bottom-start' : 'bottom-end';
  const PLACEMENT_RIGHT = isRTL() ? 'left-start' : 'right-start';
  const PLACEMENT_LEFT = isRTL() ? 'right-start' : 'left-start';
  const Default$8 = {
      offset: [
          0,
          2
      ],
      boundary: 'clippingParents',
      reference: 'toggle',
      display: 'dynamic',
      popperConfig: null,
      autoClose: true
  };
  const DefaultType$8 = {
      offset: '(array|string|function)',
      boundary: '(string|element)',
      reference: '(string|element|object)',
      display: 'string',
      popperConfig: '(null|object|function)',
      autoClose: '(boolean|string)'
  };
  /**
   * ------------------------------------------------------------------------
   * Class Definition
   * ------------------------------------------------------------------------
   */ class Dropdown extends BaseComponent {
      static get Default() {
          return Default$8;
      }
      static get DefaultType() {
          return DefaultType$8;
      }
      static get NAME() {
          return NAME$9;
      }
      toggle() {
          return this._isShown() ? this.hide() : this.show();
      }
      show() {
          if (isDisabled(this._element) || this._isShown(this._menu)) return;
          const relatedTarget = {
              relatedTarget: this._element
          };
          const showEvent = EventHandler.trigger(this._element, EVENT_SHOW$4, relatedTarget);
          if (showEvent.defaultPrevented) return;
          const parent = Dropdown.getParentFromElement(this._element); // Totally disable Popper for Dropdowns in Navbar
          if (this._inNavbar) Manipulator.setDataAttribute(this._menu, 'popper', 'none');
          else this._createPopper(parent);
           // If this is a touch-enabled device we add extra
          // empty mouseover listeners to the body's immediate children;
          // only needed because of broken event delegation on iOS
          // https://www.quirksmode.org/blog/archives/2014/02/mouse_event_bub.html
          if ('ontouchstart' in document.documentElement && !parent.closest(SELECTOR_NAVBAR_NAV)) [].concat(...document.body.children).forEach((elem)=>EventHandler.on(elem, 'mouseover', noop)
          );
          this._element.focus();
          this._element.setAttribute('aria-expanded', true);
          this._menu.classList.add(CLASS_NAME_SHOW$6);
          this._element.classList.add(CLASS_NAME_SHOW$6);
          EventHandler.trigger(this._element, EVENT_SHOWN$4, relatedTarget);
      }
      hide() {
          if (isDisabled(this._element) || !this._isShown(this._menu)) return;
          const relatedTarget = {
              relatedTarget: this._element
          };
          this._completeHide(relatedTarget);
      }
      dispose() {
          if (this._popper) this._popper.destroy();
          super.dispose();
      }
      update() {
          this._inNavbar = this._detectNavbar();
          if (this._popper) this._popper.update();
      }
      _completeHide(relatedTarget) {
          const hideEvent = EventHandler.trigger(this._element, EVENT_HIDE$4, relatedTarget);
          if (hideEvent.defaultPrevented) return;
           // If this is a touch-enabled device we remove the extra
          // empty mouseover listeners we added for iOS support
          if ('ontouchstart' in document.documentElement) [].concat(...document.body.children).forEach((elem)=>EventHandler.off(elem, 'mouseover', noop)
          );
          if (this._popper) this._popper.destroy();
          this._menu.classList.remove(CLASS_NAME_SHOW$6);
          this._element.classList.remove(CLASS_NAME_SHOW$6);
          this._element.setAttribute('aria-expanded', 'false');
          Manipulator.removeDataAttribute(this._menu, 'popper');
          EventHandler.trigger(this._element, EVENT_HIDDEN$4, relatedTarget);
      }
      _getConfig(config) {
          config = {
              ...this.constructor.Default,
              ...Manipulator.getDataAttributes(this._element),
              ...config
          };
          typeCheckConfig(NAME$9, config, this.constructor.DefaultType);
          if (typeof config.reference === 'object' && !isElement(config.reference) && typeof config.reference.getBoundingClientRect !== 'function') // Popper virtual elements require a getBoundingClientRect method
          throw new TypeError(`${NAME$9.toUpperCase()}: Option "reference" provided type "object" without a required "getBoundingClientRect" method.`);
          return config;
      }
      _createPopper(parent) {
          if (typeof _core === 'undefined') throw new TypeError('Bootstrap\'s dropdowns require Popper (https://popper.js.org)');
          let referenceElement = this._element;
          if (this._config.reference === 'parent') referenceElement = parent;
          else if (isElement(this._config.reference)) referenceElement = getElement(this._config.reference);
          else if (typeof this._config.reference === 'object') referenceElement = this._config.reference;
          const popperConfig = this._getPopperConfig();
          const isDisplayStatic = popperConfig.modifiers.find((modifier)=>modifier.name === 'applyStyles' && modifier.enabled === false
          );
          this._popper = _core.createPopper(referenceElement, this._menu, popperConfig);
          if (isDisplayStatic) Manipulator.setDataAttribute(this._menu, 'popper', 'static');
      }
      _isShown(element = this._element) {
          return element.classList.contains(CLASS_NAME_SHOW$6);
      }
      _getMenuElement() {
          return SelectorEngine.next(this._element, SELECTOR_MENU)[0];
      }
      _getPlacement() {
          const parentDropdown = this._element.parentNode;
          if (parentDropdown.classList.contains(CLASS_NAME_DROPEND)) return PLACEMENT_RIGHT;
          if (parentDropdown.classList.contains(CLASS_NAME_DROPSTART)) return PLACEMENT_LEFT;
           // We need to trim the value because custom properties can also include spaces
          const isEnd = getComputedStyle(this._menu).getPropertyValue('--bs-position').trim() === 'end';
          if (parentDropdown.classList.contains(CLASS_NAME_DROPUP)) return isEnd ? PLACEMENT_TOPEND : PLACEMENT_TOP;
          return isEnd ? PLACEMENT_BOTTOMEND : PLACEMENT_BOTTOM;
      }
      _detectNavbar() {
          return this._element.closest(`.${CLASS_NAME_NAVBAR}`) !== null;
      }
      _getOffset() {
          const { offset  } = this._config;
          if (typeof offset === 'string') return offset.split(',').map((val)=>Number.parseInt(val, 10)
          );
          if (typeof offset === 'function') return (popperData)=>offset(popperData, this._element)
          ;
          return offset;
      }
      _getPopperConfig() {
          const defaultBsPopperConfig = {
              placement: this._getPlacement(),
              modifiers: [
                  {
                      name: 'preventOverflow',
                      options: {
                          boundary: this._config.boundary
                      }
                  },
                  {
                      name: 'offset',
                      options: {
                          offset: this._getOffset()
                      }
                  }
              ]
          }; // Disable Popper if we have a static display
          if (this._config.display === 'static') defaultBsPopperConfig.modifiers = [
              {
                  name: 'applyStyles',
                  enabled: false
              }
          ];
          return {
              ...defaultBsPopperConfig,
              ...typeof this._config.popperConfig === 'function' ? this._config.popperConfig(defaultBsPopperConfig) : this._config.popperConfig
          };
      }
      _selectMenuItem({ key , target  }) {
          const items = SelectorEngine.find(SELECTOR_VISIBLE_ITEMS, this._menu).filter(isVisible);
          if (!items.length) return;
           // if target isn't included in items (e.g. when expanding the dropdown)
          // allow cycling to get the last item in case key equals ARROW_UP_KEY
          getNextActiveElement(items, target, key === ARROW_DOWN_KEY, !items.includes(target)).focus();
      }
      static jQueryInterface(config) {
          return this.each(function() {
              const data = Dropdown.getOrCreateInstance(this, config);
              if (typeof config !== 'string') return;
              if (typeof data[config] === 'undefined') throw new TypeError(`No method named "${config}"`);
              data[config]();
          });
      }
      static clearMenus(event) {
          if (event && (event.button === RIGHT_MOUSE_BUTTON || event.type === 'keyup' && event.key !== TAB_KEY$1)) return;
          const toggles = SelectorEngine.find(SELECTOR_DATA_TOGGLE$3);
          for(let i = 0, len = toggles.length; i < len; i++){
              const context = Dropdown.getInstance(toggles[i]);
              if (!context || context._config.autoClose === false) continue;
              if (!context._isShown()) continue;
              const relatedTarget = {
                  relatedTarget: context._element
              };
              if (event) {
                  const composedPath = event.composedPath();
                  const isMenuTarget = composedPath.includes(context._menu);
                  if (composedPath.includes(context._element) || context._config.autoClose === 'inside' && !isMenuTarget || context._config.autoClose === 'outside' && isMenuTarget) continue;
                   // Tab navigation through the dropdown menu or events from contained inputs shouldn't close the menu
                  if (context._menu.contains(event.target) && (event.type === 'keyup' && event.key === TAB_KEY$1 || /input|select|option|textarea|form/i.test(event.target.tagName))) continue;
                  if (event.type === 'click') relatedTarget.clickEvent = event;
              }
              context._completeHide(relatedTarget);
          }
      }
      static getParentFromElement(element) {
          return getElementFromSelector(element) || element.parentNode;
      }
      static dataApiKeydownHandler(event) {
          // If not input/textarea:
          //  - And not a key in REGEXP_KEYDOWN => not a dropdown command
          // If input/textarea:
          //  - If space key => not a dropdown command
          //  - If key is other than escape
          //    - If key is not up or down => not a dropdown command
          //    - If trigger inside the menu => not a dropdown command
          if (/input|textarea/i.test(event.target.tagName) ? event.key === SPACE_KEY || event.key !== ESCAPE_KEY$2 && (event.key !== ARROW_DOWN_KEY && event.key !== ARROW_UP_KEY || event.target.closest(SELECTOR_MENU)) : !REGEXP_KEYDOWN.test(event.key)) return;
          const isActive = this.classList.contains(CLASS_NAME_SHOW$6);
          if (!isActive && event.key === ESCAPE_KEY$2) return;
          event.preventDefault();
          event.stopPropagation();
          if (isDisabled(this)) return;
          const getToggleButton = this.matches(SELECTOR_DATA_TOGGLE$3) ? this : SelectorEngine.prev(this, SELECTOR_DATA_TOGGLE$3)[0];
          const instance = Dropdown.getOrCreateInstance(getToggleButton);
          if (event.key === ESCAPE_KEY$2) {
              instance.hide();
              return;
          }
          if (event.key === ARROW_UP_KEY || event.key === ARROW_DOWN_KEY) {
              if (!isActive) instance.show();
              instance._selectMenuItem(event);
              return;
          }
          if (!isActive || event.key === SPACE_KEY) Dropdown.clearMenus();
      }
      constructor(element, config){
          super(element);
          this._popper = null;
          this._config = this._getConfig(config);
          this._menu = this._getMenuElement();
          this._inNavbar = this._detectNavbar();
      }
  }
  /**
   * ------------------------------------------------------------------------
   * Data Api implementation
   * ------------------------------------------------------------------------
   */ EventHandler.on(document, EVENT_KEYDOWN_DATA_API, SELECTOR_DATA_TOGGLE$3, Dropdown.dataApiKeydownHandler);
  EventHandler.on(document, EVENT_KEYDOWN_DATA_API, SELECTOR_MENU, Dropdown.dataApiKeydownHandler);
  EventHandler.on(document, EVENT_CLICK_DATA_API$3, Dropdown.clearMenus);
  EventHandler.on(document, EVENT_KEYUP_DATA_API, Dropdown.clearMenus);
  EventHandler.on(document, EVENT_CLICK_DATA_API$3, SELECTOR_DATA_TOGGLE$3, function(event) {
      event.preventDefault();
      Dropdown.getOrCreateInstance(this).toggle();
  });
  /**
   * ------------------------------------------------------------------------
   * jQuery
   * ------------------------------------------------------------------------
   * add .Dropdown to jQuery only if jQuery is present
   */ defineJQueryPlugin(Dropdown);
  /**
   * --------------------------------------------------------------------------
   * Bootstrap (v5.1.3): util/scrollBar.js
   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
   * --------------------------------------------------------------------------
   */ const SELECTOR_FIXED_CONTENT = '.fixed-top, .fixed-bottom, .is-fixed, .sticky-top';
  const SELECTOR_STICKY_CONTENT = '.sticky-top';
  class ScrollBarHelper {
      getWidth() {
          // https://developer.mozilla.org/en-US/docs/Web/API/Window/innerWidth#usage_notes
          const documentWidth = document.documentElement.clientWidth;
          return Math.abs(window.innerWidth - documentWidth);
      }
      hide() {
          const width = this.getWidth();
          this._disableOverFlow(); // give padding to element to balance the hidden scrollbar width
          this._setElementAttributes(this._element, 'paddingRight', (calculatedValue)=>calculatedValue + width
          ); // trick: We adjust positive paddingRight and negative marginRight to sticky-top elements to keep showing fullwidth
          this._setElementAttributes(SELECTOR_FIXED_CONTENT, 'paddingRight', (calculatedValue)=>calculatedValue + width
          );
          this._setElementAttributes(SELECTOR_STICKY_CONTENT, 'marginRight', (calculatedValue)=>calculatedValue - width
          );
      }
      _disableOverFlow() {
          this._saveInitialAttribute(this._element, 'overflow');
          this._element.style.overflow = 'hidden';
      }
      _setElementAttributes(selector, styleProp, callback) {
          const scrollbarWidth = this.getWidth();
          const manipulationCallBack = (element)=>{
              if (element !== this._element && window.innerWidth > element.clientWidth + scrollbarWidth) return;
              this._saveInitialAttribute(element, styleProp);
              const calculatedValue = window.getComputedStyle(element)[styleProp];
              element.style[styleProp] = `${callback(Number.parseFloat(calculatedValue))}px`;
          };
          this._applyManipulationCallback(selector, manipulationCallBack);
      }
      reset() {
          this._resetElementAttributes(this._element, 'overflow');
          this._resetElementAttributes(this._element, 'paddingRight');
          this._resetElementAttributes(SELECTOR_FIXED_CONTENT, 'paddingRight');
          this._resetElementAttributes(SELECTOR_STICKY_CONTENT, 'marginRight');
      }
      _saveInitialAttribute(element, styleProp) {
          const actualValue = element.style[styleProp];
          if (actualValue) Manipulator.setDataAttribute(element, styleProp, actualValue);
      }
      _resetElementAttributes(selector, styleProp) {
          const manipulationCallBack = (element)=>{
              const value = Manipulator.getDataAttribute(element, styleProp);
              if (typeof value === 'undefined') element.style.removeProperty(styleProp);
              else {
                  Manipulator.removeDataAttribute(element, styleProp);
                  element.style[styleProp] = value;
              }
          };
          this._applyManipulationCallback(selector, manipulationCallBack);
      }
      _applyManipulationCallback(selector, callBack) {
          if (isElement(selector)) callBack(selector);
          else SelectorEngine.find(selector, this._element).forEach(callBack);
      }
      isOverflowing() {
          return this.getWidth() > 0;
      }
      constructor(){
          this._element = document.body;
      }
  }
  /**
   * --------------------------------------------------------------------------
   * Bootstrap (v5.1.3): util/backdrop.js
   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
   * --------------------------------------------------------------------------
   */ const Default$7 = {
      className: 'modal-backdrop',
      isVisible: true,
      // if false, we use the backdrop helper without adding any element to the dom
      isAnimated: false,
      rootElement: 'body',
      // give the choice to place backdrop under different elements
      clickCallback: null
  };
  const DefaultType$7 = {
      className: 'string',
      isVisible: 'boolean',
      isAnimated: 'boolean',
      rootElement: '(element|string)',
      clickCallback: '(function|null)'
  };
  const NAME$8 = 'backdrop';
  const CLASS_NAME_FADE$4 = 'fade';
  const CLASS_NAME_SHOW$5 = 'show';
  const EVENT_MOUSEDOWN = `mousedown.bs.${NAME$8}`;
  class Backdrop {
      show(callback) {
          if (!this._config.isVisible) {
              execute(callback);
              return;
          }
          this._append();
          if (this._config.isAnimated) reflow(this._getElement());
          this._getElement().classList.add(CLASS_NAME_SHOW$5);
          this._emulateAnimation(()=>{
              execute(callback);
          });
      }
      hide(callback) {
          if (!this._config.isVisible) {
              execute(callback);
              return;
          }
          this._getElement().classList.remove(CLASS_NAME_SHOW$5);
          this._emulateAnimation(()=>{
              this.dispose();
              execute(callback);
          });
      }
      _getElement() {
          if (!this._element) {
              const backdrop = document.createElement('div');
              backdrop.className = this._config.className;
              if (this._config.isAnimated) backdrop.classList.add(CLASS_NAME_FADE$4);
              this._element = backdrop;
          }
          return this._element;
      }
      _getConfig(config) {
          config = {
              ...Default$7,
              ...typeof config === 'object' ? config : {
              }
          }; // use getElement() with the default "body" to get a fresh Element on each instantiation
          config.rootElement = getElement(config.rootElement);
          typeCheckConfig(NAME$8, config, DefaultType$7);
          return config;
      }
      _append() {
          if (this._isAppended) return;
          this._config.rootElement.append(this._getElement());
          EventHandler.on(this._getElement(), EVENT_MOUSEDOWN, ()=>{
              execute(this._config.clickCallback);
          });
          this._isAppended = true;
      }
      dispose() {
          if (!this._isAppended) return;
          EventHandler.off(this._element, EVENT_MOUSEDOWN);
          this._element.remove();
          this._isAppended = false;
      }
      _emulateAnimation(callback) {
          executeAfterTransition(callback, this._getElement(), this._config.isAnimated);
      }
      constructor(config){
          this._config = this._getConfig(config);
          this._isAppended = false;
          this._element = null;
      }
  }
  /**
   * --------------------------------------------------------------------------
   * Bootstrap (v5.1.3): util/focustrap.js
   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
   * --------------------------------------------------------------------------
   */ const Default$6 = {
      trapElement: null,
      // The element to trap focus inside of
      autofocus: true
  };
  const DefaultType$6 = {
      trapElement: 'element',
      autofocus: 'boolean'
  };
  const NAME$7 = 'focustrap';
  const DATA_KEY$7 = 'bs.focustrap';
  const EVENT_KEY$7 = `.${DATA_KEY$7}`;
  const EVENT_FOCUSIN$1 = `focusin${EVENT_KEY$7}`;
  const EVENT_KEYDOWN_TAB = `keydown.tab${EVENT_KEY$7}`;
  const TAB_KEY = 'Tab';
  const TAB_NAV_FORWARD = 'forward';
  const TAB_NAV_BACKWARD = 'backward';
  class FocusTrap {
      activate() {
          const { trapElement , autofocus  } = this._config;
          if (this._isActive) return;
          if (autofocus) trapElement.focus();
          EventHandler.off(document, EVENT_KEY$7); // guard against infinite focus loop
          EventHandler.on(document, EVENT_FOCUSIN$1, (event)=>this._handleFocusin(event)
          );
          EventHandler.on(document, EVENT_KEYDOWN_TAB, (event)=>this._handleKeydown(event)
          );
          this._isActive = true;
      }
      deactivate() {
          if (!this._isActive) return;
          this._isActive = false;
          EventHandler.off(document, EVENT_KEY$7);
      }
      _handleFocusin(event) {
          const { target  } = event;
          const { trapElement  } = this._config;
          if (target === document || target === trapElement || trapElement.contains(target)) return;
          const elements = SelectorEngine.focusableChildren(trapElement);
          if (elements.length === 0) trapElement.focus();
          else if (this._lastTabNavDirection === TAB_NAV_BACKWARD) elements[elements.length - 1].focus();
          else elements[0].focus();
      }
      _handleKeydown(event) {
          if (event.key !== TAB_KEY) return;
          this._lastTabNavDirection = event.shiftKey ? TAB_NAV_BACKWARD : TAB_NAV_FORWARD;
      }
      _getConfig(config) {
          config = {
              ...Default$6,
              ...typeof config === 'object' ? config : {
              }
          };
          typeCheckConfig(NAME$7, config, DefaultType$6);
          return config;
      }
      constructor(config){
          this._config = this._getConfig(config);
          this._isActive = false;
          this._lastTabNavDirection = null;
      }
  }
  /**
   * --------------------------------------------------------------------------
   * Bootstrap (v5.1.3): modal.js
   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
   * --------------------------------------------------------------------------
   */ /**
   * ------------------------------------------------------------------------
   * Constants
   * ------------------------------------------------------------------------
   */ const NAME$6 = 'modal';
  const DATA_KEY$6 = 'bs.modal';
  const EVENT_KEY$6 = `.${DATA_KEY$6}`;
  const DATA_API_KEY$3 = '.data-api';
  const ESCAPE_KEY$1 = 'Escape';
  const Default$5 = {
      backdrop: true,
      keyboard: true,
      focus: true
  };
  const DefaultType$5 = {
      backdrop: '(boolean|string)',
      keyboard: 'boolean',
      focus: 'boolean'
  };
  const EVENT_HIDE$3 = `hide${EVENT_KEY$6}`;
  const EVENT_HIDE_PREVENTED = `hidePrevented${EVENT_KEY$6}`;
  const EVENT_HIDDEN$3 = `hidden${EVENT_KEY$6}`;
  const EVENT_SHOW$3 = `show${EVENT_KEY$6}`;
  const EVENT_SHOWN$3 = `shown${EVENT_KEY$6}`;
  const EVENT_RESIZE = `resize${EVENT_KEY$6}`;
  const EVENT_CLICK_DISMISS = `click.dismiss${EVENT_KEY$6}`;
  const EVENT_KEYDOWN_DISMISS$1 = `keydown.dismiss${EVENT_KEY$6}`;
  const EVENT_MOUSEUP_DISMISS = `mouseup.dismiss${EVENT_KEY$6}`;
  const EVENT_MOUSEDOWN_DISMISS = `mousedown.dismiss${EVENT_KEY$6}`;
  const EVENT_CLICK_DATA_API$2 = `click${EVENT_KEY$6}${DATA_API_KEY$3}`;
  const CLASS_NAME_OPEN = 'modal-open';
  const CLASS_NAME_FADE$3 = 'fade';
  const CLASS_NAME_SHOW$4 = 'show';
  const CLASS_NAME_STATIC = 'modal-static';
  const OPEN_SELECTOR$1 = '.modal.show';
  const SELECTOR_DIALOG = '.modal-dialog';
  const SELECTOR_MODAL_BODY = '.modal-body';
  const SELECTOR_DATA_TOGGLE$2 = '[data-bs-toggle="modal"]';
  /**
   * ------------------------------------------------------------------------
   * Class Definition
   * ------------------------------------------------------------------------
   */ class Modal extends BaseComponent {
      static get Default() {
          return Default$5;
      }
      static get NAME() {
          return NAME$6;
      }
      toggle(relatedTarget) {
          return this._isShown ? this.hide() : this.show(relatedTarget);
      }
      show(relatedTarget) {
          if (this._isShown || this._isTransitioning) return;
          const showEvent = EventHandler.trigger(this._element, EVENT_SHOW$3, {
              relatedTarget
          });
          if (showEvent.defaultPrevented) return;
          this._isShown = true;
          if (this._isAnimated()) this._isTransitioning = true;
          this._scrollBar.hide();
          document.body.classList.add(CLASS_NAME_OPEN);
          this._adjustDialog();
          this._setEscapeEvent();
          this._setResizeEvent();
          EventHandler.on(this._dialog, EVENT_MOUSEDOWN_DISMISS, ()=>{
              EventHandler.one(this._element, EVENT_MOUSEUP_DISMISS, (event)=>{
                  if (event.target === this._element) this._ignoreBackdropClick = true;
              });
          });
          this._showBackdrop(()=>this._showElement(relatedTarget)
          );
      }
      hide() {
          if (!this._isShown || this._isTransitioning) return;
          const hideEvent = EventHandler.trigger(this._element, EVENT_HIDE$3);
          if (hideEvent.defaultPrevented) return;
          this._isShown = false;
          const isAnimated = this._isAnimated();
          if (isAnimated) this._isTransitioning = true;
          this._setEscapeEvent();
          this._setResizeEvent();
          this._focustrap.deactivate();
          this._element.classList.remove(CLASS_NAME_SHOW$4);
          EventHandler.off(this._element, EVENT_CLICK_DISMISS);
          EventHandler.off(this._dialog, EVENT_MOUSEDOWN_DISMISS);
          this._queueCallback(()=>this._hideModal()
          , this._element, isAnimated);
      }
      dispose() {
          [
              window,
              this._dialog
          ].forEach((htmlElement)=>EventHandler.off(htmlElement, EVENT_KEY$6)
          );
          this._backdrop.dispose();
          this._focustrap.deactivate();
          super.dispose();
      }
      handleUpdate() {
          this._adjustDialog();
      }
      _initializeBackDrop() {
          return new Backdrop({
              isVisible: Boolean(this._config.backdrop),
              // 'static' option will be translated to true, and booleans will keep their value
              isAnimated: this._isAnimated()
          });
      }
      _initializeFocusTrap() {
          return new FocusTrap({
              trapElement: this._element
          });
      }
      _getConfig(config) {
          config = {
              ...Default$5,
              ...Manipulator.getDataAttributes(this._element),
              ...typeof config === 'object' ? config : {
              }
          };
          typeCheckConfig(NAME$6, config, DefaultType$5);
          return config;
      }
      _showElement(relatedTarget) {
          const isAnimated = this._isAnimated();
          const modalBody = SelectorEngine.findOne(SELECTOR_MODAL_BODY, this._dialog);
          if (!this._element.parentNode || this._element.parentNode.nodeType !== Node.ELEMENT_NODE) // Don't move modal's DOM position
          document.body.append(this._element);
          this._element.style.display = 'block';
          this._element.removeAttribute('aria-hidden');
          this._element.setAttribute('aria-modal', true);
          this._element.setAttribute('role', 'dialog');
          this._element.scrollTop = 0;
          if (modalBody) modalBody.scrollTop = 0;
          if (isAnimated) reflow(this._element);
          this._element.classList.add(CLASS_NAME_SHOW$4);
          const transitionComplete = ()=>{
              if (this._config.focus) this._focustrap.activate();
              this._isTransitioning = false;
              EventHandler.trigger(this._element, EVENT_SHOWN$3, {
                  relatedTarget
              });
          };
          this._queueCallback(transitionComplete, this._dialog, isAnimated);
      }
      _setEscapeEvent() {
          if (this._isShown) EventHandler.on(this._element, EVENT_KEYDOWN_DISMISS$1, (event)=>{
              if (this._config.keyboard && event.key === ESCAPE_KEY$1) {
                  event.preventDefault();
                  this.hide();
              } else if (!this._config.keyboard && event.key === ESCAPE_KEY$1) this._triggerBackdropTransition();
          });
          else EventHandler.off(this._element, EVENT_KEYDOWN_DISMISS$1);
      }
      _setResizeEvent() {
          if (this._isShown) EventHandler.on(window, EVENT_RESIZE, ()=>this._adjustDialog()
          );
          else EventHandler.off(window, EVENT_RESIZE);
      }
      _hideModal() {
          this._element.style.display = 'none';
          this._element.setAttribute('aria-hidden', true);
          this._element.removeAttribute('aria-modal');
          this._element.removeAttribute('role');
          this._isTransitioning = false;
          this._backdrop.hide(()=>{
              document.body.classList.remove(CLASS_NAME_OPEN);
              this._resetAdjustments();
              this._scrollBar.reset();
              EventHandler.trigger(this._element, EVENT_HIDDEN$3);
          });
      }
      _showBackdrop(callback) {
          EventHandler.on(this._element, EVENT_CLICK_DISMISS, (event)=>{
              if (this._ignoreBackdropClick) {
                  this._ignoreBackdropClick = false;
                  return;
              }
              if (event.target !== event.currentTarget) return;
              if (this._config.backdrop === true) this.hide();
              else if (this._config.backdrop === 'static') this._triggerBackdropTransition();
          });
          this._backdrop.show(callback);
      }
      _isAnimated() {
          return this._element.classList.contains(CLASS_NAME_FADE$3);
      }
      _triggerBackdropTransition() {
          const hideEvent = EventHandler.trigger(this._element, EVENT_HIDE_PREVENTED);
          if (hideEvent.defaultPrevented) return;
          const { classList , scrollHeight , style  } = this._element;
          const isModalOverflowing = scrollHeight > document.documentElement.clientHeight; // return if the following background transition hasn't yet completed
          if (!isModalOverflowing && style.overflowY === 'hidden' || classList.contains(CLASS_NAME_STATIC)) return;
          if (!isModalOverflowing) style.overflowY = 'hidden';
          classList.add(CLASS_NAME_STATIC);
          this._queueCallback(()=>{
              classList.remove(CLASS_NAME_STATIC);
              if (!isModalOverflowing) this._queueCallback(()=>{
                  style.overflowY = '';
              }, this._dialog);
          }, this._dialog);
          this._element.focus();
      }
      // the following methods are used to handle overflowing modals
      // ----------------------------------------------------------------------
      _adjustDialog() {
          const isModalOverflowing = this._element.scrollHeight > document.documentElement.clientHeight;
          const scrollbarWidth = this._scrollBar.getWidth();
          const isBodyOverflowing = scrollbarWidth > 0;
          if (!isBodyOverflowing && isModalOverflowing && !isRTL() || isBodyOverflowing && !isModalOverflowing && isRTL()) this._element.style.paddingLeft = `${scrollbarWidth}px`;
          if (isBodyOverflowing && !isModalOverflowing && !isRTL() || !isBodyOverflowing && isModalOverflowing && isRTL()) this._element.style.paddingRight = `${scrollbarWidth}px`;
      }
      _resetAdjustments() {
          this._element.style.paddingLeft = '';
          this._element.style.paddingRight = '';
      }
      static jQueryInterface(config, relatedTarget) {
          return this.each(function() {
              const data = Modal.getOrCreateInstance(this, config);
              if (typeof config !== 'string') return;
              if (typeof data[config] === 'undefined') throw new TypeError(`No method named "${config}"`);
              data[config](relatedTarget);
          });
      }
      constructor(element, config){
          super(element);
          this._config = this._getConfig(config);
          this._dialog = SelectorEngine.findOne(SELECTOR_DIALOG, this._element);
          this._backdrop = this._initializeBackDrop();
          this._focustrap = this._initializeFocusTrap();
          this._isShown = false;
          this._ignoreBackdropClick = false;
          this._isTransitioning = false;
          this._scrollBar = new ScrollBarHelper();
      }
  }
  /**
   * ------------------------------------------------------------------------
   * Data Api implementation
   * ------------------------------------------------------------------------
   */ EventHandler.on(document, EVENT_CLICK_DATA_API$2, SELECTOR_DATA_TOGGLE$2, function(event) {
      const target = getElementFromSelector(this);
      if ([
          'A',
          'AREA'
      ].includes(this.tagName)) event.preventDefault();
      EventHandler.one(target, EVENT_SHOW$3, (showEvent)=>{
          if (showEvent.defaultPrevented) // only register focus restorer if modal will actually get shown
          return;
          EventHandler.one(target, EVENT_HIDDEN$3, ()=>{
              if (isVisible(this)) this.focus();
          });
      }); // avoid conflict when clicking moddal toggler while another one is open
      const allReadyOpen = SelectorEngine.findOne(OPEN_SELECTOR$1);
      if (allReadyOpen) Modal.getInstance(allReadyOpen).hide();
      const data = Modal.getOrCreateInstance(target);
      data.toggle(this);
  });
  enableDismissTrigger(Modal);
  /**
   * ------------------------------------------------------------------------
   * jQuery
   * ------------------------------------------------------------------------
   * add .Modal to jQuery only if jQuery is present
   */ defineJQueryPlugin(Modal);
  /**
   * --------------------------------------------------------------------------
   * Bootstrap (v5.1.3): offcanvas.js
   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
   * --------------------------------------------------------------------------
   */ /**
   * ------------------------------------------------------------------------
   * Constants
   * ------------------------------------------------------------------------
   */ const NAME$5 = 'offcanvas';
  const DATA_KEY$5 = 'bs.offcanvas';
  const EVENT_KEY$5 = `.${DATA_KEY$5}`;
  const DATA_API_KEY$2 = '.data-api';
  const EVENT_LOAD_DATA_API$1 = `load${EVENT_KEY$5}${DATA_API_KEY$2}`;
  const ESCAPE_KEY = 'Escape';
  const Default$4 = {
      backdrop: true,
      keyboard: true,
      scroll: false
  };
  const DefaultType$4 = {
      backdrop: 'boolean',
      keyboard: 'boolean',
      scroll: 'boolean'
  };
  const CLASS_NAME_SHOW$3 = 'show';
  const CLASS_NAME_BACKDROP = 'offcanvas-backdrop';
  const OPEN_SELECTOR = '.offcanvas.show';
  const EVENT_SHOW$2 = `show${EVENT_KEY$5}`;
  const EVENT_SHOWN$2 = `shown${EVENT_KEY$5}`;
  const EVENT_HIDE$2 = `hide${EVENT_KEY$5}`;
  const EVENT_HIDDEN$2 = `hidden${EVENT_KEY$5}`;
  const EVENT_CLICK_DATA_API$1 = `click${EVENT_KEY$5}${DATA_API_KEY$2}`;
  const EVENT_KEYDOWN_DISMISS = `keydown.dismiss${EVENT_KEY$5}`;
  const SELECTOR_DATA_TOGGLE$1 = '[data-bs-toggle="offcanvas"]';
  /**
   * ------------------------------------------------------------------------
   * Class Definition
   * ------------------------------------------------------------------------
   */ class Offcanvas extends BaseComponent {
      static get NAME() {
          return NAME$5;
      }
      static get Default() {
          return Default$4;
      }
      toggle(relatedTarget) {
          return this._isShown ? this.hide() : this.show(relatedTarget);
      }
      show(relatedTarget) {
          if (this._isShown) return;
          const showEvent = EventHandler.trigger(this._element, EVENT_SHOW$2, {
              relatedTarget
          });
          if (showEvent.defaultPrevented) return;
          this._isShown = true;
          this._element.style.visibility = 'visible';
          this._backdrop.show();
          if (!this._config.scroll) new ScrollBarHelper().hide();
          this._element.removeAttribute('aria-hidden');
          this._element.setAttribute('aria-modal', true);
          this._element.setAttribute('role', 'dialog');
          this._element.classList.add(CLASS_NAME_SHOW$3);
          const completeCallBack = ()=>{
              if (!this._config.scroll) this._focustrap.activate();
              EventHandler.trigger(this._element, EVENT_SHOWN$2, {
                  relatedTarget
              });
          };
          this._queueCallback(completeCallBack, this._element, true);
      }
      hide() {
          if (!this._isShown) return;
          const hideEvent = EventHandler.trigger(this._element, EVENT_HIDE$2);
          if (hideEvent.defaultPrevented) return;
          this._focustrap.deactivate();
          this._element.blur();
          this._isShown = false;
          this._element.classList.remove(CLASS_NAME_SHOW$3);
          this._backdrop.hide();
          const completeCallback = ()=>{
              this._element.setAttribute('aria-hidden', true);
              this._element.removeAttribute('aria-modal');
              this._element.removeAttribute('role');
              this._element.style.visibility = 'hidden';
              if (!this._config.scroll) new ScrollBarHelper().reset();
              EventHandler.trigger(this._element, EVENT_HIDDEN$2);
          };
          this._queueCallback(completeCallback, this._element, true);
      }
      dispose() {
          this._backdrop.dispose();
          this._focustrap.deactivate();
          super.dispose();
      }
      _getConfig(config) {
          config = {
              ...Default$4,
              ...Manipulator.getDataAttributes(this._element),
              ...typeof config === 'object' ? config : {
              }
          };
          typeCheckConfig(NAME$5, config, DefaultType$4);
          return config;
      }
      _initializeBackDrop() {
          return new Backdrop({
              className: CLASS_NAME_BACKDROP,
              isVisible: this._config.backdrop,
              isAnimated: true,
              rootElement: this._element.parentNode,
              clickCallback: ()=>this.hide()
          });
      }
      _initializeFocusTrap() {
          return new FocusTrap({
              trapElement: this._element
          });
      }
      _addEventListeners() {
          EventHandler.on(this._element, EVENT_KEYDOWN_DISMISS, (event)=>{
              if (this._config.keyboard && event.key === ESCAPE_KEY) this.hide();
          });
      }
      static jQueryInterface(config) {
          return this.each(function() {
              const data = Offcanvas.getOrCreateInstance(this, config);
              if (typeof config !== 'string') return;
              if (data[config] === undefined || config.startsWith('_') || config === 'constructor') throw new TypeError(`No method named "${config}"`);
              data[config](this);
          });
      }
      constructor(element, config){
          super(element);
          this._config = this._getConfig(config);
          this._isShown = false;
          this._backdrop = this._initializeBackDrop();
          this._focustrap = this._initializeFocusTrap();
          this._addEventListeners();
      }
  }
  /**
   * ------------------------------------------------------------------------
   * Data Api implementation
   * ------------------------------------------------------------------------
   */ EventHandler.on(document, EVENT_CLICK_DATA_API$1, SELECTOR_DATA_TOGGLE$1, function(event) {
      const target = getElementFromSelector(this);
      if ([
          'A',
          'AREA'
      ].includes(this.tagName)) event.preventDefault();
      if (isDisabled(this)) return;
      EventHandler.one(target, EVENT_HIDDEN$2, ()=>{
          // focus on trigger when it is closed
          if (isVisible(this)) this.focus();
      }); // avoid conflict when clicking a toggler of an offcanvas, while another is open
      const allReadyOpen = SelectorEngine.findOne(OPEN_SELECTOR);
      if (allReadyOpen && allReadyOpen !== target) Offcanvas.getInstance(allReadyOpen).hide();
      const data = Offcanvas.getOrCreateInstance(target);
      data.toggle(this);
  });
  EventHandler.on(window, EVENT_LOAD_DATA_API$1, ()=>SelectorEngine.find(OPEN_SELECTOR).forEach((el)=>Offcanvas.getOrCreateInstance(el).show()
      )
  );
  enableDismissTrigger(Offcanvas);
  /**
   * ------------------------------------------------------------------------
   * jQuery
   * ------------------------------------------------------------------------
   */ defineJQueryPlugin(Offcanvas);
  /**
   * --------------------------------------------------------------------------
   * Bootstrap (v5.1.3): util/sanitizer.js
   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
   * --------------------------------------------------------------------------
   */ const uriAttributes = new Set([
      'background',
      'cite',
      'href',
      'itemtype',
      'longdesc',
      'poster',
      'src',
      'xlink:href'
  ]);
  const ARIA_ATTRIBUTE_PATTERN = /^aria-[\w-]*$/i;
  /**
   * A pattern that recognizes a commonly useful subset of URLs that are safe.
   *
   * Shoutout to Angular https://github.com/angular/angular/blob/12.2.x/packages/core/src/sanitization/url_sanitizer.ts
   */ const SAFE_URL_PATTERN = /^(?:(?:https?|mailto|ftp|tel|file|sms):|[^#&/:?]*(?:[#/?]|$))/i;
  /**
   * A pattern that matches safe data URLs. Only matches image, video and audio types.
   *
   * Shoutout to Angular https://github.com/angular/angular/blob/12.2.x/packages/core/src/sanitization/url_sanitizer.ts
   */ const DATA_URL_PATTERN = /^data:(?:image\/(?:bmp|gif|jpeg|jpg|png|tiff|webp)|video\/(?:mpeg|mp4|ogg|webm)|audio\/(?:mp3|oga|ogg|opus));base64,[\d+/a-z]+=*$/i;
  const allowedAttribute = (attribute, allowedAttributeList)=>{
      const attributeName = attribute.nodeName.toLowerCase();
      if (allowedAttributeList.includes(attributeName)) {
          if (uriAttributes.has(attributeName)) return Boolean(SAFE_URL_PATTERN.test(attribute.nodeValue) || DATA_URL_PATTERN.test(attribute.nodeValue));
          return true;
      }
      const regExp = allowedAttributeList.filter((attributeRegex)=>attributeRegex instanceof RegExp
      ); // Check if a regular expression validates the attribute.
      for(let i = 0, len = regExp.length; i < len; i++){
          if (regExp[i].test(attributeName)) return true;
      }
      return false;
  };
  const DefaultAllowlist = {
      // Global attributes allowed on any supplied element below.
      '*': [
          'class',
          'dir',
          'id',
          'lang',
          'role',
          ARIA_ATTRIBUTE_PATTERN
      ],
      a: [
          'target',
          'href',
          'title',
          'rel'
      ],
      area: [],
      b: [],
      br: [],
      col: [],
      code: [],
      div: [],
      em: [],
      hr: [],
      h1: [],
      h2: [],
      h3: [],
      h4: [],
      h5: [],
      h6: [],
      i: [],
      img: [
          'src',
          'srcset',
          'alt',
          'title',
          'width',
          'height'
      ],
      li: [],
      ol: [],
      p: [],
      pre: [],
      s: [],
      small: [],
      span: [],
      sub: [],
      sup: [],
      strong: [],
      u: [],
      ul: []
  };
  function sanitizeHtml(unsafeHtml, allowList, sanitizeFn) {
      if (!unsafeHtml.length) return unsafeHtml;
      if (sanitizeFn && typeof sanitizeFn === 'function') return sanitizeFn(unsafeHtml);
      const domParser = new window.DOMParser();
      const createdDocument = domParser.parseFromString(unsafeHtml, 'text/html');
      const elements = [].concat(...createdDocument.body.querySelectorAll('*'));
      for(let i = 0, len = elements.length; i < len; i++){
          const element = elements[i];
          const elementName = element.nodeName.toLowerCase();
          if (!Object.keys(allowList).includes(elementName)) {
              element.remove();
              continue;
          }
          const attributeList = [].concat(...element.attributes);
          const allowedAttributes = [].concat(allowList['*'] || [], allowList[elementName] || []);
          attributeList.forEach((attribute)=>{
              if (!allowedAttribute(attribute, allowedAttributes)) element.removeAttribute(attribute.nodeName);
          });
      }
      return createdDocument.body.innerHTML;
  }
  /**
   * --------------------------------------------------------------------------
   * Bootstrap (v5.1.3): tooltip.js
   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
   * --------------------------------------------------------------------------
   */ /**
   * ------------------------------------------------------------------------
   * Constants
   * ------------------------------------------------------------------------
   */ const NAME$4 = 'tooltip';
  const DATA_KEY$4 = 'bs.tooltip';
  const EVENT_KEY$4 = `.${DATA_KEY$4}`;
  const CLASS_PREFIX$1 = 'bs-tooltip';
  const DISALLOWED_ATTRIBUTES = new Set([
      'sanitize',
      'allowList',
      'sanitizeFn'
  ]);
  const DefaultType$3 = {
      animation: 'boolean',
      template: 'string',
      title: '(string|element|function)',
      trigger: 'string',
      delay: '(number|object)',
      html: 'boolean',
      selector: '(string|boolean)',
      placement: '(string|function)',
      offset: '(array|string|function)',
      container: '(string|element|boolean)',
      fallbackPlacements: 'array',
      boundary: '(string|element)',
      customClass: '(string|function)',
      sanitize: 'boolean',
      sanitizeFn: '(null|function)',
      allowList: 'object',
      popperConfig: '(null|object|function)'
  };
  const AttachmentMap = {
      AUTO: 'auto',
      TOP: 'top',
      RIGHT: isRTL() ? 'left' : 'right',
      BOTTOM: 'bottom',
      LEFT: isRTL() ? 'right' : 'left'
  };
  const Default$3 = {
      animation: true,
      template: "<div class=\"tooltip\" role=\"tooltip\"><div class=\"tooltip-arrow\"></div><div class=\"tooltip-inner\"></div></div>",
      trigger: 'hover focus',
      title: '',
      delay: 0,
      html: false,
      selector: false,
      placement: 'top',
      offset: [
          0,
          0
      ],
      container: false,
      fallbackPlacements: [
          'top',
          'right',
          'bottom',
          'left'
      ],
      boundary: 'clippingParents',
      customClass: '',
      sanitize: true,
      sanitizeFn: null,
      allowList: DefaultAllowlist,
      popperConfig: null
  };
  const Event$2 = {
      HIDE: `hide${EVENT_KEY$4}`,
      HIDDEN: `hidden${EVENT_KEY$4}`,
      SHOW: `show${EVENT_KEY$4}`,
      SHOWN: `shown${EVENT_KEY$4}`,
      INSERTED: `inserted${EVENT_KEY$4}`,
      CLICK: `click${EVENT_KEY$4}`,
      FOCUSIN: `focusin${EVENT_KEY$4}`,
      FOCUSOUT: `focusout${EVENT_KEY$4}`,
      MOUSEENTER: `mouseenter${EVENT_KEY$4}`,
      MOUSELEAVE: `mouseleave${EVENT_KEY$4}`
  };
  const CLASS_NAME_FADE$2 = 'fade';
  const CLASS_NAME_MODAL = 'modal';
  const CLASS_NAME_SHOW$2 = 'show';
  const HOVER_STATE_SHOW = 'show';
  const HOVER_STATE_OUT = 'out';
  const SELECTOR_TOOLTIP_INNER = '.tooltip-inner';
  const SELECTOR_MODAL = `.${CLASS_NAME_MODAL}`;
  const EVENT_MODAL_HIDE = 'hide.bs.modal';
  const TRIGGER_HOVER = 'hover';
  const TRIGGER_FOCUS = 'focus';
  const TRIGGER_CLICK = 'click';
  const TRIGGER_MANUAL = 'manual';
  /**
   * ------------------------------------------------------------------------
   * Class Definition
   * ------------------------------------------------------------------------
   */ class Tooltip extends BaseComponent {
      static get Default() {
          return Default$3;
      }
      static get NAME() {
          return NAME$4;
      }
      static get Event() {
          return Event$2;
      }
      static get DefaultType() {
          return DefaultType$3;
      }
      enable() {
          this._isEnabled = true;
      }
      disable() {
          this._isEnabled = false;
      }
      toggleEnabled() {
          this._isEnabled = !this._isEnabled;
      }
      toggle(event) {
          if (!this._isEnabled) return;
          if (event) {
              const context = this._initializeOnDelegatedTarget(event);
              context._activeTrigger.click = !context._activeTrigger.click;
              if (context._isWithActiveTrigger()) context._enter(null, context);
              else context._leave(null, context);
          } else {
              if (this.getTipElement().classList.contains(CLASS_NAME_SHOW$2)) {
                  this._leave(null, this);
                  return;
              }
              this._enter(null, this);
          }
      }
      dispose() {
          clearTimeout(this._timeout);
          EventHandler.off(this._element.closest(SELECTOR_MODAL), EVENT_MODAL_HIDE, this._hideModalHandler);
          if (this.tip) this.tip.remove();
          this._disposePopper();
          super.dispose();
      }
      show() {
          if (this._element.style.display === 'none') throw new Error('Please use show on visible elements');
          if (!(this.isWithContent() && this._isEnabled)) return;
          const showEvent = EventHandler.trigger(this._element, this.constructor.Event.SHOW);
          const shadowRoot = findShadowRoot(this._element);
          const isInTheDom = shadowRoot === null ? this._element.ownerDocument.documentElement.contains(this._element) : shadowRoot.contains(this._element);
          if (showEvent.defaultPrevented || !isInTheDom) return;
           // A trick to recreate a tooltip in case a new title is given by using the NOT documented `data-bs-original-title`
          // This will be removed later in favor of a `setContent` method
          if (this.constructor.NAME === 'tooltip' && this.tip && this.getTitle() !== this.tip.querySelector(SELECTOR_TOOLTIP_INNER).innerHTML) {
              this._disposePopper();
              this.tip.remove();
              this.tip = null;
          }
          const tip = this.getTipElement();
          const tipId = getUID(this.constructor.NAME);
          tip.setAttribute('id', tipId);
          this._element.setAttribute('aria-describedby', tipId);
          if (this._config.animation) tip.classList.add(CLASS_NAME_FADE$2);
          const placement = typeof this._config.placement === 'function' ? this._config.placement.call(this, tip, this._element) : this._config.placement;
          const attachment = this._getAttachment(placement);
          this._addAttachmentClass(attachment);
          const { container  } = this._config;
          Data.set(tip, this.constructor.DATA_KEY, this);
          if (!this._element.ownerDocument.documentElement.contains(this.tip)) {
              container.append(tip);
              EventHandler.trigger(this._element, this.constructor.Event.INSERTED);
          }
          if (this._popper) this._popper.update();
          else this._popper = _core.createPopper(this._element, tip, this._getPopperConfig(attachment));
          tip.classList.add(CLASS_NAME_SHOW$2);
          const customClass = this._resolvePossibleFunction(this._config.customClass);
          if (customClass) tip.classList.add(...customClass.split(' '));
           // If this is a touch-enabled device we add extra
          // empty mouseover listeners to the body's immediate children;
          // only needed because of broken event delegation on iOS
          // https://www.quirksmode.org/blog/archives/2014/02/mouse_event_bub.html
          if ('ontouchstart' in document.documentElement) [].concat(...document.body.children).forEach((element)=>{
              EventHandler.on(element, 'mouseover', noop);
          });
          const complete = ()=>{
              const prevHoverState = this._hoverState;
              this._hoverState = null;
              EventHandler.trigger(this._element, this.constructor.Event.SHOWN);
              if (prevHoverState === HOVER_STATE_OUT) this._leave(null, this);
          };
          const isAnimated = this.tip.classList.contains(CLASS_NAME_FADE$2);
          this._queueCallback(complete, this.tip, isAnimated);
      }
      hide() {
          if (!this._popper) return;
          const tip = this.getTipElement();
          const complete = ()=>{
              if (this._isWithActiveTrigger()) return;
              if (this._hoverState !== HOVER_STATE_SHOW) tip.remove();
              this._cleanTipClass();
              this._element.removeAttribute('aria-describedby');
              EventHandler.trigger(this._element, this.constructor.Event.HIDDEN);
              this._disposePopper();
          };
          const hideEvent = EventHandler.trigger(this._element, this.constructor.Event.HIDE);
          if (hideEvent.defaultPrevented) return;
          tip.classList.remove(CLASS_NAME_SHOW$2); // If this is a touch-enabled device we remove the extra
          // empty mouseover listeners we added for iOS support
          if ('ontouchstart' in document.documentElement) [].concat(...document.body.children).forEach((element)=>EventHandler.off(element, 'mouseover', noop)
          );
          this._activeTrigger[TRIGGER_CLICK] = false;
          this._activeTrigger[TRIGGER_FOCUS] = false;
          this._activeTrigger[TRIGGER_HOVER] = false;
          const isAnimated = this.tip.classList.contains(CLASS_NAME_FADE$2);
          this._queueCallback(complete, this.tip, isAnimated);
          this._hoverState = '';
      }
      update() {
          if (this._popper !== null) this._popper.update();
      }
      isWithContent() {
          return Boolean(this.getTitle());
      }
      getTipElement() {
          if (this.tip) return this.tip;
          const element = document.createElement('div');
          element.innerHTML = this._config.template;
          const tip = element.children[0];
          this.setContent(tip);
          tip.classList.remove(CLASS_NAME_FADE$2, CLASS_NAME_SHOW$2);
          this.tip = tip;
          return this.tip;
      }
      setContent(tip) {
          this._sanitizeAndSetContent(tip, this.getTitle(), SELECTOR_TOOLTIP_INNER);
      }
      _sanitizeAndSetContent(template, content, selector) {
          const templateElement = SelectorEngine.findOne(selector, template);
          if (!content && templateElement) {
              templateElement.remove();
              return;
          } // we use append for html objects to maintain js events
          this.setElementContent(templateElement, content);
      }
      setElementContent(element, content) {
          if (element === null) return;
          if (isElement(content)) {
              content = getElement(content); // content is a DOM node or a jQuery
              if (this._config.html) {
                  if (content.parentNode !== element) {
                      element.innerHTML = '';
                      element.append(content);
                  }
              } else element.textContent = content.textContent;
              return;
          }
          if (this._config.html) {
              if (this._config.sanitize) content = sanitizeHtml(content, this._config.allowList, this._config.sanitizeFn);
              element.innerHTML = content;
          } else element.textContent = content;
      }
      getTitle() {
          const title = this._element.getAttribute('data-bs-original-title') || this._config.title;
          return this._resolvePossibleFunction(title);
      }
      updateAttachment(attachment) {
          if (attachment === 'right') return 'end';
          if (attachment === 'left') return 'start';
          return attachment;
      }
      _initializeOnDelegatedTarget(event, context) {
          return context || this.constructor.getOrCreateInstance(event.delegateTarget, this._getDelegateConfig());
      }
      _getOffset() {
          const { offset  } = this._config;
          if (typeof offset === 'string') return offset.split(',').map((val)=>Number.parseInt(val, 10)
          );
          if (typeof offset === 'function') return (popperData)=>offset(popperData, this._element)
          ;
          return offset;
      }
      _resolvePossibleFunction(content) {
          return typeof content === 'function' ? content.call(this._element) : content;
      }
      _getPopperConfig(attachment) {
          const defaultBsPopperConfig = {
              placement: attachment,
              modifiers: [
                  {
                      name: 'flip',
                      options: {
                          fallbackPlacements: this._config.fallbackPlacements
                      }
                  },
                  {
                      name: 'offset',
                      options: {
                          offset: this._getOffset()
                      }
                  },
                  {
                      name: 'preventOverflow',
                      options: {
                          boundary: this._config.boundary
                      }
                  },
                  {
                      name: 'arrow',
                      options: {
                          element: `.${this.constructor.NAME}-arrow`
                      }
                  },
                  {
                      name: 'onChange',
                      enabled: true,
                      phase: 'afterWrite',
                      fn: (data)=>this._handlePopperPlacementChange(data)
                  }
              ],
              onFirstUpdate: (data)=>{
                  if (data.options.placement !== data.placement) this._handlePopperPlacementChange(data);
              }
          };
          return {
              ...defaultBsPopperConfig,
              ...typeof this._config.popperConfig === 'function' ? this._config.popperConfig(defaultBsPopperConfig) : this._config.popperConfig
          };
      }
      _addAttachmentClass(attachment) {
          this.getTipElement().classList.add(`${this._getBasicClassPrefix()}-${this.updateAttachment(attachment)}`);
      }
      _getAttachment(placement) {
          return AttachmentMap[placement.toUpperCase()];
      }
      _setListeners() {
          const triggers = this._config.trigger.split(' ');
          triggers.forEach((trigger)=>{
              if (trigger === 'click') EventHandler.on(this._element, this.constructor.Event.CLICK, this._config.selector, (event)=>this.toggle(event)
              );
              else if (trigger !== TRIGGER_MANUAL) {
                  const eventIn = trigger === TRIGGER_HOVER ? this.constructor.Event.MOUSEENTER : this.constructor.Event.FOCUSIN;
                  const eventOut = trigger === TRIGGER_HOVER ? this.constructor.Event.MOUSELEAVE : this.constructor.Event.FOCUSOUT;
                  EventHandler.on(this._element, eventIn, this._config.selector, (event)=>this._enter(event)
                  );
                  EventHandler.on(this._element, eventOut, this._config.selector, (event)=>this._leave(event)
                  );
              }
          });
          this._hideModalHandler = ()=>{
              if (this._element) this.hide();
          };
          EventHandler.on(this._element.closest(SELECTOR_MODAL), EVENT_MODAL_HIDE, this._hideModalHandler);
          if (this._config.selector) this._config = {
              ...this._config,
              trigger: 'manual',
              selector: ''
          };
          else this._fixTitle();
      }
      _fixTitle() {
          const title = this._element.getAttribute('title');
          const originalTitleType = typeof this._element.getAttribute('data-bs-original-title');
          if (title || originalTitleType !== 'string') {
              this._element.setAttribute('data-bs-original-title', title || '');
              if (title && !this._element.getAttribute('aria-label') && !this._element.textContent) this._element.setAttribute('aria-label', title);
              this._element.setAttribute('title', '');
          }
      }
      _enter(event, context) {
          context = this._initializeOnDelegatedTarget(event, context);
          if (event) context._activeTrigger[event.type === 'focusin' ? TRIGGER_FOCUS : TRIGGER_HOVER] = true;
          if (context.getTipElement().classList.contains(CLASS_NAME_SHOW$2) || context._hoverState === HOVER_STATE_SHOW) {
              context._hoverState = HOVER_STATE_SHOW;
              return;
          }
          clearTimeout(context._timeout);
          context._hoverState = HOVER_STATE_SHOW;
          if (!context._config.delay || !context._config.delay.show) {
              context.show();
              return;
          }
          context._timeout = setTimeout(()=>{
              if (context._hoverState === HOVER_STATE_SHOW) context.show();
          }, context._config.delay.show);
      }
      _leave(event, context) {
          context = this._initializeOnDelegatedTarget(event, context);
          if (event) context._activeTrigger[event.type === 'focusout' ? TRIGGER_FOCUS : TRIGGER_HOVER] = context._element.contains(event.relatedTarget);
          if (context._isWithActiveTrigger()) return;
          clearTimeout(context._timeout);
          context._hoverState = HOVER_STATE_OUT;
          if (!context._config.delay || !context._config.delay.hide) {
              context.hide();
              return;
          }
          context._timeout = setTimeout(()=>{
              if (context._hoverState === HOVER_STATE_OUT) context.hide();
          }, context._config.delay.hide);
      }
      _isWithActiveTrigger() {
          for(const trigger in this._activeTrigger){
              if (this._activeTrigger[trigger]) return true;
          }
          return false;
      }
      _getConfig(config) {
          const dataAttributes = Manipulator.getDataAttributes(this._element);
          Object.keys(dataAttributes).forEach((dataAttr)=>{
              if (DISALLOWED_ATTRIBUTES.has(dataAttr)) delete dataAttributes[dataAttr];
          });
          config = {
              ...this.constructor.Default,
              ...dataAttributes,
              ...typeof config === 'object' && config ? config : {
              }
          };
          config.container = config.container === false ? document.body : getElement(config.container);
          if (typeof config.delay === 'number') config.delay = {
              show: config.delay,
              hide: config.delay
          };
          if (typeof config.title === 'number') config.title = config.title.toString();
          if (typeof config.content === 'number') config.content = config.content.toString();
          typeCheckConfig(NAME$4, config, this.constructor.DefaultType);
          if (config.sanitize) config.template = sanitizeHtml(config.template, config.allowList, config.sanitizeFn);
          return config;
      }
      _getDelegateConfig() {
          const config = {
          };
          for(const key in this._config)if (this.constructor.Default[key] !== this._config[key]) config[key] = this._config[key];
           // In the future can be replaced with:
          // const keysWithDifferentValues = Object.entries(this._config).filter(entry => this.constructor.Default[entry[0]] !== this._config[entry[0]])
          // `Object.fromEntries(keysWithDifferentValues)`
          return config;
      }
      _cleanTipClass() {
          const tip = this.getTipElement();
          const basicClassPrefixRegex = new RegExp(`(^|\\s)${this._getBasicClassPrefix()}\\S+`, 'g');
          const tabClass = tip.getAttribute('class').match(basicClassPrefixRegex);
          if (tabClass !== null && tabClass.length > 0) tabClass.map((token)=>token.trim()
          ).forEach((tClass)=>tip.classList.remove(tClass)
          );
      }
      _getBasicClassPrefix() {
          return CLASS_PREFIX$1;
      }
      _handlePopperPlacementChange(popperData) {
          const { state  } = popperData;
          if (!state) return;
          this.tip = state.elements.popper;
          this._cleanTipClass();
          this._addAttachmentClass(this._getAttachment(state.placement));
      }
      _disposePopper() {
          if (this._popper) {
              this._popper.destroy();
              this._popper = null;
          }
      }
      static jQueryInterface(config) {
          return this.each(function() {
              const data = Tooltip.getOrCreateInstance(this, config);
              if (typeof config === 'string') {
                  if (typeof data[config] === 'undefined') throw new TypeError(`No method named "${config}"`);
                  data[config]();
              }
          });
      }
      constructor(element, config){
          if (typeof _core === 'undefined') throw new TypeError('Bootstrap\'s tooltips require Popper (https://popper.js.org)');
          super(element); // private
          this._isEnabled = true;
          this._timeout = 0;
          this._hoverState = '';
          this._activeTrigger = {
          };
          this._popper = null; // Protected
          this._config = this._getConfig(config);
          this.tip = null;
          this._setListeners();
      }
  }
  /**
   * ------------------------------------------------------------------------
   * jQuery
   * ------------------------------------------------------------------------
   * add .Tooltip to jQuery only if jQuery is present
   */ defineJQueryPlugin(Tooltip);
  /**
   * --------------------------------------------------------------------------
   * Bootstrap (v5.1.3): popover.js
   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
   * --------------------------------------------------------------------------
   */ /**
   * ------------------------------------------------------------------------
   * Constants
   * ------------------------------------------------------------------------
   */ const NAME$3 = 'popover';
  const DATA_KEY$3 = 'bs.popover';
  const EVENT_KEY$3 = `.${DATA_KEY$3}`;
  const CLASS_PREFIX = 'bs-popover';
  const Default$2 = {
      ...Tooltip.Default,
      placement: 'right',
      offset: [
          0,
          8
      ],
      trigger: 'click',
      content: '',
      template: "<div class=\"popover\" role=\"tooltip\"><div class=\"popover-arrow\"></div><h3 class=\"popover-header\"></h3><div class=\"popover-body\"></div></div>"
  };
  const DefaultType$2 = {
      ...Tooltip.DefaultType,
      content: '(string|element|function)'
  };
  const Event$1 = {
      HIDE: `hide${EVENT_KEY$3}`,
      HIDDEN: `hidden${EVENT_KEY$3}`,
      SHOW: `show${EVENT_KEY$3}`,
      SHOWN: `shown${EVENT_KEY$3}`,
      INSERTED: `inserted${EVENT_KEY$3}`,
      CLICK: `click${EVENT_KEY$3}`,
      FOCUSIN: `focusin${EVENT_KEY$3}`,
      FOCUSOUT: `focusout${EVENT_KEY$3}`,
      MOUSEENTER: `mouseenter${EVENT_KEY$3}`,
      MOUSELEAVE: `mouseleave${EVENT_KEY$3}`
  };
  const SELECTOR_TITLE = '.popover-header';
  const SELECTOR_CONTENT = '.popover-body';
  /**
   * ------------------------------------------------------------------------
   * Class Definition
   * ------------------------------------------------------------------------
   */ class Popover extends Tooltip {
      // Getters
      static get Default() {
          return Default$2;
      }
      static get NAME() {
          return NAME$3;
      }
      static get Event() {
          return Event$1;
      }
      static get DefaultType() {
          return DefaultType$2;
      }
      isWithContent() {
          return this.getTitle() || this._getContent();
      }
      setContent(tip) {
          this._sanitizeAndSetContent(tip, this.getTitle(), SELECTOR_TITLE);
          this._sanitizeAndSetContent(tip, this._getContent(), SELECTOR_CONTENT);
      }
      _getContent() {
          return this._resolvePossibleFunction(this._config.content);
      }
      _getBasicClassPrefix() {
          return CLASS_PREFIX;
      }
      static jQueryInterface(config) {
          return this.each(function() {
              const data = Popover.getOrCreateInstance(this, config);
              if (typeof config === 'string') {
                  if (typeof data[config] === 'undefined') throw new TypeError(`No method named "${config}"`);
                  data[config]();
              }
          });
      }
  }
  /**
   * ------------------------------------------------------------------------
   * jQuery
   * ------------------------------------------------------------------------
   * add .Popover to jQuery only if jQuery is present
   */ defineJQueryPlugin(Popover);
  /**
   * --------------------------------------------------------------------------
   * Bootstrap (v5.1.3): scrollspy.js
   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
   * --------------------------------------------------------------------------
   */ /**
   * ------------------------------------------------------------------------
   * Constants
   * ------------------------------------------------------------------------
   */ const NAME$2 = 'scrollspy';
  const DATA_KEY$2 = 'bs.scrollspy';
  const EVENT_KEY$2 = `.${DATA_KEY$2}`;
  const DATA_API_KEY$1 = '.data-api';
  const Default$1 = {
      offset: 10,
      method: 'auto',
      target: ''
  };
  const DefaultType$1 = {
      offset: 'number',
      method: 'string',
      target: '(string|element)'
  };
  const EVENT_ACTIVATE = `activate${EVENT_KEY$2}`;
  const EVENT_SCROLL = `scroll${EVENT_KEY$2}`;
  const EVENT_LOAD_DATA_API = `load${EVENT_KEY$2}${DATA_API_KEY$1}`;
  const CLASS_NAME_DROPDOWN_ITEM = 'dropdown-item';
  const CLASS_NAME_ACTIVE$1 = 'active';
  const SELECTOR_DATA_SPY = '[data-bs-spy="scroll"]';
  const SELECTOR_NAV_LIST_GROUP$1 = '.nav, .list-group';
  const SELECTOR_NAV_LINKS = '.nav-link';
  const SELECTOR_NAV_ITEMS = '.nav-item';
  const SELECTOR_LIST_ITEMS = '.list-group-item';
  const SELECTOR_LINK_ITEMS = `${SELECTOR_NAV_LINKS}, ${SELECTOR_LIST_ITEMS}, .${CLASS_NAME_DROPDOWN_ITEM}`;
  const SELECTOR_DROPDOWN$1 = '.dropdown';
  const SELECTOR_DROPDOWN_TOGGLE$1 = '.dropdown-toggle';
  const METHOD_OFFSET = 'offset';
  const METHOD_POSITION = 'position';
  /**
   * ------------------------------------------------------------------------
   * Class Definition
   * ------------------------------------------------------------------------
   */ class ScrollSpy extends BaseComponent {
      static get Default() {
          return Default$1;
      }
      static get NAME() {
          return NAME$2;
      }
      refresh() {
          const autoMethod = this._scrollElement === this._scrollElement.window ? METHOD_OFFSET : METHOD_POSITION;
          const offsetMethod = this._config.method === 'auto' ? autoMethod : this._config.method;
          const offsetBase = offsetMethod === METHOD_POSITION ? this._getScrollTop() : 0;
          this._offsets = [];
          this._targets = [];
          this._scrollHeight = this._getScrollHeight();
          const targets = SelectorEngine.find(SELECTOR_LINK_ITEMS, this._config.target);
          targets.map((element)=>{
              const targetSelector = getSelectorFromElement(element);
              const target = targetSelector ? SelectorEngine.findOne(targetSelector) : null;
              if (target) {
                  const targetBCR = target.getBoundingClientRect();
                  if (targetBCR.width || targetBCR.height) return [
                      Manipulator[offsetMethod](target).top + offsetBase,
                      targetSelector
                  ];
              }
              return null;
          }).filter((item)=>item
          ).sort((a, b)=>a[0] - b[0]
          ).forEach((item)=>{
              this._offsets.push(item[0]);
              this._targets.push(item[1]);
          });
      }
      dispose() {
          EventHandler.off(this._scrollElement, EVENT_KEY$2);
          super.dispose();
      }
      _getConfig(config) {
          config = {
              ...Default$1,
              ...Manipulator.getDataAttributes(this._element),
              ...typeof config === 'object' && config ? config : {
              }
          };
          config.target = getElement(config.target) || document.documentElement;
          typeCheckConfig(NAME$2, config, DefaultType$1);
          return config;
      }
      _getScrollTop() {
          return this._scrollElement === window ? this._scrollElement.pageYOffset : this._scrollElement.scrollTop;
      }
      _getScrollHeight() {
          return this._scrollElement.scrollHeight || Math.max(document.body.scrollHeight, document.documentElement.scrollHeight);
      }
      _getOffsetHeight() {
          return this._scrollElement === window ? window.innerHeight : this._scrollElement.getBoundingClientRect().height;
      }
      _process() {
          const scrollTop = this._getScrollTop() + this._config.offset;
          const scrollHeight = this._getScrollHeight();
          const maxScroll = this._config.offset + scrollHeight - this._getOffsetHeight();
          if (this._scrollHeight !== scrollHeight) this.refresh();
          if (scrollTop >= maxScroll) {
              const target = this._targets[this._targets.length - 1];
              if (this._activeTarget !== target) this._activate(target);
              return;
          }
          if (this._activeTarget && scrollTop < this._offsets[0] && this._offsets[0] > 0) {
              this._activeTarget = null;
              this._clear();
              return;
          }
          for(let i = this._offsets.length; i--;){
              const isActiveTarget = this._activeTarget !== this._targets[i] && scrollTop >= this._offsets[i] && (typeof this._offsets[i + 1] === 'undefined' || scrollTop < this._offsets[i + 1]);
              if (isActiveTarget) this._activate(this._targets[i]);
          }
      }
      _activate(target) {
          this._activeTarget = target;
          this._clear();
          const queries = SELECTOR_LINK_ITEMS.split(',').map((selector)=>`${selector}[data-bs-target="${target}"],${selector}[href="${target}"]`
          );
          const link = SelectorEngine.findOne(queries.join(','), this._config.target);
          link.classList.add(CLASS_NAME_ACTIVE$1);
          if (link.classList.contains(CLASS_NAME_DROPDOWN_ITEM)) SelectorEngine.findOne(SELECTOR_DROPDOWN_TOGGLE$1, link.closest(SELECTOR_DROPDOWN$1)).classList.add(CLASS_NAME_ACTIVE$1);
          else SelectorEngine.parents(link, SELECTOR_NAV_LIST_GROUP$1).forEach((listGroup)=>{
              // Set triggered links parents as active
              // With both <ul> and <nav> markup a parent is the previous sibling of any nav ancestor
              SelectorEngine.prev(listGroup, `${SELECTOR_NAV_LINKS}, ${SELECTOR_LIST_ITEMS}`).forEach((item)=>item.classList.add(CLASS_NAME_ACTIVE$1)
              ); // Handle special case when .nav-link is inside .nav-item
              SelectorEngine.prev(listGroup, SELECTOR_NAV_ITEMS).forEach((navItem)=>{
                  SelectorEngine.children(navItem, SELECTOR_NAV_LINKS).forEach((item)=>item.classList.add(CLASS_NAME_ACTIVE$1)
                  );
              });
          });
          EventHandler.trigger(this._scrollElement, EVENT_ACTIVATE, {
              relatedTarget: target
          });
      }
      _clear() {
          SelectorEngine.find(SELECTOR_LINK_ITEMS, this._config.target).filter((node)=>node.classList.contains(CLASS_NAME_ACTIVE$1)
          ).forEach((node)=>node.classList.remove(CLASS_NAME_ACTIVE$1)
          );
      }
      static jQueryInterface(config) {
          return this.each(function() {
              const data = ScrollSpy.getOrCreateInstance(this, config);
              if (typeof config !== 'string') return;
              if (typeof data[config] === 'undefined') throw new TypeError(`No method named "${config}"`);
              data[config]();
          });
      }
      constructor(element, config){
          super(element);
          this._scrollElement = this._element.tagName === 'BODY' ? window : this._element;
          this._config = this._getConfig(config);
          this._offsets = [];
          this._targets = [];
          this._activeTarget = null;
          this._scrollHeight = 0;
          EventHandler.on(this._scrollElement, EVENT_SCROLL, ()=>this._process()
          );
          this.refresh();
          this._process();
      }
  }
  /**
   * ------------------------------------------------------------------------
   * Data Api implementation
   * ------------------------------------------------------------------------
   */ EventHandler.on(window, EVENT_LOAD_DATA_API, ()=>{
      SelectorEngine.find(SELECTOR_DATA_SPY).forEach((spy)=>new ScrollSpy(spy)
      );
  });
  /**
   * ------------------------------------------------------------------------
   * jQuery
   * ------------------------------------------------------------------------
   * add .ScrollSpy to jQuery only if jQuery is present
   */ defineJQueryPlugin(ScrollSpy);
  /**
   * --------------------------------------------------------------------------
   * Bootstrap (v5.1.3): tab.js
   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
   * --------------------------------------------------------------------------
   */ /**
   * ------------------------------------------------------------------------
   * Constants
   * ------------------------------------------------------------------------
   */ const NAME$1 = 'tab';
  const DATA_KEY$1 = 'bs.tab';
  const EVENT_KEY$1 = `.${DATA_KEY$1}`;
  const DATA_API_KEY = '.data-api';
  const EVENT_HIDE$1 = `hide${EVENT_KEY$1}`;
  const EVENT_HIDDEN$1 = `hidden${EVENT_KEY$1}`;
  const EVENT_SHOW$1 = `show${EVENT_KEY$1}`;
  const EVENT_SHOWN$1 = `shown${EVENT_KEY$1}`;
  const EVENT_CLICK_DATA_API = `click${EVENT_KEY$1}${DATA_API_KEY}`;
  const CLASS_NAME_DROPDOWN_MENU = 'dropdown-menu';
  const CLASS_NAME_ACTIVE = 'active';
  const CLASS_NAME_FADE$1 = 'fade';
  const CLASS_NAME_SHOW$1 = 'show';
  const SELECTOR_DROPDOWN = '.dropdown';
  const SELECTOR_NAV_LIST_GROUP = '.nav, .list-group';
  const SELECTOR_ACTIVE = '.active';
  const SELECTOR_ACTIVE_UL = ':scope > li > .active';
  const SELECTOR_DATA_TOGGLE = '[data-bs-toggle="tab"], [data-bs-toggle="pill"], [data-bs-toggle="list"]';
  const SELECTOR_DROPDOWN_TOGGLE = '.dropdown-toggle';
  const SELECTOR_DROPDOWN_ACTIVE_CHILD = ':scope > .dropdown-menu .active';
  /**
   * ------------------------------------------------------------------------
   * Class Definition
   * ------------------------------------------------------------------------
   */ class Tab extends BaseComponent {
      // Getters
      static get NAME() {
          return NAME$1;
      }
      show() {
          if (this._element.parentNode && this._element.parentNode.nodeType === Node.ELEMENT_NODE && this._element.classList.contains(CLASS_NAME_ACTIVE)) return;
          let previous;
          const target = getElementFromSelector(this._element);
          const listElement = this._element.closest(SELECTOR_NAV_LIST_GROUP);
          if (listElement) {
              const itemSelector = listElement.nodeName === 'UL' || listElement.nodeName === 'OL' ? SELECTOR_ACTIVE_UL : SELECTOR_ACTIVE;
              previous = SelectorEngine.find(itemSelector, listElement);
              previous = previous[previous.length - 1];
          }
          const hideEvent = previous ? EventHandler.trigger(previous, EVENT_HIDE$1, {
              relatedTarget: this._element
          }) : null;
          const showEvent = EventHandler.trigger(this._element, EVENT_SHOW$1, {
              relatedTarget: previous
          });
          if (showEvent.defaultPrevented || hideEvent !== null && hideEvent.defaultPrevented) return;
          this._activate(this._element, listElement);
          const complete = ()=>{
              EventHandler.trigger(previous, EVENT_HIDDEN$1, {
                  relatedTarget: this._element
              });
              EventHandler.trigger(this._element, EVENT_SHOWN$1, {
                  relatedTarget: previous
              });
          };
          if (target) this._activate(target, target.parentNode, complete);
          else complete();
      }
      _activate(element, container, callback) {
          const activeElements = container && (container.nodeName === 'UL' || container.nodeName === 'OL') ? SelectorEngine.find(SELECTOR_ACTIVE_UL, container) : SelectorEngine.children(container, SELECTOR_ACTIVE);
          const active = activeElements[0];
          const isTransitioning = callback && active && active.classList.contains(CLASS_NAME_FADE$1);
          const complete = ()=>this._transitionComplete(element, active, callback)
          ;
          if (active && isTransitioning) {
              active.classList.remove(CLASS_NAME_SHOW$1);
              this._queueCallback(complete, element, true);
          } else complete();
      }
      _transitionComplete(element, active, callback) {
          if (active) {
              active.classList.remove(CLASS_NAME_ACTIVE);
              const dropdownChild = SelectorEngine.findOne(SELECTOR_DROPDOWN_ACTIVE_CHILD, active.parentNode);
              if (dropdownChild) dropdownChild.classList.remove(CLASS_NAME_ACTIVE);
              if (active.getAttribute('role') === 'tab') active.setAttribute('aria-selected', false);
          }
          element.classList.add(CLASS_NAME_ACTIVE);
          if (element.getAttribute('role') === 'tab') element.setAttribute('aria-selected', true);
          reflow(element);
          if (element.classList.contains(CLASS_NAME_FADE$1)) element.classList.add(CLASS_NAME_SHOW$1);
          let parent = element.parentNode;
          if (parent && parent.nodeName === 'LI') parent = parent.parentNode;
          if (parent && parent.classList.contains(CLASS_NAME_DROPDOWN_MENU)) {
              const dropdownElement = element.closest(SELECTOR_DROPDOWN);
              if (dropdownElement) SelectorEngine.find(SELECTOR_DROPDOWN_TOGGLE, dropdownElement).forEach((dropdown)=>dropdown.classList.add(CLASS_NAME_ACTIVE)
              );
              element.setAttribute('aria-expanded', true);
          }
          if (callback) callback();
      }
      static jQueryInterface(config) {
          return this.each(function() {
              const data = Tab.getOrCreateInstance(this);
              if (typeof config === 'string') {
                  if (typeof data[config] === 'undefined') throw new TypeError(`No method named "${config}"`);
                  data[config]();
              }
          });
      }
  }
  /**
   * ------------------------------------------------------------------------
   * Data Api implementation
   * ------------------------------------------------------------------------
   */ EventHandler.on(document, EVENT_CLICK_DATA_API, SELECTOR_DATA_TOGGLE, function(event) {
      if ([
          'A',
          'AREA'
      ].includes(this.tagName)) event.preventDefault();
      if (isDisabled(this)) return;
      const data = Tab.getOrCreateInstance(this);
      data.show();
  });
  /**
   * ------------------------------------------------------------------------
   * jQuery
   * ------------------------------------------------------------------------
   * add .Tab to jQuery only if jQuery is present
   */ defineJQueryPlugin(Tab);
  /**
   * --------------------------------------------------------------------------
   * Bootstrap (v5.1.3): toast.js
   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
   * --------------------------------------------------------------------------
   */ /**
   * ------------------------------------------------------------------------
   * Constants
   * ------------------------------------------------------------------------
   */ const NAME = 'toast';
  const DATA_KEY = 'bs.toast';
  const EVENT_KEY = `.${DATA_KEY}`;
  const EVENT_MOUSEOVER = `mouseover${EVENT_KEY}`;
  const EVENT_MOUSEOUT = `mouseout${EVENT_KEY}`;
  const EVENT_FOCUSIN = `focusin${EVENT_KEY}`;
  const EVENT_FOCUSOUT = `focusout${EVENT_KEY}`;
  const EVENT_HIDE = `hide${EVENT_KEY}`;
  const EVENT_HIDDEN = `hidden${EVENT_KEY}`;
  const EVENT_SHOW = `show${EVENT_KEY}`;
  const EVENT_SHOWN = `shown${EVENT_KEY}`;
  const CLASS_NAME_FADE = 'fade';
  const CLASS_NAME_HIDE = 'hide'; // @deprecated - kept here only for backwards compatibility
  const CLASS_NAME_SHOW = 'show';
  const CLASS_NAME_SHOWING = 'showing';
  const DefaultType = {
      animation: 'boolean',
      autohide: 'boolean',
      delay: 'number'
  };
  const Default = {
      animation: true,
      autohide: true,
      delay: 5000
  };
  /**
   * ------------------------------------------------------------------------
   * Class Definition
   * ------------------------------------------------------------------------
   */ class Toast extends BaseComponent {
      static get DefaultType() {
          return DefaultType;
      }
      static get Default() {
          return Default;
      }
      static get NAME() {
          return NAME;
      }
      show() {
          const showEvent = EventHandler.trigger(this._element, EVENT_SHOW);
          if (showEvent.defaultPrevented) return;
          this._clearTimeout();
          if (this._config.animation) this._element.classList.add(CLASS_NAME_FADE);
          const complete = ()=>{
              this._element.classList.remove(CLASS_NAME_SHOWING);
              EventHandler.trigger(this._element, EVENT_SHOWN);
              this._maybeScheduleHide();
          };
          this._element.classList.remove(CLASS_NAME_HIDE); // @deprecated
          reflow(this._element);
          this._element.classList.add(CLASS_NAME_SHOW);
          this._element.classList.add(CLASS_NAME_SHOWING);
          this._queueCallback(complete, this._element, this._config.animation);
      }
      hide() {
          if (!this._element.classList.contains(CLASS_NAME_SHOW)) return;
          const hideEvent = EventHandler.trigger(this._element, EVENT_HIDE);
          if (hideEvent.defaultPrevented) return;
          const complete = ()=>{
              this._element.classList.add(CLASS_NAME_HIDE); // @deprecated
              this._element.classList.remove(CLASS_NAME_SHOWING);
              this._element.classList.remove(CLASS_NAME_SHOW);
              EventHandler.trigger(this._element, EVENT_HIDDEN);
          };
          this._element.classList.add(CLASS_NAME_SHOWING);
          this._queueCallback(complete, this._element, this._config.animation);
      }
      dispose() {
          this._clearTimeout();
          if (this._element.classList.contains(CLASS_NAME_SHOW)) this._element.classList.remove(CLASS_NAME_SHOW);
          super.dispose();
      }
      _getConfig(config) {
          config = {
              ...Default,
              ...Manipulator.getDataAttributes(this._element),
              ...typeof config === 'object' && config ? config : {
              }
          };
          typeCheckConfig(NAME, config, this.constructor.DefaultType);
          return config;
      }
      _maybeScheduleHide() {
          if (!this._config.autohide) return;
          if (this._hasMouseInteraction || this._hasKeyboardInteraction) return;
          this._timeout = setTimeout(()=>{
              this.hide();
          }, this._config.delay);
      }
      _onInteraction(event, isInteracting) {
          switch(event.type){
              case 'mouseover':
              case 'mouseout':
                  this._hasMouseInteraction = isInteracting;
                  break;
              case 'focusin':
              case 'focusout':
                  this._hasKeyboardInteraction = isInteracting;
                  break;
          }
          if (isInteracting) {
              this._clearTimeout();
              return;
          }
          const nextElement = event.relatedTarget;
          if (this._element === nextElement || this._element.contains(nextElement)) return;
          this._maybeScheduleHide();
      }
      _setListeners() {
          EventHandler.on(this._element, EVENT_MOUSEOVER, (event)=>this._onInteraction(event, true)
          );
          EventHandler.on(this._element, EVENT_MOUSEOUT, (event)=>this._onInteraction(event, false)
          );
          EventHandler.on(this._element, EVENT_FOCUSIN, (event)=>this._onInteraction(event, true)
          );
          EventHandler.on(this._element, EVENT_FOCUSOUT, (event)=>this._onInteraction(event, false)
          );
      }
      _clearTimeout() {
          clearTimeout(this._timeout);
          this._timeout = null;
      }
      static jQueryInterface(config) {
          return this.each(function() {
              const data = Toast.getOrCreateInstance(this, config);
              if (typeof config === 'string') {
                  if (typeof data[config] === 'undefined') throw new TypeError(`No method named "${config}"`);
                  data[config](this);
              }
          });
      }
      constructor(element, config){
          super(element);
          this._config = this._getConfig(config);
          this._timeout = null;
          this._hasMouseInteraction = false;
          this._hasKeyboardInteraction = false;
          this._setListeners();
      }
  }
  enableDismissTrigger(Toast);
  /**
   * ------------------------------------------------------------------------
   * jQuery
   * ------------------------------------------------------------------------
   * add .Toast to jQuery only if jQuery is present
   */ defineJQueryPlugin(Toast);
  
  },{"@popperjs/core":"gT5OD","@parcel/transformer-js/src/esmodule-helpers.js":"6jXwo"}],"gT5OD":[function(require,module,exports) {
  var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  parcelHelpers.export(exports, "popperGenerator", ()=>_createPopperJs.popperGenerator
  ) // eslint-disable-next-line import/no-unused-modules
  ;
  parcelHelpers.export(exports, "detectOverflow", ()=>_createPopperJs.detectOverflow
  );
  parcelHelpers.export(exports, "createPopperBase", ()=>_createPopperJs.createPopper
  );
  parcelHelpers.export(exports, "createPopper", ()=>_popperJs.createPopper
  ) // eslint-disable-next-line import/no-unused-modules
  ;
  parcelHelpers.export(exports, "createPopperLite", ()=>_popperLiteJs.createPopper
  );
  var _enumsJs = require("./enums.js");
  parcelHelpers.exportAll(_enumsJs, exports);
  var _indexJs = require("./modifiers/index.js"); // eslint-disable-next-line import/no-unused-modules
  parcelHelpers.exportAll(_indexJs, exports);
  var _createPopperJs = require("./createPopper.js");
  var _popperJs = require("./popper.js");
  var _popperLiteJs = require("./popper-lite.js");
  
  },{"./enums.js":"qxiOM","./modifiers/index.js":"bSOA6","./createPopper.js":"g1Jyk","./popper.js":"dg9kH","./popper-lite.js":"bxdRR","@parcel/transformer-js/src/esmodule-helpers.js":"6jXwo"}],"qxiOM":[function(require,module,exports) {
  var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  parcelHelpers.export(exports, "top", ()=>top
  );
  parcelHelpers.export(exports, "bottom", ()=>bottom
  );
  parcelHelpers.export(exports, "right", ()=>right
  );
  parcelHelpers.export(exports, "left", ()=>left
  );
  parcelHelpers.export(exports, "auto", ()=>auto
  );
  parcelHelpers.export(exports, "basePlacements", ()=>basePlacements
  );
  parcelHelpers.export(exports, "start", ()=>start
  );
  parcelHelpers.export(exports, "end", ()=>end
  );
  parcelHelpers.export(exports, "clippingParents", ()=>clippingParents
  );
  parcelHelpers.export(exports, "viewport", ()=>viewport
  );
  parcelHelpers.export(exports, "popper", ()=>popper
  );
  parcelHelpers.export(exports, "reference", ()=>reference
  );
  parcelHelpers.export(exports, "variationPlacements", ()=>variationPlacements
  );
  parcelHelpers.export(exports, "placements", ()=>placements
  );
  parcelHelpers.export(exports, "beforeRead", ()=>beforeRead
  );
  parcelHelpers.export(exports, "read", ()=>read
  );
  parcelHelpers.export(exports, "afterRead", ()=>afterRead
  );
  parcelHelpers.export(exports, "beforeMain", ()=>beforeMain
  );
  parcelHelpers.export(exports, "main", ()=>main
  );
  parcelHelpers.export(exports, "afterMain", ()=>afterMain
  );
  parcelHelpers.export(exports, "beforeWrite", ()=>beforeWrite
  );
  parcelHelpers.export(exports, "write", ()=>write
  );
  parcelHelpers.export(exports, "afterWrite", ()=>afterWrite
  );
  parcelHelpers.export(exports, "modifierPhases", ()=>modifierPhases
  );
  var top = 'top';
  var bottom = 'bottom';
  var right = 'right';
  var left = 'left';
  var auto = 'auto';
  var basePlacements = [
      top,
      bottom,
      right,
      left
  ];
  var start = 'start';
  var end = 'end';
  var clippingParents = 'clippingParents';
  var viewport = 'viewport';
  var popper = 'popper';
  var reference = 'reference';
  var variationPlacements = /*#__PURE__*/ basePlacements.reduce(function(acc, placement) {
      return acc.concat([
          placement + "-" + start,
          placement + "-" + end
      ]);
  }, []);
  var placements = /*#__PURE__*/ [].concat(basePlacements, [
      auto
  ]).reduce(function(acc, placement) {
      return acc.concat([
          placement,
          placement + "-" + start,
          placement + "-" + end
      ]);
  }, []); // modifiers that need to read the DOM
  var beforeRead = 'beforeRead';
  var read = 'read';
  var afterRead = 'afterRead'; // pure-logic modifiers
  var beforeMain = 'beforeMain';
  var main = 'main';
  var afterMain = 'afterMain'; // modifier with the purpose to write to the DOM (or write into a framework state)
  var beforeWrite = 'beforeWrite';
  var write = 'write';
  var afterWrite = 'afterWrite';
  var modifierPhases = [
      beforeRead,
      read,
      afterRead,
      beforeMain,
      main,
      afterMain,
      beforeWrite,
      write,
      afterWrite
  ];
  
  },{"@parcel/transformer-js/src/esmodule-helpers.js":"6jXwo"}],"6jXwo":[function(require,module,exports) {
  exports.interopDefault = function(a) {
      return a && a.__esModule ? a : {
          default: a
      };
  };
  exports.defineInteropFlag = function(a) {
      Object.defineProperty(a, '__esModule', {
          value: true
      });
  };
  exports.exportAll = function(source, dest) {
      Object.keys(source).forEach(function(key) {
          if (key === 'default' || key === '__esModule' || dest.hasOwnProperty(key)) return;
          Object.defineProperty(dest, key, {
              enumerable: true,
              get: function() {
                  return source[key];
              }
          });
      });
      return dest;
  };
  exports.export = function(dest, destName, get) {
      Object.defineProperty(dest, destName, {
          enumerable: true,
          get: get
      });
  };
  
  },{}],"bSOA6":[function(require,module,exports) {
  var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  parcelHelpers.export(exports, "applyStyles", ()=>_applyStylesJsDefault.default
  );
  parcelHelpers.export(exports, "arrow", ()=>_arrowJsDefault.default
  );
  parcelHelpers.export(exports, "computeStyles", ()=>_computeStylesJsDefault.default
  );
  parcelHelpers.export(exports, "eventListeners", ()=>_eventListenersJsDefault.default
  );
  parcelHelpers.export(exports, "flip", ()=>_flipJsDefault.default
  );
  parcelHelpers.export(exports, "hide", ()=>_hideJsDefault.default
  );
  parcelHelpers.export(exports, "offset", ()=>_offsetJsDefault.default
  );
  parcelHelpers.export(exports, "popperOffsets", ()=>_popperOffsetsJsDefault.default
  );
  parcelHelpers.export(exports, "preventOverflow", ()=>_preventOverflowJsDefault.default
  );
  var _applyStylesJs = require("./applyStyles.js");
  var _applyStylesJsDefault = parcelHelpers.interopDefault(_applyStylesJs);
  var _arrowJs = require("./arrow.js");
  var _arrowJsDefault = parcelHelpers.interopDefault(_arrowJs);
  var _computeStylesJs = require("./computeStyles.js");
  var _computeStylesJsDefault = parcelHelpers.interopDefault(_computeStylesJs);
  var _eventListenersJs = require("./eventListeners.js");
  var _eventListenersJsDefault = parcelHelpers.interopDefault(_eventListenersJs);
  var _flipJs = require("./flip.js");
  var _flipJsDefault = parcelHelpers.interopDefault(_flipJs);
  var _hideJs = require("./hide.js");
  var _hideJsDefault = parcelHelpers.interopDefault(_hideJs);
  var _offsetJs = require("./offset.js");
  var _offsetJsDefault = parcelHelpers.interopDefault(_offsetJs);
  var _popperOffsetsJs = require("./popperOffsets.js");
  var _popperOffsetsJsDefault = parcelHelpers.interopDefault(_popperOffsetsJs);
  var _preventOverflowJs = require("./preventOverflow.js");
  var _preventOverflowJsDefault = parcelHelpers.interopDefault(_preventOverflowJs);
  
  },{"./applyStyles.js":"cPbqH","./arrow.js":"6eCC1","./computeStyles.js":"3aFNf","./eventListeners.js":"lGj0Q","./flip.js":"bwIX2","./hide.js":"jeIWi","./offset.js":"4yTnb","./popperOffsets.js":"jCAMm","./preventOverflow.js":"gAFAP","@parcel/transformer-js/src/esmodule-helpers.js":"6jXwo"}],"cPbqH":[function(require,module,exports) {
  var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  var _getNodeNameJs = require("../dom-utils/getNodeName.js");
  var _getNodeNameJsDefault = parcelHelpers.interopDefault(_getNodeNameJs);
  var _instanceOfJs = require("../dom-utils/instanceOf.js"); // This modifier takes the styles prepared by the `computeStyles` modifier
  // and applies them to the HTMLElements such as popper and arrow
  function applyStyles(_ref) {
      var state = _ref.state;
      Object.keys(state.elements).forEach(function(name1) {
          var style = state.styles[name1] || {
          };
          var attributes = state.attributes[name1] || {
          };
          var element = state.elements[name1]; // arrow is optional + virtual elements
          if (!_instanceOfJs.isHTMLElement(element) || !_getNodeNameJsDefault.default(element)) return;
           // Flow doesn't support to extend this property, but it's the most
          // effective way to apply styles to an HTMLElement
          // $FlowFixMe[cannot-write]
          Object.assign(element.style, style);
          Object.keys(attributes).forEach(function(name) {
              var value = attributes[name];
              if (value === false) element.removeAttribute(name);
              else element.setAttribute(name, value === true ? '' : value);
          });
      });
  }
  function effect(_ref2) {
      var state = _ref2.state;
      var initialStyles = {
          popper: {
              position: state.options.strategy,
              left: '0',
              top: '0',
              margin: '0'
          },
          arrow: {
              position: 'absolute'
          },
          reference: {
          }
      };
      Object.assign(state.elements.popper.style, initialStyles.popper);
      state.styles = initialStyles;
      if (state.elements.arrow) Object.assign(state.elements.arrow.style, initialStyles.arrow);
      return function() {
          Object.keys(state.elements).forEach(function(name) {
              var element = state.elements[name];
              var attributes = state.attributes[name] || {
              };
              var styleProperties = Object.keys(state.styles.hasOwnProperty(name) ? state.styles[name] : initialStyles[name]); // Set all values to an empty string to unset them
              var style1 = styleProperties.reduce(function(style, property) {
                  style[property] = '';
                  return style;
              }, {
              }); // arrow is optional + virtual elements
              if (!_instanceOfJs.isHTMLElement(element) || !_getNodeNameJsDefault.default(element)) return;
              Object.assign(element.style, style1);
              Object.keys(attributes).forEach(function(attribute) {
                  element.removeAttribute(attribute);
              });
          });
      };
  } // eslint-disable-next-line import/no-unused-modules
  exports.default = {
      name: 'applyStyles',
      enabled: true,
      phase: 'write',
      fn: applyStyles,
      effect: effect,
      requires: [
          'computeStyles'
      ]
  };
  
  },{"../dom-utils/getNodeName.js":"dO1na","../dom-utils/instanceOf.js":"1C4Db","@parcel/transformer-js/src/esmodule-helpers.js":"6jXwo"}],"dO1na":[function(require,module,exports) {
  var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  function getNodeName(element) {
      return element ? (element.nodeName || '').toLowerCase() : null;
  }
  exports.default = getNodeName;
  
  },{"@parcel/transformer-js/src/esmodule-helpers.js":"6jXwo"}],"1C4Db":[function(require,module,exports) {
  var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  parcelHelpers.export(exports, "isElement", ()=>isElement
  );
  parcelHelpers.export(exports, "isHTMLElement", ()=>isHTMLElement
  );
  parcelHelpers.export(exports, "isShadowRoot", ()=>isShadowRoot
  );
  var _getWindowJs = require("./getWindow.js");
  var _getWindowJsDefault = parcelHelpers.interopDefault(_getWindowJs);
  function isElement(node) {
      var OwnElement = _getWindowJsDefault.default(node).Element;
      return node instanceof OwnElement || node instanceof Element;
  }
  function isHTMLElement(node) {
      var OwnElement = _getWindowJsDefault.default(node).HTMLElement;
      return node instanceof OwnElement || node instanceof HTMLElement;
  }
  function isShadowRoot(node) {
      // IE 11 has no ShadowRoot
      if (typeof ShadowRoot === 'undefined') return false;
      var OwnElement = _getWindowJsDefault.default(node).ShadowRoot;
      return node instanceof OwnElement || node instanceof ShadowRoot;
  }
  
  },{"./getWindow.js":"kY3PJ","@parcel/transformer-js/src/esmodule-helpers.js":"6jXwo"}],"kY3PJ":[function(require,module,exports) {
  var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  function getWindow(node) {
      if (node == null) return window;
      if (node.toString() !== '[object Window]') {
          var ownerDocument = node.ownerDocument;
          return ownerDocument ? ownerDocument.defaultView || window : window;
      }
      return node;
  }
  exports.default = getWindow;
  
  },{"@parcel/transformer-js/src/esmodule-helpers.js":"6jXwo"}],"6eCC1":[function(require,module,exports) {
  var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  var _getBasePlacementJs = require("../utils/getBasePlacement.js");
  var _getBasePlacementJsDefault = parcelHelpers.interopDefault(_getBasePlacementJs);
  var _getLayoutRectJs = require("../dom-utils/getLayoutRect.js");
  var _getLayoutRectJsDefault = parcelHelpers.interopDefault(_getLayoutRectJs);
  var _containsJs = require("../dom-utils/contains.js");
  var _containsJsDefault = parcelHelpers.interopDefault(_containsJs);
  var _getOffsetParentJs = require("../dom-utils/getOffsetParent.js");
  var _getOffsetParentJsDefault = parcelHelpers.interopDefault(_getOffsetParentJs);
  var _getMainAxisFromPlacementJs = require("../utils/getMainAxisFromPlacement.js");
  var _getMainAxisFromPlacementJsDefault = parcelHelpers.interopDefault(_getMainAxisFromPlacementJs);
  var _withinJs = require("../utils/within.js");
  var _mergePaddingObjectJs = require("../utils/mergePaddingObject.js");
  var _mergePaddingObjectJsDefault = parcelHelpers.interopDefault(_mergePaddingObjectJs);
  var _expandToHashMapJs = require("../utils/expandToHashMap.js");
  var _expandToHashMapJsDefault = parcelHelpers.interopDefault(_expandToHashMapJs);
  var _enumsJs = require("../enums.js");
  var _instanceOfJs = require("../dom-utils/instanceOf.js"); // eslint-disable-next-line import/no-unused-modules
  var toPaddingObject = function toPaddingObject(padding, state) {
      padding = typeof padding === 'function' ? padding(Object.assign({
      }, state.rects, {
          placement: state.placement
      })) : padding;
      return _mergePaddingObjectJsDefault.default(typeof padding !== 'number' ? padding : _expandToHashMapJsDefault.default(padding, _enumsJs.basePlacements));
  };
  function arrow(_ref) {
      var _state$modifiersData$;
      var state = _ref.state, name = _ref.name, options = _ref.options;
      var arrowElement = state.elements.arrow;
      var popperOffsets = state.modifiersData.popperOffsets;
      var basePlacement = _getBasePlacementJsDefault.default(state.placement);
      var axis = _getMainAxisFromPlacementJsDefault.default(basePlacement);
      var isVertical = [
          _enumsJs.left,
          _enumsJs.right
      ].indexOf(basePlacement) >= 0;
      var len = isVertical ? 'height' : 'width';
      if (!arrowElement || !popperOffsets) return;
      var paddingObject = toPaddingObject(options.padding, state);
      var arrowRect = _getLayoutRectJsDefault.default(arrowElement);
      var minProp = axis === 'y' ? _enumsJs.top : _enumsJs.left;
      var maxProp = axis === 'y' ? _enumsJs.bottom : _enumsJs.right;
      var endDiff = state.rects.reference[len] + state.rects.reference[axis] - popperOffsets[axis] - state.rects.popper[len];
      var startDiff = popperOffsets[axis] - state.rects.reference[axis];
      var arrowOffsetParent = _getOffsetParentJsDefault.default(arrowElement);
      var clientSize = arrowOffsetParent ? axis === 'y' ? arrowOffsetParent.clientHeight || 0 : arrowOffsetParent.clientWidth || 0 : 0;
      var centerToReference = endDiff / 2 - startDiff / 2; // Make sure the arrow doesn't overflow the popper if the center point is
      // outside of the popper bounds
      var min = paddingObject[minProp];
      var max = clientSize - arrowRect[len] - paddingObject[maxProp];
      var center = clientSize / 2 - arrowRect[len] / 2 + centerToReference;
      var offset = _withinJs.within(min, center, max); // Prevents breaking syntax highlighting...
      var axisProp = axis;
      state.modifiersData[name] = (_state$modifiersData$ = {
      }, _state$modifiersData$[axisProp] = offset, _state$modifiersData$.centerOffset = offset - center, _state$modifiersData$);
  }
  function effect(_ref2) {
      var state = _ref2.state, options = _ref2.options;
      var _options$element = options.element, arrowElement = _options$element === void 0 ? '[data-popper-arrow]' : _options$element;
      if (arrowElement == null) return;
       // CSS selector
      if (typeof arrowElement === 'string') {
          arrowElement = state.elements.popper.querySelector(arrowElement);
          if (!arrowElement) return;
      }
      if (!_instanceOfJs.isHTMLElement(arrowElement)) console.error([
          'Popper: "arrow" element must be an HTMLElement (not an SVGElement).',
          'To use an SVG arrow, wrap it in an HTMLElement that will be used as',
          'the arrow.'
      ].join(' '));
      if (!_containsJsDefault.default(state.elements.popper, arrowElement)) {
          console.error([
              'Popper: "arrow" modifier\'s `element` must be a child of the popper',
              'element.'
          ].join(' '));
          return;
      }
      state.elements.arrow = arrowElement;
  } // eslint-disable-next-line import/no-unused-modules
  exports.default = {
      name: 'arrow',
      enabled: true,
      phase: 'main',
      fn: arrow,
      effect: effect,
      requires: [
          'popperOffsets'
      ],
      requiresIfExists: [
          'preventOverflow'
      ]
  };
  
  },{"../utils/getBasePlacement.js":"hArkE","../dom-utils/getLayoutRect.js":"8ol2m","../dom-utils/contains.js":"cdkv2","../dom-utils/getOffsetParent.js":"jtCXH","../utils/getMainAxisFromPlacement.js":"4EL78","../utils/within.js":"fpOgl","../utils/mergePaddingObject.js":"f6Q8J","../utils/expandToHashMap.js":"lnSnJ","../enums.js":"qxiOM","../dom-utils/instanceOf.js":"1C4Db","@parcel/transformer-js/src/esmodule-helpers.js":"6jXwo"}],"hArkE":[function(require,module,exports) {
  var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  var _enumsJs = require("../enums.js");
  function getBasePlacement(placement) {
      return placement.split('-')[0];
  }
  exports.default = getBasePlacement;
  
  },{"../enums.js":"qxiOM","@parcel/transformer-js/src/esmodule-helpers.js":"6jXwo"}],"8ol2m":[function(require,module,exports) {
  var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  var _getBoundingClientRectJs = require("./getBoundingClientRect.js"); // Returns the layout rect of an element relative to its offsetParent. Layout
  var _getBoundingClientRectJsDefault = parcelHelpers.interopDefault(_getBoundingClientRectJs);
  function getLayoutRect(element) {
      var clientRect = _getBoundingClientRectJsDefault.default(element); // Use the clientRect sizes if it's not been transformed.
      // Fixes https://github.com/popperjs/popper-core/issues/1223
      var width = element.offsetWidth;
      var height = element.offsetHeight;
      if (Math.abs(clientRect.width - width) <= 1) width = clientRect.width;
      if (Math.abs(clientRect.height - height) <= 1) height = clientRect.height;
      return {
          x: element.offsetLeft,
          y: element.offsetTop,
          width: width,
          height: height
      };
  }
  exports.default = getLayoutRect;
  
  },{"./getBoundingClientRect.js":"hyXFK","@parcel/transformer-js/src/esmodule-helpers.js":"6jXwo"}],"hyXFK":[function(require,module,exports) {
  var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  var _instanceOfJs = require("./instanceOf.js");
  var _mathJs = require("../utils/math.js");
  function getBoundingClientRect(element, includeScale) {
      if (includeScale === void 0) includeScale = false;
      var rect = element.getBoundingClientRect();
      var scaleX = 1;
      var scaleY = 1;
      if (_instanceOfJs.isHTMLElement(element) && includeScale) {
          var offsetHeight = element.offsetHeight;
          var offsetWidth = element.offsetWidth; // Do not attempt to divide by 0, otherwise we get `Infinity` as scale
          // Fallback to 1 in case both values are `0`
          if (offsetWidth > 0) scaleX = _mathJs.round(rect.width) / offsetWidth || 1;
          if (offsetHeight > 0) scaleY = _mathJs.round(rect.height) / offsetHeight || 1;
      }
      return {
          width: rect.width / scaleX,
          height: rect.height / scaleY,
          top: rect.top / scaleY,
          right: rect.right / scaleX,
          bottom: rect.bottom / scaleY,
          left: rect.left / scaleX,
          x: rect.left / scaleX,
          y: rect.top / scaleY
      };
  }
  exports.default = getBoundingClientRect;
  
  },{"./instanceOf.js":"1C4Db","../utils/math.js":"9Zwjh","@parcel/transformer-js/src/esmodule-helpers.js":"6jXwo"}],"9Zwjh":[function(require,module,exports) {
  var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  parcelHelpers.export(exports, "max", ()=>max
  );
  parcelHelpers.export(exports, "min", ()=>min
  );
  parcelHelpers.export(exports, "round", ()=>round
  );
  var max = Math.max;
  var min = Math.min;
  var round = Math.round;
  
  },{"@parcel/transformer-js/src/esmodule-helpers.js":"6jXwo"}],"cdkv2":[function(require,module,exports) {
  var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  var _instanceOfJs = require("./instanceOf.js");
  function contains(parent, child) {
      var rootNode = child.getRootNode && child.getRootNode(); // First, attempt with faster native method
      if (parent.contains(child)) return true;
      else if (rootNode && _instanceOfJs.isShadowRoot(rootNode)) {
          var next = child;
          do {
              if (next && parent.isSameNode(next)) return true;
               // $FlowFixMe[prop-missing]: need a better way to handle this...
              next = next.parentNode || next.host;
          }while (next)
      } // Give up, the result is false
      return false;
  }
  exports.default = contains;
  
  },{"./instanceOf.js":"1C4Db","@parcel/transformer-js/src/esmodule-helpers.js":"6jXwo"}],"jtCXH":[function(require,module,exports) {
  var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  var _getWindowJs = require("./getWindow.js");
  var _getWindowJsDefault = parcelHelpers.interopDefault(_getWindowJs);
  var _getNodeNameJs = require("./getNodeName.js");
  var _getNodeNameJsDefault = parcelHelpers.interopDefault(_getNodeNameJs);
  var _getComputedStyleJs = require("./getComputedStyle.js");
  var _getComputedStyleJsDefault = parcelHelpers.interopDefault(_getComputedStyleJs);
  var _instanceOfJs = require("./instanceOf.js");
  var _isTableElementJs = require("./isTableElement.js");
  var _isTableElementJsDefault = parcelHelpers.interopDefault(_isTableElementJs);
  var _getParentNodeJs = require("./getParentNode.js");
  var _getParentNodeJsDefault = parcelHelpers.interopDefault(_getParentNodeJs);
  function getTrueOffsetParent(element) {
      if (!_instanceOfJs.isHTMLElement(element) || _getComputedStyleJsDefault.default(element).position === 'fixed') return null;
      return element.offsetParent;
  } // `.offsetParent` reports `null` for fixed elements, while absolute elements
  // return the containing block
  function getContainingBlock(element) {
      var isFirefox = navigator.userAgent.toLowerCase().indexOf('firefox') !== -1;
      var isIE = navigator.userAgent.indexOf('Trident') !== -1;
      if (isIE && _instanceOfJs.isHTMLElement(element)) {
          // In IE 9, 10 and 11 fixed elements containing block is always established by the viewport
          var elementCss = _getComputedStyleJsDefault.default(element);
          if (elementCss.position === 'fixed') return null;
      }
      var currentNode = _getParentNodeJsDefault.default(element);
      while(_instanceOfJs.isHTMLElement(currentNode) && [
          'html',
          'body'
      ].indexOf(_getNodeNameJsDefault.default(currentNode)) < 0){
          var css = _getComputedStyleJsDefault.default(currentNode); // This is non-exhaustive but covers the most common CSS properties that
          // create a containing block.
          // https://developer.mozilla.org/en-US/docs/Web/CSS/Containing_block#identifying_the_containing_block
          if (css.transform !== 'none' || css.perspective !== 'none' || css.contain === 'paint' || [
              'transform',
              'perspective'
          ].indexOf(css.willChange) !== -1 || isFirefox && css.willChange === 'filter' || isFirefox && css.filter && css.filter !== 'none') return currentNode;
          else currentNode = currentNode.parentNode;
      }
      return null;
  } // Gets the closest ancestor positioned element. Handles some edge cases,
  function getOffsetParent(element) {
      var window = _getWindowJsDefault.default(element);
      var offsetParent = getTrueOffsetParent(element);
      while(offsetParent && _isTableElementJsDefault.default(offsetParent) && _getComputedStyleJsDefault.default(offsetParent).position === 'static')offsetParent = getTrueOffsetParent(offsetParent);
      if (offsetParent && (_getNodeNameJsDefault.default(offsetParent) === 'html' || _getNodeNameJsDefault.default(offsetParent) === 'body' && _getComputedStyleJsDefault.default(offsetParent).position === 'static')) return window;
      return offsetParent || getContainingBlock(element) || window;
  }
  exports.default = getOffsetParent;
  
  },{"./getWindow.js":"kY3PJ","./getNodeName.js":"dO1na","./getComputedStyle.js":"cYNQK","./instanceOf.js":"1C4Db","./isTableElement.js":"kSISy","./getParentNode.js":"575sS","@parcel/transformer-js/src/esmodule-helpers.js":"6jXwo"}],"cYNQK":[function(require,module,exports) {
  var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  var _getWindowJs = require("./getWindow.js");
  var _getWindowJsDefault = parcelHelpers.interopDefault(_getWindowJs);
  function getComputedStyle(element) {
      return _getWindowJsDefault.default(element).getComputedStyle(element);
  }
  exports.default = getComputedStyle;
  
  },{"./getWindow.js":"kY3PJ","@parcel/transformer-js/src/esmodule-helpers.js":"6jXwo"}],"kSISy":[function(require,module,exports) {
  var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  var _getNodeNameJs = require("./getNodeName.js");
  var _getNodeNameJsDefault = parcelHelpers.interopDefault(_getNodeNameJs);
  function isTableElement(element) {
      return [
          'table',
          'td',
          'th'
      ].indexOf(_getNodeNameJsDefault.default(element)) >= 0;
  }
  exports.default = isTableElement;
  
  },{"./getNodeName.js":"dO1na","@parcel/transformer-js/src/esmodule-helpers.js":"6jXwo"}],"575sS":[function(require,module,exports) {
  var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  var _getNodeNameJs = require("./getNodeName.js");
  var _getNodeNameJsDefault = parcelHelpers.interopDefault(_getNodeNameJs);
  var _getDocumentElementJs = require("./getDocumentElement.js");
  var _getDocumentElementJsDefault = parcelHelpers.interopDefault(_getDocumentElementJs);
  var _instanceOfJs = require("./instanceOf.js");
  function getParentNode(element) {
      if (_getNodeNameJsDefault.default(element) === 'html') return element;
      return(// $FlowFixMe[incompatible-return]
      // $FlowFixMe[prop-missing]
      element.assignedSlot || element.parentNode || (_instanceOfJs.isShadowRoot(element) ? element.host : null) || // $FlowFixMe[incompatible-call]: HTMLElement is a Node
      _getDocumentElementJsDefault.default(element) // fallback
      );
  }
  exports.default = getParentNode;
  
  },{"./getNodeName.js":"dO1na","./getDocumentElement.js":"dX7bp","./instanceOf.js":"1C4Db","@parcel/transformer-js/src/esmodule-helpers.js":"6jXwo"}],"dX7bp":[function(require,module,exports) {
  var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  var _instanceOfJs = require("./instanceOf.js");
  function getDocumentElement(element) {
      // $FlowFixMe[incompatible-return]: assume body is always available
      return ((_instanceOfJs.isElement(element) ? element.ownerDocument : element.document) || window.document).documentElement;
  }
  exports.default = getDocumentElement;
  
  },{"./instanceOf.js":"1C4Db","@parcel/transformer-js/src/esmodule-helpers.js":"6jXwo"}],"4EL78":[function(require,module,exports) {
  var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  function getMainAxisFromPlacement(placement) {
      return [
          'top',
          'bottom'
      ].indexOf(placement) >= 0 ? 'x' : 'y';
  }
  exports.default = getMainAxisFromPlacement;
  
  },{"@parcel/transformer-js/src/esmodule-helpers.js":"6jXwo"}],"fpOgl":[function(require,module,exports) {
  var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  parcelHelpers.export(exports, "within", ()=>within
  );
  parcelHelpers.export(exports, "withinMaxClamp", ()=>withinMaxClamp
  );
  var _mathJs = require("./math.js");
  function within(min, value, max) {
      return _mathJs.max(min, _mathJs.min(value, max));
  }
  function withinMaxClamp(min, value, max) {
      var v = within(min, value, max);
      return v > max ? max : v;
  }
  
  },{"./math.js":"9Zwjh","@parcel/transformer-js/src/esmodule-helpers.js":"6jXwo"}],"f6Q8J":[function(require,module,exports) {
  var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  var _getFreshSideObjectJs = require("./getFreshSideObject.js");
  var _getFreshSideObjectJsDefault = parcelHelpers.interopDefault(_getFreshSideObjectJs);
  function mergePaddingObject(paddingObject) {
      return Object.assign({
      }, _getFreshSideObjectJsDefault.default(), paddingObject);
  }
  exports.default = mergePaddingObject;
  
  },{"./getFreshSideObject.js":"lXEWs","@parcel/transformer-js/src/esmodule-helpers.js":"6jXwo"}],"lXEWs":[function(require,module,exports) {
  var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  function getFreshSideObject() {
      return {
          top: 0,
          right: 0,
          bottom: 0,
          left: 0
      };
  }
  exports.default = getFreshSideObject;
  
  },{"@parcel/transformer-js/src/esmodule-helpers.js":"6jXwo"}],"lnSnJ":[function(require,module,exports) {
  var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  function expandToHashMap(value, keys) {
      return keys.reduce(function(hashMap, key) {
          hashMap[key] = value;
          return hashMap;
      }, {
      });
  }
  exports.default = expandToHashMap;
  
  },{"@parcel/transformer-js/src/esmodule-helpers.js":"6jXwo"}],"3aFNf":[function(require,module,exports) {
  var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  parcelHelpers.export(exports, "mapToStyles", ()=>mapToStyles
  );
  var _enumsJs = require("../enums.js");
  var _getOffsetParentJs = require("../dom-utils/getOffsetParent.js");
  var _getOffsetParentJsDefault = parcelHelpers.interopDefault(_getOffsetParentJs);
  var _getWindowJs = require("../dom-utils/getWindow.js");
  var _getWindowJsDefault = parcelHelpers.interopDefault(_getWindowJs);
  var _getDocumentElementJs = require("../dom-utils/getDocumentElement.js");
  var _getDocumentElementJsDefault = parcelHelpers.interopDefault(_getDocumentElementJs);
  var _getComputedStyleJs = require("../dom-utils/getComputedStyle.js");
  var _getComputedStyleJsDefault = parcelHelpers.interopDefault(_getComputedStyleJs);
  var _getBasePlacementJs = require("../utils/getBasePlacement.js");
  var _getBasePlacementJsDefault = parcelHelpers.interopDefault(_getBasePlacementJs);
  var _getVariationJs = require("../utils/getVariation.js");
  var _getVariationJsDefault = parcelHelpers.interopDefault(_getVariationJs);
  var _mathJs = require("../utils/math.js"); // eslint-disable-next-line import/no-unused-modules
  var unsetSides = {
      top: 'auto',
      right: 'auto',
      bottom: 'auto',
      left: 'auto'
  }; // Round the offsets to the nearest suitable subpixel based on the DPR.
  // Zooming can change the DPR, but it seems to report a value that will
  // cleanly divide the values into the appropriate subpixels.
  function roundOffsetsByDPR(_ref) {
      var x = _ref.x, y = _ref.y;
      var win = window;
      var dpr = win.devicePixelRatio || 1;
      return {
          x: _mathJs.round(x * dpr) / dpr || 0,
          y: _mathJs.round(y * dpr) / dpr || 0
      };
  }
  function mapToStyles(_ref2) {
      var _Object$assign2;
      var popper = _ref2.popper, popperRect = _ref2.popperRect, placement = _ref2.placement, variation = _ref2.variation, offsets = _ref2.offsets, position = _ref2.position, gpuAcceleration = _ref2.gpuAcceleration, adaptive = _ref2.adaptive, roundOffsets = _ref2.roundOffsets, isFixed = _ref2.isFixed;
      var _offsets$x = offsets.x, x = _offsets$x === void 0 ? 0 : _offsets$x, _offsets$y = offsets.y, y = _offsets$y === void 0 ? 0 : _offsets$y;
      var _ref3 = typeof roundOffsets === 'function' ? roundOffsets({
          x: x,
          y: y
      }) : {
          x: x,
          y: y
      };
      x = _ref3.x;
      y = _ref3.y;
      var hasX = offsets.hasOwnProperty('x');
      var hasY = offsets.hasOwnProperty('y');
      var sideX = _enumsJs.left;
      var sideY = _enumsJs.top;
      var win = window;
      if (adaptive) {
          var offsetParent = _getOffsetParentJsDefault.default(popper);
          var heightProp = 'clientHeight';
          var widthProp = 'clientWidth';
          if (offsetParent === _getWindowJsDefault.default(popper)) {
              offsetParent = _getDocumentElementJsDefault.default(popper);
              if (_getComputedStyleJsDefault.default(offsetParent).position !== 'static' && position === 'absolute') {
                  heightProp = 'scrollHeight';
                  widthProp = 'scrollWidth';
              }
          } // $FlowFixMe[incompatible-cast]: force type refinement, we compare offsetParent with window above, but Flow doesn't detect it
          if (placement === _enumsJs.top || (placement === _enumsJs.left || placement === _enumsJs.right) && variation === _enumsJs.end) {
              sideY = _enumsJs.bottom;
              var offsetY = isFixed && win.visualViewport ? win.visualViewport.height : offsetParent[heightProp];
              y -= offsetY - popperRect.height;
              y *= gpuAcceleration ? 1 : -1;
          }
          if (placement === _enumsJs.left || (placement === _enumsJs.top || placement === _enumsJs.bottom) && variation === _enumsJs.end) {
              sideX = _enumsJs.right;
              var offsetX = isFixed && win.visualViewport ? win.visualViewport.width : offsetParent[widthProp];
              x -= offsetX - popperRect.width;
              x *= gpuAcceleration ? 1 : -1;
          }
      }
      var commonStyles = Object.assign({
          position: position
      }, adaptive && unsetSides);
      var _ref4 = roundOffsets === true ? roundOffsetsByDPR({
          x: x,
          y: y
      }) : {
          x: x,
          y: y
      };
      x = _ref4.x;
      y = _ref4.y;
      if (gpuAcceleration) {
          var _Object$assign;
          return Object.assign({
          }, commonStyles, (_Object$assign = {
          }, _Object$assign[sideY] = hasY ? '0' : '', _Object$assign[sideX] = hasX ? '0' : '', _Object$assign.transform = (win.devicePixelRatio || 1) <= 1 ? "translate(" + x + "px, " + y + "px)" : "translate3d(" + x + "px, " + y + "px, 0)", _Object$assign));
      }
      return Object.assign({
      }, commonStyles, (_Object$assign2 = {
      }, _Object$assign2[sideY] = hasY ? y + "px" : '', _Object$assign2[sideX] = hasX ? x + "px" : '', _Object$assign2.transform = '', _Object$assign2));
  }
  function computeStyles(_ref5) {
      var state = _ref5.state, options = _ref5.options;
      var _options$gpuAccelerat = options.gpuAcceleration, gpuAcceleration = _options$gpuAccelerat === void 0 ? true : _options$gpuAccelerat, _options$adaptive = options.adaptive, adaptive = _options$adaptive === void 0 ? true : _options$adaptive, _options$roundOffsets = options.roundOffsets, roundOffsets = _options$roundOffsets === void 0 ? true : _options$roundOffsets;
      var transitionProperty = _getComputedStyleJsDefault.default(state.elements.popper).transitionProperty || '';
      if (adaptive && [
          'transform',
          'top',
          'right',
          'bottom',
          'left'
      ].some(function(property) {
          return transitionProperty.indexOf(property) >= 0;
      })) console.warn([
          'Popper: Detected CSS transitions on at least one of the following',
          'CSS properties: "transform", "top", "right", "bottom", "left".',
          '\n\n',
          'Disable the "computeStyles" modifier\'s `adaptive` option to allow',
          'for smooth transitions, or remove these properties from the CSS',
          'transition declaration on the popper element if only transitioning',
          'opacity or background-color for example.',
          '\n\n',
          'We recommend using the popper element as a wrapper around an inner',
          'element that can have any CSS property transitioned for animations.'
      ].join(' '));
      var commonStyles = {
          placement: _getBasePlacementJsDefault.default(state.placement),
          variation: _getVariationJsDefault.default(state.placement),
          popper: state.elements.popper,
          popperRect: state.rects.popper,
          gpuAcceleration: gpuAcceleration,
          isFixed: state.options.strategy === 'fixed'
      };
      if (state.modifiersData.popperOffsets != null) state.styles.popper = Object.assign({
      }, state.styles.popper, mapToStyles(Object.assign({
      }, commonStyles, {
          offsets: state.modifiersData.popperOffsets,
          position: state.options.strategy,
          adaptive: adaptive,
          roundOffsets: roundOffsets
      })));
      if (state.modifiersData.arrow != null) state.styles.arrow = Object.assign({
      }, state.styles.arrow, mapToStyles(Object.assign({
      }, commonStyles, {
          offsets: state.modifiersData.arrow,
          position: 'absolute',
          adaptive: false,
          roundOffsets: roundOffsets
      })));
      state.attributes.popper = Object.assign({
      }, state.attributes.popper, {
          'data-popper-placement': state.placement
      });
  } // eslint-disable-next-line import/no-unused-modules
  exports.default = {
      name: 'computeStyles',
      enabled: true,
      phase: 'beforeWrite',
      fn: computeStyles,
      data: {
      }
  };
  
  },{"../enums.js":"qxiOM","../dom-utils/getOffsetParent.js":"jtCXH","../dom-utils/getWindow.js":"kY3PJ","../dom-utils/getDocumentElement.js":"dX7bp","../dom-utils/getComputedStyle.js":"cYNQK","../utils/getBasePlacement.js":"hArkE","../utils/getVariation.js":"lWBoq","../utils/math.js":"9Zwjh","@parcel/transformer-js/src/esmodule-helpers.js":"6jXwo"}],"lWBoq":[function(require,module,exports) {
  var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  function getVariation(placement) {
      return placement.split('-')[1];
  }
  exports.default = getVariation;
  
  },{"@parcel/transformer-js/src/esmodule-helpers.js":"6jXwo"}],"lGj0Q":[function(require,module,exports) {
  var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  var _getWindowJs = require("../dom-utils/getWindow.js"); // eslint-disable-next-line import/no-unused-modules
  var _getWindowJsDefault = parcelHelpers.interopDefault(_getWindowJs);
  var passive = {
      passive: true
  };
  function effect(_ref) {
      var state = _ref.state, instance = _ref.instance, options = _ref.options;
      var _options$scroll = options.scroll, scroll = _options$scroll === void 0 ? true : _options$scroll, _options$resize = options.resize, resize = _options$resize === void 0 ? true : _options$resize;
      var window = _getWindowJsDefault.default(state.elements.popper);
      var scrollParents = [].concat(state.scrollParents.reference, state.scrollParents.popper);
      if (scroll) scrollParents.forEach(function(scrollParent) {
          scrollParent.addEventListener('scroll', instance.update, passive);
      });
      if (resize) window.addEventListener('resize', instance.update, passive);
      return function() {
          if (scroll) scrollParents.forEach(function(scrollParent) {
              scrollParent.removeEventListener('scroll', instance.update, passive);
          });
          if (resize) window.removeEventListener('resize', instance.update, passive);
      };
  } // eslint-disable-next-line import/no-unused-modules
  exports.default = {
      name: 'eventListeners',
      enabled: true,
      phase: 'write',
      fn: function fn() {
      },
      effect: effect,
      data: {
      }
  };
  
  },{"../dom-utils/getWindow.js":"kY3PJ","@parcel/transformer-js/src/esmodule-helpers.js":"6jXwo"}],"bwIX2":[function(require,module,exports) {
  var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  var _getOppositePlacementJs = require("../utils/getOppositePlacement.js");
  var _getOppositePlacementJsDefault = parcelHelpers.interopDefault(_getOppositePlacementJs);
  var _getBasePlacementJs = require("../utils/getBasePlacement.js");
  var _getBasePlacementJsDefault = parcelHelpers.interopDefault(_getBasePlacementJs);
  var _getOppositeVariationPlacementJs = require("../utils/getOppositeVariationPlacement.js");
  var _getOppositeVariationPlacementJsDefault = parcelHelpers.interopDefault(_getOppositeVariationPlacementJs);
  var _detectOverflowJs = require("../utils/detectOverflow.js");
  var _detectOverflowJsDefault = parcelHelpers.interopDefault(_detectOverflowJs);
  var _computeAutoPlacementJs = require("../utils/computeAutoPlacement.js");
  var _computeAutoPlacementJsDefault = parcelHelpers.interopDefault(_computeAutoPlacementJs);
  var _enumsJs = require("../enums.js");
  var _getVariationJs = require("../utils/getVariation.js"); // eslint-disable-next-line import/no-unused-modules
  var _getVariationJsDefault = parcelHelpers.interopDefault(_getVariationJs);
  function getExpandedFallbackPlacements(placement) {
      if (_getBasePlacementJsDefault.default(placement) === _enumsJs.auto) return [];
      var oppositePlacement = _getOppositePlacementJsDefault.default(placement);
      return [
          _getOppositeVariationPlacementJsDefault.default(placement),
          oppositePlacement,
          _getOppositeVariationPlacementJsDefault.default(oppositePlacement)
      ];
  }
  function flip(_ref) {
      var state = _ref.state, options = _ref.options, name = _ref.name;
      if (state.modifiersData[name]._skip) return;
      var _options$mainAxis = options.mainAxis, checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis, _options$altAxis = options.altAxis, checkAltAxis = _options$altAxis === void 0 ? true : _options$altAxis, specifiedFallbackPlacements = options.fallbackPlacements, padding = options.padding, boundary = options.boundary, rootBoundary = options.rootBoundary, altBoundary = options.altBoundary, _options$flipVariatio = options.flipVariations, flipVariations = _options$flipVariatio === void 0 ? true : _options$flipVariatio, allowedAutoPlacements = options.allowedAutoPlacements;
      var preferredPlacement = state.options.placement;
      var basePlacement = _getBasePlacementJsDefault.default(preferredPlacement);
      var isBasePlacement = basePlacement === preferredPlacement;
      var fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipVariations ? [
          _getOppositePlacementJsDefault.default(preferredPlacement)
      ] : getExpandedFallbackPlacements(preferredPlacement));
      var placements = [
          preferredPlacement
      ].concat(fallbackPlacements).reduce(function(acc, placement) {
          return acc.concat(_getBasePlacementJsDefault.default(placement) === _enumsJs.auto ? _computeAutoPlacementJsDefault.default(state, {
              placement: placement,
              boundary: boundary,
              rootBoundary: rootBoundary,
              padding: padding,
              flipVariations: flipVariations,
              allowedAutoPlacements: allowedAutoPlacements
          }) : placement);
      }, []);
      var referenceRect = state.rects.reference;
      var popperRect = state.rects.popper;
      var checksMap = new Map();
      var makeFallbackChecks = true;
      var firstFittingPlacement = placements[0];
      for(var i = 0; i < placements.length; i++){
          var placement1 = placements[i];
          var _basePlacement = _getBasePlacementJsDefault.default(placement1);
          var isStartVariation = _getVariationJsDefault.default(placement1) === _enumsJs.start;
          var isVertical = [
              _enumsJs.top,
              _enumsJs.bottom
          ].indexOf(_basePlacement) >= 0;
          var len = isVertical ? 'width' : 'height';
          var overflow = _detectOverflowJsDefault.default(state, {
              placement: placement1,
              boundary: boundary,
              rootBoundary: rootBoundary,
              altBoundary: altBoundary,
              padding: padding
          });
          var mainVariationSide = isVertical ? isStartVariation ? _enumsJs.right : _enumsJs.left : isStartVariation ? _enumsJs.bottom : _enumsJs.top;
          if (referenceRect[len] > popperRect[len]) mainVariationSide = _getOppositePlacementJsDefault.default(mainVariationSide);
          var altVariationSide = _getOppositePlacementJsDefault.default(mainVariationSide);
          var checks = [];
          if (checkMainAxis) checks.push(overflow[_basePlacement] <= 0);
          if (checkAltAxis) checks.push(overflow[mainVariationSide] <= 0, overflow[altVariationSide] <= 0);
          if (checks.every(function(check) {
              return check;
          })) {
              firstFittingPlacement = placement1;
              makeFallbackChecks = false;
              break;
          }
          checksMap.set(placement1, checks);
      }
      if (makeFallbackChecks) {
          // `2` may be desired in some cases – research later
          var numberOfChecks = flipVariations ? 3 : 1;
          var _loop = function _loop(_i) {
              var fittingPlacement = placements.find(function(placement) {
                  var checks = checksMap.get(placement);
                  if (checks) return checks.slice(0, _i).every(function(check) {
                      return check;
                  });
              });
              if (fittingPlacement) {
                  firstFittingPlacement = fittingPlacement;
                  return "break";
              }
          };
          for(var _i1 = numberOfChecks; _i1 > 0; _i1--){
              var _ret = _loop(_i1);
              if (_ret === "break") break;
          }
      }
      if (state.placement !== firstFittingPlacement) {
          state.modifiersData[name]._skip = true;
          state.placement = firstFittingPlacement;
          state.reset = true;
      }
  } // eslint-disable-next-line import/no-unused-modules
  exports.default = {
      name: 'flip',
      enabled: true,
      phase: 'main',
      fn: flip,
      requiresIfExists: [
          'offset'
      ],
      data: {
          _skip: false
      }
  };
  
  },{"../utils/getOppositePlacement.js":"3EoOM","../utils/getBasePlacement.js":"hArkE","../utils/getOppositeVariationPlacement.js":"6vYk7","../utils/detectOverflow.js":"bOwkj","../utils/computeAutoPlacement.js":"fMVLR","../enums.js":"qxiOM","../utils/getVariation.js":"lWBoq","@parcel/transformer-js/src/esmodule-helpers.js":"6jXwo"}],"3EoOM":[function(require,module,exports) {
  var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  var hash = {
      left: 'right',
      right: 'left',
      bottom: 'top',
      top: 'bottom'
  };
  function getOppositePlacement(placement) {
      return placement.replace(/left|right|bottom|top/g, function(matched) {
          return hash[matched];
      });
  }
  exports.default = getOppositePlacement;
  
  },{"@parcel/transformer-js/src/esmodule-helpers.js":"6jXwo"}],"6vYk7":[function(require,module,exports) {
  var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  var hash = {
      start: 'end',
      end: 'start'
  };
  function getOppositeVariationPlacement(placement) {
      return placement.replace(/start|end/g, function(matched) {
          return hash[matched];
      });
  }
  exports.default = getOppositeVariationPlacement;
  
  },{"@parcel/transformer-js/src/esmodule-helpers.js":"6jXwo"}],"bOwkj":[function(require,module,exports) {
  var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  var _getClippingRectJs = require("../dom-utils/getClippingRect.js");
  var _getClippingRectJsDefault = parcelHelpers.interopDefault(_getClippingRectJs);
  var _getDocumentElementJs = require("../dom-utils/getDocumentElement.js");
  var _getDocumentElementJsDefault = parcelHelpers.interopDefault(_getDocumentElementJs);
  var _getBoundingClientRectJs = require("../dom-utils/getBoundingClientRect.js");
  var _getBoundingClientRectJsDefault = parcelHelpers.interopDefault(_getBoundingClientRectJs);
  var _computeOffsetsJs = require("./computeOffsets.js");
  var _computeOffsetsJsDefault = parcelHelpers.interopDefault(_computeOffsetsJs);
  var _rectToClientRectJs = require("./rectToClientRect.js");
  var _rectToClientRectJsDefault = parcelHelpers.interopDefault(_rectToClientRectJs);
  var _enumsJs = require("../enums.js");
  var _instanceOfJs = require("../dom-utils/instanceOf.js");
  var _mergePaddingObjectJs = require("./mergePaddingObject.js");
  var _mergePaddingObjectJsDefault = parcelHelpers.interopDefault(_mergePaddingObjectJs);
  var _expandToHashMapJs = require("./expandToHashMap.js"); // eslint-disable-next-line import/no-unused-modules
  var _expandToHashMapJsDefault = parcelHelpers.interopDefault(_expandToHashMapJs);
  function detectOverflow(state, options) {
      if (options === void 0) options = {
      };
      var _options = options, _options$placement = _options.placement, placement = _options$placement === void 0 ? state.placement : _options$placement, _options$boundary = _options.boundary, boundary = _options$boundary === void 0 ? _enumsJs.clippingParents : _options$boundary, _options$rootBoundary = _options.rootBoundary, rootBoundary = _options$rootBoundary === void 0 ? _enumsJs.viewport : _options$rootBoundary, _options$elementConte = _options.elementContext, elementContext = _options$elementConte === void 0 ? _enumsJs.popper : _options$elementConte, _options$altBoundary = _options.altBoundary, altBoundary = _options$altBoundary === void 0 ? false : _options$altBoundary, _options$padding = _options.padding, padding = _options$padding === void 0 ? 0 : _options$padding;
      var paddingObject = _mergePaddingObjectJsDefault.default(typeof padding !== 'number' ? padding : _expandToHashMapJsDefault.default(padding, _enumsJs.basePlacements));
      var altContext = elementContext === _enumsJs.popper ? _enumsJs.reference : _enumsJs.popper;
      var popperRect = state.rects.popper;
      var element = state.elements[altBoundary ? altContext : elementContext];
      var clippingClientRect = _getClippingRectJsDefault.default(_instanceOfJs.isElement(element) ? element : element.contextElement || _getDocumentElementJsDefault.default(state.elements.popper), boundary, rootBoundary);
      var referenceClientRect = _getBoundingClientRectJsDefault.default(state.elements.reference);
      var popperOffsets = _computeOffsetsJsDefault.default({
          reference: referenceClientRect,
          element: popperRect,
          strategy: 'absolute',
          placement: placement
      });
      var popperClientRect = _rectToClientRectJsDefault.default(Object.assign({
      }, popperRect, popperOffsets));
      var elementClientRect = elementContext === _enumsJs.popper ? popperClientRect : referenceClientRect; // positive = overflowing the clipping rect
      // 0 or negative = within the clipping rect
      var overflowOffsets = {
          top: clippingClientRect.top - elementClientRect.top + paddingObject.top,
          bottom: elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom,
          left: clippingClientRect.left - elementClientRect.left + paddingObject.left,
          right: elementClientRect.right - clippingClientRect.right + paddingObject.right
      };
      var offsetData = state.modifiersData.offset; // Offsets can be applied only to the popper element
      if (elementContext === _enumsJs.popper && offsetData) {
          var offset = offsetData[placement];
          Object.keys(overflowOffsets).forEach(function(key) {
              var multiply = [
                  _enumsJs.right,
                  _enumsJs.bottom
              ].indexOf(key) >= 0 ? 1 : -1;
              var axis = [
                  _enumsJs.top,
                  _enumsJs.bottom
              ].indexOf(key) >= 0 ? 'y' : 'x';
              overflowOffsets[key] += offset[axis] * multiply;
          });
      }
      return overflowOffsets;
  }
  exports.default = detectOverflow;
  
  },{"../dom-utils/getClippingRect.js":"lfSy5","../dom-utils/getDocumentElement.js":"dX7bp","../dom-utils/getBoundingClientRect.js":"hyXFK","./computeOffsets.js":"7HSss","./rectToClientRect.js":"aCg1y","../enums.js":"qxiOM","../dom-utils/instanceOf.js":"1C4Db","./mergePaddingObject.js":"f6Q8J","./expandToHashMap.js":"lnSnJ","@parcel/transformer-js/src/esmodule-helpers.js":"6jXwo"}],"lfSy5":[function(require,module,exports) {
  var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  var _enumsJs = require("../enums.js");
  var _getViewportRectJs = require("./getViewportRect.js");
  var _getViewportRectJsDefault = parcelHelpers.interopDefault(_getViewportRectJs);
  var _getDocumentRectJs = require("./getDocumentRect.js");
  var _getDocumentRectJsDefault = parcelHelpers.interopDefault(_getDocumentRectJs);
  var _listScrollParentsJs = require("./listScrollParents.js");
  var _listScrollParentsJsDefault = parcelHelpers.interopDefault(_listScrollParentsJs);
  var _getOffsetParentJs = require("./getOffsetParent.js");
  var _getOffsetParentJsDefault = parcelHelpers.interopDefault(_getOffsetParentJs);
  var _getDocumentElementJs = require("./getDocumentElement.js");
  var _getDocumentElementJsDefault = parcelHelpers.interopDefault(_getDocumentElementJs);
  var _getComputedStyleJs = require("./getComputedStyle.js");
  var _getComputedStyleJsDefault = parcelHelpers.interopDefault(_getComputedStyleJs);
  var _instanceOfJs = require("./instanceOf.js");
  var _getBoundingClientRectJs = require("./getBoundingClientRect.js");
  var _getBoundingClientRectJsDefault = parcelHelpers.interopDefault(_getBoundingClientRectJs);
  var _getParentNodeJs = require("./getParentNode.js");
  var _getParentNodeJsDefault = parcelHelpers.interopDefault(_getParentNodeJs);
  var _containsJs = require("./contains.js");
  var _containsJsDefault = parcelHelpers.interopDefault(_containsJs);
  var _getNodeNameJs = require("./getNodeName.js");
  var _getNodeNameJsDefault = parcelHelpers.interopDefault(_getNodeNameJs);
  var _rectToClientRectJs = require("../utils/rectToClientRect.js");
  var _rectToClientRectJsDefault = parcelHelpers.interopDefault(_rectToClientRectJs);
  var _mathJs = require("../utils/math.js");
  function getInnerBoundingClientRect(element) {
      var rect = _getBoundingClientRectJsDefault.default(element);
      rect.top = rect.top + element.clientTop;
      rect.left = rect.left + element.clientLeft;
      rect.bottom = rect.top + element.clientHeight;
      rect.right = rect.left + element.clientWidth;
      rect.width = element.clientWidth;
      rect.height = element.clientHeight;
      rect.x = rect.left;
      rect.y = rect.top;
      return rect;
  }
  function getClientRectFromMixedType(element, clippingParent) {
      return clippingParent === _enumsJs.viewport ? _rectToClientRectJsDefault.default(_getViewportRectJsDefault.default(element)) : _instanceOfJs.isElement(clippingParent) ? getInnerBoundingClientRect(clippingParent) : _rectToClientRectJsDefault.default(_getDocumentRectJsDefault.default(_getDocumentElementJsDefault.default(element)));
  } // A "clipping parent" is an overflowable container with the characteristic of
  // clipping (or hiding) overflowing elements with a position different from
  // `initial`
  function getClippingParents(element) {
      var clippingParents = _listScrollParentsJsDefault.default(_getParentNodeJsDefault.default(element));
      var canEscapeClipping = [
          'absolute',
          'fixed'
      ].indexOf(_getComputedStyleJsDefault.default(element).position) >= 0;
      var clipperElement = canEscapeClipping && _instanceOfJs.isHTMLElement(element) ? _getOffsetParentJsDefault.default(element) : element;
      if (!_instanceOfJs.isElement(clipperElement)) return [];
       // $FlowFixMe[incompatible-return]: https://github.com/facebook/flow/issues/1414
      return clippingParents.filter(function(clippingParent) {
          return _instanceOfJs.isElement(clippingParent) && _containsJsDefault.default(clippingParent, clipperElement) && _getNodeNameJsDefault.default(clippingParent) !== 'body';
      });
  } // Gets the maximum area that the element is visible in due to any number of
  function getClippingRect(element, boundary, rootBoundary) {
      var mainClippingParents = boundary === 'clippingParents' ? getClippingParents(element) : [].concat(boundary);
      var clippingParents = [].concat(mainClippingParents, [
          rootBoundary
      ]);
      var firstClippingParent = clippingParents[0];
      var clippingRect = clippingParents.reduce(function(accRect, clippingParent) {
          var rect = getClientRectFromMixedType(element, clippingParent);
          accRect.top = _mathJs.max(rect.top, accRect.top);
          accRect.right = _mathJs.min(rect.right, accRect.right);
          accRect.bottom = _mathJs.min(rect.bottom, accRect.bottom);
          accRect.left = _mathJs.max(rect.left, accRect.left);
          return accRect;
      }, getClientRectFromMixedType(element, firstClippingParent));
      clippingRect.width = clippingRect.right - clippingRect.left;
      clippingRect.height = clippingRect.bottom - clippingRect.top;
      clippingRect.x = clippingRect.left;
      clippingRect.y = clippingRect.top;
      return clippingRect;
  }
  exports.default = getClippingRect;
  
  },{"../enums.js":"qxiOM","./getViewportRect.js":"27oX5","./getDocumentRect.js":"gk86k","./listScrollParents.js":"4CRHK","./getOffsetParent.js":"jtCXH","./getDocumentElement.js":"dX7bp","./getComputedStyle.js":"cYNQK","./instanceOf.js":"1C4Db","./getBoundingClientRect.js":"hyXFK","./getParentNode.js":"575sS","./contains.js":"cdkv2","./getNodeName.js":"dO1na","../utils/rectToClientRect.js":"aCg1y","../utils/math.js":"9Zwjh","@parcel/transformer-js/src/esmodule-helpers.js":"6jXwo"}],"27oX5":[function(require,module,exports) {
  var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  var _getWindowJs = require("./getWindow.js");
  var _getWindowJsDefault = parcelHelpers.interopDefault(_getWindowJs);
  var _getDocumentElementJs = require("./getDocumentElement.js");
  var _getDocumentElementJsDefault = parcelHelpers.interopDefault(_getDocumentElementJs);
  var _getWindowScrollBarXJs = require("./getWindowScrollBarX.js");
  var _getWindowScrollBarXJsDefault = parcelHelpers.interopDefault(_getWindowScrollBarXJs);
  function getViewportRect(element) {
      var win = _getWindowJsDefault.default(element);
      var html = _getDocumentElementJsDefault.default(element);
      var visualViewport = win.visualViewport;
      var width = html.clientWidth;
      var height = html.clientHeight;
      var x = 0;
      var y = 0; // NB: This isn't supported on iOS <= 12. If the keyboard is open, the popper
      // can be obscured underneath it.
      // Also, `html.clientHeight` adds the bottom bar height in Safari iOS, even
      // if it isn't open, so if this isn't available, the popper will be detected
      // to overflow the bottom of the screen too early.
      if (visualViewport) {
          width = visualViewport.width;
          height = visualViewport.height; // Uses Layout Viewport (like Chrome; Safari does not currently)
          // In Chrome, it returns a value very close to 0 (+/-) but contains rounding
          // errors due to floating point numbers, so we need to check precision.
          // Safari returns a number <= 0, usually < -1 when pinch-zoomed
          // Feature detection fails in mobile emulation mode in Chrome.
          // Math.abs(win.innerWidth / visualViewport.scale - visualViewport.width) <
          // 0.001
          // Fallback here: "Not Safari" userAgent
          if (!/^((?!chrome|android).)*safari/i.test(navigator.userAgent)) {
              x = visualViewport.offsetLeft;
              y = visualViewport.offsetTop;
          }
      }
      return {
          width: width,
          height: height,
          x: x + _getWindowScrollBarXJsDefault.default(element),
          y: y
      };
  }
  exports.default = getViewportRect;
  
  },{"./getWindow.js":"kY3PJ","./getDocumentElement.js":"dX7bp","./getWindowScrollBarX.js":"k8Ha2","@parcel/transformer-js/src/esmodule-helpers.js":"6jXwo"}],"k8Ha2":[function(require,module,exports) {
  var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  var _getBoundingClientRectJs = require("./getBoundingClientRect.js");
  var _getBoundingClientRectJsDefault = parcelHelpers.interopDefault(_getBoundingClientRectJs);
  var _getDocumentElementJs = require("./getDocumentElement.js");
  var _getDocumentElementJsDefault = parcelHelpers.interopDefault(_getDocumentElementJs);
  var _getWindowScrollJs = require("./getWindowScroll.js");
  var _getWindowScrollJsDefault = parcelHelpers.interopDefault(_getWindowScrollJs);
  function getWindowScrollBarX(element) {
      // If <html> has a CSS width greater than the viewport, then this will be
      // incorrect for RTL.
      // Popper 1 is broken in this case and never had a bug report so let's assume
      // it's not an issue. I don't think anyone ever specifies width on <html>
      // anyway.
      // Browsers where the left scrollbar doesn't cause an issue report `0` for
      // this (e.g. Edge 2019, IE11, Safari)
      return _getBoundingClientRectJsDefault.default(_getDocumentElementJsDefault.default(element)).left + _getWindowScrollJsDefault.default(element).scrollLeft;
  }
  exports.default = getWindowScrollBarX;
  
  },{"./getBoundingClientRect.js":"hyXFK","./getDocumentElement.js":"dX7bp","./getWindowScroll.js":"8B9D1","@parcel/transformer-js/src/esmodule-helpers.js":"6jXwo"}],"8B9D1":[function(require,module,exports) {
  var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  var _getWindowJs = require("./getWindow.js");
  var _getWindowJsDefault = parcelHelpers.interopDefault(_getWindowJs);
  function getWindowScroll(node) {
      var win = _getWindowJsDefault.default(node);
      var scrollLeft = win.pageXOffset;
      var scrollTop = win.pageYOffset;
      return {
          scrollLeft: scrollLeft,
          scrollTop: scrollTop
      };
  }
  exports.default = getWindowScroll;
  
  },{"./getWindow.js":"kY3PJ","@parcel/transformer-js/src/esmodule-helpers.js":"6jXwo"}],"gk86k":[function(require,module,exports) {
  var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  var _getDocumentElementJs = require("./getDocumentElement.js");
  var _getDocumentElementJsDefault = parcelHelpers.interopDefault(_getDocumentElementJs);
  var _getComputedStyleJs = require("./getComputedStyle.js");
  var _getComputedStyleJsDefault = parcelHelpers.interopDefault(_getComputedStyleJs);
  var _getWindowScrollBarXJs = require("./getWindowScrollBarX.js");
  var _getWindowScrollBarXJsDefault = parcelHelpers.interopDefault(_getWindowScrollBarXJs);
  var _getWindowScrollJs = require("./getWindowScroll.js");
  var _getWindowScrollJsDefault = parcelHelpers.interopDefault(_getWindowScrollJs);
  var _mathJs = require("../utils/math.js"); // Gets the entire size of the scrollable document area, even extending outside
  function getDocumentRect(element) {
      var _element$ownerDocumen;
      var html = _getDocumentElementJsDefault.default(element);
      var winScroll = _getWindowScrollJsDefault.default(element);
      var body = (_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body;
      var width = _mathJs.max(html.scrollWidth, html.clientWidth, body ? body.scrollWidth : 0, body ? body.clientWidth : 0);
      var height = _mathJs.max(html.scrollHeight, html.clientHeight, body ? body.scrollHeight : 0, body ? body.clientHeight : 0);
      var x = -winScroll.scrollLeft + _getWindowScrollBarXJsDefault.default(element);
      var y = -winScroll.scrollTop;
      if (_getComputedStyleJsDefault.default(body || html).direction === 'rtl') x += _mathJs.max(html.clientWidth, body ? body.clientWidth : 0) - width;
      return {
          width: width,
          height: height,
          x: x,
          y: y
      };
  }
  exports.default = getDocumentRect;
  
  },{"./getDocumentElement.js":"dX7bp","./getComputedStyle.js":"cYNQK","./getWindowScrollBarX.js":"k8Ha2","./getWindowScroll.js":"8B9D1","../utils/math.js":"9Zwjh","@parcel/transformer-js/src/esmodule-helpers.js":"6jXwo"}],"4CRHK":[function(require,module,exports) {
  var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  var _getScrollParentJs = require("./getScrollParent.js");
  var _getScrollParentJsDefault = parcelHelpers.interopDefault(_getScrollParentJs);
  var _getParentNodeJs = require("./getParentNode.js");
  var _getParentNodeJsDefault = parcelHelpers.interopDefault(_getParentNodeJs);
  var _getWindowJs = require("./getWindow.js");
  var _getWindowJsDefault = parcelHelpers.interopDefault(_getWindowJs);
  var _isScrollParentJs = require("./isScrollParent.js");
  var _isScrollParentJsDefault = parcelHelpers.interopDefault(_isScrollParentJs);
  function listScrollParents(element, list) {
      var _element$ownerDocumen;
      if (list === void 0) list = [];
      var scrollParent = _getScrollParentJsDefault.default(element);
      var isBody = scrollParent === ((_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body);
      var win = _getWindowJsDefault.default(scrollParent);
      var target = isBody ? [
          win
      ].concat(win.visualViewport || [], _isScrollParentJsDefault.default(scrollParent) ? scrollParent : []) : scrollParent;
      var updatedList = list.concat(target);
      return isBody ? updatedList : updatedList.concat(listScrollParents(_getParentNodeJsDefault.default(target)));
  }
  exports.default = listScrollParents;
  
  },{"./getScrollParent.js":"fuhVK","./getParentNode.js":"575sS","./getWindow.js":"kY3PJ","./isScrollParent.js":"7nATc","@parcel/transformer-js/src/esmodule-helpers.js":"6jXwo"}],"fuhVK":[function(require,module,exports) {
  var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  var _getParentNodeJs = require("./getParentNode.js");
  var _getParentNodeJsDefault = parcelHelpers.interopDefault(_getParentNodeJs);
  var _isScrollParentJs = require("./isScrollParent.js");
  var _isScrollParentJsDefault = parcelHelpers.interopDefault(_isScrollParentJs);
  var _getNodeNameJs = require("./getNodeName.js");
  var _getNodeNameJsDefault = parcelHelpers.interopDefault(_getNodeNameJs);
  var _instanceOfJs = require("./instanceOf.js");
  function getScrollParent(node) {
      if ([
          'html',
          'body',
          '#document'
      ].indexOf(_getNodeNameJsDefault.default(node)) >= 0) // $FlowFixMe[incompatible-return]: assume body is always available
      return node.ownerDocument.body;
      if (_instanceOfJs.isHTMLElement(node) && _isScrollParentJsDefault.default(node)) return node;
      return getScrollParent(_getParentNodeJsDefault.default(node));
  }
  exports.default = getScrollParent;
  
  },{"./getParentNode.js":"575sS","./isScrollParent.js":"7nATc","./getNodeName.js":"dO1na","./instanceOf.js":"1C4Db","@parcel/transformer-js/src/esmodule-helpers.js":"6jXwo"}],"7nATc":[function(require,module,exports) {
  var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  var _getComputedStyleJs = require("./getComputedStyle.js");
  var _getComputedStyleJsDefault = parcelHelpers.interopDefault(_getComputedStyleJs);
  function isScrollParent(element) {
      // Firefox wants us to check `-x` and `-y` variations as well
      var _getComputedStyle = _getComputedStyleJsDefault.default(element), overflow = _getComputedStyle.overflow, overflowX = _getComputedStyle.overflowX, overflowY = _getComputedStyle.overflowY;
      return /auto|scroll|overlay|hidden/.test(overflow + overflowY + overflowX);
  }
  exports.default = isScrollParent;
  
  },{"./getComputedStyle.js":"cYNQK","@parcel/transformer-js/src/esmodule-helpers.js":"6jXwo"}],"aCg1y":[function(require,module,exports) {
  var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  function rectToClientRect(rect) {
      return Object.assign({
      }, rect, {
          left: rect.x,
          top: rect.y,
          right: rect.x + rect.width,
          bottom: rect.y + rect.height
      });
  }
  exports.default = rectToClientRect;
  
  },{"@parcel/transformer-js/src/esmodule-helpers.js":"6jXwo"}],"7HSss":[function(require,module,exports) {
  var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  var _getBasePlacementJs = require("./getBasePlacement.js");
  var _getBasePlacementJsDefault = parcelHelpers.interopDefault(_getBasePlacementJs);
  var _getVariationJs = require("./getVariation.js");
  var _getVariationJsDefault = parcelHelpers.interopDefault(_getVariationJs);
  var _getMainAxisFromPlacementJs = require("./getMainAxisFromPlacement.js");
  var _getMainAxisFromPlacementJsDefault = parcelHelpers.interopDefault(_getMainAxisFromPlacementJs);
  var _enumsJs = require("../enums.js");
  function computeOffsets(_ref) {
      var reference = _ref.reference, element = _ref.element, placement = _ref.placement;
      var basePlacement = placement ? _getBasePlacementJsDefault.default(placement) : null;
      var variation = placement ? _getVariationJsDefault.default(placement) : null;
      var commonX = reference.x + reference.width / 2 - element.width / 2;
      var commonY = reference.y + reference.height / 2 - element.height / 2;
      var offsets;
      switch(basePlacement){
          case _enumsJs.top:
              offsets = {
                  x: commonX,
                  y: reference.y - element.height
              };
              break;
          case _enumsJs.bottom:
              offsets = {
                  x: commonX,
                  y: reference.y + reference.height
              };
              break;
          case _enumsJs.right:
              offsets = {
                  x: reference.x + reference.width,
                  y: commonY
              };
              break;
          case _enumsJs.left:
              offsets = {
                  x: reference.x - element.width,
                  y: commonY
              };
              break;
          default:
              offsets = {
                  x: reference.x,
                  y: reference.y
              };
      }
      var mainAxis = basePlacement ? _getMainAxisFromPlacementJsDefault.default(basePlacement) : null;
      if (mainAxis != null) {
          var len = mainAxis === 'y' ? 'height' : 'width';
          switch(variation){
              case _enumsJs.start:
                  offsets[mainAxis] = offsets[mainAxis] - (reference[len] / 2 - element[len] / 2);
                  break;
              case _enumsJs.end:
                  offsets[mainAxis] = offsets[mainAxis] + (reference[len] / 2 - element[len] / 2);
                  break;
              default:
          }
      }
      return offsets;
  }
  exports.default = computeOffsets;
  
  },{"./getBasePlacement.js":"hArkE","./getVariation.js":"lWBoq","./getMainAxisFromPlacement.js":"4EL78","../enums.js":"qxiOM","@parcel/transformer-js/src/esmodule-helpers.js":"6jXwo"}],"fMVLR":[function(require,module,exports) {
  var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  var _getVariationJs = require("./getVariation.js");
  var _getVariationJsDefault = parcelHelpers.interopDefault(_getVariationJs);
  var _enumsJs = require("../enums.js");
  var _detectOverflowJs = require("./detectOverflow.js");
  var _detectOverflowJsDefault = parcelHelpers.interopDefault(_detectOverflowJs);
  var _getBasePlacementJs = require("./getBasePlacement.js");
  var _getBasePlacementJsDefault = parcelHelpers.interopDefault(_getBasePlacementJs);
  function computeAutoPlacement(state, options) {
      if (options === void 0) options = {
      };
      var _options = options, placement1 = _options.placement, boundary = _options.boundary, rootBoundary = _options.rootBoundary, padding = _options.padding, flipVariations = _options.flipVariations, _options$allowedAutoP = _options.allowedAutoPlacements, allowedAutoPlacements = _options$allowedAutoP === void 0 ? _enumsJs.placements : _options$allowedAutoP;
      var variation = _getVariationJsDefault.default(placement1);
      var placements = variation ? flipVariations ? _enumsJs.variationPlacements : _enumsJs.variationPlacements.filter(function(placement) {
          return _getVariationJsDefault.default(placement) === variation;
      }) : _enumsJs.basePlacements;
      var allowedPlacements = placements.filter(function(placement) {
          return allowedAutoPlacements.indexOf(placement) >= 0;
      });
      if (allowedPlacements.length === 0) {
          allowedPlacements = placements;
          console.error([
              'Popper: The `allowedAutoPlacements` option did not allow any',
              'placements. Ensure the `placement` option matches the variation',
              'of the allowed placements.',
              'For example, "auto" cannot be used to allow "bottom-start".',
              'Use "auto-start" instead.'
          ].join(' '));
      } // $FlowFixMe[incompatible-type]: Flow seems to have problems with two array unions...
      var overflows = allowedPlacements.reduce(function(acc, placement) {
          acc[placement] = _detectOverflowJsDefault.default(state, {
              placement: placement,
              boundary: boundary,
              rootBoundary: rootBoundary,
              padding: padding
          })[_getBasePlacementJsDefault.default(placement)];
          return acc;
      }, {
      });
      return Object.keys(overflows).sort(function(a, b) {
          return overflows[a] - overflows[b];
      });
  }
  exports.default = computeAutoPlacement;
  
  },{"./getVariation.js":"lWBoq","../enums.js":"qxiOM","./detectOverflow.js":"bOwkj","./getBasePlacement.js":"hArkE","@parcel/transformer-js/src/esmodule-helpers.js":"6jXwo"}],"jeIWi":[function(require,module,exports) {
  var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  var _enumsJs = require("../enums.js");
  var _detectOverflowJs = require("../utils/detectOverflow.js");
  var _detectOverflowJsDefault = parcelHelpers.interopDefault(_detectOverflowJs);
  function getSideOffsets(overflow, rect, preventedOffsets) {
      if (preventedOffsets === void 0) preventedOffsets = {
          x: 0,
          y: 0
      };
      return {
          top: overflow.top - rect.height - preventedOffsets.y,
          right: overflow.right - rect.width + preventedOffsets.x,
          bottom: overflow.bottom - rect.height + preventedOffsets.y,
          left: overflow.left - rect.width - preventedOffsets.x
      };
  }
  function isAnySideFullyClipped(overflow) {
      return [
          _enumsJs.top,
          _enumsJs.right,
          _enumsJs.bottom,
          _enumsJs.left
      ].some(function(side) {
          return overflow[side] >= 0;
      });
  }
  function hide(_ref) {
      var state = _ref.state, name = _ref.name;
      var referenceRect = state.rects.reference;
      var popperRect = state.rects.popper;
      var preventedOffsets = state.modifiersData.preventOverflow;
      var referenceOverflow = _detectOverflowJsDefault.default(state, {
          elementContext: 'reference'
      });
      var popperAltOverflow = _detectOverflowJsDefault.default(state, {
          altBoundary: true
      });
      var referenceClippingOffsets = getSideOffsets(referenceOverflow, referenceRect);
      var popperEscapeOffsets = getSideOffsets(popperAltOverflow, popperRect, preventedOffsets);
      var isReferenceHidden = isAnySideFullyClipped(referenceClippingOffsets);
      var hasPopperEscaped = isAnySideFullyClipped(popperEscapeOffsets);
      state.modifiersData[name] = {
          referenceClippingOffsets: referenceClippingOffsets,
          popperEscapeOffsets: popperEscapeOffsets,
          isReferenceHidden: isReferenceHidden,
          hasPopperEscaped: hasPopperEscaped
      };
      state.attributes.popper = Object.assign({
      }, state.attributes.popper, {
          'data-popper-reference-hidden': isReferenceHidden,
          'data-popper-escaped': hasPopperEscaped
      });
  } // eslint-disable-next-line import/no-unused-modules
  exports.default = {
      name: 'hide',
      enabled: true,
      phase: 'main',
      requiresIfExists: [
          'preventOverflow'
      ],
      fn: hide
  };
  
  },{"../enums.js":"qxiOM","../utils/detectOverflow.js":"bOwkj","@parcel/transformer-js/src/esmodule-helpers.js":"6jXwo"}],"4yTnb":[function(require,module,exports) {
  var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  parcelHelpers.export(exports, "distanceAndSkiddingToXY", ()=>distanceAndSkiddingToXY
  );
  var _getBasePlacementJs = require("../utils/getBasePlacement.js");
  var _getBasePlacementJsDefault = parcelHelpers.interopDefault(_getBasePlacementJs);
  var _enumsJs = require("../enums.js"); // eslint-disable-next-line import/no-unused-modules
  function distanceAndSkiddingToXY(placement, rects, offset1) {
      var basePlacement = _getBasePlacementJsDefault.default(placement);
      var invertDistance = [
          _enumsJs.left,
          _enumsJs.top
      ].indexOf(basePlacement) >= 0 ? -1 : 1;
      var _ref = typeof offset1 === 'function' ? offset1(Object.assign({
      }, rects, {
          placement: placement
      })) : offset1, skidding = _ref[0], distance = _ref[1];
      skidding = skidding || 0;
      distance = (distance || 0) * invertDistance;
      return [
          _enumsJs.left,
          _enumsJs.right
      ].indexOf(basePlacement) >= 0 ? {
          x: distance,
          y: skidding
      } : {
          x: skidding,
          y: distance
      };
  }
  function offset(_ref2) {
      var state = _ref2.state, options = _ref2.options, name = _ref2.name;
      var _options$offset = options.offset, offset2 = _options$offset === void 0 ? [
          0,
          0
      ] : _options$offset;
      var data = _enumsJs.placements.reduce(function(acc, placement) {
          acc[placement] = distanceAndSkiddingToXY(placement, state.rects, offset2);
          return acc;
      }, {
      });
      var _data$state$placement = data[state.placement], x = _data$state$placement.x, y = _data$state$placement.y;
      if (state.modifiersData.popperOffsets != null) {
          state.modifiersData.popperOffsets.x += x;
          state.modifiersData.popperOffsets.y += y;
      }
      state.modifiersData[name] = data;
  } // eslint-disable-next-line import/no-unused-modules
  exports.default = {
      name: 'offset',
      enabled: true,
      phase: 'main',
      requires: [
          'popperOffsets'
      ],
      fn: offset
  };
  
  },{"../utils/getBasePlacement.js":"hArkE","../enums.js":"qxiOM","@parcel/transformer-js/src/esmodule-helpers.js":"6jXwo"}],"jCAMm":[function(require,module,exports) {
  var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  var _computeOffsetsJs = require("../utils/computeOffsets.js");
  var _computeOffsetsJsDefault = parcelHelpers.interopDefault(_computeOffsetsJs);
  function popperOffsets(_ref) {
      var state = _ref.state, name = _ref.name;
      // Offsets are the actual position the popper needs to have to be
      // properly positioned near its reference element
      // This is the most basic placement, and will be adjusted by
      // the modifiers in the next step
      state.modifiersData[name] = _computeOffsetsJsDefault.default({
          reference: state.rects.reference,
          element: state.rects.popper,
          strategy: 'absolute',
          placement: state.placement
      });
  } // eslint-disable-next-line import/no-unused-modules
  exports.default = {
      name: 'popperOffsets',
      enabled: true,
      phase: 'read',
      fn: popperOffsets,
      data: {
      }
  };
  
  },{"../utils/computeOffsets.js":"7HSss","@parcel/transformer-js/src/esmodule-helpers.js":"6jXwo"}],"gAFAP":[function(require,module,exports) {
  var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  var _enumsJs = require("../enums.js");
  var _getBasePlacementJs = require("../utils/getBasePlacement.js");
  var _getBasePlacementJsDefault = parcelHelpers.interopDefault(_getBasePlacementJs);
  var _getMainAxisFromPlacementJs = require("../utils/getMainAxisFromPlacement.js");
  var _getMainAxisFromPlacementJsDefault = parcelHelpers.interopDefault(_getMainAxisFromPlacementJs);
  var _getAltAxisJs = require("../utils/getAltAxis.js");
  var _getAltAxisJsDefault = parcelHelpers.interopDefault(_getAltAxisJs);
  var _withinJs = require("../utils/within.js");
  var _getLayoutRectJs = require("../dom-utils/getLayoutRect.js");
  var _getLayoutRectJsDefault = parcelHelpers.interopDefault(_getLayoutRectJs);
  var _getOffsetParentJs = require("../dom-utils/getOffsetParent.js");
  var _getOffsetParentJsDefault = parcelHelpers.interopDefault(_getOffsetParentJs);
  var _detectOverflowJs = require("../utils/detectOverflow.js");
  var _detectOverflowJsDefault = parcelHelpers.interopDefault(_detectOverflowJs);
  var _getVariationJs = require("../utils/getVariation.js");
  var _getVariationJsDefault = parcelHelpers.interopDefault(_getVariationJs);
  var _getFreshSideObjectJs = require("../utils/getFreshSideObject.js");
  var _getFreshSideObjectJsDefault = parcelHelpers.interopDefault(_getFreshSideObjectJs);
  var _mathJs = require("../utils/math.js");
  function preventOverflow(_ref) {
      var state = _ref.state, options = _ref.options, name = _ref.name;
      var _options$mainAxis = options.mainAxis, checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis, _options$altAxis = options.altAxis, checkAltAxis = _options$altAxis === void 0 ? false : _options$altAxis, boundary = options.boundary, rootBoundary = options.rootBoundary, altBoundary = options.altBoundary, padding = options.padding, _options$tether = options.tether, tether = _options$tether === void 0 ? true : _options$tether, _options$tetherOffset = options.tetherOffset, tetherOffset = _options$tetherOffset === void 0 ? 0 : _options$tetherOffset;
      var overflow = _detectOverflowJsDefault.default(state, {
          boundary: boundary,
          rootBoundary: rootBoundary,
          padding: padding,
          altBoundary: altBoundary
      });
      var basePlacement = _getBasePlacementJsDefault.default(state.placement);
      var variation = _getVariationJsDefault.default(state.placement);
      var isBasePlacement = !variation;
      var mainAxis = _getMainAxisFromPlacementJsDefault.default(basePlacement);
      var altAxis = _getAltAxisJsDefault.default(mainAxis);
      var popperOffsets = state.modifiersData.popperOffsets;
      var referenceRect = state.rects.reference;
      var popperRect = state.rects.popper;
      var tetherOffsetValue = typeof tetherOffset === 'function' ? tetherOffset(Object.assign({
      }, state.rects, {
          placement: state.placement
      })) : tetherOffset;
      var normalizedTetherOffsetValue = typeof tetherOffsetValue === 'number' ? {
          mainAxis: tetherOffsetValue,
          altAxis: tetherOffsetValue
      } : Object.assign({
          mainAxis: 0,
          altAxis: 0
      }, tetherOffsetValue);
      var offsetModifierState = state.modifiersData.offset ? state.modifiersData.offset[state.placement] : null;
      var data = {
          x: 0,
          y: 0
      };
      if (!popperOffsets) return;
      if (checkMainAxis) {
          var _offsetModifierState$;
          var mainSide = mainAxis === 'y' ? _enumsJs.top : _enumsJs.left;
          var altSide = mainAxis === 'y' ? _enumsJs.bottom : _enumsJs.right;
          var len = mainAxis === 'y' ? 'height' : 'width';
          var offset = popperOffsets[mainAxis];
          var min = offset + overflow[mainSide];
          var max = offset - overflow[altSide];
          var additive = tether ? -popperRect[len] / 2 : 0;
          var minLen = variation === _enumsJs.start ? referenceRect[len] : popperRect[len];
          var maxLen = variation === _enumsJs.start ? -popperRect[len] : -referenceRect[len]; // We need to include the arrow in the calculation so the arrow doesn't go
          // outside the reference bounds
          var arrowElement = state.elements.arrow;
          var arrowRect = tether && arrowElement ? _getLayoutRectJsDefault.default(arrowElement) : {
              width: 0,
              height: 0
          };
          var arrowPaddingObject = state.modifiersData['arrow#persistent'] ? state.modifiersData['arrow#persistent'].padding : _getFreshSideObjectJsDefault.default();
          var arrowPaddingMin = arrowPaddingObject[mainSide];
          var arrowPaddingMax = arrowPaddingObject[altSide]; // If the reference length is smaller than the arrow length, we don't want
          // to include its full size in the calculation. If the reference is small
          // and near the edge of a boundary, the popper can overflow even if the
          // reference is not overflowing as well (e.g. virtual elements with no
          // width or height)
          var arrowLen = _withinJs.within(0, referenceRect[len], arrowRect[len]);
          var minOffset = isBasePlacement ? referenceRect[len] / 2 - additive - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis : minLen - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis;
          var maxOffset = isBasePlacement ? -referenceRect[len] / 2 + additive + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis : maxLen + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis;
          var arrowOffsetParent = state.elements.arrow && _getOffsetParentJsDefault.default(state.elements.arrow);
          var clientOffset = arrowOffsetParent ? mainAxis === 'y' ? arrowOffsetParent.clientTop || 0 : arrowOffsetParent.clientLeft || 0 : 0;
          var offsetModifierValue = (_offsetModifierState$ = offsetModifierState == null ? void 0 : offsetModifierState[mainAxis]) != null ? _offsetModifierState$ : 0;
          var tetherMin = offset + minOffset - offsetModifierValue - clientOffset;
          var tetherMax = offset + maxOffset - offsetModifierValue;
          var preventedOffset = _withinJs.within(tether ? _mathJs.min(min, tetherMin) : min, offset, tether ? _mathJs.max(max, tetherMax) : max);
          popperOffsets[mainAxis] = preventedOffset;
          data[mainAxis] = preventedOffset - offset;
      }
      if (checkAltAxis) {
          var _offsetModifierState$2;
          var _mainSide = mainAxis === 'x' ? _enumsJs.top : _enumsJs.left;
          var _altSide = mainAxis === 'x' ? _enumsJs.bottom : _enumsJs.right;
          var _offset = popperOffsets[altAxis];
          var _len = altAxis === 'y' ? 'height' : 'width';
          var _min = _offset + overflow[_mainSide];
          var _max = _offset - overflow[_altSide];
          var isOriginSide = [
              _enumsJs.top,
              _enumsJs.left
          ].indexOf(basePlacement) !== -1;
          var _offsetModifierValue = (_offsetModifierState$2 = offsetModifierState == null ? void 0 : offsetModifierState[altAxis]) != null ? _offsetModifierState$2 : 0;
          var _tetherMin = isOriginSide ? _min : _offset - referenceRect[_len] - popperRect[_len] - _offsetModifierValue + normalizedTetherOffsetValue.altAxis;
          var _tetherMax = isOriginSide ? _offset + referenceRect[_len] + popperRect[_len] - _offsetModifierValue - normalizedTetherOffsetValue.altAxis : _max;
          var _preventedOffset = tether && isOriginSide ? _withinJs.withinMaxClamp(_tetherMin, _offset, _tetherMax) : _withinJs.within(tether ? _tetherMin : _min, _offset, tether ? _tetherMax : _max);
          popperOffsets[altAxis] = _preventedOffset;
          data[altAxis] = _preventedOffset - _offset;
      }
      state.modifiersData[name] = data;
  } // eslint-disable-next-line import/no-unused-modules
  exports.default = {
      name: 'preventOverflow',
      enabled: true,
      phase: 'main',
      fn: preventOverflow,
      requiresIfExists: [
          'offset'
      ]
  };
  
  },{"../enums.js":"qxiOM","../utils/getBasePlacement.js":"hArkE","../utils/getMainAxisFromPlacement.js":"4EL78","../utils/getAltAxis.js":"iOHpc","../utils/within.js":"fpOgl","../dom-utils/getLayoutRect.js":"8ol2m","../dom-utils/getOffsetParent.js":"jtCXH","../utils/detectOverflow.js":"bOwkj","../utils/getVariation.js":"lWBoq","../utils/getFreshSideObject.js":"lXEWs","../utils/math.js":"9Zwjh","@parcel/transformer-js/src/esmodule-helpers.js":"6jXwo"}],"iOHpc":[function(require,module,exports) {
  var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  function getAltAxis(axis) {
      return axis === 'x' ? 'y' : 'x';
  }
  exports.default = getAltAxis;
  
  },{"@parcel/transformer-js/src/esmodule-helpers.js":"6jXwo"}],"g1Jyk":[function(require,module,exports) {
  var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  parcelHelpers.export(exports, "popperGenerator", ()=>popperGenerator
  );
  parcelHelpers.export(exports, "createPopper", ()=>createPopper
  );
  parcelHelpers.export(exports, "detectOverflow", ()=>_detectOverflowJsDefault.default
  );
  var _getCompositeRectJs = require("./dom-utils/getCompositeRect.js");
  var _getCompositeRectJsDefault = parcelHelpers.interopDefault(_getCompositeRectJs);
  var _getLayoutRectJs = require("./dom-utils/getLayoutRect.js");
  var _getLayoutRectJsDefault = parcelHelpers.interopDefault(_getLayoutRectJs);
  var _listScrollParentsJs = require("./dom-utils/listScrollParents.js");
  var _listScrollParentsJsDefault = parcelHelpers.interopDefault(_listScrollParentsJs);
  var _getOffsetParentJs = require("./dom-utils/getOffsetParent.js");
  var _getOffsetParentJsDefault = parcelHelpers.interopDefault(_getOffsetParentJs);
  var _getComputedStyleJs = require("./dom-utils/getComputedStyle.js");
  var _getComputedStyleJsDefault = parcelHelpers.interopDefault(_getComputedStyleJs);
  var _orderModifiersJs = require("./utils/orderModifiers.js");
  var _orderModifiersJsDefault = parcelHelpers.interopDefault(_orderModifiersJs);
  var _debounceJs = require("./utils/debounce.js");
  var _debounceJsDefault = parcelHelpers.interopDefault(_debounceJs);
  var _validateModifiersJs = require("./utils/validateModifiers.js");
  var _validateModifiersJsDefault = parcelHelpers.interopDefault(_validateModifiersJs);
  var _uniqueByJs = require("./utils/uniqueBy.js");
  var _uniqueByJsDefault = parcelHelpers.interopDefault(_uniqueByJs);
  var _getBasePlacementJs = require("./utils/getBasePlacement.js");
  var _getBasePlacementJsDefault = parcelHelpers.interopDefault(_getBasePlacementJs);
  var _mergeByNameJs = require("./utils/mergeByName.js");
  var _mergeByNameJsDefault = parcelHelpers.interopDefault(_mergeByNameJs);
  var _detectOverflowJs = require("./utils/detectOverflow.js");
  var _detectOverflowJsDefault = parcelHelpers.interopDefault(_detectOverflowJs);
  var _instanceOfJs = require("./dom-utils/instanceOf.js");
  var _enumsJs = require("./enums.js");
  var INVALID_ELEMENT_ERROR = 'Popper: Invalid reference or popper argument provided. They must be either a DOM element or virtual element.';
  var INFINITE_LOOP_ERROR = 'Popper: An infinite loop in the modifiers cycle has been detected! The cycle has been interrupted to prevent a browser crash.';
  var DEFAULT_OPTIONS = {
      placement: 'bottom',
      modifiers: [],
      strategy: 'absolute'
  };
  function areValidElements() {
      for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++)args[_key] = arguments[_key];
      return !args.some(function(element) {
          return !(element && typeof element.getBoundingClientRect === 'function');
      });
  }
  function popperGenerator(generatorOptions) {
      if (generatorOptions === void 0) generatorOptions = {
      };
      var _generatorOptions = generatorOptions, _generatorOptions$def = _generatorOptions.defaultModifiers, defaultModifiers = _generatorOptions$def === void 0 ? [] : _generatorOptions$def, _generatorOptions$def2 = _generatorOptions.defaultOptions, defaultOptions = _generatorOptions$def2 === void 0 ? DEFAULT_OPTIONS : _generatorOptions$def2;
      return function createPopper(reference1, popper1, options1) {
          if (options1 === void 0) options1 = defaultOptions;
          var state1 = {
              placement: 'bottom',
              orderedModifiers: [],
              options: Object.assign({
              }, DEFAULT_OPTIONS, defaultOptions),
              modifiersData: {
              },
              elements: {
                  reference: reference1,
                  popper: popper1
              },
              attributes: {
              },
              styles: {
              }
          };
          var effectCleanupFns = [];
          var isDestroyed = false;
          var instance = {
              state: state1,
              setOptions: function setOptions(setOptionsAction) {
                  var options = typeof setOptionsAction === 'function' ? setOptionsAction(state1.options) : setOptionsAction;
                  cleanupModifierEffects();
                  state1.options = Object.assign({
                  }, defaultOptions, state1.options, options);
                  state1.scrollParents = {
                      reference: _instanceOfJs.isElement(reference1) ? _listScrollParentsJsDefault.default(reference1) : reference1.contextElement ? _listScrollParentsJsDefault.default(reference1.contextElement) : [],
                      popper: _listScrollParentsJsDefault.default(popper1)
                  }; // Orders the modifiers based on their dependencies and `phase`
                  // properties
                  var orderedModifiers = _orderModifiersJsDefault.default(_mergeByNameJsDefault.default([].concat(defaultModifiers, state1.options.modifiers))); // Strip out disabled modifiers
                  state1.orderedModifiers = orderedModifiers.filter(function(m) {
                      return m.enabled;
                  }); // Validate the provided modifiers so that the consumer will get warned
                  var modifiers = _uniqueByJsDefault.default([].concat(orderedModifiers, state1.options.modifiers), function(_ref) {
                      var name = _ref.name;
                      return name;
                  });
                  _validateModifiersJsDefault.default(modifiers);
                  if (_getBasePlacementJsDefault.default(state1.options.placement) === _enumsJs.auto) {
                      var flipModifier = state1.orderedModifiers.find(function(_ref2) {
                          var name = _ref2.name;
                          return name === 'flip';
                      });
                      if (!flipModifier) console.error([
                          'Popper: "auto" placements require the "flip" modifier be',
                          'present and enabled to work.'
                      ].join(' '));
                  }
                  var _getComputedStyle = _getComputedStyleJsDefault.default(popper1), marginTop = _getComputedStyle.marginTop, marginRight = _getComputedStyle.marginRight, marginBottom = _getComputedStyle.marginBottom, marginLeft = _getComputedStyle.marginLeft; // We no longer take into account `margins` on the popper, and it can
                  // cause bugs with positioning, so we'll warn the consumer
                  if ([
                      marginTop,
                      marginRight,
                      marginBottom,
                      marginLeft
                  ].some(function(margin) {
                      return parseFloat(margin);
                  })) console.warn([
                      'Popper: CSS "margin" styles cannot be used to apply padding',
                      'between the popper and its reference element or boundary.',
                      'To replicate margin, use the `offset` modifier, as well as',
                      'the `padding` option in the `preventOverflow` and `flip`',
                      'modifiers.'
                  ].join(' '));
                  runModifierEffects();
                  return instance.update();
              },
              // Sync update – it will always be executed, even if not necessary. This
              // is useful for low frequency updates where sync behavior simplifies the
              // logic.
              // For high frequency updates (e.g. `resize` and `scroll` events), always
              // prefer the async Popper#update method
              forceUpdate: function forceUpdate() {
                  if (isDestroyed) return;
                  var _state$elements = state1.elements, reference = _state$elements.reference, popper = _state$elements.popper; // Don't proceed if `reference` or `popper` are not valid elements
                  // anymore
                  if (!areValidElements(reference, popper)) {
                      console.error(INVALID_ELEMENT_ERROR);
                      return;
                  } // Store the reference and popper rects to be read by modifiers
                  state1.rects = {
                      reference: _getCompositeRectJsDefault.default(reference, _getOffsetParentJsDefault.default(popper), state1.options.strategy === 'fixed'),
                      popper: _getLayoutRectJsDefault.default(popper)
                  }; // Modifiers have the ability to reset the current update cycle. The
                  // most common use case for this is the `flip` modifier changing the
                  // placement, which then needs to re-run all the modifiers, because the
                  // logic was previously ran for the previous placement and is therefore
                  // stale/incorrect
                  state1.reset = false;
                  state1.placement = state1.options.placement; // On each update cycle, the `modifiersData` property for each modifier
                  // is filled with the initial data specified by the modifier. This means
                  // it doesn't persist and is fresh on each update.
                  // To ensure persistent data, use `${name}#persistent`
                  state1.orderedModifiers.forEach(function(modifier) {
                      return state1.modifiersData[modifier.name] = Object.assign({
                      }, modifier.data);
                  });
                  var __debug_loops__ = 0;
                  for(var index = 0; index < state1.orderedModifiers.length; index++){
                      __debug_loops__ += 1;
                      if (__debug_loops__ > 100) {
                          console.error(INFINITE_LOOP_ERROR);
                          break;
                      }
                      if (state1.reset === true) {
                          state1.reset = false;
                          index = -1;
                          continue;
                      }
                      var _state$orderedModifie = state1.orderedModifiers[index], fn = _state$orderedModifie.fn, _state$orderedModifie2 = _state$orderedModifie.options, _options = _state$orderedModifie2 === void 0 ? {
                      } : _state$orderedModifie2, name = _state$orderedModifie.name;
                      if (typeof fn === 'function') state1 = fn({
                          state: state1,
                          options: _options,
                          name: name,
                          instance: instance
                      }) || state1;
                  }
              },
              // Async and optimistically optimized update – it will not be executed if
              // not necessary (debounced to run at most once-per-tick)
              update: _debounceJsDefault.default(function() {
                  return new Promise(function(resolve) {
                      instance.forceUpdate();
                      resolve(state1);
                  });
              }),
              destroy: function destroy() {
                  cleanupModifierEffects();
                  isDestroyed = true;
              }
          };
          if (!areValidElements(reference1, popper1)) {
              console.error(INVALID_ELEMENT_ERROR);
              return instance;
          }
          instance.setOptions(options1).then(function(state) {
              if (!isDestroyed && options1.onFirstUpdate) options1.onFirstUpdate(state);
          }); // Modifiers have the ability to execute arbitrary code before the first
          // update cycle runs. They will be executed in the same order as the update
          // cycle. This is useful when a modifier adds some persistent data that
          // other modifiers need to use, but the modifier is run after the dependent
          // one.
          function runModifierEffects() {
              state1.orderedModifiers.forEach(function(_ref3) {
                  var name = _ref3.name, _ref3$options = _ref3.options, options = _ref3$options === void 0 ? {
                  } : _ref3$options, effect = _ref3.effect;
                  if (typeof effect === 'function') {
                      var cleanupFn = effect({
                          state: state1,
                          name: name,
                          instance: instance,
                          options: options
                      });
                      var noopFn = function noopFn() {
                      };
                      effectCleanupFns.push(cleanupFn || noopFn);
                  }
              });
          }
          function cleanupModifierEffects() {
              effectCleanupFns.forEach(function(fn) {
                  return fn();
              });
              effectCleanupFns = [];
          }
          return instance;
      };
  }
  var createPopper = /*#__PURE__*/ popperGenerator(); // eslint-disable-next-line import/no-unused-modules
  
  },{"./dom-utils/getCompositeRect.js":"itWMz","./dom-utils/getLayoutRect.js":"8ol2m","./dom-utils/listScrollParents.js":"4CRHK","./dom-utils/getOffsetParent.js":"jtCXH","./dom-utils/getComputedStyle.js":"cYNQK","./utils/orderModifiers.js":"hUXjz","./utils/debounce.js":"6x6UT","./utils/validateModifiers.js":"gBqCj","./utils/uniqueBy.js":"9oMQk","./utils/getBasePlacement.js":"hArkE","./utils/mergeByName.js":"eNYZ6","./utils/detectOverflow.js":"bOwkj","./dom-utils/instanceOf.js":"1C4Db","./enums.js":"qxiOM","@parcel/transformer-js/src/esmodule-helpers.js":"6jXwo"}],"itWMz":[function(require,module,exports) {
  var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  var _getBoundingClientRectJs = require("./getBoundingClientRect.js");
  var _getBoundingClientRectJsDefault = parcelHelpers.interopDefault(_getBoundingClientRectJs);
  var _getNodeScrollJs = require("./getNodeScroll.js");
  var _getNodeScrollJsDefault = parcelHelpers.interopDefault(_getNodeScrollJs);
  var _getNodeNameJs = require("./getNodeName.js");
  var _getNodeNameJsDefault = parcelHelpers.interopDefault(_getNodeNameJs);
  var _instanceOfJs = require("./instanceOf.js");
  var _getWindowScrollBarXJs = require("./getWindowScrollBarX.js");
  var _getWindowScrollBarXJsDefault = parcelHelpers.interopDefault(_getWindowScrollBarXJs);
  var _getDocumentElementJs = require("./getDocumentElement.js");
  var _getDocumentElementJsDefault = parcelHelpers.interopDefault(_getDocumentElementJs);
  var _isScrollParentJs = require("./isScrollParent.js");
  var _isScrollParentJsDefault = parcelHelpers.interopDefault(_isScrollParentJs);
  var _mathJs = require("../utils/math.js");
  function isElementScaled(element) {
      var rect = element.getBoundingClientRect();
      var scaleX = _mathJs.round(rect.width) / element.offsetWidth || 1;
      var scaleY = _mathJs.round(rect.height) / element.offsetHeight || 1;
      return scaleX !== 1 || scaleY !== 1;
  } // Returns the composite rect of an element relative to its offsetParent.
  function getCompositeRect(elementOrVirtualElement, offsetParent, isFixed) {
      if (isFixed === void 0) isFixed = false;
      var isOffsetParentAnElement = _instanceOfJs.isHTMLElement(offsetParent);
      var offsetParentIsScaled = _instanceOfJs.isHTMLElement(offsetParent) && isElementScaled(offsetParent);
      var documentElement = _getDocumentElementJsDefault.default(offsetParent);
      var rect = _getBoundingClientRectJsDefault.default(elementOrVirtualElement, offsetParentIsScaled);
      var scroll = {
          scrollLeft: 0,
          scrollTop: 0
      };
      var offsets = {
          x: 0,
          y: 0
      };
      if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {
          if (_getNodeNameJsDefault.default(offsetParent) !== 'body' || _isScrollParentJsDefault.default(documentElement)) scroll = _getNodeScrollJsDefault.default(offsetParent);
          if (_instanceOfJs.isHTMLElement(offsetParent)) {
              offsets = _getBoundingClientRectJsDefault.default(offsetParent, true);
              offsets.x += offsetParent.clientLeft;
              offsets.y += offsetParent.clientTop;
          } else if (documentElement) offsets.x = _getWindowScrollBarXJsDefault.default(documentElement);
      }
      return {
          x: rect.left + scroll.scrollLeft - offsets.x,
          y: rect.top + scroll.scrollTop - offsets.y,
          width: rect.width,
          height: rect.height
      };
  }
  exports.default = getCompositeRect;
  
  },{"./getBoundingClientRect.js":"hyXFK","./getNodeScroll.js":"kDmXG","./getNodeName.js":"dO1na","./instanceOf.js":"1C4Db","./getWindowScrollBarX.js":"k8Ha2","./getDocumentElement.js":"dX7bp","./isScrollParent.js":"7nATc","../utils/math.js":"9Zwjh","@parcel/transformer-js/src/esmodule-helpers.js":"6jXwo"}],"kDmXG":[function(require,module,exports) {
  var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  var _getWindowScrollJs = require("./getWindowScroll.js");
  var _getWindowScrollJsDefault = parcelHelpers.interopDefault(_getWindowScrollJs);
  var _getWindowJs = require("./getWindow.js");
  var _getWindowJsDefault = parcelHelpers.interopDefault(_getWindowJs);
  var _instanceOfJs = require("./instanceOf.js");
  var _getHTMLElementScrollJs = require("./getHTMLElementScroll.js");
  var _getHTMLElementScrollJsDefault = parcelHelpers.interopDefault(_getHTMLElementScrollJs);
  function getNodeScroll(node) {
      if (node === _getWindowJsDefault.default(node) || !_instanceOfJs.isHTMLElement(node)) return _getWindowScrollJsDefault.default(node);
      else return _getHTMLElementScrollJsDefault.default(node);
  }
  exports.default = getNodeScroll;
  
  },{"./getWindowScroll.js":"8B9D1","./getWindow.js":"kY3PJ","./instanceOf.js":"1C4Db","./getHTMLElementScroll.js":"lLsYN","@parcel/transformer-js/src/esmodule-helpers.js":"6jXwo"}],"lLsYN":[function(require,module,exports) {
  var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  function getHTMLElementScroll(element) {
      return {
          scrollLeft: element.scrollLeft,
          scrollTop: element.scrollTop
      };
  }
  exports.default = getHTMLElementScroll;
  
  },{"@parcel/transformer-js/src/esmodule-helpers.js":"6jXwo"}],"hUXjz":[function(require,module,exports) {
  var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  var _enumsJs = require("../enums.js"); // source: https://stackoverflow.com/questions/49875255
  function order(modifiers) {
      var map = new Map();
      var visited = new Set();
      var result = [];
      modifiers.forEach(function(modifier) {
          map.set(modifier.name, modifier);
      }); // On visiting object, check for its dependencies and visit them recursively
      function sort(modifier) {
          visited.add(modifier.name);
          var requires = [].concat(modifier.requires || [], modifier.requiresIfExists || []);
          requires.forEach(function(dep) {
              if (!visited.has(dep)) {
                  var depModifier = map.get(dep);
                  if (depModifier) sort(depModifier);
              }
          });
          result.push(modifier);
      }
      modifiers.forEach(function(modifier) {
          if (!visited.has(modifier.name)) // check for visited object
          sort(modifier);
      });
      return result;
  }
  function orderModifiers(modifiers) {
      // order based on dependencies
      var orderedModifiers = order(modifiers); // order based on phase
      return _enumsJs.modifierPhases.reduce(function(acc, phase) {
          return acc.concat(orderedModifiers.filter(function(modifier) {
              return modifier.phase === phase;
          }));
      }, []);
  }
  exports.default = orderModifiers;
  
  },{"../enums.js":"qxiOM","@parcel/transformer-js/src/esmodule-helpers.js":"6jXwo"}],"6x6UT":[function(require,module,exports) {
  var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  function debounce(fn) {
      var pending;
      return function() {
          if (!pending) pending = new Promise(function(resolve) {
              Promise.resolve().then(function() {
                  pending = undefined;
                  resolve(fn());
              });
          });
          return pending;
      };
  }
  exports.default = debounce;
  
  },{"@parcel/transformer-js/src/esmodule-helpers.js":"6jXwo"}],"gBqCj":[function(require,module,exports) {
  var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  var _formatJs = require("./format.js");
  var _formatJsDefault = parcelHelpers.interopDefault(_formatJs);
  var _enumsJs = require("../enums.js");
  var INVALID_MODIFIER_ERROR = 'Popper: modifier "%s" provided an invalid %s property, expected %s but got %s';
  var MISSING_DEPENDENCY_ERROR = 'Popper: modifier "%s" requires "%s", but "%s" modifier is not available';
  var VALID_PROPERTIES = [
      'name',
      'enabled',
      'phase',
      'fn',
      'effect',
      'requires',
      'options'
  ];
  function validateModifiers(modifiers) {
      modifiers.forEach(function(modifier) {
          [].concat(Object.keys(modifier), VALID_PROPERTIES) // IE11-compatible replacement for `new Set(iterable)`
          .filter(function(value, index, self) {
              return self.indexOf(value) === index;
          }).forEach(function(key) {
              switch(key){
                  case 'name':
                      if (typeof modifier.name !== 'string') console.error(_formatJsDefault.default(INVALID_MODIFIER_ERROR, String(modifier.name), '"name"', '"string"', "\"" + String(modifier.name) + "\""));
                      break;
                  case 'enabled':
                      if (typeof modifier.enabled !== 'boolean') console.error(_formatJsDefault.default(INVALID_MODIFIER_ERROR, modifier.name, '"enabled"', '"boolean"', "\"" + String(modifier.enabled) + "\""));
                      break;
                  case 'phase':
                      if (_enumsJs.modifierPhases.indexOf(modifier.phase) < 0) console.error(_formatJsDefault.default(INVALID_MODIFIER_ERROR, modifier.name, '"phase"', "either " + _enumsJs.modifierPhases.join(', '), "\"" + String(modifier.phase) + "\""));
                      break;
                  case 'fn':
                      if (typeof modifier.fn !== 'function') console.error(_formatJsDefault.default(INVALID_MODIFIER_ERROR, modifier.name, '"fn"', '"function"', "\"" + String(modifier.fn) + "\""));
                      break;
                  case 'effect':
                      if (modifier.effect != null && typeof modifier.effect !== 'function') console.error(_formatJsDefault.default(INVALID_MODIFIER_ERROR, modifier.name, '"effect"', '"function"', "\"" + String(modifier.fn) + "\""));
                      break;
                  case 'requires':
                      if (modifier.requires != null && !Array.isArray(modifier.requires)) console.error(_formatJsDefault.default(INVALID_MODIFIER_ERROR, modifier.name, '"requires"', '"array"', "\"" + String(modifier.requires) + "\""));
                      break;
                  case 'requiresIfExists':
                      if (!Array.isArray(modifier.requiresIfExists)) console.error(_formatJsDefault.default(INVALID_MODIFIER_ERROR, modifier.name, '"requiresIfExists"', '"array"', "\"" + String(modifier.requiresIfExists) + "\""));
                      break;
                  case 'options':
                  case 'data':
                      break;
                  default:
                      console.error("PopperJS: an invalid property has been provided to the \"" + modifier.name + "\" modifier, valid properties are " + VALID_PROPERTIES.map(function(s) {
                          return "\"" + s + "\"";
                      }).join(', ') + "; but \"" + key + "\" was provided.");
              }
              modifier.requires && modifier.requires.forEach(function(requirement) {
                  if (modifiers.find(function(mod) {
                      return mod.name === requirement;
                  }) == null) console.error(_formatJsDefault.default(MISSING_DEPENDENCY_ERROR, String(modifier.name), requirement, requirement));
              });
          });
      });
  }
  exports.default = validateModifiers;
  
  },{"./format.js":"9qXIw","../enums.js":"qxiOM","@parcel/transformer-js/src/esmodule-helpers.js":"6jXwo"}],"9qXIw":[function(require,module,exports) {
  var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  function format(str) {
      for(var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++)args[_key - 1] = arguments[_key];
      return [].concat(args).reduce(function(p, c) {
          return p.replace(/%s/, c);
      }, str);
  }
  exports.default = format;
  
  },{"@parcel/transformer-js/src/esmodule-helpers.js":"6jXwo"}],"9oMQk":[function(require,module,exports) {
  var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  function uniqueBy(arr, fn) {
      var identifiers = new Set();
      return arr.filter(function(item) {
          var identifier = fn(item);
          if (!identifiers.has(identifier)) {
              identifiers.add(identifier);
              return true;
          }
      });
  }
  exports.default = uniqueBy;
  
  },{"@parcel/transformer-js/src/esmodule-helpers.js":"6jXwo"}],"eNYZ6":[function(require,module,exports) {
  var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  function mergeByName(modifiers) {
      var merged1 = modifiers.reduce(function(merged, current) {
          var existing = merged[current.name];
          merged[current.name] = existing ? Object.assign({
          }, existing, current, {
              options: Object.assign({
              }, existing.options, current.options),
              data: Object.assign({
              }, existing.data, current.data)
          }) : current;
          return merged;
      }, {
      }); // IE11 does not support Object.values
      return Object.keys(merged1).map(function(key) {
          return merged1[key];
      });
  }
  exports.default = mergeByName;
  
  },{"@parcel/transformer-js/src/esmodule-helpers.js":"6jXwo"}],"dg9kH":[function(require,module,exports) {
  var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  parcelHelpers.export(exports, "createPopper", ()=>createPopper
  ) // eslint-disable-next-line import/no-unused-modules
  ;
  parcelHelpers.export(exports, "popperGenerator", ()=>_createPopperJs.popperGenerator
  );
  parcelHelpers.export(exports, "defaultModifiers", ()=>defaultModifiers
  );
  parcelHelpers.export(exports, "detectOverflow", ()=>_createPopperJs.detectOverflow
  );
  parcelHelpers.export(exports, "createPopperLite", ()=>_popperLiteJs.createPopper
  ) // eslint-disable-next-line import/no-unused-modules
  ;
  var _createPopperJs = require("./createPopper.js");
  var _eventListenersJs = require("./modifiers/eventListeners.js");
  var _eventListenersJsDefault = parcelHelpers.interopDefault(_eventListenersJs);
  var _popperOffsetsJs = require("./modifiers/popperOffsets.js");
  var _popperOffsetsJsDefault = parcelHelpers.interopDefault(_popperOffsetsJs);
  var _computeStylesJs = require("./modifiers/computeStyles.js");
  var _computeStylesJsDefault = parcelHelpers.interopDefault(_computeStylesJs);
  var _applyStylesJs = require("./modifiers/applyStyles.js");
  var _applyStylesJsDefault = parcelHelpers.interopDefault(_applyStylesJs);
  var _offsetJs = require("./modifiers/offset.js");
  var _offsetJsDefault = parcelHelpers.interopDefault(_offsetJs);
  var _flipJs = require("./modifiers/flip.js");
  var _flipJsDefault = parcelHelpers.interopDefault(_flipJs);
  var _preventOverflowJs = require("./modifiers/preventOverflow.js");
  var _preventOverflowJsDefault = parcelHelpers.interopDefault(_preventOverflowJs);
  var _arrowJs = require("./modifiers/arrow.js");
  var _arrowJsDefault = parcelHelpers.interopDefault(_arrowJs);
  var _hideJs = require("./modifiers/hide.js");
  var _hideJsDefault = parcelHelpers.interopDefault(_hideJs);
  var _popperLiteJs = require("./popper-lite.js");
  var _indexJs = require("./modifiers/index.js");
  parcelHelpers.exportAll(_indexJs, exports);
  var defaultModifiers = [
      _eventListenersJsDefault.default,
      _popperOffsetsJsDefault.default,
      _computeStylesJsDefault.default,
      _applyStylesJsDefault.default,
      _offsetJsDefault.default,
      _flipJsDefault.default,
      _preventOverflowJsDefault.default,
      _arrowJsDefault.default,
      _hideJsDefault.default
  ];
  var createPopper = /*#__PURE__*/ _createPopperJs.popperGenerator({
      defaultModifiers: defaultModifiers
  }); // eslint-disable-next-line import/no-unused-modules
  
  },{"./createPopper.js":"g1Jyk","./modifiers/eventListeners.js":"lGj0Q","./modifiers/popperOffsets.js":"jCAMm","./modifiers/computeStyles.js":"3aFNf","./modifiers/applyStyles.js":"cPbqH","./modifiers/offset.js":"4yTnb","./modifiers/flip.js":"bwIX2","./modifiers/preventOverflow.js":"gAFAP","./modifiers/arrow.js":"6eCC1","./modifiers/hide.js":"jeIWi","./popper-lite.js":"bxdRR","./modifiers/index.js":"bSOA6","@parcel/transformer-js/src/esmodule-helpers.js":"6jXwo"}],"bxdRR":[function(require,module,exports) {
  var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  parcelHelpers.export(exports, "createPopper", ()=>createPopper
  );
  parcelHelpers.export(exports, "popperGenerator", ()=>_createPopperJs.popperGenerator
  );
  parcelHelpers.export(exports, "defaultModifiers", ()=>defaultModifiers
  );
  parcelHelpers.export(exports, "detectOverflow", ()=>_createPopperJs.detectOverflow
  );
  var _createPopperJs = require("./createPopper.js");
  var _eventListenersJs = require("./modifiers/eventListeners.js");
  var _eventListenersJsDefault = parcelHelpers.interopDefault(_eventListenersJs);
  var _popperOffsetsJs = require("./modifiers/popperOffsets.js");
  var _popperOffsetsJsDefault = parcelHelpers.interopDefault(_popperOffsetsJs);
  var _computeStylesJs = require("./modifiers/computeStyles.js");
  var _computeStylesJsDefault = parcelHelpers.interopDefault(_computeStylesJs);
  var _applyStylesJs = require("./modifiers/applyStyles.js");
  var _applyStylesJsDefault = parcelHelpers.interopDefault(_applyStylesJs);
  var defaultModifiers = [
      _eventListenersJsDefault.default,
      _popperOffsetsJsDefault.default,
      _computeStylesJsDefault.default,
      _applyStylesJsDefault.default
  ];
  var createPopper = /*#__PURE__*/ _createPopperJs.popperGenerator({
      defaultModifiers: defaultModifiers
  }); // eslint-disable-next-line import/no-unused-modules
  
  },{"./createPopper.js":"g1Jyk","./modifiers/eventListeners.js":"lGj0Q","./modifiers/popperOffsets.js":"jCAMm","./modifiers/computeStyles.js":"3aFNf","./modifiers/applyStyles.js":"cPbqH","@parcel/transformer-js/src/esmodule-helpers.js":"6jXwo"}],"ixfcR":[function(require,module,exports) {
  //
  // Apex line chart
  //
  'use strict';
  var apexCharts = require('apexcharts');
  var themeStyles = require('../theme-styles');
  function apexLineChart() {
      this.init = function(chartEl) {
          var styles = new themeStyles();
          var colorPalette = [
              styles.colors().theme.primary,
              styles.colors().theme.tertiary,
              styles.colors().theme.secondary,
              styles.colors().theme.warning
          ];
          function init($this) {
              var options = {
                  chart: {
                      zoom: {
                          enabled: false
                      },
                      toolbar: {
                          show: false
                      },
                      shadow: {
                          enabled: false
                      }
                  },
                  colors: colorPalette,
                  stroke: {
                      width: 4,
                      curve: 'smooth'
                  },
                  series: [
                      {
                          name: 'Ongoing',
                          type: 'line',
                          data: [
                              30,
                              50,
                              70,
                              90,
                              80,
                              70,
                              90,
                              120,
                              100,
                              120,
                              140
                          ]
                      },
                      {
                          name: 'Finished',
                          type: 'line',
                          data: [
                              50,
                              70,
                              30,
                              20,
                              10,
                              10,
                              40,
                              100,
                              90,
                              100,
                              120
                          ]
                      }
                  ],
                  markers: {
                      size: 0
                  },
                  xaxis: {
                      axisBorder: {
                          show: false
                      },
                      axisTicks: {
                          show: false
                      },
                      categories: [
                          'Jan',
                          'Feb',
                          'Mar',
                          'Apr',
                          'May',
                          'Jun',
                          'Jul',
                          'Aug',
                          'Sep',
                          'Oct',
                          'Nov',
                          'Dec'
                      ],
                      labels: {
                          style: {
                              colors: '#999',
                              fontSize: '13px',
                              fontFamily: '#333',
                              cssClass: 'apexcharts-xaxis-label'
                          }
                      }
                  },
                  yaxis: {
                      axisBorder: {
                          show: false
                      },
                      axisTicks: {
                          show: false
                      },
                      labels: {
                          style: {
                              colors: '#999',
                              fontSize: '13px',
                              fontFamily: 'inherit',
                              cssClass: 'apexcharts-xaxis-label'
                          }
                      }
                  },
                  legend: {
                      show: false
                  },
                  grid: {
                      borderColor: '#f3f3f3',
                      strokeDashArray: 3
                  },
                  dataLabels: {
                      enabled: false
                  },
                  tooltip: {
                      shared: true,
                      intersect: false,
                      y: {
                          formatter: function(y) {
                              if (typeof y !== "undefined") return y.toFixed(0) + " orders";
                              return y;
                          }
                      }
                  }
              };
              // Get data from data attributes
              var height = $this.dataset.height;
              // Inject dynamic properties
              options.colors = colorPalette;
              options.chart.height = height ? height : 350;
              // Create chart
              new apexCharts($this, options).render();
          }
          if (chartEl) init(chartEl);
      };
  }
  module.exports = apexLineChart;
  
  },{"apexcharts":"Hm9hE","../theme-styles":"kqb2N"}],"Hm9hE":[function(require,module,exports) {
  /*!
   * ApexCharts v3.33.0
   * (c) 2018-2022 ApexCharts
   * Released under the MIT License.
   */ "use strict";
  function t(t1, e1) {
      var i1 = Object.keys(t1);
      if (Object.getOwnPropertySymbols) {
          var a1 = Object.getOwnPropertySymbols(t1);
          e1 && (a1 = a1.filter(function(e2) {
              return Object.getOwnPropertyDescriptor(t1, e2).enumerable;
          })), i1.push.apply(i1, a1);
      }
      return i1;
  }
  function e(e3) {
      for(var i2 = 1; i2 < arguments.length; i2++){
          var a2 = null != arguments[i2] ? arguments[i2] : {
          };
          i2 % 2 ? t(Object(a2), !0).forEach(function(t2) {
              o(e3, t2, a2[t2]);
          }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e3, Object.getOwnPropertyDescriptors(a2)) : t(Object(a2)).forEach(function(t3) {
              Object.defineProperty(e3, t3, Object.getOwnPropertyDescriptor(a2, t3));
          });
      }
      return e3;
  }
  function i(t4) {
      return (i = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t5) {
          return typeof t5;
      } : function(t6) {
          return t6 && "function" == typeof Symbol && t6.constructor === Symbol && t6 !== Symbol.prototype ? "symbol" : typeof t6;
      })(t4);
  }
  function a(t7, e4) {
      if (!(t7 instanceof e4)) throw new TypeError("Cannot call a class as a function");
  }
  function s(t8, e5) {
      for(var i3 = 0; i3 < e5.length; i3++){
          var a3 = e5[i3];
          a3.enumerable = a3.enumerable || !1, a3.configurable = !0, "value" in a3 && (a3.writable = !0), Object.defineProperty(t8, a3.key, a3);
      }
  }
  function r(t9, e6, i4) {
      return e6 && s(t9.prototype, e6), i4 && s(t9, i4), t9;
  }
  function o(t10, e7, i5) {
      return e7 in t10 ? Object.defineProperty(t10, e7, {
          value: i5,
          enumerable: !0,
          configurable: !0,
          writable: !0
      }) : t10[e7] = i5, t10;
  }
  function n(t11, e8) {
      if ("function" != typeof e8 && null !== e8) throw new TypeError("Super expression must either be null or a function");
      t11.prototype = Object.create(e8 && e8.prototype, {
          constructor: {
              value: t11,
              writable: !0,
              configurable: !0
          }
      }), e8 && h(t11, e8);
  }
  function l(t12) {
      return (l = Object.setPrototypeOf ? Object.getPrototypeOf : function(t13) {
          return t13.__proto__ || Object.getPrototypeOf(t13);
      })(t12);
  }
  function h(t14, e9) {
      return (h = Object.setPrototypeOf || function(t15, e10) {
          return t15.__proto__ = e10, t15;
      })(t14, e9);
  }
  function c(t16, e11) {
      if (e11 && ("object" == typeof e11 || "function" == typeof e11)) return e11;
      if (void 0 !== e11) throw new TypeError("Derived constructors may only return object or undefined");
      return (function(t17) {
          if (void 0 === t17) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
          return t17;
      })(t16);
  }
  function d(t18) {
      var e12 = function() {
          if ("undefined" == typeof Reflect || !Reflect.construct) return !1;
          if (Reflect.construct.sham) return !1;
          if ("function" == typeof Proxy) return !0;
          try {
              return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
              })), !0;
          } catch (t) {
              return !1;
          }
      }();
      return function() {
          var i6, a4 = l(t18);
          if (e12) {
              var s1 = l(this).constructor;
              i6 = Reflect.construct(a4, arguments, s1);
          } else i6 = a4.apply(this, arguments);
          return c(this, i6);
      };
  }
  function g(t19) {
      return (function(t20) {
          if (Array.isArray(t20)) return u(t20);
      })(t19) || (function(t21) {
          if ("undefined" != typeof Symbol && null != t21[Symbol.iterator] || null != t21["@@iterator"]) return Array.from(t21);
      })(t19) || (function(t22, e13) {
          if (!t22) return;
          if ("string" == typeof t22) return u(t22, e13);
          var i7 = Object.prototype.toString.call(t22).slice(8, -1);
          "Object" === i7 && t22.constructor && (i7 = t22.constructor.name);
          if ("Map" === i7 || "Set" === i7) return Array.from(t22);
          if ("Arguments" === i7 || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(i7)) return u(t22, e13);
      })(t19) || (function() {
          throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
      })();
  }
  function u(t23, e14) {
      (null == e14 || e14 > t23.length) && (e14 = t23.length);
      for(var i8 = 0, a5 = new Array(e14); i8 < e14; i8++)a5[i8] = t23[i8];
      return a5;
  }
  var p = function() {
      function t24() {
          a(this, t24);
      }
      return r(t24, [
          {
              key: "shadeRGBColor",
              value: function(t25, e15) {
                  var i9 = e15.split(","), a6 = t25 < 0 ? 0 : 255, s2 = t25 < 0 ? -1 * t25 : t25, r1 = parseInt(i9[0].slice(4), 10), o1 = parseInt(i9[1], 10), n1 = parseInt(i9[2], 10);
                  return "rgb(" + (Math.round((a6 - r1) * s2) + r1) + "," + (Math.round((a6 - o1) * s2) + o1) + "," + (Math.round((a6 - n1) * s2) + n1) + ")";
              }
          },
          {
              key: "shadeHexColor",
              value: function(t26, e16) {
                  var i10 = parseInt(e16.slice(1), 16), a7 = t26 < 0 ? 0 : 255, s3 = t26 < 0 ? -1 * t26 : t26, r2 = i10 >> 16, o2 = i10 >> 8 & 255, n2 = 255 & i10;
                  return "#" + (16777216 + 65536 * (Math.round((a7 - r2) * s3) + r2) + 256 * (Math.round((a7 - o2) * s3) + o2) + (Math.round((a7 - n2) * s3) + n2)).toString(16).slice(1);
              }
          },
          {
              key: "shadeColor",
              value: function(e17, i11) {
                  return t24.isColorHex(i11) ? this.shadeHexColor(e17, i11) : this.shadeRGBColor(e17, i11);
              }
          }
      ], [
          {
              key: "bind",
              value: function(t27, e18) {
                  return function() {
                      return t27.apply(e18, arguments);
                  };
              }
          },
          {
              key: "isObject",
              value: function(t28) {
                  return t28 && "object" === i(t28) && !Array.isArray(t28) && null != t28;
              }
          },
          {
              key: "is",
              value: function(t29, e19) {
                  return Object.prototype.toString.call(e19) === "[object " + t29 + "]";
              }
          },
          {
              key: "listToArray",
              value: function(t30) {
                  var e20, i12 = [];
                  for(e20 = 0; e20 < t30.length; e20++)i12[e20] = t30[e20];
                  return i12;
              }
          },
          {
              key: "extend",
              value: function(t31, e21) {
                  var i13 = this;
                  "function" != typeof Object.assign && (Object.assign = function(t32) {
                      if (null == t32) throw new TypeError("Cannot convert undefined or null to object");
                      for(var e22 = Object(t32), i14 = 1; i14 < arguments.length; i14++){
                          var a9 = arguments[i14];
                          if (null != a9) for(var s4 in a9)a9.hasOwnProperty(s4) && (e22[s4] = a9[s4]);
                      }
                      return e22;
                  });
                  var a8 = Object.assign({
                  }, t31);
                  return this.isObject(t31) && this.isObject(e21) && Object.keys(e21).forEach(function(s5) {
                      i13.isObject(e21[s5]) && s5 in t31 ? a8[s5] = i13.extend(t31[s5], e21[s5]) : Object.assign(a8, o({
                      }, s5, e21[s5]));
                  }), a8;
              }
          },
          {
              key: "extendArray",
              value: function(e23, i15) {
                  var a10 = [];
                  return e23.map(function(e24) {
                      a10.push(t24.extend(i15, e24));
                  }), e23 = a10;
              }
          },
          {
              key: "monthMod",
              value: function(t33) {
                  return t33 % 12;
              }
          },
          {
              key: "clone",
              value: function(e25) {
                  if (t24.is("Array", e25)) {
                      for(var a11 = [], s6 = 0; s6 < e25.length; s6++)a11[s6] = this.clone(e25[s6]);
                      return a11;
                  }
                  if (t24.is("Null", e25)) return null;
                  if (t24.is("Date", e25)) return e25;
                  if ("object" === i(e25)) {
                      var r3 = {
                      };
                      for(var o3 in e25)e25.hasOwnProperty(o3) && (r3[o3] = this.clone(e25[o3]));
                      return r3;
                  }
                  return e25;
              }
          },
          {
              key: "log10",
              value: function(t34) {
                  return Math.log(t34) / Math.LN10;
              }
          },
          {
              key: "roundToBase10",
              value: function(t35) {
                  return Math.pow(10, Math.floor(Math.log10(t35)));
              }
          },
          {
              key: "roundToBase",
              value: function(t36, e26) {
                  return Math.pow(e26, Math.floor(Math.log(t36) / Math.log(e26)));
              }
          },
          {
              key: "parseNumber",
              value: function(t37) {
                  return null === t37 ? t37 : parseFloat(t37);
              }
          },
          {
              key: "randomId",
              value: function() {
                  return (Math.random() + 1).toString(36).substring(4);
              }
          },
          {
              key: "noExponents",
              value: function(t38) {
                  var e27 = String(t38).split(/[eE]/);
                  if (1 === e27.length) return e27[0];
                  var i16 = "", a12 = t38 < 0 ? "-" : "", s7 = e27[0].replace(".", ""), r4 = Number(e27[1]) + 1;
                  if (r4 < 0) {
                      for(i16 = a12 + "0."; r4++;)i16 += "0";
                      return i16 + s7.replace(/^-/, "");
                  }
                  for(r4 -= s7.length; r4--;)i16 += "0";
                  return s7 + i16;
              }
          },
          {
              key: "getDimensions",
              value: function(t39) {
                  var e28 = getComputedStyle(t39, null), i17 = t39.clientHeight, a13 = t39.clientWidth;
                  return i17 -= parseFloat(e28.paddingTop) + parseFloat(e28.paddingBottom), [
                      a13 -= parseFloat(e28.paddingLeft) + parseFloat(e28.paddingRight),
                      i17
                  ];
              }
          },
          {
              key: "getBoundingClientRect",
              value: function(t40) {
                  var e29 = t40.getBoundingClientRect();
                  return {
                      top: e29.top,
                      right: e29.right,
                      bottom: e29.bottom,
                      left: e29.left,
                      width: t40.clientWidth,
                      height: t40.clientHeight,
                      x: e29.left,
                      y: e29.top
                  };
              }
          },
          {
              key: "getLargestStringFromArr",
              value: function(t41) {
                  return t41.reduce(function(t42, e30) {
                      return Array.isArray(e30) && (e30 = e30.reduce(function(t43, e31) {
                          return t43.length > e31.length ? t43 : e31;
                      })), t42.length > e30.length ? t42 : e30;
                  }, 0);
              }
          },
          {
              key: "hexToRgba",
              value: function() {
                  var t44 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : "#999999", e32 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0.6;
                  "#" !== t44.substring(0, 1) && (t44 = "#999999");
                  var i18 = t44.replace("#", "");
                  i18 = i18.match(new RegExp("(.{" + i18.length / 3 + "})", "g"));
                  for(var a14 = 0; a14 < i18.length; a14++)i18[a14] = parseInt(1 === i18[a14].length ? i18[a14] + i18[a14] : i18[a14], 16);
                  return void 0 !== e32 && i18.push(e32), "rgba(" + i18.join(",") + ")";
              }
          },
          {
              key: "getOpacityFromRGBA",
              value: function(t45) {
                  return parseFloat(t45.replace(/^.*,(.+)\)/, "$1"));
              }
          },
          {
              key: "rgb2hex",
              value: function(t46) {
                  return (t46 = t46.match(/^rgba?[\s+]?\([\s+]?(\d+)[\s+]?,[\s+]?(\d+)[\s+]?,[\s+]?(\d+)[\s+]?/i)) && 4 === t46.length ? "#" + ("0" + parseInt(t46[1], 10).toString(16)).slice(-2) + ("0" + parseInt(t46[2], 10).toString(16)).slice(-2) + ("0" + parseInt(t46[3], 10).toString(16)).slice(-2) : "";
              }
          },
          {
              key: "isColorHex",
              value: function(t47) {
                  return /(^#[0-9A-F]{6}$)|(^#[0-9A-F]{3}$)|(^#[0-9A-F]{8}$)/i.test(t47);
              }
          },
          {
              key: "getPolygonPos",
              value: function(t48, e33) {
                  for(var i19 = [], a15 = 2 * Math.PI / e33, s8 = 0; s8 < e33; s8++){
                      var r5 = {
                      };
                      r5.x = t48 * Math.sin(s8 * a15), r5.y = -t48 * Math.cos(s8 * a15), i19.push(r5);
                  }
                  return i19;
              }
          },
          {
              key: "polarToCartesian",
              value: function(t49, e34, i20, a16) {
                  var s9 = (a16 - 90) * Math.PI / 180;
                  return {
                      x: t49 + i20 * Math.cos(s9),
                      y: e34 + i20 * Math.sin(s9)
                  };
              }
          },
          {
              key: "escapeString",
              value: function(t50) {
                  var e35 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : "x", i21 = t50.toString().slice();
                  return i21 = i21.replace(/[` ~!@#$%^&*()_|+\-=?;:'",.<>{}[\]\\/]/gi, e35);
              }
          },
          {
              key: "negToZero",
              value: function(t51) {
                  return t51 < 0 ? 0 : t51;
              }
          },
          {
              key: "moveIndexInArray",
              value: function(t52, e36, i22) {
                  if (i22 >= t52.length) for(var a17 = i22 - t52.length + 1; a17--;)t52.push(void 0);
                  return t52.splice(i22, 0, t52.splice(e36, 1)[0]), t52;
              }
          },
          {
              key: "extractNumber",
              value: function(t53) {
                  return parseFloat(t53.replace(/[^\d.]*/g, ""));
              }
          },
          {
              key: "findAncestor",
              value: function(t54, e37) {
                  for(; (t54 = t54.parentElement) && !t54.classList.contains(e37););
                  return t54;
              }
          },
          {
              key: "setELstyles",
              value: function(t55, e38) {
                  for(var i23 in e38)e38.hasOwnProperty(i23) && (t55.style.key = e38[i23]);
              }
          },
          {
              key: "isNumber",
              value: function(t56) {
                  return !isNaN(t56) && parseFloat(Number(t56)) === t56 && !isNaN(parseInt(t56, 10));
              }
          },
          {
              key: "isFloat",
              value: function(t57) {
                  return Number(t57) === t57 && t57 % 1 != 0;
              }
          },
          {
              key: "isSafari",
              value: function() {
                  return /^((?!chrome|android).)*safari/i.test(navigator.userAgent);
              }
          },
          {
              key: "isFirefox",
              value: function() {
                  return navigator.userAgent.toLowerCase().indexOf("firefox") > -1;
              }
          },
          {
              key: "isIE11",
              value: function() {
                  if (-1 !== window.navigator.userAgent.indexOf("MSIE") || window.navigator.appVersion.indexOf("Trident/") > -1) return !0;
              }
          },
          {
              key: "isIE",
              value: function() {
                  var t58 = window.navigator.userAgent, e39 = t58.indexOf("MSIE ");
                  if (e39 > 0) return parseInt(t58.substring(e39 + 5, t58.indexOf(".", e39)), 10);
                  if (t58.indexOf("Trident/") > 0) {
                      var i24 = t58.indexOf("rv:");
                      return parseInt(t58.substring(i24 + 3, t58.indexOf(".", i24)), 10);
                  }
                  var a18 = t58.indexOf("Edge/");
                  return a18 > 0 && parseInt(t58.substring(a18 + 5, t58.indexOf(".", a18)), 10);
              }
          }
      ]), t24;
  }(), f = function() {
      function t59(e40) {
          a(this, t59), this.ctx = e40, this.w = e40.w, this.setEasingFunctions();
      }
      return r(t59, [
          {
              key: "setEasingFunctions",
              value: function() {
                  var t60;
                  if (!this.w.globals.easing) {
                      switch(this.w.config.chart.animations.easing){
                          case "linear":
                              t60 = "-";
                              break;
                          case "easein":
                              t60 = "<";
                              break;
                          case "easeout":
                              t60 = ">";
                              break;
                          case "easeinout":
                              t60 = "<>";
                              break;
                          case "swing":
                              t60 = function(t61) {
                                  var e41 = 1.70158;
                                  return (t61 -= 1) * t61 * ((e41 + 1) * t61 + e41) + 1;
                              };
                              break;
                          case "bounce":
                              t60 = function(t62) {
                                  return t62 < 1 / 2.75 ? 7.5625 * t62 * t62 : t62 < 2 / 2.75 ? 7.5625 * (t62 -= 1.5 / 2.75) * t62 + 0.75 : t62 < 2.5 / 2.75 ? 7.5625 * (t62 -= 2.25 / 2.75) * t62 + 0.9375 : 7.5625 * (t62 -= 2.625 / 2.75) * t62 + 0.984375;
                              };
                              break;
                          case "elastic":
                              t60 = function(t63) {
                                  return t63 === !!t63 ? t63 : Math.pow(2, -10 * t63) * Math.sin((t63 - 0.075) * (2 * Math.PI) / 0.3) + 1;
                              };
                              break;
                          default:
                              t60 = "<>";
                      }
                      this.w.globals.easing = t60;
                  }
              }
          },
          {
              key: "animateLine",
              value: function(t64, e42, i25, a19) {
                  t64.attr(e42).animate(a19).attr(i25);
              }
          },
          {
              key: "animateMarker",
              value: function(t65, e43, i26, a20, s10, r6) {
                  e43 || (e43 = 0), t65.attr({
                      r: e43,
                      width: e43,
                      height: e43
                  }).animate(a20, s10).attr({
                      r: i26,
                      width: i26.width,
                      height: i26.height
                  }).afterAll(function() {
                      r6();
                  });
              }
          },
          {
              key: "animateCircle",
              value: function(t66, e44, i27, a21, s11) {
                  t66.attr({
                      r: e44.r,
                      cx: e44.cx,
                      cy: e44.cy
                  }).animate(a21, s11).attr({
                      r: i27.r,
                      cx: i27.cx,
                      cy: i27.cy
                  });
              }
          },
          {
              key: "animateRect",
              value: function(t67, e45, i28, a22, s12) {
                  t67.attr(e45).animate(a22).attr(i28).afterAll(function() {
                      return s12();
                  });
              }
          },
          {
              key: "animatePathsGradually",
              value: function(t68) {
                  var e46 = t68.el, i29 = t68.realIndex, a23 = t68.j, s13 = t68.fill, r7 = t68.pathFrom, o4 = t68.pathTo, n3 = t68.speed, l1 = t68.delay, h1 = this.w, c1 = 0;
                  h1.config.chart.animations.animateGradually.enabled && (c1 = h1.config.chart.animations.animateGradually.delay), h1.config.chart.animations.dynamicAnimation.enabled && h1.globals.dataChanged && "bar" !== h1.config.chart.type && (c1 = 0), this.morphSVG(e46, i29, a23, "line" !== h1.config.chart.type || h1.globals.comboCharts ? s13 : "stroke", r7, o4, n3, l1 * c1);
              }
          },
          {
              key: "showDelayedElements",
              value: function() {
                  this.w.globals.delayedElements.forEach(function(t69) {
                      t69.el.classList.remove("apexcharts-element-hidden");
                  });
              }
          },
          {
              key: "animationCompleted",
              value: function(t70) {
                  var e47 = this.w;
                  e47.globals.animationEnded || (e47.globals.animationEnded = !0, this.showDelayedElements(), "function" == typeof e47.config.chart.events.animationEnd && e47.config.chart.events.animationEnd(this.ctx, {
                      el: t70,
                      w: e47
                  }));
              }
          },
          {
              key: "morphSVG",
              value: function(t71, e48, i30, a24, s14, r8, o5, n4) {
                  var l2 = this, h2 = this.w;
                  s14 || (s14 = t71.attr("pathFrom")), r8 || (r8 = t71.attr("pathTo"));
                  var c2 = function(t) {
                      return "radar" === h2.config.chart.type && (o5 = 1), "M 0 ".concat(h2.globals.gridHeight);
                  };
                  (!s14 || s14.indexOf("undefined") > -1 || s14.indexOf("NaN") > -1) && (s14 = c2()), (!r8 || r8.indexOf("undefined") > -1 || r8.indexOf("NaN") > -1) && (r8 = c2()), h2.globals.shouldAnimate || (o5 = 1), t71.plot(s14).animate(1, h2.globals.easing, n4).plot(s14).animate(o5, h2.globals.easing, n4).plot(r8).afterAll(function() {
                      p.isNumber(i30) ? i30 === h2.globals.series[h2.globals.maxValsInArrayIndex].length - 2 && h2.globals.shouldAnimate && l2.animationCompleted(t71) : "none" !== a24 && h2.globals.shouldAnimate && (!h2.globals.comboCharts && e48 === h2.globals.series.length - 1 || h2.globals.comboCharts) && l2.animationCompleted(t71), l2.showDelayedElements();
                  });
              }
          }
      ]), t59;
  }(), x = function() {
      function t72(e49) {
          a(this, t72), this.ctx = e49, this.w = e49.w;
      }
      return r(t72, [
          {
              key: "getDefaultFilter",
              value: function(t73, e50) {
                  var i31 = this.w;
                  t73.unfilter(!0), (new window.SVG.Filter).size("120%", "180%", "-5%", "-40%"), "none" !== i31.config.states.normal.filter ? this.applyFilter(t73, e50, i31.config.states.normal.filter.type, i31.config.states.normal.filter.value) : i31.config.chart.dropShadow.enabled && this.dropShadow(t73, i31.config.chart.dropShadow, e50);
              }
          },
          {
              key: "addNormalFilter",
              value: function(t74, e51) {
                  var i32 = this.w;
                  i32.config.chart.dropShadow.enabled && !t74.node.classList.contains("apexcharts-marker") && this.dropShadow(t74, i32.config.chart.dropShadow, e51);
              }
          },
          {
              key: "addLightenFilter",
              value: function(t75, e52, i33) {
                  var a25 = this, s15 = this.w, r9 = i33.intensity;
                  t75.unfilter(!0);
                  new window.SVG.Filter;
                  t75.filter(function(t76) {
                      var i34 = s15.config.chart.dropShadow;
                      (i34.enabled ? a25.addShadow(t76, e52, i34) : t76).componentTransfer({
                          rgb: {
                              type: "linear",
                              slope: 1.5,
                              intercept: r9
                          }
                      });
                  }), t75.filterer.node.setAttribute("filterUnits", "userSpaceOnUse"), this._scaleFilterSize(t75.filterer.node);
              }
          },
          {
              key: "addDarkenFilter",
              value: function(t77, e53, i35) {
                  var a26 = this, s16 = this.w, r10 = i35.intensity;
                  t77.unfilter(!0);
                  new window.SVG.Filter;
                  t77.filter(function(t78) {
                      var i36 = s16.config.chart.dropShadow;
                      (i36.enabled ? a26.addShadow(t78, e53, i36) : t78).componentTransfer({
                          rgb: {
                              type: "linear",
                              slope: r10
                          }
                      });
                  }), t77.filterer.node.setAttribute("filterUnits", "userSpaceOnUse"), this._scaleFilterSize(t77.filterer.node);
              }
          },
          {
              key: "applyFilter",
              value: function(t79, e54, i37) {
                  var a27 = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : 0.5;
                  switch(i37){
                      case "none":
                          this.addNormalFilter(t79, e54);
                          break;
                      case "lighten":
                          this.addLightenFilter(t79, e54, {
                              intensity: a27
                          });
                          break;
                      case "darken":
                          this.addDarkenFilter(t79, e54, {
                              intensity: a27
                          });
                  }
              }
          },
          {
              key: "addShadow",
              value: function(t80, e, i38) {
                  var a28 = i38.blur, s17 = i38.top, r11 = i38.left, o6 = i38.color, n5 = i38.opacity, l3 = t80.flood(Array.isArray(o6) ? o6[e] : o6, n5).composite(t80.sourceAlpha, "in").offset(r11, s17).gaussianBlur(a28).merge(t80.source);
                  return t80.blend(t80.source, l3);
              }
          },
          {
              key: "dropShadow",
              value: function(t81, e55) {
                  var i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 0, a29 = e55.top, s18 = e55.left, r12 = e55.blur, o7 = e55.color, n6 = e55.opacity, l4 = e55.noUserSpaceOnUse, h3 = this.w;
                  return t81.unfilter(!0), p.isIE() && "radialBar" === h3.config.chart.type || (o7 = Array.isArray(o7) ? o7[i] : o7, t81.filter(function(t82) {
                      var e56 = null;
                      e56 = p.isSafari() || p.isFirefox() || p.isIE() ? t82.flood(o7, n6).composite(t82.sourceAlpha, "in").offset(s18, a29).gaussianBlur(r12) : t82.flood(o7, n6).composite(t82.sourceAlpha, "in").offset(s18, a29).gaussianBlur(r12).merge(t82.source), t82.blend(t82.source, e56);
                  }), l4 || t81.filterer.node.setAttribute("filterUnits", "userSpaceOnUse"), this._scaleFilterSize(t81.filterer.node)), t81;
              }
          },
          {
              key: "setSelectionFilter",
              value: function(t83, e57, i39) {
                  var a30 = this.w;
                  if (void 0 !== a30.globals.selectedDataPoints[e57] && a30.globals.selectedDataPoints[e57].indexOf(i39) > -1) {
                      t83.node.setAttribute("selected", !0);
                      var s19 = a30.config.states.active.filter;
                      "none" !== s19 && this.applyFilter(t83, e57, s19.type, s19.value);
                  }
              }
          },
          {
              key: "_scaleFilterSize",
              value: function(t84) {
                  !function(e58) {
                      for(var i40 in e58)e58.hasOwnProperty(i40) && t84.setAttribute(i40, e58[i40]);
                  }({
                      width: "200%",
                      height: "200%",
                      x: "-50%",
                      y: "-50%"
                  });
              }
          }
      ]), t72;
  }(), b = function() {
      function t85(e59) {
          a(this, t85), this.ctx = e59, this.w = e59.w;
      }
      return r(t85, [
          {
              key: "drawLine",
              value: function(t86, e60, i41, a31) {
                  var s20 = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : "#a8a8a8", r13 = arguments.length > 5 && void 0 !== arguments[5] ? arguments[5] : 0, o8 = arguments.length > 6 && void 0 !== arguments[6] ? arguments[6] : null, n7 = arguments.length > 7 && void 0 !== arguments[7] ? arguments[7] : "butt", l5 = this.w, h4 = l5.globals.dom.Paper.line().attr({
                      x1: t86,
                      y1: e60,
                      x2: i41,
                      y2: a31,
                      stroke: s20,
                      "stroke-dasharray": r13,
                      "stroke-width": o8,
                      "stroke-linecap": n7
                  });
                  return h4;
              }
          },
          {
              key: "drawRect",
              value: function() {
                  var t87 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 0, e61 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0, i42 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 0, a32 = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : 0, s21 = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : 0, r14 = arguments.length > 5 && void 0 !== arguments[5] ? arguments[5] : "#fefefe", o9 = arguments.length > 6 && void 0 !== arguments[6] ? arguments[6] : 1, n8 = arguments.length > 7 && void 0 !== arguments[7] ? arguments[7] : null, l6 = arguments.length > 8 && void 0 !== arguments[8] ? arguments[8] : null, h5 = arguments.length > 9 && void 0 !== arguments[9] ? arguments[9] : 0, c3 = this.w, d1 = c3.globals.dom.Paper.rect();
                  return d1.attr({
                      x: t87,
                      y: e61,
                      width: i42 > 0 ? i42 : 0,
                      height: a32 > 0 ? a32 : 0,
                      rx: s21,
                      ry: s21,
                      opacity: o9,
                      "stroke-width": null !== n8 ? n8 : 0,
                      stroke: null !== l6 ? l6 : "none",
                      "stroke-dasharray": h5
                  }), d1.node.setAttribute("fill", r14), d1;
              }
          },
          {
              key: "drawPolygon",
              value: function(t88) {
                  var e62 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : "#e1e1e1", i43 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 1, a33 = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : "none", s22 = this.w, r15 = s22.globals.dom.Paper.polygon(t88).attr({
                      fill: a33,
                      stroke: e62,
                      "stroke-width": i43
                  });
                  return r15;
              }
          },
          {
              key: "drawCircle",
              value: function(t89) {
                  var e63 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : null, i44 = this.w;
                  t89 < 0 && (t89 = 0);
                  var a34 = i44.globals.dom.Paper.circle(2 * t89);
                  return null !== e63 && a34.attr(e63), a34;
              }
          },
          {
              key: "drawPath",
              value: function(t90) {
                  var e64 = t90.d, i45 = void 0 === e64 ? "" : e64, a35 = t90.stroke, s23 = void 0 === a35 ? "#a8a8a8" : a35, r16 = t90.strokeWidth, o10 = void 0 === r16 ? 1 : r16, n9 = t90.fill, l7 = t90.fillOpacity, h6 = void 0 === l7 ? 1 : l7, c4 = t90.strokeOpacity, d2 = void 0 === c4 ? 1 : c4, g1 = t90.classes, u1 = t90.strokeLinecap, p1 = void 0 === u1 ? null : u1, f1 = t90.strokeDashArray, x1 = void 0 === f1 ? 0 : f1, b1 = this.w;
                  return null === p1 && (p1 = b1.config.stroke.lineCap), (i45.indexOf("undefined") > -1 || i45.indexOf("NaN") > -1) && (i45 = "M 0 ".concat(b1.globals.gridHeight)), b1.globals.dom.Paper.path(i45).attr({
                      fill: n9,
                      "fill-opacity": h6,
                      stroke: s23,
                      "stroke-opacity": d2,
                      "stroke-linecap": p1,
                      "stroke-width": o10,
                      "stroke-dasharray": x1,
                      class: g1
                  });
              }
          },
          {
              key: "group",
              value: function() {
                  var t91 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null, e65 = this.w, i46 = e65.globals.dom.Paper.group();
                  return null !== t91 && i46.attr(t91), i46;
              }
          },
          {
              key: "move",
              value: function(t92, e66) {
                  var i47 = [
                      "M",
                      t92,
                      e66
                  ].join(" ");
                  return i47;
              }
          },
          {
              key: "line",
              value: function(t93, e67) {
                  var i48 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : null, a36 = null;
                  return null === i48 ? a36 = [
                      "L",
                      t93,
                      e67
                  ].join(" ") : "H" === i48 ? a36 = [
                      "H",
                      t93
                  ].join(" ") : "V" === i48 && (a36 = [
                      "V",
                      e67
                  ].join(" ")), a36;
              }
          },
          {
              key: "curve",
              value: function(t94, e68, i49, a37, s24, r17) {
                  var o11 = [
                      "C",
                      t94,
                      e68,
                      i49,
                      a37,
                      s24,
                      r17
                  ].join(" ");
                  return o11;
              }
          },
          {
              key: "quadraticCurve",
              value: function(t95, e69, i50, a38) {
                  return [
                      "Q",
                      t95,
                      e69,
                      i50,
                      a38
                  ].join(" ");
              }
          },
          {
              key: "arc",
              value: function(t96, e70, i51, a39, s25, r18, o12) {
                  var n10 = arguments.length > 7 && void 0 !== arguments[7] && arguments[7], l8 = "A";
                  n10 && (l8 = "a");
                  var h7 = [
                      l8,
                      t96,
                      e70,
                      i51,
                      a39,
                      s25,
                      r18,
                      o12
                  ].join(" ");
                  return h7;
              }
          },
          {
              key: "renderPaths",
              value: function(t97) {
                  var i52, a40 = t97.j, s26 = t97.realIndex, r19 = t97.pathFrom, o13 = t97.pathTo, n11 = t97.stroke, l9 = t97.strokeWidth, h8 = t97.strokeLinecap, c5 = t97.fill, d3 = t97.animationDelay, g2 = t97.initialSpeed, u2 = t97.dataChangeSpeed, p2 = t97.className, b2 = t97.shouldClipToGrid, v1 = void 0 === b2 || b2, m1 = t97.bindEventsOnPaths, y1 = void 0 === m1 || m1, w1 = t97.drawShadow, k1 = void 0 === w1 || w1, A1 = this.w, S1 = new x(this.ctx), C1 = new f(this.ctx), L1 = this.w.config.chart.animations.enabled, P1 = L1 && this.w.config.chart.animations.dynamicAnimation.enabled, T1 = !!(L1 && !A1.globals.resized || P1 && A1.globals.dataChanged && A1.globals.shouldAnimate);
                  T1 ? i52 = r19 : (i52 = o13, A1.globals.animationEnded = !0);
                  var M1 = A1.config.stroke.dashArray, I1 = 0;
                  I1 = Array.isArray(M1) ? M1[s26] : A1.config.stroke.dashArray;
                  var z1 = this.drawPath({
                      d: i52,
                      stroke: n11,
                      strokeWidth: l9,
                      fill: c5,
                      fillOpacity: 1,
                      classes: p2,
                      strokeLinecap: h8,
                      strokeDashArray: I1
                  });
                  if (z1.attr("index", s26), v1 && z1.attr({
                      "clip-path": "url(#gridRectMask".concat(A1.globals.cuid, ")")
                  }), "none" !== A1.config.states.normal.filter.type) S1.getDefaultFilter(z1, s26);
                  else if (A1.config.chart.dropShadow.enabled && k1 && (!A1.config.chart.dropShadow.enabledOnSeries || A1.config.chart.dropShadow.enabledOnSeries && -1 !== A1.config.chart.dropShadow.enabledOnSeries.indexOf(s26))) {
                      var X1 = A1.config.chart.dropShadow;
                      S1.dropShadow(z1, X1, s26);
                  }
                  y1 && (z1.node.addEventListener("mouseenter", this.pathMouseEnter.bind(this, z1)), z1.node.addEventListener("mouseleave", this.pathMouseLeave.bind(this, z1)), z1.node.addEventListener("mousedown", this.pathMouseDown.bind(this, z1))), z1.attr({
                      pathTo: o13,
                      pathFrom: r19
                  });
                  var E1 = {
                      el: z1,
                      j: a40,
                      realIndex: s26,
                      pathFrom: r19,
                      pathTo: o13,
                      fill: c5,
                      strokeWidth: l9,
                      delay: d3
                  };
                  return !L1 || A1.globals.resized || A1.globals.dataChanged ? !A1.globals.resized && A1.globals.dataChanged || C1.showDelayedElements() : C1.animatePathsGradually(e(e({
                  }, E1), {
                  }, {
                      speed: g2
                  })), A1.globals.dataChanged && P1 && T1 && C1.animatePathsGradually(e(e({
                  }, E1), {
                  }, {
                      speed: u2
                  })), z1;
              }
          },
          {
              key: "drawPattern",
              value: function(t98, e71, i53) {
                  var a41 = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : "#a8a8a8", s27 = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : 0, r20 = this.w, o14 = r20.globals.dom.Paper.pattern(e71, i53, function(r21) {
                      "horizontalLines" === t98 ? r21.line(0, 0, i53, 0).stroke({
                          color: a41,
                          width: s27 + 1
                      }) : "verticalLines" === t98 ? r21.line(0, 0, 0, e71).stroke({
                          color: a41,
                          width: s27 + 1
                      }) : "slantedLines" === t98 ? r21.line(0, 0, e71, i53).stroke({
                          color: a41,
                          width: s27
                      }) : "squares" === t98 ? r21.rect(e71, i53).fill("none").stroke({
                          color: a41,
                          width: s27
                      }) : "circles" === t98 && r21.circle(e71).fill("none").stroke({
                          color: a41,
                          width: s27
                      });
                  });
                  return o14;
              }
          },
          {
              key: "drawGradient",
              value: function(t99, e72, i54, a42, s28) {
                  var r22, o15 = arguments.length > 5 && void 0 !== arguments[5] ? arguments[5] : null, n12 = arguments.length > 6 && void 0 !== arguments[6] ? arguments[6] : null, l10 = arguments.length > 7 && void 0 !== arguments[7] ? arguments[7] : null, h = arguments.length > 8 && void 0 !== arguments[8] ? arguments[8] : 0, c6 = this.w;
                  e72.length < 9 && 0 === e72.indexOf("#") && (e72 = p.hexToRgba(e72, a42)), i54.length < 9 && 0 === i54.indexOf("#") && (i54 = p.hexToRgba(i54, s28));
                  var d4 = 0, g3 = 1, u3 = 1, f2 = null;
                  null !== n12 && (d4 = void 0 !== n12[0] ? n12[0] / 100 : 0, g3 = void 0 !== n12[1] ? n12[1] / 100 : 1, u3 = void 0 !== n12[2] ? n12[2] / 100 : 1, f2 = void 0 !== n12[3] ? n12[3] / 100 : null);
                  var x2 = !("donut" !== c6.config.chart.type && "pie" !== c6.config.chart.type && "polarArea" !== c6.config.chart.type && "bubble" !== c6.config.chart.type);
                  if (r22 = null === l10 || 0 === l10.length ? c6.globals.dom.Paper.gradient(x2 ? "radial" : "linear", function(t100) {
                      t100.at(d4, e72, a42), t100.at(g3, i54, s28), t100.at(u3, i54, s28), null !== f2 && t100.at(f2, e72, a42);
                  }) : c6.globals.dom.Paper.gradient(x2 ? "radial" : "linear", function(t101) {
                      (Array.isArray(l10[h]) ? l10[h] : l10).forEach(function(e73) {
                          t101.at(e73.offset / 100, e73.color, e73.opacity);
                      });
                  }), x2) {
                      var b3 = c6.globals.gridWidth / 2, v2 = c6.globals.gridHeight / 2;
                      "bubble" !== c6.config.chart.type ? r22.attr({
                          gradientUnits: "userSpaceOnUse",
                          cx: b3,
                          cy: v2,
                          r: o15
                      }) : r22.attr({
                          cx: 0.5,
                          cy: 0.5,
                          r: 0.8,
                          fx: 0.2,
                          fy: 0.2
                      });
                  } else "vertical" === t99 ? r22.from(0, 0).to(0, 1) : "diagonal" === t99 ? r22.from(0, 0).to(1, 1) : "horizontal" === t99 ? r22.from(0, 1).to(1, 1) : "diagonal2" === t99 && r22.from(1, 0).to(0, 1);
                  return r22;
              }
          },
          {
              key: "drawText",
              value: function(t102) {
                  var e74, i55 = t102.x, a43 = t102.y, s29 = t102.text, r23 = t102.textAnchor, o16 = t102.fontSize, n13 = t102.fontFamily, l11 = t102.fontWeight, h9 = t102.foreColor, c7 = t102.opacity, d5 = t102.cssClass, g4 = void 0 === d5 ? "" : d5, u4 = t102.isPlainText, p3 = void 0 === u4 || u4, f3 = this.w;
                  return void 0 === s29 && (s29 = ""), r23 || (r23 = "start"), h9 && h9.length || (h9 = f3.config.chart.foreColor), n13 = n13 || f3.config.chart.fontFamily, l11 = l11 || "regular", (e74 = Array.isArray(s29) ? f3.globals.dom.Paper.text(function(t103) {
                      for(var e75 = 0; e75 < s29.length; e75++)0 === e75 ? t103.tspan(s29[e75]) : t103.tspan(s29[e75]).newLine();
                  }) : p3 ? f3.globals.dom.Paper.plain(s29) : f3.globals.dom.Paper.text(function(t104) {
                      return t104.tspan(s29);
                  })).attr({
                      x: i55,
                      y: a43,
                      "text-anchor": r23,
                      "dominant-baseline": "auto",
                      "font-size": o16,
                      "font-family": n13,
                      "font-weight": l11,
                      fill: h9,
                      class: "apexcharts-text " + g4
                  }), e74.node.style.fontFamily = n13, e74.node.style.opacity = c7, e74;
              }
          },
          {
              key: "drawMarker",
              value: function(t105, e76, i56) {
                  t105 = t105 || 0;
                  var a44 = i56.pSize || 0, s30 = null;
                  if ("square" === i56.shape || "rect" === i56.shape) {
                      var r24 = void 0 === i56.pRadius ? a44 / 2 : i56.pRadius;
                      null !== e76 && a44 || (a44 = 0, r24 = 0);
                      var o17 = 1.2 * a44 + r24, n14 = this.drawRect(o17, o17, o17, o17, r24);
                      n14.attr({
                          x: t105 - o17 / 2,
                          y: e76 - o17 / 2,
                          cx: t105,
                          cy: e76,
                          class: i56.class ? i56.class : "",
                          fill: i56.pointFillColor,
                          "fill-opacity": i56.pointFillOpacity ? i56.pointFillOpacity : 1,
                          stroke: i56.pointStrokeColor,
                          "stroke-width": i56.pointStrokeWidth ? i56.pointStrokeWidth : 0,
                          "stroke-opacity": i56.pointStrokeOpacity ? i56.pointStrokeOpacity : 1
                      }), s30 = n14;
                  } else "circle" !== i56.shape && i56.shape || (p.isNumber(e76) || (a44 = 0, e76 = 0), s30 = this.drawCircle(a44, {
                      cx: t105,
                      cy: e76,
                      class: i56.class ? i56.class : "",
                      stroke: i56.pointStrokeColor,
                      fill: i56.pointFillColor,
                      "fill-opacity": i56.pointFillOpacity ? i56.pointFillOpacity : 1,
                      "stroke-width": i56.pointStrokeWidth ? i56.pointStrokeWidth : 0,
                      "stroke-opacity": i56.pointStrokeOpacity ? i56.pointStrokeOpacity : 1
                  }));
                  return s30;
              }
          },
          {
              key: "pathMouseEnter",
              value: function(t106, e77) {
                  var i57 = this.w, a45 = new x(this.ctx), s31 = parseInt(t106.node.getAttribute("index"), 10), r25 = parseInt(t106.node.getAttribute("j"), 10);
                  if ("function" == typeof i57.config.chart.events.dataPointMouseEnter && i57.config.chart.events.dataPointMouseEnter(e77, this.ctx, {
                      seriesIndex: s31,
                      dataPointIndex: r25,
                      w: i57
                  }), this.ctx.events.fireEvent("dataPointMouseEnter", [
                      e77,
                      this.ctx,
                      {
                          seriesIndex: s31,
                          dataPointIndex: r25,
                          w: i57
                      }
                  ]), ("none" === i57.config.states.active.filter.type || "true" !== t106.node.getAttribute("selected")) && "none" !== i57.config.states.hover.filter.type && !i57.globals.isTouchDevice) {
                      var o18 = i57.config.states.hover.filter;
                      a45.applyFilter(t106, s31, o18.type, o18.value);
                  }
              }
          },
          {
              key: "pathMouseLeave",
              value: function(t107, e78) {
                  var i58 = this.w, a46 = new x(this.ctx), s32 = parseInt(t107.node.getAttribute("index"), 10), r26 = parseInt(t107.node.getAttribute("j"), 10);
                  "function" == typeof i58.config.chart.events.dataPointMouseLeave && i58.config.chart.events.dataPointMouseLeave(e78, this.ctx, {
                      seriesIndex: s32,
                      dataPointIndex: r26,
                      w: i58
                  }), this.ctx.events.fireEvent("dataPointMouseLeave", [
                      e78,
                      this.ctx,
                      {
                          seriesIndex: s32,
                          dataPointIndex: r26,
                          w: i58
                      }
                  ]), "none" !== i58.config.states.active.filter.type && "true" === t107.node.getAttribute("selected") || "none" !== i58.config.states.hover.filter.type && a46.getDefaultFilter(t107, s32);
              }
          },
          {
              key: "pathMouseDown",
              value: function(t108, e79) {
                  var i59 = this.w, a47 = new x(this.ctx), s33 = parseInt(t108.node.getAttribute("index"), 10), r27 = parseInt(t108.node.getAttribute("j"), 10), o19 = "false";
                  if ("true" === t108.node.getAttribute("selected")) {
                      if (t108.node.setAttribute("selected", "false"), i59.globals.selectedDataPoints[s33].indexOf(r27) > -1) {
                          var n15 = i59.globals.selectedDataPoints[s33].indexOf(r27);
                          i59.globals.selectedDataPoints[s33].splice(n15, 1);
                      }
                  } else {
                      if (!i59.config.states.active.allowMultipleDataPointsSelection && i59.globals.selectedDataPoints.length > 0) {
                          i59.globals.selectedDataPoints = [];
                          var l12 = i59.globals.dom.Paper.select(".apexcharts-series path").members, h10 = i59.globals.dom.Paper.select(".apexcharts-series circle, .apexcharts-series rect").members, c8 = function(t109) {
                              Array.prototype.forEach.call(t109, function(t110) {
                                  t110.node.setAttribute("selected", "false"), a47.getDefaultFilter(t110, s33);
                              });
                          };
                          c8(l12), c8(h10);
                      }
                      t108.node.setAttribute("selected", "true"), o19 = "true", void 0 === i59.globals.selectedDataPoints[s33] && (i59.globals.selectedDataPoints[s33] = []), i59.globals.selectedDataPoints[s33].push(r27);
                  }
                  if ("true" === o19) {
                      var d6 = i59.config.states.active.filter;
                      "none" !== d6 && a47.applyFilter(t108, s33, d6.type, d6.value);
                  } else "none" !== i59.config.states.active.filter.type && a47.getDefaultFilter(t108, s33);
                  "function" == typeof i59.config.chart.events.dataPointSelection && i59.config.chart.events.dataPointSelection(e79, this.ctx, {
                      selectedDataPoints: i59.globals.selectedDataPoints,
                      seriesIndex: s33,
                      dataPointIndex: r27,
                      w: i59
                  }), e79 && this.ctx.events.fireEvent("dataPointSelection", [
                      e79,
                      this.ctx,
                      {
                          selectedDataPoints: i59.globals.selectedDataPoints,
                          seriesIndex: s33,
                          dataPointIndex: r27,
                          w: i59
                      }
                  ]);
              }
          },
          {
              key: "rotateAroundCenter",
              value: function(t111) {
                  var e80 = {
                  };
                  return t111 && "function" == typeof t111.getBBox && (e80 = t111.getBBox()), {
                      x: e80.x + e80.width / 2,
                      y: e80.y + e80.height / 2
                  };
              }
          },
          {
              key: "getTextRects",
              value: function(t112, e81, i60, a48) {
                  var s34 = !(arguments.length > 4 && void 0 !== arguments[4]) || arguments[4], r28 = this.w, o20 = this.drawText({
                      x: -200,
                      y: -200,
                      text: t112,
                      textAnchor: "start",
                      fontSize: e81,
                      fontFamily: i60,
                      foreColor: "#fff",
                      opacity: 0
                  });
                  a48 && o20.attr("transform", a48), r28.globals.dom.Paper.add(o20);
                  var n16 = o20.bbox();
                  return s34 || (n16 = o20.node.getBoundingClientRect()), o20.remove(), {
                      width: n16.width,
                      height: n16.height
                  };
              }
          },
          {
              key: "placeTextWithEllipsis",
              value: function(t113, e82, i61) {
                  if ("function" == typeof t113.getComputedTextLength && (t113.textContent = e82, e82.length > 0 && t113.getComputedTextLength() >= i61 / 1.1)) {
                      for(var a49 = e82.length - 3; a49 > 0; a49 -= 3)if (t113.getSubStringLength(0, a49) <= i61 / 1.1) return void (t113.textContent = e82.substring(0, a49) + "...");
                      t113.textContent = ".";
                  }
              }
          }
      ], [
          {
              key: "setAttrs",
              value: function(t114, e83) {
                  for(var i62 in e83)e83.hasOwnProperty(i62) && t114.setAttribute(i62, e83[i62]);
              }
          }
      ]), t85;
  }(), v = function() {
      function t115(e84) {
          a(this, t115), this.w = e84.w, this.annoCtx = e84;
      }
      return r(t115, [
          {
              key: "setOrientations",
              value: function(t116) {
                  var e85 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : null, i63 = this.w;
                  if ("vertical" === t116.label.orientation) {
                      var a50 = null !== e85 ? e85 : 0, s35 = i63.globals.dom.baseEl.querySelector(".apexcharts-xaxis-annotations .apexcharts-xaxis-annotation-label[rel='".concat(a50, "']"));
                      if (null !== s35) {
                          var r29 = s35.getBoundingClientRect();
                          s35.setAttribute("x", parseFloat(s35.getAttribute("x")) - r29.height + 4), "top" === t116.label.position ? s35.setAttribute("y", parseFloat(s35.getAttribute("y")) + r29.width) : s35.setAttribute("y", parseFloat(s35.getAttribute("y")) - r29.width);
                          var o21 = this.annoCtx.graphics.rotateAroundCenter(s35), n17 = o21.x, l13 = o21.y;
                          s35.setAttribute("transform", "rotate(-90 ".concat(n17, " ").concat(l13, ")"));
                      }
                  }
              }
          },
          {
              key: "addBackgroundToAnno",
              value: function(t117, e86) {
                  var i64 = this.w;
                  if (!t117 || void 0 === e86.label.text || void 0 !== e86.label.text && !String(e86.label.text).trim()) return null;
                  var a51 = i64.globals.dom.baseEl.querySelector(".apexcharts-grid").getBoundingClientRect(), s36 = t117.getBoundingClientRect(), r30 = e86.label.style.padding.left, o22 = e86.label.style.padding.right, n18 = e86.label.style.padding.top, l14 = e86.label.style.padding.bottom;
                  "vertical" === e86.label.orientation && (n18 = e86.label.style.padding.left, l14 = e86.label.style.padding.right, r30 = e86.label.style.padding.top, o22 = e86.label.style.padding.bottom);
                  var h11 = s36.left - a51.left - r30, c9 = s36.top - a51.top - n18, d7 = this.annoCtx.graphics.drawRect(h11 - i64.globals.barPadForNumericAxis, c9, s36.width + r30 + o22, s36.height + n18 + l14, e86.label.borderRadius, e86.label.style.background, 1, e86.label.borderWidth, e86.label.borderColor, 0);
                  return e86.id && d7.node.classList.add(p.escapeString(e86.id)), d7;
              }
          },
          {
              key: "annotationsBackground",
              value: function() {
                  var t118 = this, e87 = this.w, i65 = function(i66, a52, s37) {
                      var r31 = e87.globals.dom.baseEl.querySelector(".apexcharts-".concat(s37, "-annotations .apexcharts-").concat(s37, "-annotation-label[rel='").concat(a52, "']"));
                      if (r31) {
                          var o23 = r31.parentNode, n19 = t118.addBackgroundToAnno(r31, i66);
                          n19 && (o23.insertBefore(n19.node, r31), i66.label.mouseEnter && n19.node.addEventListener("mouseenter", i66.label.mouseEnter.bind(t118, i66)), i66.label.mouseLeave && n19.node.addEventListener("mouseleave", i66.label.mouseLeave.bind(t118, i66)));
                      }
                  };
                  e87.config.annotations.xaxis.map(function(t119, e88) {
                      i65(t119, e88, "xaxis");
                  }), e87.config.annotations.yaxis.map(function(t120, e89) {
                      i65(t120, e89, "yaxis");
                  }), e87.config.annotations.points.map(function(t121, e90) {
                      i65(t121, e90, "point");
                  });
              }
          },
          {
              key: "getStringX",
              value: function(t122) {
                  var e91 = this.w, i67 = t122;
                  e91.config.xaxis.convertedCatToNumeric && e91.globals.categoryLabels.length && (t122 = e91.globals.categoryLabels.indexOf(t122) + 1);
                  var a53 = e91.globals.labels.indexOf(t122), s38 = e91.globals.dom.baseEl.querySelector(".apexcharts-xaxis-texts-g text:nth-child(" + (a53 + 1) + ")");
                  return s38 && (i67 = parseFloat(s38.getAttribute("x"))), i67;
              }
          }
      ]), t115;
  }(), m = function() {
      function t123(e92) {
          a(this, t123), this.w = e92.w, this.annoCtx = e92, this.invertAxis = this.annoCtx.invertAxis;
      }
      return r(t123, [
          {
              key: "addXaxisAnnotation",
              value: function(t124, e93, i68) {
                  var a54 = this.w, s39 = this.invertAxis ? a54.globals.minY : a54.globals.minX, r32 = this.invertAxis ? a54.globals.maxY : a54.globals.maxX, o24 = this.invertAxis ? a54.globals.yRange[0] : a54.globals.xRange, n20 = (t124.x - s39) / (o24 / a54.globals.gridWidth);
                  this.annoCtx.inversedReversedAxis && (n20 = (r32 - t124.x) / (o24 / a54.globals.gridWidth));
                  var l15 = t124.label.text;
                  "category" !== a54.config.xaxis.type && !a54.config.xaxis.convertedCatToNumeric || this.invertAxis || a54.globals.dataFormatXNumeric || (n20 = this.annoCtx.helpers.getStringX(t124.x));
                  var h12 = t124.strokeDashArray;
                  if (p.isNumber(n20)) {
                      if (null === t124.x2 || void 0 === t124.x2) {
                          var c10 = this.annoCtx.graphics.drawLine(n20 + t124.offsetX, 0 + t124.offsetY, n20 + t124.offsetX, a54.globals.gridHeight + t124.offsetY, t124.borderColor, h12, t124.borderWidth);
                          e93.appendChild(c10.node), t124.id && c10.node.classList.add(t124.id);
                      } else {
                          var d8 = (t124.x2 - s39) / (o24 / a54.globals.gridWidth);
                          if (this.annoCtx.inversedReversedAxis && (d8 = (r32 - t124.x2) / (o24 / a54.globals.gridWidth)), "category" !== a54.config.xaxis.type && !a54.config.xaxis.convertedCatToNumeric || this.invertAxis || a54.globals.dataFormatXNumeric || (d8 = this.annoCtx.helpers.getStringX(t124.x2)), d8 < n20) {
                              var g5 = n20;
                              n20 = d8, d8 = g5;
                          }
                          var u5 = this.annoCtx.graphics.drawRect(n20 + t124.offsetX, 0 + t124.offsetY, d8 - n20, a54.globals.gridHeight + t124.offsetY, 0, t124.fillColor, t124.opacity, 1, t124.borderColor, h12);
                          u5.node.classList.add("apexcharts-annotation-rect"), u5.attr("clip-path", "url(#gridRectMask".concat(a54.globals.cuid, ")")), e93.appendChild(u5.node), t124.id && u5.node.classList.add(t124.id);
                      }
                      var f4 = "top" === t124.label.position ? 4 : a54.globals.gridHeight, x3 = this.annoCtx.graphics.getTextRects(l15, parseFloat(t124.label.style.fontSize)), b4 = this.annoCtx.graphics.drawText({
                          x: n20 + t124.label.offsetX,
                          y: f4 + t124.label.offsetY - ("vertical" === t124.label.orientation ? "top" === t124.label.position ? x3.width / 2 - 12 : -x3.width / 2 : 0),
                          text: l15,
                          textAnchor: t124.label.textAnchor,
                          fontSize: t124.label.style.fontSize,
                          fontFamily: t124.label.style.fontFamily,
                          fontWeight: t124.label.style.fontWeight,
                          foreColor: t124.label.style.color,
                          cssClass: "apexcharts-xaxis-annotation-label ".concat(t124.label.style.cssClass, " ").concat(t124.id ? t124.id : "")
                      });
                      b4.attr({
                          rel: i68
                      }), e93.appendChild(b4.node), this.annoCtx.helpers.setOrientations(t124, i68);
                  }
              }
          },
          {
              key: "drawXAxisAnnotations",
              value: function() {
                  var t125 = this, e94 = this.w, i69 = this.annoCtx.graphics.group({
                      class: "apexcharts-xaxis-annotations"
                  });
                  return e94.config.annotations.xaxis.map(function(e95, a55) {
                      t125.addXaxisAnnotation(e95, i69.node, a55);
                  }), i69;
              }
          }
      ]), t123;
  }(), y = function() {
      function t126(e96) {
          a(this, t126), this.ctx = e96, this.w = e96.w;
      }
      return r(t126, [
          {
              key: "getStackedSeriesTotals",
              value: function() {
                  var t127 = this.w, e97 = [];
                  if (0 === t127.globals.series.length) return e97;
                  for(var i70 = 0; i70 < t127.globals.series[t127.globals.maxValsInArrayIndex].length; i70++){
                      for(var a56 = 0, s40 = 0; s40 < t127.globals.series.length; s40++)void 0 !== t127.globals.series[s40][i70] && (a56 += t127.globals.series[s40][i70]);
                      e97.push(a56);
                  }
                  return t127.globals.stackedSeriesTotals = e97, e97;
              }
          },
          {
              key: "getSeriesTotalByIndex",
              value: function() {
                  var t128 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null;
                  return null === t128 ? this.w.config.series.reduce(function(t129, e98) {
                      return t129 + e98;
                  }, 0) : this.w.globals.series[t128].reduce(function(t130, e99) {
                      return t130 + e99;
                  }, 0);
              }
          },
          {
              key: "isSeriesNull",
              value: function() {
                  var t131 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null;
                  return 0 === (null === t131 ? this.w.config.series.filter(function(t132) {
                      return null !== t132;
                  }) : this.w.config.series[t131].data.filter(function(t133) {
                      return null !== t133;
                  })).length;
              }
          },
          {
              key: "seriesHaveSameValues",
              value: function(t134) {
                  return this.w.globals.series[t134].every(function(t135, e, i71) {
                      return t135 === i71[0];
                  });
              }
          },
          {
              key: "getCategoryLabels",
              value: function(t136) {
                  var e100 = this.w, i72 = t136.slice();
                  return e100.config.xaxis.convertedCatToNumeric && (i72 = t136.map(function(t137, i) {
                      return e100.config.xaxis.labels.formatter(t137 - e100.globals.minX + 1);
                  })), i72;
              }
          },
          {
              key: "getLargestSeries",
              value: function() {
                  var t138 = this.w;
                  t138.globals.maxValsInArrayIndex = t138.globals.series.map(function(t139) {
                      return t139.length;
                  }).indexOf(Math.max.apply(Math, t138.globals.series.map(function(t140) {
                      return t140.length;
                  })));
              }
          },
          {
              key: "getLargestMarkerSize",
              value: function() {
                  var t141 = this.w, e101 = 0;
                  return t141.globals.markers.size.forEach(function(t142) {
                      e101 = Math.max(e101, t142);
                  }), t141.globals.markers.largestSize = e101, e101;
              }
          },
          {
              key: "getSeriesTotals",
              value: function() {
                  var t143 = this.w;
                  t143.globals.seriesTotals = t143.globals.series.map(function(t144, e) {
                      var i73 = 0;
                      if (Array.isArray(t144)) for(var a57 = 0; a57 < t144.length; a57++)i73 += t144[a57];
                      else i73 += t144;
                      return i73;
                  });
              }
          },
          {
              key: "getSeriesTotalsXRange",
              value: function(t145, e102) {
                  var i74 = this.w;
                  return i74.globals.series.map(function(a58, s) {
                      for(var r33 = 0, o25 = 0; o25 < a58.length; o25++)i74.globals.seriesX[s][o25] > t145 && i74.globals.seriesX[s][o25] < e102 && (r33 += a58[o25]);
                      return r33;
                  });
              }
          },
          {
              key: "getPercentSeries",
              value: function() {
                  var t146 = this.w;
                  t146.globals.seriesPercent = t146.globals.series.map(function(e103, i) {
                      var a59 = [];
                      if (Array.isArray(e103)) for(var s41 = 0; s41 < e103.length; s41++){
                          var r34 = t146.globals.stackedSeriesTotals[s41], o26 = 0;
                          r34 && (o26 = 100 * e103[s41] / r34), a59.push(o26);
                      }
                      else {
                          var n21 = 100 * e103 / t146.globals.seriesTotals.reduce(function(t147, e104) {
                              return t147 + e104;
                          }, 0);
                          a59.push(n21);
                      }
                      return a59;
                  });
              }
          },
          {
              key: "getCalculatedRatios",
              value: function() {
                  var t148, e105, i75, a60, s42 = this.w.globals, r35 = [], o27 = 0, n22 = [], l16 = 0.1, h13 = 0;
                  if (s42.yRange = [], s42.isMultipleYAxis) for(var c11 = 0; c11 < s42.minYArr.length; c11++)s42.yRange.push(Math.abs(s42.minYArr[c11] - s42.maxYArr[c11])), n22.push(0);
                  else s42.yRange.push(Math.abs(s42.minY - s42.maxY));
                  s42.xRange = Math.abs(s42.maxX - s42.minX), s42.zRange = Math.abs(s42.maxZ - s42.minZ);
                  for(var d9 = 0; d9 < s42.yRange.length; d9++)r35.push(s42.yRange[d9] / s42.gridHeight);
                  if (e105 = s42.xRange / s42.gridWidth, i75 = Math.abs(s42.initialMaxX - s42.initialMinX) / s42.gridWidth, t148 = s42.yRange / s42.gridWidth, a60 = s42.xRange / s42.gridHeight, (o27 = s42.zRange / s42.gridHeight * 16) || (o27 = 1), s42.minY !== Number.MIN_VALUE && 0 !== Math.abs(s42.minY) && (s42.hasNegs = !0), s42.isMultipleYAxis) {
                      n22 = [];
                      for(var g6 = 0; g6 < r35.length; g6++)n22.push(-s42.minYArr[g6] / r35[g6]);
                  } else n22.push(-s42.minY / r35[0]), s42.minY !== Number.MIN_VALUE && 0 !== Math.abs(s42.minY) && (l16 = -s42.minY / t148, h13 = s42.minX / e105);
                  return {
                      yRatio: r35,
                      invertedYRatio: t148,
                      zRatio: o27,
                      xRatio: e105,
                      initialXRatio: i75,
                      invertedXRatio: a60,
                      baseLineInvertedY: l16,
                      baseLineY: n22,
                      baseLineX: h13
                  };
              }
          },
          {
              key: "getLogSeries",
              value: function(t149) {
                  var e106 = this, i76 = this.w;
                  return i76.globals.seriesLog = t149.map(function(t150, a61) {
                      return i76.config.yaxis[a61] && i76.config.yaxis[a61].logarithmic ? t150.map(function(t151) {
                          return null === t151 ? null : e106.getLogVal(t151, a61);
                      }) : t150;
                  }), i76.globals.invalidLogScale ? t149 : i76.globals.seriesLog;
              }
          },
          {
              key: "getLogVal",
              value: function(t152, e) {
                  var i77 = this.w, a62 = (Math.log(t152) - Math.log(i77.globals.minYArr[e])) / (Math.log(i77.globals.maxYArr[e]) - Math.log(i77.globals.minYArr[e]));
                  return isNaN(a62) ? t152 : a62;
              }
          },
          {
              key: "getLogYRatios",
              value: function(t153) {
                  var e107 = this, i78 = this.w, a63 = this.w.globals;
                  return a63.yLogRatio = t153.slice(), a63.logYRange = a63.yRange.map(function(t154, s) {
                      if (i78.config.yaxis[s] && e107.w.config.yaxis[s].logarithmic) {
                          var r36, o28 = -Number.MAX_VALUE, n23 = Number.MIN_VALUE;
                          return a63.seriesLog.forEach(function(t155, e) {
                              t155.forEach(function(t156) {
                                  i78.config.yaxis[e] && i78.config.yaxis[e].logarithmic && (o28 = Math.max(t156, o28), n23 = Math.min(t156, n23));
                              });
                          }), r36 = Math.pow(a63.yRange[s], Math.abs(n23 - o28) / a63.yRange[s]), a63.yLogRatio[s] = r36 / a63.gridHeight, r36;
                      }
                  }), a63.invalidLogScale ? t153.slice() : a63.yLogRatio;
              }
          }
      ], [
          {
              key: "checkComboSeries",
              value: function(t157) {
                  var e108 = !1, i79 = 0, a64 = 0;
                  return t157.length && void 0 !== t157[0].type && t157.forEach(function(t158) {
                      "bar" !== t158.type && "column" !== t158.type && "candlestick" !== t158.type && "boxPlot" !== t158.type || i79++, void 0 !== t158.type && a64++;
                  }), a64 > 0 && (e108 = !0), {
                      comboBarCount: i79,
                      comboCharts: e108
                  };
              }
          },
          {
              key: "extendArrayProps",
              value: function(t159, e109, i80) {
                  return e109.yaxis && (e109 = t159.extendYAxis(e109, i80)), e109.annotations && (e109.annotations.yaxis && (e109 = t159.extendYAxisAnnotations(e109)), e109.annotations.xaxis && (e109 = t159.extendXAxisAnnotations(e109)), e109.annotations.points && (e109 = t159.extendPointAnnotations(e109))), e109;
              }
          }
      ]), t126;
  }(), w = function() {
      function t160(e110) {
          a(this, t160), this.w = e110.w, this.annoCtx = e110;
      }
      return r(t160, [
          {
              key: "addYaxisAnnotation",
              value: function(t161, e111, i81) {
                  var a65, s43 = this.w, r37 = t161.strokeDashArray, o29 = this._getY1Y2("y1", t161), n24 = t161.label.text;
                  if (null === t161.y2 || void 0 === t161.y2) {
                      var l17 = this.annoCtx.graphics.drawLine(0 + t161.offsetX, o29 + t161.offsetY, this._getYAxisAnnotationWidth(t161), o29 + t161.offsetY, t161.borderColor, r37, t161.borderWidth);
                      e111.appendChild(l17.node), t161.id && l17.node.classList.add(t161.id);
                  } else {
                      if ((a65 = this._getY1Y2("y2", t161)) > o29) {
                          var h14 = o29;
                          o29 = a65, a65 = h14;
                      }
                      var c12 = this.annoCtx.graphics.drawRect(0 + t161.offsetX, a65 + t161.offsetY, this._getYAxisAnnotationWidth(t161), o29 - a65, 0, t161.fillColor, t161.opacity, 1, t161.borderColor, r37);
                      c12.node.classList.add("apexcharts-annotation-rect"), c12.attr("clip-path", "url(#gridRectMask".concat(s43.globals.cuid, ")")), e111.appendChild(c12.node), t161.id && c12.node.classList.add(t161.id);
                  }
                  var d10 = "right" === t161.label.position ? s43.globals.gridWidth : 0, g7 = this.annoCtx.graphics.drawText({
                      x: d10 + t161.label.offsetX,
                      y: (null != a65 ? a65 : o29) + t161.label.offsetY - 3,
                      text: n24,
                      textAnchor: t161.label.textAnchor,
                      fontSize: t161.label.style.fontSize,
                      fontFamily: t161.label.style.fontFamily,
                      fontWeight: t161.label.style.fontWeight,
                      foreColor: t161.label.style.color,
                      cssClass: "apexcharts-yaxis-annotation-label ".concat(t161.label.style.cssClass, " ").concat(t161.id ? t161.id : "")
                  });
                  g7.attr({
                      rel: i81
                  }), e111.appendChild(g7.node);
              }
          },
          {
              key: "_getY1Y2",
              value: function(t162, e112) {
                  var i82, a66 = "y1" === t162 ? e112.y : e112.y2, s44 = this.w;
                  if (this.annoCtx.invertAxis) {
                      var r38 = s44.globals.labels.indexOf(a66);
                      s44.config.xaxis.convertedCatToNumeric && (r38 = s44.globals.categoryLabels.indexOf(a66));
                      var o30 = s44.globals.dom.baseEl.querySelector(".apexcharts-yaxis-texts-g text:nth-child(" + (r38 + 1) + ")");
                      o30 && (i82 = parseFloat(o30.getAttribute("y")));
                  } else {
                      var n25;
                      if (s44.config.yaxis[e112.yAxisIndex].logarithmic) n25 = (a66 = new y(this.annoCtx.ctx).getLogVal(a66, e112.yAxisIndex)) / s44.globals.yLogRatio[e112.yAxisIndex];
                      else n25 = (a66 - s44.globals.minYArr[e112.yAxisIndex]) / (s44.globals.yRange[e112.yAxisIndex] / s44.globals.gridHeight);
                      i82 = s44.globals.gridHeight - n25, s44.config.yaxis[e112.yAxisIndex] && s44.config.yaxis[e112.yAxisIndex].reversed && (i82 = n25);
                  }
                  return i82;
              }
          },
          {
              key: "_getYAxisAnnotationWidth",
              value: function(t163) {
                  var e113 = this.w;
                  e113.globals.gridWidth;
                  return (t163.width.indexOf("%") > -1 ? e113.globals.gridWidth * parseInt(t163.width, 10) / 100 : parseInt(t163.width, 10)) + t163.offsetX;
              }
          },
          {
              key: "drawYAxisAnnotations",
              value: function() {
                  var t164 = this, e114 = this.w, i83 = this.annoCtx.graphics.group({
                      class: "apexcharts-yaxis-annotations"
                  });
                  return e114.config.annotations.yaxis.map(function(e115, a67) {
                      t164.addYaxisAnnotation(e115, i83.node, a67);
                  }), i83;
              }
          }
      ]), t160;
  }(), k = function() {
      function t165(e116) {
          a(this, t165), this.w = e116.w, this.annoCtx = e116;
      }
      return r(t165, [
          {
              key: "addPointAnnotation",
              value: function(t166, e117, i84) {
                  var a68 = this.w, s45 = 0, r39 = 0, o31 = 0;
                  this.annoCtx.invertAxis && console.warn("Point annotation is not supported in horizontal bar charts.");
                  var n26 = parseFloat(t166.y);
                  if ("string" == typeof t166.x || "category" === a68.config.xaxis.type || a68.config.xaxis.convertedCatToNumeric) {
                      var l18 = a68.globals.labels.indexOf(t166.x);
                      a68.config.xaxis.convertedCatToNumeric && (l18 = a68.globals.categoryLabels.indexOf(t166.x)), s45 = this.annoCtx.helpers.getStringX(t166.x), null === t166.y && (n26 = a68.globals.series[t166.seriesIndex][l18]);
                  } else s45 = (t166.x - a68.globals.minX) / (a68.globals.xRange / a68.globals.gridWidth);
                  for(var h15, c13 = [], d11 = 0, g8 = 0; g8 <= t166.seriesIndex; g8++){
                      var u6 = a68.config.yaxis[g8].seriesName;
                      if (u6) for(var f5 = g8 + 1; f5 <= t166.seriesIndex; f5++)a68.config.yaxis[f5].seriesName === u6 && -1 === c13.indexOf(u6) && (d11++, c13.push(u6));
                  }
                  if (a68.config.yaxis[t166.yAxisIndex].logarithmic) h15 = (n26 = new y(this.annoCtx.ctx).getLogVal(n26, t166.yAxisIndex)) / a68.globals.yLogRatio[t166.yAxisIndex];
                  else {
                      var x = t166.yAxisIndex + d11;
                      h15 = (n26 - a68.globals.minYArr[x]) / (a68.globals.yRange[x] / a68.globals.gridHeight);
                  }
                  if (r39 = a68.globals.gridHeight - h15 - parseFloat(t166.label.style.fontSize) - t166.marker.size, o31 = a68.globals.gridHeight - h15, a68.config.yaxis[t166.yAxisIndex] && a68.config.yaxis[t166.yAxisIndex].reversed && (r39 = h15 + parseFloat(t166.label.style.fontSize) + t166.marker.size, o31 = h15), p.isNumber(s45)) {
                      var b5 = {
                          pSize: t166.marker.size,
                          pointStrokeWidth: t166.marker.strokeWidth,
                          pointFillColor: t166.marker.fillColor,
                          pointStrokeColor: t166.marker.strokeColor,
                          shape: t166.marker.shape,
                          pRadius: t166.marker.radius,
                          class: "apexcharts-point-annotation-marker ".concat(t166.marker.cssClass, " ").concat(t166.id ? t166.id : "")
                      }, v3 = this.annoCtx.graphics.drawMarker(s45 + t166.marker.offsetX, o31 + t166.marker.offsetY, b5);
                      e117.appendChild(v3.node);
                      var m2 = t166.label.text ? t166.label.text : "", w2 = this.annoCtx.graphics.drawText({
                          x: s45 + t166.label.offsetX,
                          y: r39 + t166.label.offsetY,
                          text: m2,
                          textAnchor: t166.label.textAnchor,
                          fontSize: t166.label.style.fontSize,
                          fontFamily: t166.label.style.fontFamily,
                          fontWeight: t166.label.style.fontWeight,
                          foreColor: t166.label.style.color,
                          cssClass: "apexcharts-point-annotation-label ".concat(t166.label.style.cssClass, " ").concat(t166.id ? t166.id : "")
                      });
                      if (w2.attr({
                          rel: i84
                      }), e117.appendChild(w2.node), t166.customSVG.SVG) {
                          var k2 = this.annoCtx.graphics.group({
                              class: "apexcharts-point-annotations-custom-svg " + t166.customSVG.cssClass
                          });
                          k2.attr({
                              transform: "translate(".concat(s45 + t166.customSVG.offsetX, ", ").concat(r39 + t166.customSVG.offsetY, ")")
                          }), k2.node.innerHTML = t166.customSVG.SVG, e117.appendChild(k2.node);
                      }
                      if (t166.image.path) {
                          var A2 = t166.image.width ? t166.image.width : 20, S2 = t166.image.height ? t166.image.height : 20;
                          v3 = this.annoCtx.addImage({
                              x: s45 + t166.image.offsetX - A2 / 2,
                              y: r39 + t166.image.offsetY - S2 / 2,
                              width: A2,
                              height: S2,
                              path: t166.image.path,
                              appendTo: ".apexcharts-point-annotations"
                          });
                      }
                      t166.mouseEnter && v3.node.addEventListener("mouseenter", t166.mouseEnter.bind(this, t166)), t166.mouseLeave && v3.node.addEventListener("mouseleave", t166.mouseLeave.bind(this, t166));
                  }
              }
          },
          {
              key: "drawPointAnnotations",
              value: function() {
                  var t167 = this, e118 = this.w, i85 = this.annoCtx.graphics.group({
                      class: "apexcharts-point-annotations"
                  });
                  return e118.config.annotations.points.map(function(e119, a69) {
                      t167.addPointAnnotation(e119, i85.node, a69);
                  }), i85;
              }
          }
      ]), t165;
  }();
  var A = {
      name: "en",
      options: {
          months: [
              "January",
              "February",
              "March",
              "April",
              "May",
              "June",
              "July",
              "August",
              "September",
              "October",
              "November",
              "December"
          ],
          shortMonths: [
              "Jan",
              "Feb",
              "Mar",
              "Apr",
              "May",
              "Jun",
              "Jul",
              "Aug",
              "Sep",
              "Oct",
              "Nov",
              "Dec"
          ],
          days: [
              "Sunday",
              "Monday",
              "Tuesday",
              "Wednesday",
              "Thursday",
              "Friday",
              "Saturday"
          ],
          shortDays: [
              "Sun",
              "Mon",
              "Tue",
              "Wed",
              "Thu",
              "Fri",
              "Sat"
          ],
          toolbar: {
              exportToSVG: "Download SVG",
              exportToPNG: "Download PNG",
              exportToCSV: "Download CSV",
              menu: "Menu",
              selection: "Selection",
              selectionZoom: "Selection Zoom",
              zoomIn: "Zoom In",
              zoomOut: "Zoom Out",
              pan: "Panning",
              reset: "Reset Zoom"
          }
      }
  }, S = function() {
      function t168() {
          a(this, t168), this.yAxis = {
              show: !0,
              showAlways: !1,
              showForNullSeries: !0,
              seriesName: void 0,
              opposite: !1,
              reversed: !1,
              logarithmic: !1,
              logBase: 10,
              tickAmount: void 0,
              forceNiceScale: !1,
              max: void 0,
              min: void 0,
              floating: !1,
              decimalsInFloat: void 0,
              labels: {
                  show: !0,
                  minWidth: 0,
                  maxWidth: 160,
                  offsetX: 0,
                  offsetY: 0,
                  align: void 0,
                  rotate: 0,
                  padding: 20,
                  style: {
                      colors: [],
                      fontSize: "11px",
                      fontWeight: 400,
                      fontFamily: void 0,
                      cssClass: ""
                  },
                  formatter: void 0
              },
              axisBorder: {
                  show: !1,
                  color: "#e0e0e0",
                  width: 1,
                  offsetX: 0,
                  offsetY: 0
              },
              axisTicks: {
                  show: !1,
                  color: "#e0e0e0",
                  width: 6,
                  offsetX: 0,
                  offsetY: 0
              },
              title: {
                  text: void 0,
                  rotate: -90,
                  offsetY: 0,
                  offsetX: 0,
                  style: {
                      color: void 0,
                      fontSize: "11px",
                      fontWeight: 900,
                      fontFamily: void 0,
                      cssClass: ""
                  }
              },
              tooltip: {
                  enabled: !1,
                  offsetX: 0
              },
              crosshairs: {
                  show: !0,
                  position: "front",
                  stroke: {
                      color: "#b6b6b6",
                      width: 1,
                      dashArray: 0
                  }
              }
          }, this.pointAnnotation = {
              id: void 0,
              x: 0,
              y: null,
              yAxisIndex: 0,
              seriesIndex: 0,
              mouseEnter: void 0,
              mouseLeave: void 0,
              marker: {
                  size: 4,
                  fillColor: "#fff",
                  strokeWidth: 2,
                  strokeColor: "#333",
                  shape: "circle",
                  offsetX: 0,
                  offsetY: 0,
                  radius: 2,
                  cssClass: ""
              },
              label: {
                  borderColor: "#c2c2c2",
                  borderWidth: 1,
                  borderRadius: 2,
                  text: void 0,
                  textAnchor: "middle",
                  offsetX: 0,
                  offsetY: 0,
                  mouseEnter: void 0,
                  mouseLeave: void 0,
                  style: {
                      background: "#fff",
                      color: void 0,
                      fontSize: "11px",
                      fontFamily: void 0,
                      fontWeight: 400,
                      cssClass: "",
                      padding: {
                          left: 5,
                          right: 5,
                          top: 2,
                          bottom: 2
                      }
                  }
              },
              customSVG: {
                  SVG: void 0,
                  cssClass: void 0,
                  offsetX: 0,
                  offsetY: 0
              },
              image: {
                  path: void 0,
                  width: 20,
                  height: 20,
                  offsetX: 0,
                  offsetY: 0
              }
          }, this.yAxisAnnotation = {
              id: void 0,
              y: 0,
              y2: null,
              strokeDashArray: 1,
              fillColor: "#c2c2c2",
              borderColor: "#c2c2c2",
              borderWidth: 1,
              opacity: 0.3,
              offsetX: 0,
              offsetY: 0,
              width: "100%",
              yAxisIndex: 0,
              label: {
                  borderColor: "#c2c2c2",
                  borderWidth: 1,
                  borderRadius: 2,
                  text: void 0,
                  textAnchor: "end",
                  position: "right",
                  offsetX: 0,
                  offsetY: -3,
                  mouseEnter: void 0,
                  mouseLeave: void 0,
                  style: {
                      background: "#fff",
                      color: void 0,
                      fontSize: "11px",
                      fontFamily: void 0,
                      fontWeight: 400,
                      cssClass: "",
                      padding: {
                          left: 5,
                          right: 5,
                          top: 2,
                          bottom: 2
                      }
                  }
              }
          }, this.xAxisAnnotation = {
              id: void 0,
              x: 0,
              x2: null,
              strokeDashArray: 1,
              fillColor: "#c2c2c2",
              borderColor: "#c2c2c2",
              borderWidth: 1,
              opacity: 0.3,
              offsetX: 0,
              offsetY: 0,
              label: {
                  borderColor: "#c2c2c2",
                  borderWidth: 1,
                  borderRadius: 2,
                  text: void 0,
                  textAnchor: "middle",
                  orientation: "vertical",
                  position: "top",
                  offsetX: 0,
                  offsetY: 0,
                  mouseEnter: void 0,
                  mouseLeave: void 0,
                  style: {
                      background: "#fff",
                      color: void 0,
                      fontSize: "11px",
                      fontFamily: void 0,
                      fontWeight: 400,
                      cssClass: "",
                      padding: {
                          left: 5,
                          right: 5,
                          top: 2,
                          bottom: 2
                      }
                  }
              }
          }, this.text = {
              x: 0,
              y: 0,
              text: "",
              textAnchor: "start",
              foreColor: void 0,
              fontSize: "13px",
              fontFamily: void 0,
              fontWeight: 400,
              appendTo: ".apexcharts-annotations",
              backgroundColor: "transparent",
              borderColor: "#c2c2c2",
              borderRadius: 0,
              borderWidth: 0,
              paddingLeft: 4,
              paddingRight: 4,
              paddingTop: 2,
              paddingBottom: 2
          };
      }
      return r(t168, [
          {
              key: "init",
              value: function() {
                  return {
                      annotations: {
                          position: "front",
                          yaxis: [
                              this.yAxisAnnotation
                          ],
                          xaxis: [
                              this.xAxisAnnotation
                          ],
                          points: [
                              this.pointAnnotation
                          ],
                          texts: [],
                          images: [],
                          shapes: []
                      },
                      chart: {
                          animations: {
                              enabled: !0,
                              easing: "easeinout",
                              speed: 800,
                              animateGradually: {
                                  delay: 150,
                                  enabled: !0
                              },
                              dynamicAnimation: {
                                  enabled: !0,
                                  speed: 350
                              }
                          },
                          background: "transparent",
                          locales: [
                              A
                          ],
                          defaultLocale: "en",
                          dropShadow: {
                              enabled: !1,
                              enabledOnSeries: void 0,
                              top: 2,
                              left: 2,
                              blur: 4,
                              color: "#000",
                              opacity: 0.35
                          },
                          events: {
                              animationEnd: void 0,
                              beforeMount: void 0,
                              mounted: void 0,
                              updated: void 0,
                              click: void 0,
                              mouseMove: void 0,
                              mouseLeave: void 0,
                              legendClick: void 0,
                              markerClick: void 0,
                              selection: void 0,
                              dataPointSelection: void 0,
                              dataPointMouseEnter: void 0,
                              dataPointMouseLeave: void 0,
                              beforeZoom: void 0,
                              beforeResetZoom: void 0,
                              zoomed: void 0,
                              scrolled: void 0,
                              brushScrolled: void 0
                          },
                          foreColor: "#373d3f",
                          fontFamily: "Helvetica, Arial, sans-serif",
                          height: "auto",
                          parentHeightOffset: 15,
                          redrawOnParentResize: !0,
                          redrawOnWindowResize: !0,
                          id: void 0,
                          group: void 0,
                          offsetX: 0,
                          offsetY: 0,
                          selection: {
                              enabled: !1,
                              type: "x",
                              fill: {
                                  color: "#24292e",
                                  opacity: 0.1
                              },
                              stroke: {
                                  width: 1,
                                  color: "#24292e",
                                  opacity: 0.4,
                                  dashArray: 3
                              },
                              xaxis: {
                                  min: void 0,
                                  max: void 0
                              },
                              yaxis: {
                                  min: void 0,
                                  max: void 0
                              }
                          },
                          sparkline: {
                              enabled: !1
                          },
                          brush: {
                              enabled: !1,
                              autoScaleYaxis: !0,
                              target: void 0
                          },
                          stacked: !1,
                          stackType: "normal",
                          toolbar: {
                              show: !0,
                              offsetX: 0,
                              offsetY: 0,
                              tools: {
                                  download: !0,
                                  selection: !0,
                                  zoom: !0,
                                  zoomin: !0,
                                  zoomout: !0,
                                  pan: !0,
                                  reset: !0,
                                  customIcons: []
                              },
                              export: {
                                  csv: {
                                      filename: void 0,
                                      columnDelimiter: ",",
                                      headerCategory: "category",
                                      headerValue: "value",
                                      dateFormatter: function(t169) {
                                          return new Date(t169).toDateString();
                                      }
                                  },
                                  png: {
                                      filename: void 0
                                  },
                                  svg: {
                                      filename: void 0
                                  }
                              },
                              autoSelected: "zoom"
                          },
                          type: "line",
                          width: "100%",
                          zoom: {
                              enabled: !0,
                              type: "x",
                              autoScaleYaxis: !1,
                              zoomedArea: {
                                  fill: {
                                      color: "#90CAF9",
                                      opacity: 0.4
                                  },
                                  stroke: {
                                      color: "#0D47A1",
                                      opacity: 0.4,
                                      width: 1
                                  }
                              }
                          }
                      },
                      plotOptions: {
                          area: {
                              fillTo: "origin"
                          },
                          bar: {
                              horizontal: !1,
                              columnWidth: "70%",
                              barHeight: "70%",
                              distributed: !1,
                              borderRadius: 0,
                              rangeBarOverlap: !0,
                              rangeBarGroupRows: !1,
                              colors: {
                                  ranges: [],
                                  backgroundBarColors: [],
                                  backgroundBarOpacity: 1,
                                  backgroundBarRadius: 0
                              },
                              dataLabels: {
                                  position: "top",
                                  maxItems: 100,
                                  hideOverflowingLabels: !0,
                                  orientation: "horizontal"
                              }
                          },
                          bubble: {
                              minBubbleRadius: void 0,
                              maxBubbleRadius: void 0
                          },
                          candlestick: {
                              colors: {
                                  upward: "#00B746",
                                  downward: "#EF403C"
                              },
                              wick: {
                                  useFillColor: !0
                              }
                          },
                          boxPlot: {
                              colors: {
                                  upper: "#00E396",
                                  lower: "#008FFB"
                              }
                          },
                          heatmap: {
                              radius: 2,
                              enableShades: !0,
                              shadeIntensity: 0.5,
                              reverseNegativeShade: !1,
                              distributed: !1,
                              useFillColorAsStroke: !1,
                              colorScale: {
                                  inverse: !1,
                                  ranges: [],
                                  min: void 0,
                                  max: void 0
                              }
                          },
                          treemap: {
                              enableShades: !0,
                              shadeIntensity: 0.5,
                              distributed: !1,
                              reverseNegativeShade: !1,
                              useFillColorAsStroke: !1,
                              colorScale: {
                                  inverse: !1,
                                  ranges: [],
                                  min: void 0,
                                  max: void 0
                              }
                          },
                          radialBar: {
                              inverseOrder: !1,
                              startAngle: 0,
                              endAngle: 360,
                              offsetX: 0,
                              offsetY: 0,
                              hollow: {
                                  margin: 5,
                                  size: "50%",
                                  background: "transparent",
                                  image: void 0,
                                  imageWidth: 150,
                                  imageHeight: 150,
                                  imageOffsetX: 0,
                                  imageOffsetY: 0,
                                  imageClipped: !0,
                                  position: "front",
                                  dropShadow: {
                                      enabled: !1,
                                      top: 0,
                                      left: 0,
                                      blur: 3,
                                      color: "#000",
                                      opacity: 0.5
                                  }
                              },
                              track: {
                                  show: !0,
                                  startAngle: void 0,
                                  endAngle: void 0,
                                  background: "#f2f2f2",
                                  strokeWidth: "97%",
                                  opacity: 1,
                                  margin: 5,
                                  dropShadow: {
                                      enabled: !1,
                                      top: 0,
                                      left: 0,
                                      blur: 3,
                                      color: "#000",
                                      opacity: 0.5
                                  }
                              },
                              dataLabels: {
                                  show: !0,
                                  name: {
                                      show: !0,
                                      fontSize: "16px",
                                      fontFamily: void 0,
                                      fontWeight: 600,
                                      color: void 0,
                                      offsetY: 0,
                                      formatter: function(t170) {
                                          return t170;
                                      }
                                  },
                                  value: {
                                      show: !0,
                                      fontSize: "14px",
                                      fontFamily: void 0,
                                      fontWeight: 400,
                                      color: void 0,
                                      offsetY: 16,
                                      formatter: function(t171) {
                                          return t171 + "%";
                                      }
                                  },
                                  total: {
                                      show: !1,
                                      label: "Total",
                                      fontSize: "16px",
                                      fontWeight: 600,
                                      fontFamily: void 0,
                                      color: void 0,
                                      formatter: function(t172) {
                                          return t172.globals.seriesTotals.reduce(function(t173, e120) {
                                              return t173 + e120;
                                          }, 0) / t172.globals.series.length + "%";
                                      }
                                  }
                              }
                          },
                          pie: {
                              customScale: 1,
                              offsetX: 0,
                              offsetY: 0,
                              startAngle: 0,
                              endAngle: 360,
                              expandOnClick: !0,
                              dataLabels: {
                                  offset: 0,
                                  minAngleToShowLabel: 10
                              },
                              donut: {
                                  size: "65%",
                                  background: "transparent",
                                  labels: {
                                      show: !1,
                                      name: {
                                          show: !0,
                                          fontSize: "16px",
                                          fontFamily: void 0,
                                          fontWeight: 600,
                                          color: void 0,
                                          offsetY: -10,
                                          formatter: function(t174) {
                                              return t174;
                                          }
                                      },
                                      value: {
                                          show: !0,
                                          fontSize: "20px",
                                          fontFamily: void 0,
                                          fontWeight: 400,
                                          color: void 0,
                                          offsetY: 10,
                                          formatter: function(t175) {
                                              return t175;
                                          }
                                      },
                                      total: {
                                          show: !1,
                                          showAlways: !1,
                                          label: "Total",
                                          fontSize: "16px",
                                          fontWeight: 400,
                                          fontFamily: void 0,
                                          color: void 0,
                                          formatter: function(t176) {
                                              return t176.globals.seriesTotals.reduce(function(t177, e121) {
                                                  return t177 + e121;
                                              }, 0);
                                          }
                                      }
                                  }
                              }
                          },
                          polarArea: {
                              rings: {
                                  strokeWidth: 1,
                                  strokeColor: "#e8e8e8"
                              },
                              spokes: {
                                  strokeWidth: 1,
                                  connectorColors: "#e8e8e8"
                              }
                          },
                          radar: {
                              size: void 0,
                              offsetX: 0,
                              offsetY: 0,
                              polygons: {
                                  strokeWidth: 1,
                                  strokeColors: "#e8e8e8",
                                  connectorColors: "#e8e8e8",
                                  fill: {
                                      colors: void 0
                                  }
                              }
                          }
                      },
                      colors: void 0,
                      dataLabels: {
                          enabled: !0,
                          enabledOnSeries: void 0,
                          formatter: function(t178) {
                              return null !== t178 ? t178 : "";
                          },
                          textAnchor: "middle",
                          distributed: !1,
                          offsetX: 0,
                          offsetY: 0,
                          style: {
                              fontSize: "12px",
                              fontFamily: void 0,
                              fontWeight: 600,
                              colors: void 0
                          },
                          background: {
                              enabled: !0,
                              foreColor: "#fff",
                              borderRadius: 2,
                              padding: 4,
                              opacity: 0.9,
                              borderWidth: 1,
                              borderColor: "#fff",
                              dropShadow: {
                                  enabled: !1,
                                  top: 1,
                                  left: 1,
                                  blur: 1,
                                  color: "#000",
                                  opacity: 0.45
                              }
                          },
                          dropShadow: {
                              enabled: !1,
                              top: 1,
                              left: 1,
                              blur: 1,
                              color: "#000",
                              opacity: 0.45
                          }
                      },
                      fill: {
                          type: "solid",
                          colors: void 0,
                          opacity: 0.85,
                          gradient: {
                              shade: "dark",
                              type: "horizontal",
                              shadeIntensity: 0.5,
                              gradientToColors: void 0,
                              inverseColors: !0,
                              opacityFrom: 1,
                              opacityTo: 1,
                              stops: [
                                  0,
                                  50,
                                  100
                              ],
                              colorStops: []
                          },
                          image: {
                              src: [],
                              width: void 0,
                              height: void 0
                          },
                          pattern: {
                              style: "squares",
                              width: 6,
                              height: 6,
                              strokeWidth: 2
                          }
                      },
                      forecastDataPoints: {
                          count: 0,
                          fillOpacity: 0.5,
                          strokeWidth: void 0,
                          dashArray: 4
                      },
                      grid: {
                          show: !0,
                          borderColor: "#e0e0e0",
                          strokeDashArray: 0,
                          position: "back",
                          xaxis: {
                              lines: {
                                  show: !1
                              }
                          },
                          yaxis: {
                              lines: {
                                  show: !0
                              }
                          },
                          row: {
                              colors: void 0,
                              opacity: 0.5
                          },
                          column: {
                              colors: void 0,
                              opacity: 0.5
                          },
                          padding: {
                              top: 0,
                              right: 10,
                              bottom: 0,
                              left: 12
                          }
                      },
                      labels: [],
                      legend: {
                          show: !0,
                          showForSingleSeries: !1,
                          showForNullSeries: !0,
                          showForZeroSeries: !0,
                          floating: !1,
                          position: "bottom",
                          horizontalAlign: "center",
                          inverseOrder: !1,
                          fontSize: "12px",
                          fontFamily: void 0,
                          fontWeight: 400,
                          width: void 0,
                          height: void 0,
                          formatter: void 0,
                          tooltipHoverFormatter: void 0,
                          offsetX: -20,
                          offsetY: 4,
                          customLegendItems: [],
                          labels: {
                              colors: void 0,
                              useSeriesColors: !1
                          },
                          markers: {
                              width: 12,
                              height: 12,
                              strokeWidth: 0,
                              fillColors: void 0,
                              strokeColor: "#fff",
                              radius: 12,
                              customHTML: void 0,
                              offsetX: 0,
                              offsetY: 0,
                              onClick: void 0
                          },
                          itemMargin: {
                              horizontal: 5,
                              vertical: 2
                          },
                          onItemClick: {
                              toggleDataSeries: !0
                          },
                          onItemHover: {
                              highlightDataSeries: !0
                          }
                      },
                      markers: {
                          discrete: [],
                          size: 0,
                          colors: void 0,
                          strokeColors: "#fff",
                          strokeWidth: 2,
                          strokeOpacity: 0.9,
                          strokeDashArray: 0,
                          fillOpacity: 1,
                          shape: "circle",
                          width: 8,
                          height: 8,
                          radius: 2,
                          offsetX: 0,
                          offsetY: 0,
                          onClick: void 0,
                          onDblClick: void 0,
                          showNullDataPoints: !0,
                          hover: {
                              size: void 0,
                              sizeOffset: 3
                          }
                      },
                      noData: {
                          text: void 0,
                          align: "center",
                          verticalAlign: "middle",
                          offsetX: 0,
                          offsetY: 0,
                          style: {
                              color: void 0,
                              fontSize: "14px",
                              fontFamily: void 0
                          }
                      },
                      responsive: [],
                      series: void 0,
                      states: {
                          normal: {
                              filter: {
                                  type: "none",
                                  value: 0
                              }
                          },
                          hover: {
                              filter: {
                                  type: "lighten",
                                  value: 0.1
                              }
                          },
                          active: {
                              allowMultipleDataPointsSelection: !1,
                              filter: {
                                  type: "darken",
                                  value: 0.5
                              }
                          }
                      },
                      title: {
                          text: void 0,
                          align: "left",
                          margin: 5,
                          offsetX: 0,
                          offsetY: 0,
                          floating: !1,
                          style: {
                              fontSize: "14px",
                              fontWeight: 900,
                              fontFamily: void 0,
                              color: void 0
                          }
                      },
                      subtitle: {
                          text: void 0,
                          align: "left",
                          margin: 5,
                          offsetX: 0,
                          offsetY: 30,
                          floating: !1,
                          style: {
                              fontSize: "12px",
                              fontWeight: 400,
                              fontFamily: void 0,
                              color: void 0
                          }
                      },
                      stroke: {
                          show: !0,
                          curve: "smooth",
                          lineCap: "butt",
                          width: 2,
                          colors: void 0,
                          dashArray: 0
                      },
                      tooltip: {
                          enabled: !0,
                          enabledOnSeries: void 0,
                          shared: !0,
                          followCursor: !1,
                          intersect: !1,
                          inverseOrder: !1,
                          custom: void 0,
                          fillSeriesColor: !1,
                          theme: "light",
                          style: {
                              fontSize: "12px",
                              fontFamily: void 0
                          },
                          onDatasetHover: {
                              highlightDataSeries: !1
                          },
                          x: {
                              show: !0,
                              format: "dd MMM",
                              formatter: void 0
                          },
                          y: {
                              formatter: void 0,
                              title: {
                                  formatter: function(t179) {
                                      return t179 ? t179 + ": " : "";
                                  }
                              }
                          },
                          z: {
                              formatter: void 0,
                              title: "Size: "
                          },
                          marker: {
                              show: !0,
                              fillColors: void 0
                          },
                          items: {
                              display: "flex"
                          },
                          fixed: {
                              enabled: !1,
                              position: "topRight",
                              offsetX: 0,
                              offsetY: 0
                          }
                      },
                      xaxis: {
                          type: "category",
                          categories: [],
                          convertedCatToNumeric: !1,
                          offsetX: 0,
                          offsetY: 0,
                          overwriteCategories: void 0,
                          labels: {
                              show: !0,
                              rotate: -45,
                              rotateAlways: !1,
                              hideOverlappingLabels: !0,
                              trim: !1,
                              minHeight: void 0,
                              maxHeight: 120,
                              showDuplicates: !0,
                              style: {
                                  colors: [],
                                  fontSize: "12px",
                                  fontWeight: 400,
                                  fontFamily: void 0,
                                  cssClass: ""
                              },
                              offsetX: 0,
                              offsetY: 0,
                              format: void 0,
                              formatter: void 0,
                              datetimeUTC: !0,
                              datetimeFormatter: {
                                  year: "yyyy",
                                  month: "MMM 'yy",
                                  day: "dd MMM",
                                  hour: "HH:mm",
                                  minute: "HH:mm:ss",
                                  second: "HH:mm:ss"
                              }
                          },
                          axisBorder: {
                              show: !0,
                              color: "#e0e0e0",
                              width: "100%",
                              height: 1,
                              offsetX: 0,
                              offsetY: 0
                          },
                          axisTicks: {
                              show: !0,
                              color: "#e0e0e0",
                              height: 6,
                              offsetX: 0,
                              offsetY: 0
                          },
                          tickAmount: void 0,
                          tickPlacement: "on",
                          min: void 0,
                          max: void 0,
                          range: void 0,
                          floating: !1,
                          decimalsInFloat: void 0,
                          position: "bottom",
                          title: {
                              text: void 0,
                              offsetX: 0,
                              offsetY: 0,
                              style: {
                                  color: void 0,
                                  fontSize: "12px",
                                  fontWeight: 900,
                                  fontFamily: void 0,
                                  cssClass: ""
                              }
                          },
                          crosshairs: {
                              show: !0,
                              width: 1,
                              position: "back",
                              opacity: 0.9,
                              stroke: {
                                  color: "#b6b6b6",
                                  width: 1,
                                  dashArray: 3
                              },
                              fill: {
                                  type: "solid",
                                  color: "#B1B9C4",
                                  gradient: {
                                      colorFrom: "#D8E3F0",
                                      colorTo: "#BED1E6",
                                      stops: [
                                          0,
                                          100
                                      ],
                                      opacityFrom: 0.4,
                                      opacityTo: 0.5
                                  }
                              },
                              dropShadow: {
                                  enabled: !1,
                                  left: 0,
                                  top: 0,
                                  blur: 1,
                                  opacity: 0.4
                              }
                          },
                          tooltip: {
                              enabled: !0,
                              offsetY: 0,
                              formatter: void 0,
                              style: {
                                  fontSize: "12px",
                                  fontFamily: void 0
                              }
                          }
                      },
                      yaxis: this.yAxis,
                      theme: {
                          mode: "light",
                          palette: "palette1",
                          monochrome: {
                              enabled: !1,
                              color: "#008FFB",
                              shadeTo: "light",
                              shadeIntensity: 0.65
                          }
                      }
                  };
              }
          }
      ]), t168;
  }(), C = function() {
      function t180(e122) {
          a(this, t180), this.ctx = e122, this.w = e122.w, this.graphics = new b(this.ctx), this.w.globals.isBarHorizontal && (this.invertAxis = !0), this.helpers = new v(this), this.xAxisAnnotations = new m(this), this.yAxisAnnotations = new w(this), this.pointsAnnotations = new k(this), this.w.globals.isBarHorizontal && this.w.config.yaxis[0].reversed && (this.inversedReversedAxis = !0), this.xDivision = this.w.globals.gridWidth / this.w.globals.dataPoints;
      }
      return r(t180, [
          {
              key: "drawAxesAnnotations",
              value: function() {
                  var t181 = this.w;
                  if (t181.globals.axisCharts) {
                      for(var e123 = this.yAxisAnnotations.drawYAxisAnnotations(), i86 = this.xAxisAnnotations.drawXAxisAnnotations(), a70 = this.pointsAnnotations.drawPointAnnotations(), s46 = t181.config.chart.animations.enabled, r40 = [
                          e123,
                          i86,
                          a70
                      ], o32 = [
                          i86.node,
                          e123.node,
                          a70.node
                      ], n27 = 0; n27 < 3; n27++)t181.globals.dom.elGraphical.add(r40[n27]), !s46 || t181.globals.resized || t181.globals.dataChanged || "scatter" !== t181.config.chart.type && "bubble" !== t181.config.chart.type && t181.globals.dataPoints > 1 && o32[n27].classList.add("apexcharts-element-hidden"), t181.globals.delayedElements.push({
                          el: o32[n27],
                          index: 0
                      });
                      this.helpers.annotationsBackground();
                  }
              }
          },
          {
              key: "drawImageAnnos",
              value: function() {
                  var t182 = this;
                  this.w.config.annotations.images.map(function(e124, i87) {
                      t182.addImage(e124, i87);
                  });
              }
          },
          {
              key: "drawTextAnnos",
              value: function() {
                  var t183 = this;
                  this.w.config.annotations.texts.map(function(e125, i88) {
                      t183.addText(e125, i88);
                  });
              }
          },
          {
              key: "addXaxisAnnotation",
              value: function(t184, e126, i89) {
                  this.xAxisAnnotations.addXaxisAnnotation(t184, e126, i89);
              }
          },
          {
              key: "addYaxisAnnotation",
              value: function(t185, e127, i90) {
                  this.yAxisAnnotations.addYaxisAnnotation(t185, e127, i90);
              }
          },
          {
              key: "addPointAnnotation",
              value: function(t186, e128, i91) {
                  this.pointsAnnotations.addPointAnnotation(t186, e128, i91);
              }
          },
          {
              key: "addText",
              value: function(t187, e) {
                  var i92 = t187.x, a71 = t187.y, s47 = t187.text, r41 = t187.textAnchor, o33 = t187.foreColor, n28 = t187.fontSize, l19 = t187.fontFamily, h16 = t187.fontWeight, c14 = t187.cssClass, d12 = t187.backgroundColor, g9 = t187.borderWidth, u7 = t187.strokeDashArray, p4 = t187.borderRadius, f6 = t187.borderColor, x4 = t187.appendTo, b6 = void 0 === x4 ? ".apexcharts-annotations" : x4, v4 = t187.paddingLeft, m3 = void 0 === v4 ? 4 : v4, y2 = t187.paddingRight, w3 = void 0 === y2 ? 4 : y2, k3 = t187.paddingBottom, A3 = void 0 === k3 ? 2 : k3, S3 = t187.paddingTop, C2 = void 0 === S3 ? 2 : S3, L2 = this.w, P2 = this.graphics.drawText({
                      x: i92,
                      y: a71,
                      text: s47,
                      textAnchor: r41 || "start",
                      fontSize: n28 || "12px",
                      fontWeight: h16 || "regular",
                      fontFamily: l19 || L2.config.chart.fontFamily,
                      foreColor: o33 || L2.config.chart.foreColor,
                      cssClass: c14
                  }), T2 = L2.globals.dom.baseEl.querySelector(b6);
                  T2 && T2.appendChild(P2.node);
                  var M2 = P2.bbox();
                  if (s47) {
                      var I2 = this.graphics.drawRect(M2.x - m3, M2.y - C2, M2.width + m3 + w3, M2.height + A3 + C2, p4, d12 || "transparent", 1, g9, f6, u7);
                      T2.insertBefore(I2.node, P2.node);
                  }
              }
          },
          {
              key: "addImage",
              value: function(t188, e) {
                  var i93 = this.w, a72 = t188.path, s48 = t188.x, r42 = void 0 === s48 ? 0 : s48, o34 = t188.y, n29 = void 0 === o34 ? 0 : o34, l20 = t188.width, h17 = void 0 === l20 ? 20 : l20, c15 = t188.height, d13 = void 0 === c15 ? 20 : c15, g10 = t188.appendTo, u8 = void 0 === g10 ? ".apexcharts-annotations" : g10, p5 = i93.globals.dom.Paper.image(a72);
                  p5.size(h17, d13).move(r42, n29);
                  var f7 = i93.globals.dom.baseEl.querySelector(u8);
                  return f7 && f7.appendChild(p5.node), p5;
              }
          },
          {
              key: "addXaxisAnnotationExternal",
              value: function(t189, e129, i94) {
                  return this.addAnnotationExternal({
                      params: t189,
                      pushToMemory: e129,
                      context: i94,
                      type: "xaxis",
                      contextMethod: i94.addXaxisAnnotation
                  }), i94;
              }
          },
          {
              key: "addYaxisAnnotationExternal",
              value: function(t190, e130, i95) {
                  return this.addAnnotationExternal({
                      params: t190,
                      pushToMemory: e130,
                      context: i95,
                      type: "yaxis",
                      contextMethod: i95.addYaxisAnnotation
                  }), i95;
              }
          },
          {
              key: "addPointAnnotationExternal",
              value: function(t191, e131, i96) {
                  return void 0 === this.invertAxis && (this.invertAxis = i96.w.globals.isBarHorizontal), this.addAnnotationExternal({
                      params: t191,
                      pushToMemory: e131,
                      context: i96,
                      type: "point",
                      contextMethod: i96.addPointAnnotation
                  }), i96;
              }
          },
          {
              key: "addAnnotationExternal",
              value: function(t192) {
                  var e132 = t192.params, i97 = t192.pushToMemory, a73 = t192.context, s49 = t192.type, r43 = t192.contextMethod, o35 = a73, n30 = o35.w, l21 = n30.globals.dom.baseEl.querySelector(".apexcharts-".concat(s49, "-annotations")), h18 = l21.childNodes.length + 1, c16 = new S, d14 = Object.assign({
                  }, "xaxis" === s49 ? c16.xAxisAnnotation : "yaxis" === s49 ? c16.yAxisAnnotation : c16.pointAnnotation), g11 = p.extend(d14, e132);
                  switch(s49){
                      case "xaxis":
                          this.addXaxisAnnotation(g11, l21, h18);
                          break;
                      case "yaxis":
                          this.addYaxisAnnotation(g11, l21, h18);
                          break;
                      case "point":
                          this.addPointAnnotation(g11, l21, h18);
                  }
                  var u9 = n30.globals.dom.baseEl.querySelector(".apexcharts-".concat(s49, "-annotations .apexcharts-").concat(s49, "-annotation-label[rel='").concat(h18, "']")), f8 = this.helpers.addBackgroundToAnno(u9, g11);
                  return f8 && l21.insertBefore(f8.node, u9), i97 && n30.globals.memory.methodsToExec.push({
                      context: o35,
                      id: g11.id ? g11.id : p.randomId(),
                      method: r43,
                      label: "addAnnotation",
                      params: e132
                  }), a73;
              }
          },
          {
              key: "clearAnnotations",
              value: function(t193) {
                  var e133 = t193.w, i98 = e133.globals.dom.baseEl.querySelectorAll(".apexcharts-yaxis-annotations, .apexcharts-xaxis-annotations, .apexcharts-point-annotations");
                  e133.globals.memory.methodsToExec.map(function(t194, i99) {
                      "addText" !== t194.label && "addAnnotation" !== t194.label || e133.globals.memory.methodsToExec.splice(i99, 1);
                  }), i98 = p.listToArray(i98), Array.prototype.forEach.call(i98, function(t195) {
                      for(; t195.firstChild;)t195.removeChild(t195.firstChild);
                  });
              }
          },
          {
              key: "removeAnnotation",
              value: function(t196, e134) {
                  var i100 = t196.w, a74 = i100.globals.dom.baseEl.querySelectorAll(".".concat(e134));
                  a74 && (i100.globals.memory.methodsToExec.map(function(t197, a75) {
                      t197.id === e134 && i100.globals.memory.methodsToExec.splice(a75, 1);
                  }), Array.prototype.forEach.call(a74, function(t198) {
                      t198.parentElement.removeChild(t198);
                  }));
              }
          }
      ]), t180;
  }(), L = function() {
      function t199(e135) {
          a(this, t199), this.ctx = e135, this.w = e135.w, this.opts = null, this.seriesIndex = 0;
      }
      return r(t199, [
          {
              key: "clippedImgArea",
              value: function(t200) {
                  var e136 = this.w, i101 = e136.config, a76 = parseInt(e136.globals.gridWidth, 10), s50 = parseInt(e136.globals.gridHeight, 10), r44 = a76 > s50 ? a76 : s50, o36 = t200.image, n31 = 0, l22 = 0;
                  void 0 === t200.width && void 0 === t200.height ? void 0 !== i101.fill.image.width && void 0 !== i101.fill.image.height ? (n31 = i101.fill.image.width + 1, l22 = i101.fill.image.height) : (n31 = r44 + 1, l22 = r44) : (n31 = t200.width, l22 = t200.height);
                  var h19 = document.createElementNS(e136.globals.SVGNS, "pattern");
                  b.setAttrs(h19, {
                      id: t200.patternID,
                      patternUnits: t200.patternUnits ? t200.patternUnits : "userSpaceOnUse",
                      width: n31 + "px",
                      height: l22 + "px"
                  });
                  var c17 = document.createElementNS(e136.globals.SVGNS, "image");
                  h19.appendChild(c17), c17.setAttributeNS(window.SVG.xlink, "href", o36), b.setAttrs(c17, {
                      x: 0,
                      y: 0,
                      preserveAspectRatio: "none",
                      width: n31 + "px",
                      height: l22 + "px"
                  }), c17.style.opacity = t200.opacity, e136.globals.dom.elDefs.node.appendChild(h19);
              }
          },
          {
              key: "getSeriesIndex",
              value: function(t201) {
                  var e137 = this.w;
                  return ("bar" === e137.config.chart.type || "rangeBar" === e137.config.chart.type) && e137.config.plotOptions.bar.distributed || "heatmap" === e137.config.chart.type || "treemap" === e137.config.chart.type ? this.seriesIndex = t201.seriesNumber : this.seriesIndex = t201.seriesNumber % e137.globals.series.length, this.seriesIndex;
              }
          },
          {
              key: "fillPath",
              value: function(t202) {
                  var e138 = this.w;
                  this.opts = t202;
                  var i102, a77, s51, r45 = this.w.config;
                  this.seriesIndex = this.getSeriesIndex(t202);
                  var o37 = this.getFillColors()[this.seriesIndex];
                  void 0 !== e138.globals.seriesColors[this.seriesIndex] && (o37 = e138.globals.seriesColors[this.seriesIndex]), "function" == typeof o37 && (o37 = o37({
                      seriesIndex: this.seriesIndex,
                      dataPointIndex: t202.dataPointIndex,
                      value: t202.value,
                      w: e138
                  }));
                  var n32 = this.getFillType(this.seriesIndex), l23 = Array.isArray(r45.fill.opacity) ? r45.fill.opacity[this.seriesIndex] : r45.fill.opacity;
                  t202.color && (o37 = t202.color);
                  var h20 = o37;
                  if (-1 === o37.indexOf("rgb") ? o37.length < 9 && (h20 = p.hexToRgba(o37, l23)) : o37.indexOf("rgba") > -1 && (l23 = p.getOpacityFromRGBA(o37)), t202.opacity && (l23 = t202.opacity), "pattern" === n32 && (a77 = this.handlePatternFill(a77, o37, l23, h20)), "gradient" === n32 && (s51 = this.handleGradientFill(o37, l23, this.seriesIndex)), "image" === n32) {
                      var c18 = r45.fill.image.src, d15 = t202.patternID ? t202.patternID : "";
                      this.clippedImgArea({
                          opacity: l23,
                          image: Array.isArray(c18) ? t202.seriesNumber < c18.length ? c18[t202.seriesNumber] : c18[0] : c18,
                          width: t202.width ? t202.width : void 0,
                          height: t202.height ? t202.height : void 0,
                          patternUnits: t202.patternUnits,
                          patternID: "pattern".concat(e138.globals.cuid).concat(t202.seriesNumber + 1).concat(d15)
                      }), i102 = "url(#pattern".concat(e138.globals.cuid).concat(t202.seriesNumber + 1).concat(d15, ")");
                  } else i102 = "gradient" === n32 ? s51 : "pattern" === n32 ? a77 : h20;
                  return t202.solid && (i102 = h20), i102;
              }
          },
          {
              key: "getFillType",
              value: function(t) {
                  var e139 = this.w;
                  return Array.isArray(e139.config.fill.type) ? e139.config.fill.type[t] : e139.config.fill.type;
              }
          },
          {
              key: "getFillColors",
              value: function() {
                  var t203 = this.w, e140 = t203.config, i103 = this.opts, a78 = [];
                  return t203.globals.comboCharts ? "line" === t203.config.series[this.seriesIndex].type ? Array.isArray(t203.globals.stroke.colors) ? a78 = t203.globals.stroke.colors : a78.push(t203.globals.stroke.colors) : Array.isArray(t203.globals.fill.colors) ? a78 = t203.globals.fill.colors : a78.push(t203.globals.fill.colors) : "line" === e140.chart.type ? Array.isArray(t203.globals.stroke.colors) ? a78 = t203.globals.stroke.colors : a78.push(t203.globals.stroke.colors) : Array.isArray(t203.globals.fill.colors) ? a78 = t203.globals.fill.colors : a78.push(t203.globals.fill.colors), void 0 !== i103.fillColors && (a78 = [], Array.isArray(i103.fillColors) ? a78 = i103.fillColors.slice() : a78.push(i103.fillColors)), a78;
              }
          },
          {
              key: "handlePatternFill",
              value: function(t204, e141, i104, a79) {
                  var s52 = this.w.config, r = this.opts, o38 = new b(this.ctx), n33 = void 0 === s52.fill.pattern.strokeWidth ? Array.isArray(s52.stroke.width) ? s52.stroke.width[this.seriesIndex] : s52.stroke.width : Array.isArray(s52.fill.pattern.strokeWidth) ? s52.fill.pattern.strokeWidth[this.seriesIndex] : s52.fill.pattern.strokeWidth, l24 = e141;
                  Array.isArray(s52.fill.pattern.style) ? t204 = void 0 !== s52.fill.pattern.style[r.seriesNumber] ? o38.drawPattern(s52.fill.pattern.style[r.seriesNumber], s52.fill.pattern.width, s52.fill.pattern.height, l24, n33, i104) : a79 : t204 = o38.drawPattern(s52.fill.pattern.style, s52.fill.pattern.width, s52.fill.pattern.height, l24, n33, i104);
                  return t204;
              }
          },
          {
              key: "handleGradientFill",
              value: function(t205, e142, i105) {
                  var a80, s53 = this.w.config, r46 = this.opts, o39 = new b(this.ctx), n34 = new p, l25 = s53.fill.gradient.type, h21 = t205, c19 = void 0 === s53.fill.gradient.opacityFrom ? e142 : Array.isArray(s53.fill.gradient.opacityFrom) ? s53.fill.gradient.opacityFrom[i105] : s53.fill.gradient.opacityFrom;
                  h21.indexOf("rgba") > -1 && (c19 = p.getOpacityFromRGBA(h21));
                  var d16 = void 0 === s53.fill.gradient.opacityTo ? e142 : Array.isArray(s53.fill.gradient.opacityTo) ? s53.fill.gradient.opacityTo[i105] : s53.fill.gradient.opacityTo;
                  if (void 0 === s53.fill.gradient.gradientToColors || 0 === s53.fill.gradient.gradientToColors.length) a80 = "dark" === s53.fill.gradient.shade ? n34.shadeColor(-1 * parseFloat(s53.fill.gradient.shadeIntensity), t205.indexOf("rgb") > -1 ? p.rgb2hex(t205) : t205) : n34.shadeColor(parseFloat(s53.fill.gradient.shadeIntensity), t205.indexOf("rgb") > -1 ? p.rgb2hex(t205) : t205);
                  else if (s53.fill.gradient.gradientToColors[r46.seriesNumber]) {
                      var g12 = s53.fill.gradient.gradientToColors[r46.seriesNumber];
                      a80 = g12, g12.indexOf("rgba") > -1 && (d16 = p.getOpacityFromRGBA(g12));
                  } else a80 = t205;
                  if (s53.fill.gradient.inverseColors) {
                      var u10 = h21;
                      h21 = a80, a80 = u10;
                  }
                  return h21.indexOf("rgb") > -1 && (h21 = p.rgb2hex(h21)), a80.indexOf("rgb") > -1 && (a80 = p.rgb2hex(a80)), o39.drawGradient(l25, h21, a80, c19, d16, r46.size, s53.fill.gradient.stops, s53.fill.gradient.colorStops, i105);
              }
          }
      ]), t199;
  }(), P = function() {
      function t206(e143, i) {
          a(this, t206), this.ctx = e143, this.w = e143.w;
      }
      return r(t206, [
          {
              key: "setGlobalMarkerSize",
              value: function() {
                  var t207 = this.w;
                  if (t207.globals.markers.size = Array.isArray(t207.config.markers.size) ? t207.config.markers.size : [
                      t207.config.markers.size
                  ], t207.globals.markers.size.length > 0) {
                      if (t207.globals.markers.size.length < t207.globals.series.length + 1) for(var e144 = 0; e144 <= t207.globals.series.length; e144++)void 0 === t207.globals.markers.size[e144] && t207.globals.markers.size.push(t207.globals.markers.size[0]);
                  } else t207.globals.markers.size = t207.config.series.map(function(e) {
                      return t207.config.markers.size;
                  });
              }
          },
          {
              key: "plotChartMarkers",
              value: function(t208, e145, i106, a81) {
                  var s54, r47 = arguments.length > 4 && void 0 !== arguments[4] && arguments[4], o40 = this.w, n = e145, l26 = t208, h22 = null, c20 = new b(this.ctx);
                  if ((o40.globals.markers.size[e145] > 0 || r47) && (h22 = c20.group({
                      class: r47 ? "" : "apexcharts-series-markers"
                  })).attr("clip-path", "url(#gridRectMarkerMask".concat(o40.globals.cuid, ")")), Array.isArray(l26.x)) for(var d17 = 0; d17 < l26.x.length; d17++){
                      var g13 = i106;
                      1 === i106 && 0 === d17 && (g13 = 0), 1 === i106 && 1 === d17 && (g13 = 1);
                      var u11 = "apexcharts-marker";
                      "line" !== o40.config.chart.type && "area" !== o40.config.chart.type || o40.globals.comboCharts || o40.config.tooltip.intersect || (u11 += " no-pointer-events");
                      var f9 = Array.isArray(o40.config.markers.size) ? o40.globals.markers.size[e145] > 0 : o40.config.markers.size > 0;
                      if (f9 || r47) {
                          p.isNumber(l26.y[d17]) ? u11 += " w".concat(p.randomId()) : u11 = "apexcharts-nullpoint";
                          var v5 = this.getMarkerConfig({
                              cssClass: u11,
                              seriesIndex: e145,
                              dataPointIndex: g13
                          });
                          o40.config.series[n].data[g13] && (o40.config.series[n].data[g13].fillColor && (v5.pointFillColor = o40.config.series[n].data[g13].fillColor), o40.config.series[n].data[g13].strokeColor && (v5.pointStrokeColor = o40.config.series[n].data[g13].strokeColor)), a81 && (v5.pSize = a81), (s54 = c20.drawMarker(l26.x[d17], l26.y[d17], v5)).attr("rel", g13), s54.attr("j", g13), s54.attr("index", e145), s54.node.setAttribute("default-marker-size", v5.pSize);
                          var m4 = new x(this.ctx);
                          m4.setSelectionFilter(s54, e145, g13), this.addEvents(s54), h22 && h22.add(s54);
                      } else void 0 === o40.globals.pointsArray[e145] && (o40.globals.pointsArray[e145] = []), o40.globals.pointsArray[e145].push([
                          l26.x[d17],
                          l26.y[d17]
                      ]);
                  }
                  return h22;
              }
          },
          {
              key: "getMarkerConfig",
              value: function(t209) {
                  var e146 = t209.cssClass, i107 = t209.seriesIndex, a82 = t209.dataPointIndex, s55 = void 0 === a82 ? null : a82, r48 = t209.finishRadius, o41 = void 0 === r48 ? null : r48, n35 = this.w, l27 = this.getMarkerStyle(i107), h23 = n35.globals.markers.size[i107], c21 = n35.config.markers;
                  return null !== s55 && c21.discrete.length && c21.discrete.map(function(t210) {
                      t210.seriesIndex === i107 && t210.dataPointIndex === s55 && (l27.pointStrokeColor = t210.strokeColor, l27.pointFillColor = t210.fillColor, h23 = t210.size, l27.pointShape = t210.shape);
                  }), {
                      pSize: null === o41 ? h23 : o41,
                      pRadius: c21.radius,
                      width: Array.isArray(c21.width) ? c21.width[i107] : c21.width,
                      height: Array.isArray(c21.height) ? c21.height[i107] : c21.height,
                      pointStrokeWidth: Array.isArray(c21.strokeWidth) ? c21.strokeWidth[i107] : c21.strokeWidth,
                      pointStrokeColor: l27.pointStrokeColor,
                      pointFillColor: l27.pointFillColor,
                      shape: l27.pointShape || (Array.isArray(c21.shape) ? c21.shape[i107] : c21.shape),
                      class: e146,
                      pointStrokeOpacity: Array.isArray(c21.strokeOpacity) ? c21.strokeOpacity[i107] : c21.strokeOpacity,
                      pointStrokeDashArray: Array.isArray(c21.strokeDashArray) ? c21.strokeDashArray[i107] : c21.strokeDashArray,
                      pointFillOpacity: Array.isArray(c21.fillOpacity) ? c21.fillOpacity[i107] : c21.fillOpacity,
                      seriesIndex: i107
                  };
              }
          },
          {
              key: "addEvents",
              value: function(t211) {
                  var e147 = this.w, i108 = new b(this.ctx);
                  t211.node.addEventListener("mouseenter", i108.pathMouseEnter.bind(this.ctx, t211)), t211.node.addEventListener("mouseleave", i108.pathMouseLeave.bind(this.ctx, t211)), t211.node.addEventListener("mousedown", i108.pathMouseDown.bind(this.ctx, t211)), t211.node.addEventListener("click", e147.config.markers.onClick), t211.node.addEventListener("dblclick", e147.config.markers.onDblClick), t211.node.addEventListener("touchstart", i108.pathMouseDown.bind(this.ctx, t211), {
                      passive: !0
                  });
              }
          },
          {
              key: "getMarkerStyle",
              value: function(t) {
                  var e148 = this.w, i109 = e148.globals.markers.colors, a83 = e148.config.markers.strokeColor || e148.config.markers.strokeColors;
                  return {
                      pointStrokeColor: Array.isArray(a83) ? a83[t] : a83,
                      pointFillColor: Array.isArray(i109) ? i109[t] : i109
                  };
              }
          }
      ]), t206;
  }(), T = function() {
      function t212(e149) {
          a(this, t212), this.ctx = e149, this.w = e149.w, this.initialAnim = this.w.config.chart.animations.enabled, this.dynamicAnim = this.initialAnim && this.w.config.chart.animations.dynamicAnimation.enabled;
      }
      return r(t212, [
          {
              key: "draw",
              value: function(t, e150, i110) {
                  var a84 = this.w, s56 = new b(this.ctx), r49 = i110.realIndex, o42 = i110.pointsPos, n36 = i110.zRatio, l28 = i110.elParent, h24 = s56.group({
                      class: "apexcharts-series-markers apexcharts-series-".concat(a84.config.chart.type)
                  });
                  if (h24.attr("clip-path", "url(#gridRectMarkerMask".concat(a84.globals.cuid, ")")), Array.isArray(o42.x)) for(var c22 = 0; c22 < o42.x.length; c22++){
                      var d18 = e150 + 1, g14 = !0;
                      0 === e150 && 0 === c22 && (d18 = 0), 0 === e150 && 1 === c22 && (d18 = 1);
                      var u12 = 0, p6 = a84.globals.markers.size[r49];
                      if (n36 !== 1 / 0) {
                          p6 = a84.globals.seriesZ[r49][d18] / n36;
                          var f10 = a84.config.plotOptions.bubble;
                          f10.minBubbleRadius && p6 < f10.minBubbleRadius && (p6 = f10.minBubbleRadius), f10.maxBubbleRadius && p6 > f10.maxBubbleRadius && (p6 = f10.maxBubbleRadius);
                      }
                      a84.config.chart.animations.enabled || (u12 = p6);
                      var x5 = o42.x[c22], v6 = o42.y[c22];
                      if (u12 = u12 || 0, null !== v6 && void 0 !== a84.globals.series[r49][d18] || (g14 = !1), g14) {
                          var m5 = this.drawPoint(x5, v6, u12, p6, r49, d18, e150);
                          h24.add(m5);
                      }
                      l28.add(h24);
                  }
              }
          },
          {
              key: "drawPoint",
              value: function(t213, e151, i111, a85, s57, r50, o) {
                  var n37 = this.w, l29 = s57, h25 = new f(this.ctx), c23 = new x(this.ctx), d19 = new L(this.ctx), g15 = new P(this.ctx), u13 = new b(this.ctx), p7 = g15.getMarkerConfig({
                      cssClass: "apexcharts-marker",
                      seriesIndex: l29,
                      dataPointIndex: r50,
                      finishRadius: "bubble" === n37.config.chart.type || n37.globals.comboCharts && n37.config.series[s57] && "bubble" === n37.config.series[s57].type ? a85 : null
                  });
                  a85 = p7.pSize;
                  var v7, m6 = d19.fillPath({
                      seriesNumber: s57,
                      dataPointIndex: r50,
                      color: p7.pointFillColor,
                      patternUnits: "objectBoundingBox",
                      value: n37.globals.series[s57][o]
                  });
                  if ("circle" === p7.shape ? v7 = u13.drawCircle(i111) : "square" !== p7.shape && "rect" !== p7.shape || (v7 = u13.drawRect(0, 0, p7.width - p7.pointStrokeWidth / 2, p7.height - p7.pointStrokeWidth / 2, p7.pRadius)), n37.config.series[l29].data[r50] && n37.config.series[l29].data[r50].fillColor && (m6 = n37.config.series[l29].data[r50].fillColor), v7.attr({
                      x: t213 - p7.width / 2 - p7.pointStrokeWidth / 2,
                      y: e151 - p7.height / 2 - p7.pointStrokeWidth / 2,
                      cx: t213,
                      cy: e151,
                      fill: m6,
                      "fill-opacity": p7.pointFillOpacity,
                      stroke: p7.pointStrokeColor,
                      r: a85,
                      "stroke-width": p7.pointStrokeWidth,
                      "stroke-dasharray": p7.pointStrokeDashArray,
                      "stroke-opacity": p7.pointStrokeOpacity
                  }), n37.config.chart.dropShadow.enabled) {
                      var y3 = n37.config.chart.dropShadow;
                      c23.dropShadow(v7, y3, s57);
                  }
                  if (!this.initialAnim || n37.globals.dataChanged || n37.globals.resized) n37.globals.animationEnded = !0;
                  else {
                      var w4 = n37.config.chart.animations.speed;
                      h25.animateMarker(v7, 0, "circle" === p7.shape ? a85 : {
                          width: p7.width,
                          height: p7.height
                      }, w4, n37.globals.easing, function() {
                          window.setTimeout(function() {
                              h25.animationCompleted(v7);
                          }, 100);
                      });
                  }
                  if (n37.globals.dataChanged && "circle" === p7.shape) {
                      if (this.dynamicAnim) {
                          var k4, A4, S4, C3, T3 = n37.config.chart.animations.dynamicAnimation.speed;
                          null != (C3 = n37.globals.previousPaths[s57] && n37.globals.previousPaths[s57][o]) && (k4 = C3.x, A4 = C3.y, S4 = void 0 !== C3.r ? C3.r : a85);
                          for(var M3 = 0; M3 < n37.globals.collapsedSeries.length; M3++)n37.globals.collapsedSeries[M3].index === s57 && (T3 = 1, a85 = 0);
                          0 === t213 && 0 === e151 && (a85 = 0), h25.animateCircle(v7, {
                              cx: k4,
                              cy: A4,
                              r: S4
                          }, {
                              cx: t213,
                              cy: e151,
                              r: a85
                          }, T3, n37.globals.easing);
                      } else v7.attr({
                          r: a85
                      });
                  }
                  return v7.attr({
                      rel: r50,
                      j: r50,
                      index: s57,
                      "default-marker-size": a85
                  }), c23.setSelectionFilter(v7, s57, r50), g15.addEvents(v7), v7.node.classList.add("apexcharts-marker"), v7;
              }
          },
          {
              key: "centerTextInBubble",
              value: function(t214) {
                  var e152 = this.w;
                  return {
                      y: t214 += parseInt(e152.config.dataLabels.style.fontSize, 10) / 4
                  };
              }
          }
      ]), t212;
  }(), M = function() {
      function t215(e153) {
          a(this, t215), this.ctx = e153, this.w = e153.w;
      }
      return r(t215, [
          {
              key: "dataLabelsCorrection",
              value: function(t216, e154, i112, a, s58, r51, o43) {
                  var n38 = this.w, l30 = !1, h26 = new b(this.ctx).getTextRects(i112, o43), c24 = h26.width, d20 = h26.height;
                  e154 < 0 && (e154 = 0), e154 > n38.globals.gridHeight + d20 && (e154 = n38.globals.gridHeight + d20 / 2), void 0 === n38.globals.dataLabelsRects[a] && (n38.globals.dataLabelsRects[a] = []), n38.globals.dataLabelsRects[a].push({
                      x: t216,
                      y: e154,
                      width: c24,
                      height: d20
                  });
                  var g = n38.globals.dataLabelsRects[a].length - 2, u = void 0 !== n38.globals.lastDrawnDataLabelsIndexes[a] ? n38.globals.lastDrawnDataLabelsIndexes[a][n38.globals.lastDrawnDataLabelsIndexes[a].length - 1] : 0;
                  if (void 0 !== n38.globals.dataLabelsRects[a][g]) {
                      var p8 = n38.globals.dataLabelsRects[a][u];
                      (t216 > p8.x + p8.width + 2 || e154 > p8.y + p8.height + 2 || t216 + c24 < p8.x) && (l30 = !0);
                  }
                  return (0 === s58 || r51) && (l30 = !0), {
                      x: t216,
                      y: e154,
                      textRects: h26,
                      drawnextLabel: l30
                  };
              }
          },
          {
              key: "drawDataLabel",
              value: function(t217, e155, i113) {
                  var a86 = this, s59 = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : 2, r52 = this.w, o44 = new b(this.ctx), n39 = r52.config.dataLabels, l31 = 0, h27 = 0, c25 = i113, d21 = null;
                  if (!n39.enabled || !Array.isArray(t217.x)) return d21;
                  d21 = o44.group({
                      class: "apexcharts-data-labels"
                  });
                  for(var g16 = 0; g16 < t217.x.length; g16++)if (l31 = t217.x[g16] + n39.offsetX, h27 = t217.y[g16] + n39.offsetY + s59, !isNaN(l31)) {
                      1 === i113 && 0 === g16 && (c25 = 0), 1 === i113 && 1 === g16 && (c25 = 1);
                      var u14 = r52.globals.series[e155][c25], p9 = "", f11 = function(t218) {
                          return r52.config.dataLabels.formatter(t218, {
                              ctx: a86.ctx,
                              seriesIndex: e155,
                              dataPointIndex: c25,
                              w: r52
                          });
                      };
                      if ("bubble" === r52.config.chart.type) {
                          p9 = f11(u14 = r52.globals.seriesZ[e155][c25]), h27 = t217.y[g16];
                          var x6 = new T(this.ctx), v8 = x6.centerTextInBubble(h27, e155, c25);
                          h27 = v8.y;
                      } else void 0 !== u14 && (p9 = f11(u14));
                      this.plotDataLabelsText({
                          x: l31,
                          y: h27,
                          text: p9,
                          i: e155,
                          j: c25,
                          parent: d21,
                          offsetCorrection: !0,
                          dataLabelsConfig: r52.config.dataLabels
                      });
                  }
                  return d21;
              }
          },
          {
              key: "plotDataLabelsText",
              value: function(t219) {
                  var e156 = this.w, i114 = new b(this.ctx), a87 = t219.x, s60 = t219.y, r53 = t219.i, o45 = t219.j, n40 = t219.text, l32 = t219.textAnchor, h28 = t219.fontSize, c26 = t219.parent, d22 = t219.dataLabelsConfig, g17 = t219.color, u15 = t219.alwaysDrawDataLabel, p10 = t219.offsetCorrection;
                  if (!(Array.isArray(e156.config.dataLabels.enabledOnSeries) && e156.config.dataLabels.enabledOnSeries.indexOf(r53) < 0)) {
                      var f12 = {
                          x: a87,
                          y: s60,
                          drawnextLabel: !0,
                          textRects: null
                      };
                      p10 && (f12 = this.dataLabelsCorrection(a87, s60, n40, r53, o45, u15, parseInt(d22.style.fontSize, 10))), e156.globals.zoomed || (a87 = f12.x, s60 = f12.y), f12.textRects && (a87 < -10 - f12.textRects.width || a87 > e156.globals.gridWidth + f12.textRects.width + 10) && (n40 = "");
                      var v9 = e156.globals.dataLabels.style.colors[r53];
                      (("bar" === e156.config.chart.type || "rangeBar" === e156.config.chart.type) && e156.config.plotOptions.bar.distributed || e156.config.dataLabels.distributed) && (v9 = e156.globals.dataLabels.style.colors[o45]), "function" == typeof v9 && (v9 = v9({
                          series: e156.globals.series,
                          seriesIndex: r53,
                          dataPointIndex: o45,
                          w: e156
                      })), g17 && (v9 = g17);
                      var m7 = d22.offsetX, y4 = d22.offsetY;
                      if ("bar" !== e156.config.chart.type && "rangeBar" !== e156.config.chart.type || (m7 = 0, y4 = 0), f12.drawnextLabel) {
                          var w5 = i114.drawText({
                              width: 100,
                              height: parseInt(d22.style.fontSize, 10),
                              x: a87 + m7,
                              y: s60 + y4,
                              foreColor: v9,
                              textAnchor: l32 || d22.textAnchor,
                              text: n40,
                              fontSize: h28 || d22.style.fontSize,
                              fontFamily: d22.style.fontFamily,
                              fontWeight: d22.style.fontWeight || "normal"
                          });
                          if (w5.attr({
                              class: "apexcharts-datalabel",
                              cx: a87,
                              cy: s60
                          }), d22.dropShadow.enabled) {
                              var k5 = d22.dropShadow;
                              new x(this.ctx).dropShadow(w5, k5);
                          }
                          c26.add(w5), void 0 === e156.globals.lastDrawnDataLabelsIndexes[r53] && (e156.globals.lastDrawnDataLabelsIndexes[r53] = []), e156.globals.lastDrawnDataLabelsIndexes[r53].push(o45);
                      }
                  }
              }
          },
          {
              key: "addBackgroundToDataLabel",
              value: function(t, e157) {
                  var i115 = this.w, a88 = i115.config.dataLabels.background, s61 = a88.padding, r54 = a88.padding / 2, o46 = e157.width, n41 = e157.height, l33 = new b(this.ctx).drawRect(e157.x - s61, e157.y - r54 / 2, o46 + 2 * s61, n41 + r54, a88.borderRadius, "transparent" === i115.config.chart.background ? "#fff" : i115.config.chart.background, a88.opacity, a88.borderWidth, a88.borderColor);
                  a88.dropShadow.enabled && new x(this.ctx).dropShadow(l33, a88.dropShadow);
                  return l33;
              }
          },
          {
              key: "dataLabelsBackground",
              value: function() {
                  var t220 = this.w;
                  if ("bubble" !== t220.config.chart.type) for(var e158 = t220.globals.dom.baseEl.querySelectorAll(".apexcharts-datalabels text"), i116 = 0; i116 < e158.length; i116++){
                      var a89 = e158[i116], s62 = a89.getBBox(), r55 = null;
                      if (s62.width && s62.height && (r55 = this.addBackgroundToDataLabel(a89, s62)), r55) {
                          a89.parentNode.insertBefore(r55.node, a89);
                          var o47 = a89.getAttribute("fill");
                          t220.config.chart.animations.enabled && !t220.globals.resized && !t220.globals.dataChanged ? r55.animate().attr({
                              fill: o47
                          }) : r55.attr({
                              fill: o47
                          }), a89.setAttribute("fill", t220.config.dataLabels.background.foreColor);
                      }
                  }
              }
          },
          {
              key: "bringForward",
              value: function() {
                  for(var t221 = this.w, e159 = t221.globals.dom.baseEl.querySelectorAll(".apexcharts-datalabels"), i117 = t221.globals.dom.baseEl.querySelector(".apexcharts-plot-series:last-child"), a90 = 0; a90 < e159.length; a90++)i117 && i117.insertBefore(e159[a90], i117.nextSibling);
              }
          }
      ]), t215;
  }(), I = function() {
      function t222(e160) {
          a(this, t222), this.w = e160.w, this.barCtx = e160;
      }
      return r(t222, [
          {
              key: "handleBarDataLabels",
              value: function(t223) {
                  var e161 = t223.x, i118 = t223.y, a91 = t223.y1, s63 = t223.y2, r56 = t223.i, o48 = t223.j, n42 = t223.realIndex, l34 = t223.series, h29 = t223.barHeight, c27 = t223.barWidth, d23 = t223.barYPosition, g18 = t223.visibleSeries, u16 = t223.renderedPath, p11 = this.w, f13 = new b(this.barCtx.ctx), x7 = Array.isArray(this.barCtx.strokeWidth) ? this.barCtx.strokeWidth[n42] : this.barCtx.strokeWidth, v10 = e161 + parseFloat(c27 * g18), m8 = i118 + parseFloat(h29 * g18);
                  p11.globals.isXNumeric && !p11.globals.isBarHorizontal && (v10 = e161 + parseFloat(c27 * (g18 + 1)), m8 = i118 + parseFloat(h29 * (g18 + 1)) - x7);
                  var y5 = e161, w6 = i118, k6 = {
                  }, A5 = p11.config.dataLabels, S5 = this.barCtx.barOptions.dataLabels;
                  void 0 !== d23 && this.barCtx.isRangeBar && (m8 = d23, w6 = d23);
                  var C4 = A5.offsetX, L3 = A5.offsetY, P3 = {
                      width: 0,
                      height: 0
                  };
                  if (p11.config.dataLabels.enabled) {
                      var T4 = this.barCtx.series[r56][o48];
                      P3 = f13.getTextRects(p11.globals.yLabelFormatters[0](T4), parseFloat(A5.style.fontSize));
                  }
                  var M4 = {
                      x: e161,
                      y: i118,
                      i: r56,
                      j: o48,
                      renderedPath: u16,
                      bcx: v10,
                      bcy: m8,
                      barHeight: h29,
                      barWidth: c27,
                      textRects: P3,
                      strokeWidth: x7,
                      dataLabelsX: y5,
                      dataLabelsY: w6,
                      barDataLabelsConfig: S5,
                      offX: C4,
                      offY: L3
                  };
                  return k6 = this.barCtx.isHorizontal ? this.calculateBarsDataLabelsPosition(M4) : this.calculateColumnsDataLabelsPosition(M4), u16.attr({
                      cy: k6.bcy,
                      cx: k6.bcx,
                      j: o48,
                      val: l34[r56][o48],
                      barHeight: h29,
                      barWidth: c27
                  }), this.drawCalculatedDataLabels({
                      x: k6.dataLabelsX,
                      y: k6.dataLabelsY,
                      val: this.barCtx.isRangeBar ? [
                          a91,
                          s63
                      ] : l34[r56][o48],
                      i: n42,
                      j: o48,
                      barWidth: c27,
                      barHeight: h29,
                      textRects: P3,
                      dataLabelsConfig: A5
                  });
              }
          },
          {
              key: "calculateColumnsDataLabelsPosition",
              value: function(t224) {
                  var e162, i119 = this.w, a = t224.i, s = t224.j, r57 = t224.y, o49 = t224.bcx, n43 = t224.barWidth, l35 = t224.barHeight, h30 = t224.textRects, c28 = t224.dataLabelsY, d24 = t224.barDataLabelsConfig, g19 = t224.strokeWidth, u17 = t224.offX, p12 = t224.offY;
                  l35 = Math.abs(l35);
                  var f14 = "vertical" === i119.config.plotOptions.bar.dataLabels.orientation;
                  o49 -= g19 / 2;
                  var x8 = i119.globals.gridWidth / i119.globals.dataPoints;
                  if (e162 = i119.globals.isXNumeric ? o49 - n43 / 2 + u17 : o49 - x8 + n43 / 2 + u17, f14) e162 = e162 + h30.height / 2 - g19 / 2 - 2;
                  var b7 = this.barCtx.series[a][s] < 0, v11 = r57;
                  switch(this.barCtx.isReversed && (v11 = r57 - l35 + (b7 ? 2 * l35 : 0), r57 -= l35), d24.position){
                      case "center":
                          c28 = f14 ? b7 ? v11 + l35 / 2 + p12 : v11 + l35 / 2 - p12 : b7 ? v11 - l35 / 2 + h30.height / 2 + p12 : v11 + l35 / 2 + h30.height / 2 - p12;
                          break;
                      case "bottom":
                          c28 = f14 ? b7 ? v11 + l35 + p12 : v11 + l35 - p12 : b7 ? v11 - l35 + h30.height + g19 + p12 : v11 + l35 - h30.height / 2 + g19 - p12;
                          break;
                      case "top":
                          c28 = f14 ? b7 ? v11 + p12 : v11 - p12 : b7 ? v11 - h30.height / 2 - p12 : v11 + h30.height + p12;
                  }
                  return i119.config.chart.stacked || (c28 < 0 ? c28 = 0 + g19 : c28 + h30.height / 3 > i119.globals.gridHeight && (c28 = i119.globals.gridHeight - g19)), {
                      bcx: o49,
                      bcy: r57,
                      dataLabelsX: e162,
                      dataLabelsY: c28
                  };
              }
          },
          {
              key: "calculateBarsDataLabelsPosition",
              value: function(t225) {
                  var e163 = this.w, i120 = t225.x, a = t225.i, s = t225.j, r58 = t225.bcy, o50 = t225.barHeight, n44 = t225.barWidth, l36 = t225.textRects, h31 = t225.dataLabelsX, c29 = t225.strokeWidth, d25 = t225.barDataLabelsConfig, g20 = t225.offX, u18 = t225.offY, p13 = e163.globals.gridHeight / e163.globals.dataPoints;
                  n44 = Math.abs(n44);
                  var f15 = r58 - (this.barCtx.isRangeBar ? 0 : p13) + o50 / 2 + l36.height / 2 + u18 - 3, x9 = this.barCtx.series[a][s] < 0, b8 = i120;
                  switch(this.barCtx.isReversed && (b8 = i120 + n44 - (x9 ? 2 * n44 : 0), i120 = e163.globals.gridWidth - n44), d25.position){
                      case "center":
                          h31 = x9 ? b8 + n44 / 2 - g20 : Math.max(l36.width / 2, b8 - n44 / 2) + g20;
                          break;
                      case "bottom":
                          h31 = x9 ? b8 + n44 - c29 - Math.round(l36.width / 2) - g20 : b8 - n44 + c29 + Math.round(l36.width / 2) + g20;
                          break;
                      case "top":
                          h31 = x9 ? b8 - c29 + Math.round(l36.width / 2) - g20 : b8 - c29 - Math.round(l36.width / 2) + g20;
                  }
                  return e163.config.chart.stacked || (h31 < 0 ? h31 = h31 + l36.width + c29 : h31 + l36.width / 2 > e163.globals.gridWidth && (h31 = e163.globals.gridWidth - l36.width - c29)), {
                      bcx: i120,
                      bcy: r58,
                      dataLabelsX: h31,
                      dataLabelsY: f15
                  };
              }
          },
          {
              key: "drawCalculatedDataLabels",
              value: function(t226) {
                  var i121 = t226.x, a92 = t226.y, s64 = t226.val, r59 = t226.i, o51 = t226.j, n45 = t226.textRects, l37 = t226.barHeight, h32 = t226.barWidth, c30 = t226.dataLabelsConfig, d26 = this.w, g21 = "rotate(0)";
                  "vertical" === d26.config.plotOptions.bar.dataLabels.orientation && (g21 = "rotate(-90, ".concat(i121, ", ").concat(a92, ")"));
                  var u19 = new M(this.barCtx.ctx), p14 = new b(this.barCtx.ctx), f16 = c30.formatter, x10 = null, v12 = d26.globals.collapsedSeriesIndices.indexOf(r59) > -1;
                  if (c30.enabled && !v12) {
                      x10 = p14.group({
                          class: "apexcharts-data-labels",
                          transform: g21
                      });
                      var m9 = "";
                      void 0 !== s64 && (m9 = f16(s64, {
                          seriesIndex: r59,
                          dataPointIndex: o51,
                          w: d26
                      }));
                      var y6 = d26.globals.series[r59][o51] < 0, w7 = d26.config.plotOptions.bar.dataLabels.position;
                      if ("vertical" === d26.config.plotOptions.bar.dataLabels.orientation && ("top" === w7 && (c30.textAnchor = y6 ? "end" : "start"), "center" === w7 && (c30.textAnchor = "middle"), "bottom" === w7 && (c30.textAnchor = y6 ? "end" : "start")), this.barCtx.isRangeBar && this.barCtx.barOptions.dataLabels.hideOverflowingLabels) h32 < p14.getTextRects(m9, parseFloat(c30.style.fontSize)).width && (m9 = "");
                      d26.config.chart.stacked && this.barCtx.barOptions.dataLabels.hideOverflowingLabels && (this.barCtx.isHorizontal ? n45.width / 1.6 > Math.abs(h32) && (m9 = "") : n45.height / 1.6 > Math.abs(l37) && (m9 = ""));
                      var k7 = e({
                      }, c30);
                      this.barCtx.isHorizontal && s64 < 0 && ("start" === c30.textAnchor ? k7.textAnchor = "end" : "end" === c30.textAnchor && (k7.textAnchor = "start")), u19.plotDataLabelsText({
                          x: i121,
                          y: a92,
                          text: m9,
                          i: r59,
                          j: o51,
                          parent: x10,
                          dataLabelsConfig: k7,
                          alwaysDrawDataLabel: !0,
                          offsetCorrection: !0
                      });
                  }
                  return x10;
              }
          }
      ]), t222;
  }(), z = function() {
      function t227(e164) {
          a(this, t227), this.ctx = e164, this.w = e164.w, this.legendInactiveClass = "legend-mouseover-inactive";
      }
      return r(t227, [
          {
              key: "getAllSeriesEls",
              value: function() {
                  return this.w.globals.dom.baseEl.getElementsByClassName("apexcharts-series");
              }
          },
          {
              key: "getSeriesByName",
              value: function(t228) {
                  return this.w.globals.dom.baseEl.querySelector(".apexcharts-inner .apexcharts-series[seriesName='".concat(p.escapeString(t228), "']"));
              }
          },
          {
              key: "isSeriesHidden",
              value: function(t229) {
                  var e165 = this.getSeriesByName(t229), i122 = parseInt(e165.getAttribute("data:realIndex"), 10);
                  return {
                      isHidden: e165.classList.contains("apexcharts-series-collapsed"),
                      realIndex: i122
                  };
              }
          },
          {
              key: "addCollapsedClassToSeries",
              value: function(t230, e166) {
                  var i123 = this.w;
                  function a93(i124) {
                      for(var a94 = 0; a94 < i124.length; a94++)i124[a94].index === e166 && t230.node.classList.add("apexcharts-series-collapsed");
                  }
                  a93(i123.globals.collapsedSeries), a93(i123.globals.ancillaryCollapsedSeries);
              }
          },
          {
              key: "toggleSeries",
              value: function(t231) {
                  var e167 = this.isSeriesHidden(t231);
                  return this.ctx.legend.legendHelpers.toggleDataSeries(e167.realIndex, e167.isHidden), e167.isHidden;
              }
          },
          {
              key: "showSeries",
              value: function(t232) {
                  var e168 = this.isSeriesHidden(t232);
                  e168.isHidden && this.ctx.legend.legendHelpers.toggleDataSeries(e168.realIndex, !0);
              }
          },
          {
              key: "hideSeries",
              value: function(t233) {
                  var e169 = this.isSeriesHidden(t233);
                  e169.isHidden || this.ctx.legend.legendHelpers.toggleDataSeries(e169.realIndex, !1);
              }
          },
          {
              key: "resetSeries",
              value: function() {
                  var t234 = !(arguments.length > 0 && void 0 !== arguments[0]) || arguments[0], e170 = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1], i125 = !(arguments.length > 2 && void 0 !== arguments[2]) || arguments[2], a95 = this.w, s65 = p.clone(a95.globals.initialSeries);
                  a95.globals.previousPaths = [], i125 ? (a95.globals.collapsedSeries = [], a95.globals.ancillaryCollapsedSeries = [], a95.globals.collapsedSeriesIndices = [], a95.globals.ancillaryCollapsedSeriesIndices = []) : s65 = this.emptyCollapsedSeries(s65), a95.config.series = s65, t234 && (e170 && (a95.globals.zoomed = !1, this.ctx.updateHelpers.revertDefaultAxisMinMax()), this.ctx.updateHelpers._updateSeries(s65, a95.config.chart.animations.dynamicAnimation.enabled));
              }
          },
          {
              key: "emptyCollapsedSeries",
              value: function(t235) {
                  for(var e171 = this.w, i126 = 0; i126 < t235.length; i126++)e171.globals.collapsedSeriesIndices.indexOf(i126) > -1 && (t235[i126].data = []);
                  return t235;
              }
          },
          {
              key: "toggleSeriesOnHover",
              value: function(t236, e172) {
                  var i127 = this.w;
                  e172 || (e172 = t236.target);
                  var a96 = i127.globals.dom.baseEl.querySelectorAll(".apexcharts-series, .apexcharts-datalabels");
                  if ("mousemove" === t236.type) {
                      var s66 = parseInt(e172.getAttribute("rel"), 10) - 1, r60 = null, o52 = null;
                      i127.globals.axisCharts || "radialBar" === i127.config.chart.type ? i127.globals.axisCharts ? (r60 = i127.globals.dom.baseEl.querySelector(".apexcharts-series[data\\:realIndex='".concat(s66, "']")), o52 = i127.globals.dom.baseEl.querySelector(".apexcharts-datalabels[data\\:realIndex='".concat(s66, "']"))) : r60 = i127.globals.dom.baseEl.querySelector(".apexcharts-series[rel='".concat(s66 + 1, "']")) : r60 = i127.globals.dom.baseEl.querySelector(".apexcharts-series[rel='".concat(s66 + 1, "'] path"));
                      for(var n46 = 0; n46 < a96.length; n46++)a96[n46].classList.add(this.legendInactiveClass);
                      null !== r60 && (i127.globals.axisCharts || r60.parentNode.classList.remove(this.legendInactiveClass), r60.classList.remove(this.legendInactiveClass), null !== o52 && o52.classList.remove(this.legendInactiveClass));
                  } else if ("mouseout" === t236.type) for(var l38 = 0; l38 < a96.length; l38++)a96[l38].classList.remove(this.legendInactiveClass);
              }
          },
          {
              key: "highlightRangeInSeries",
              value: function(t237, e173) {
                  var i128 = this, a97 = this.w, s67 = a97.globals.dom.baseEl.getElementsByClassName("apexcharts-heatmap-rect"), r61 = function(t) {
                      for(var e174 = 0; e174 < s67.length; e174++)s67[e174].classList[t](i128.legendInactiveClass);
                  };
                  if ("mousemove" === t237.type) {
                      var o = parseInt(e173.getAttribute("rel"), 10) - 1;
                      r61("add"), (function(t238) {
                          for(var e175 = 0; e175 < s67.length; e175++){
                              var a98 = parseInt(s67[e175].getAttribute("val"), 10);
                              a98 >= t238.from && a98 <= t238.to && s67[e175].classList.remove(i128.legendInactiveClass);
                          }
                      })(a97.config.plotOptions.heatmap.colorScale.ranges[o]);
                  } else "mouseout" === t237.type && r61("remove");
              }
          },
          {
              key: "getActiveConfigSeriesIndex",
              value: function() {
                  var t239 = arguments.length > 0 && void 0 !== arguments[0] && arguments[0], e176 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : "asc", i129 = this.w, a99 = 0;
                  if (i129.config.series.length > 1) {
                      for(var s68 = i129.config.series.map(function(e177, a100) {
                          var s69 = !1;
                          return t239 && (s69 = "bar" === i129.config.series[a100].type || "column" === i129.config.series[a100].type), e177.data && e177.data.length > 0 && !s69 ? a100 : -1;
                      }), r62 = "asc" === e176 ? 0 : s68.length - 1; "asc" === e176 ? r62 < s68.length : r62 >= 0; "asc" === e176 ? r62++ : r62--)if (-1 !== s68[r62]) {
                          a99 = s68[r62];
                          break;
                      }
                  }
                  return a99;
              }
          },
          {
              key: "getPreviousPaths",
              value: function() {
                  var t240 = this.w;
                  function e178(e179, i, a102) {
                      for(var s71 = e179[i].childNodes, r63 = {
                          type: a102,
                          paths: [],
                          realIndex: e179[i].getAttribute("data:realIndex")
                      }, o53 = 0; o53 < s71.length; o53++)if (s71[o53].hasAttribute("pathTo")) {
                          var n47 = s71[o53].getAttribute("pathTo");
                          r63.paths.push({
                              d: n47
                          });
                      }
                      t240.globals.previousPaths.push(r63);
                  }
                  t240.globals.previousPaths = [];
                  [
                      "line",
                      "area",
                      "bar",
                      "rangebar",
                      "candlestick",
                      "radar"
                  ].forEach(function(i131) {
                      for(var a103, s72 = (a103 = i131, t240.globals.dom.baseEl.querySelectorAll(".apexcharts-".concat(a103, "-series .apexcharts-series"))), r64 = 0; r64 < s72.length; r64++)e178(s72, r64, i131);
                  }), this.handlePrevBubbleScatterPaths("bubble"), this.handlePrevBubbleScatterPaths("scatter");
                  var i130 = t240.globals.dom.baseEl.querySelectorAll(".apexcharts-".concat(t240.config.chart.type, " .apexcharts-series"));
                  if (i130.length > 0) for(var a101 = function(e180) {
                      for(var i132 = t240.globals.dom.baseEl.querySelectorAll(".apexcharts-".concat(t240.config.chart.type, " .apexcharts-series[data\\:realIndex='").concat(e180, "'] rect")), a104 = [], s73 = function(t) {
                          var e181 = function(e182) {
                              return i132[t].getAttribute(e182);
                          }, s74 = {
                              x: parseFloat(e181("x")),
                              y: parseFloat(e181("y")),
                              width: parseFloat(e181("width")),
                              height: parseFloat(e181("height"))
                          };
                          a104.push({
                              rect: s74,
                              color: i132[t].getAttribute("color")
                          });
                      }, r65 = 0; r65 < i132.length; r65++)s73(r65);
                      t240.globals.previousPaths.push(a104);
                  }, s70 = 0; s70 < i130.length; s70++)a101(s70);
                  t240.globals.axisCharts || (t240.globals.previousPaths = t240.globals.series);
              }
          },
          {
              key: "handlePrevBubbleScatterPaths",
              value: function(t241) {
                  var e183 = this.w, i133 = e183.globals.dom.baseEl.querySelectorAll(".apexcharts-".concat(t241, "-series .apexcharts-series"));
                  if (i133.length > 0) for(var a105 = 0; a105 < i133.length; a105++){
                      for(var s75 = e183.globals.dom.baseEl.querySelectorAll(".apexcharts-".concat(t241, "-series .apexcharts-series[data\\:realIndex='").concat(a105, "'] circle")), r66 = [], o54 = 0; o54 < s75.length; o54++)r66.push({
                          x: s75[o54].getAttribute("cx"),
                          y: s75[o54].getAttribute("cy"),
                          r: s75[o54].getAttribute("r")
                      });
                      e183.globals.previousPaths.push(r66);
                  }
              }
          },
          {
              key: "clearPreviousPaths",
              value: function() {
                  var t242 = this.w;
                  t242.globals.previousPaths = [], t242.globals.allSeriesCollapsed = !1;
              }
          },
          {
              key: "handleNoData",
              value: function() {
                  var t243 = this.w, e184 = t243.config.noData, i134 = new b(this.ctx), a106 = t243.globals.svgWidth / 2, s76 = t243.globals.svgHeight / 2, r67 = "middle";
                  if (t243.globals.noData = !0, t243.globals.animationEnded = !0, "left" === e184.align ? (a106 = 10, r67 = "start") : "right" === e184.align && (a106 = t243.globals.svgWidth - 10, r67 = "end"), "top" === e184.verticalAlign ? s76 = 50 : "bottom" === e184.verticalAlign && (s76 = t243.globals.svgHeight - 50), a106 += e184.offsetX, s76 = s76 + parseInt(e184.style.fontSize, 10) + 2 + e184.offsetY, void 0 !== e184.text && "" !== e184.text) {
                      var o55 = i134.drawText({
                          x: a106,
                          y: s76,
                          text: e184.text,
                          textAnchor: r67,
                          fontSize: e184.style.fontSize,
                          fontFamily: e184.style.fontFamily,
                          foreColor: e184.style.color,
                          opacity: 1,
                          class: "apexcharts-text-nodata"
                      });
                      t243.globals.dom.Paper.add(o55);
                  }
              }
          },
          {
              key: "setNullSeriesToZeroValues",
              value: function(t244) {
                  for(var e = this.w, i135 = 0; i135 < t244.length; i135++)if (0 === t244[i135].length) for(var a107 = 0; a107 < t244[e.globals.maxValsInArrayIndex].length; a107++)t244[i135].push(0);
                  return t244;
              }
          },
          {
              key: "hasAllSeriesEqualX",
              value: function() {
                  for(var t245 = !0, e185 = this.w, i136 = this.filteredSeriesX(), a108 = 0; a108 < i136.length - 1; a108++)if (i136[a108][0] !== i136[a108 + 1][0]) {
                      t245 = !1;
                      break;
                  }
                  return e185.globals.allSeriesHasEqualX = t245, t245;
              }
          },
          {
              key: "filteredSeriesX",
              value: function() {
                  var t246 = this.w.globals.seriesX.map(function(t247) {
                      return t247.length > 0 ? t247 : [];
                  });
                  return t246;
              }
          }
      ]), t227;
  }(), X = function() {
      function t248(e186) {
          a(this, t248), this.w = e186.w, this.barCtx = e186;
      }
      return r(t248, [
          {
              key: "initVariables",
              value: function(t249) {
                  var e187 = this.w;
                  this.barCtx.series = t249, this.barCtx.totalItems = 0, this.barCtx.seriesLen = 0, this.barCtx.visibleI = -1, this.barCtx.visibleItems = 1;
                  for(var i137 = 0; i137 < t249.length; i137++)if (t249[i137].length > 0 && (this.barCtx.seriesLen = this.barCtx.seriesLen + 1, this.barCtx.totalItems += t249[i137].length), e187.globals.isXNumeric) for(var a109 = 0; a109 < t249[i137].length; a109++)e187.globals.seriesX[i137][a109] > e187.globals.minX && e187.globals.seriesX[i137][a109] < e187.globals.maxX && this.barCtx.visibleItems++;
                  else this.barCtx.visibleItems = e187.globals.dataPoints;
                  0 === this.barCtx.seriesLen && (this.barCtx.seriesLen = 1), this.barCtx.zeroSerieses = [], this.barCtx.radiusOnSeriesNumber = t249.length - 1, e187.globals.comboCharts || this.checkZeroSeries({
                      series: t249
                  });
              }
          },
          {
              key: "initialPositions",
              value: function() {
                  var t250, e188, i138, a110, s77, r68, o56, n48, l39 = this.w, h33 = l39.globals.dataPoints;
                  this.barCtx.isRangeBar && (h33 = l39.globals.labels.length);
                  var c31 = this.barCtx.seriesLen;
                  if (l39.config.plotOptions.bar.rangeBarGroupRows && (c31 = 1), this.barCtx.isHorizontal) s77 = (i138 = l39.globals.gridHeight / h33) / c31, l39.globals.isXNumeric && (s77 = (i138 = l39.globals.gridHeight / this.barCtx.totalItems) / this.barCtx.seriesLen), s77 = s77 * parseInt(this.barCtx.barOptions.barHeight, 10) / 100, n48 = this.barCtx.baseLineInvertedY + l39.globals.padHorizontal + (this.barCtx.isReversed ? l39.globals.gridWidth : 0) - (this.barCtx.isReversed ? 2 * this.barCtx.baseLineInvertedY : 0), e188 = (i138 - s77 * this.barCtx.seriesLen) / 2;
                  else {
                      if (a110 = l39.globals.gridWidth / this.barCtx.visibleItems, l39.config.xaxis.convertedCatToNumeric && (a110 = l39.globals.gridWidth / l39.globals.dataPoints), r68 = a110 / this.barCtx.seriesLen * parseInt(this.barCtx.barOptions.columnWidth, 10) / 100, l39.globals.isXNumeric) {
                          var d27 = this.barCtx.xRatio;
                          l39.config.xaxis.convertedCatToNumeric && (d27 = this.barCtx.initialXRatio), l39.globals.minXDiff && 0.5 !== l39.globals.minXDiff && l39.globals.minXDiff / d27 > 0 && (a110 = l39.globals.minXDiff / d27), (r68 = a110 / this.barCtx.seriesLen * parseInt(this.barCtx.barOptions.columnWidth, 10) / 100) < 1 && (r68 = 1);
                      }
                      o56 = l39.globals.gridHeight - this.barCtx.baseLineY[this.barCtx.yaxisIndex] - (this.barCtx.isReversed ? l39.globals.gridHeight : 0) + (this.barCtx.isReversed ? 2 * this.barCtx.baseLineY[this.barCtx.yaxisIndex] : 0), t250 = l39.globals.padHorizontal + (a110 - r68 * this.barCtx.seriesLen) / 2;
                  }
                  return {
                      x: t250,
                      y: e188,
                      yDivision: i138,
                      xDivision: a110,
                      barHeight: s77,
                      barWidth: r68,
                      zeroH: o56,
                      zeroW: n48
                  };
              }
          },
          {
              key: "getPathFillColor",
              value: function(t251, e189, i139, a111) {
                  var s78 = this.w, r69 = new L(this.barCtx.ctx), o57 = null, n49 = this.barCtx.barOptions.distributed ? i139 : e189;
                  this.barCtx.barOptions.colors.ranges.length > 0 && this.barCtx.barOptions.colors.ranges.map(function(a112) {
                      t251[e189][i139] >= a112.from && t251[e189][i139] <= a112.to && (o57 = a112.color);
                  });
                  return s78.config.series[e189].data[i139] && s78.config.series[e189].data[i139].fillColor && (o57 = s78.config.series[e189].data[i139].fillColor), r69.fillPath({
                      seriesNumber: this.barCtx.barOptions.distributed ? n49 : a111,
                      dataPointIndex: i139,
                      color: o57,
                      value: t251[e189][i139]
                  });
              }
          },
          {
              key: "getStrokeWidth",
              value: function(t, e, i) {
                  var a113 = 0, s79 = this.w;
                  return void 0 === this.barCtx.series[t][e] || null === this.barCtx.series[t][e] ? this.barCtx.isNullValue = !0 : this.barCtx.isNullValue = !1, s79.config.stroke.show && (this.barCtx.isNullValue || (a113 = Array.isArray(this.barCtx.strokeWidth) ? this.barCtx.strokeWidth[i] : this.barCtx.strokeWidth)), a113;
              }
          },
          {
              key: "barBackground",
              value: function(t252) {
                  var e190 = t252.j, i140 = t252.i, a114 = t252.x1, s80 = t252.x2, r70 = t252.y1, o58 = t252.y2, n50 = t252.elSeries, l40 = this.w, h34 = new b(this.barCtx.ctx), c32 = new z(this.barCtx.ctx).getActiveConfigSeriesIndex();
                  if (this.barCtx.barOptions.colors.backgroundBarColors.length > 0 && c32 === i140) {
                      e190 >= this.barCtx.barOptions.colors.backgroundBarColors.length && (e190 -= this.barCtx.barOptions.colors.backgroundBarColors.length);
                      var d28 = this.barCtx.barOptions.colors.backgroundBarColors[e190], g22 = h34.drawRect(void 0 !== a114 ? a114 : 0, void 0 !== r70 ? r70 : 0, void 0 !== s80 ? s80 : l40.globals.gridWidth, void 0 !== o58 ? o58 : l40.globals.gridHeight, this.barCtx.barOptions.colors.backgroundBarRadius, d28, this.barCtx.barOptions.colors.backgroundBarOpacity);
                      n50.add(g22), g22.node.classList.add("apexcharts-backgroundBar");
                  }
              }
          },
          {
              key: "getColumnPaths",
              value: function(t253) {
                  var e191 = t253.barWidth, i141 = t253.barXPosition, a115 = t253.yRatio, s81 = t253.y1, r71 = t253.y2, o59 = t253.strokeWidth, n51 = t253.series, l41 = t253.realIndex, h35 = t253.i, c33 = t253.j, d29 = t253.w, g23 = new b(this.barCtx.ctx);
                  (o59 = Array.isArray(o59) ? o59[l41] : o59) || (o59 = 0);
                  var u20 = {
                      barWidth: e191,
                      strokeWidth: o59,
                      yRatio: a115,
                      barXPosition: i141,
                      y1: s81,
                      y2: r71
                  }, p15 = this.getRoundedBars(d29, u20, n51, h35, c33), f17 = i141, x11 = i141 + e191, v13 = g23.move(f17, s81), m10 = g23.move(f17, s81), y7 = g23.line(x11 - o59, s81);
                  return d29.globals.previousPaths.length > 0 && (m10 = this.barCtx.getPreviousPath(l41, c33, !1)), v13 = v13 + g23.line(f17, p15.y2) + p15.pathWithRadius + g23.line(x11 - o59, p15.y2) + y7 + y7 + "z", m10 = m10 + g23.line(f17, s81) + y7 + y7 + y7 + y7 + y7 + g23.line(f17, s81), d29.config.chart.stacked && (this.barCtx.yArrj.push(p15.y2), this.barCtx.yArrjF.push(Math.abs(s81 - p15.y2)), this.barCtx.yArrjVal.push(this.barCtx.series[h35][c33])), {
                      pathTo: v13,
                      pathFrom: m10
                  };
              }
          },
          {
              key: "getBarpaths",
              value: function(t254) {
                  var e192 = t254.barYPosition, i142 = t254.barHeight, a116 = t254.x1, s82 = t254.x2, r72 = t254.strokeWidth, o60 = t254.series, n52 = t254.realIndex, l42 = t254.i, h36 = t254.j, c34 = t254.w, d30 = new b(this.barCtx.ctx);
                  (r72 = Array.isArray(r72) ? r72[n52] : r72) || (r72 = 0);
                  var g24 = {
                      barHeight: i142,
                      strokeWidth: r72,
                      barYPosition: e192,
                      x2: s82,
                      x1: a116
                  }, u21 = this.getRoundedBars(c34, g24, o60, l42, h36), p16 = d30.move(a116, e192), f18 = d30.move(a116, e192);
                  c34.globals.previousPaths.length > 0 && (f18 = this.barCtx.getPreviousPath(n52, h36, !1));
                  var x12 = e192, v14 = e192 + i142, m11 = d30.line(a116, v14 - r72);
                  return p16 = p16 + d30.line(u21.x2, x12) + u21.pathWithRadius + d30.line(u21.x2, v14 - r72) + m11 + m11 + "z", f18 = f18 + d30.line(a116, x12) + m11 + m11 + m11 + m11 + m11 + d30.line(a116, x12), c34.config.chart.stacked && (this.barCtx.xArrj.push(u21.x2), this.barCtx.xArrjF.push(Math.abs(a116 - u21.x2)), this.barCtx.xArrjVal.push(this.barCtx.series[l42][h36])), {
                      pathTo: p16,
                      pathFrom: f18
                  };
              }
          },
          {
              key: "getRoundedBars",
              value: function(t255, e193, i143, a117, s) {
                  var r73 = new b(this.barCtx.ctx), o61 = 0, n53 = t255.config.plotOptions.bar.borderRadius, l43 = Array.isArray(n53);
                  l43 ? o61 = n53[a117 > n53.length - 1 ? n53.length - 1 : a117] : o61 = n53;
                  if (t255.config.chart.stacked && i143.length > 1 && a117 !== this.barCtx.radiusOnSeriesNumber && !l43 && (o61 = 0), this.barCtx.isHorizontal) {
                      var h37 = "", c35 = e193.x2;
                      if (Math.abs(e193.x1 - e193.x2) < o61 && (o61 = Math.abs(e193.x1 - e193.x2)), void 0 !== i143[a117][s] || null !== i143[a117][s]) {
                          var d31 = this.barCtx.isReversed ? i143[a117][s] > 0 : i143[a117][s] < 0;
                          d31 && (o61 *= -1), c35 -= o61, h37 = r73.quadraticCurve(c35 + o61, e193.barYPosition, c35 + o61, e193.barYPosition + (d31 ? -1 * o61 : o61)) + r73.line(c35 + o61, e193.barYPosition + e193.barHeight - e193.strokeWidth - (d31 ? -1 * o61 : o61)) + r73.quadraticCurve(c35 + o61, e193.barYPosition + e193.barHeight - e193.strokeWidth, c35, e193.barYPosition + e193.barHeight - e193.strokeWidth);
                      }
                      return {
                          pathWithRadius: h37,
                          x2: c35
                      };
                  }
                  var g25 = "", u22 = e193.y2;
                  if (Math.abs(e193.y1 - e193.y2) < o61 && (o61 = Math.abs(e193.y1 - e193.y2)), void 0 !== i143[a117][s] || null !== i143[a117][s]) {
                      var p17 = i143[a117][s] < 0;
                      p17 && (o61 *= -1), u22 += o61, g25 = r73.quadraticCurve(e193.barXPosition, u22 - o61, e193.barXPosition + (p17 ? -1 * o61 : o61), u22 - o61) + r73.line(e193.barXPosition + e193.barWidth - e193.strokeWidth - (p17 ? -1 * o61 : o61), u22 - o61) + r73.quadraticCurve(e193.barXPosition + e193.barWidth - e193.strokeWidth, u22 - o61, e193.barXPosition + e193.barWidth - e193.strokeWidth, u22);
                  }
                  return {
                      pathWithRadius: g25,
                      y2: u22
                  };
              }
          },
          {
              key: "checkZeroSeries",
              value: function(t256) {
                  for(var e194 = t256.series, i144 = this.w, a118 = 0; a118 < e194.length; a118++){
                      for(var s83 = 0, r74 = 0; r74 < e194[i144.globals.maxValsInArrayIndex].length; r74++)s83 += e194[a118][r74];
                      0 === s83 && this.barCtx.zeroSerieses.push(a118);
                  }
                  for(var o62 = e194.length - 1; o62 >= 0; o62--)this.barCtx.zeroSerieses.indexOf(o62) > -1 && o62 === this.radiusOnSeriesNumber && (this.barCtx.radiusOnSeriesNumber -= 1);
                  for(var n54 = e194.length - 1; n54 >= 0; n54--)i144.globals.collapsedSeriesIndices.indexOf(this.barCtx.radiusOnSeriesNumber) > -1 && (this.barCtx.radiusOnSeriesNumber -= 1);
              }
          },
          {
              key: "getXForValue",
              value: function(t257, e195) {
                  var i145 = !(arguments.length > 2 && void 0 !== arguments[2]) || arguments[2], a119 = i145 ? e195 : null;
                  return null != t257 && (a119 = e195 + t257 / this.barCtx.invertedYRatio - 2 * (this.barCtx.isReversed ? t257 / this.barCtx.invertedYRatio : 0)), a119;
              }
          },
          {
              key: "getYForValue",
              value: function(t258, e196) {
                  var i146 = !(arguments.length > 2 && void 0 !== arguments[2]) || arguments[2], a120 = i146 ? e196 : null;
                  return null != t258 && (a120 = e196 - t258 / this.barCtx.yRatio[this.barCtx.yaxisIndex] + 2 * (this.barCtx.isReversed ? t258 / this.barCtx.yRatio[this.barCtx.yaxisIndex] : 0)), a120;
              }
          },
          {
              key: "getGoalValues",
              value: function(t259, e197, i147, a121, s84) {
                  var r75 = this, n55 = this.w, l44 = [];
                  return n55.globals.seriesGoals[a121] && n55.globals.seriesGoals[a121][s84] && Array.isArray(n55.globals.seriesGoals[a121][s84]) && n55.globals.seriesGoals[a121][s84].forEach(function(a122) {
                      var s85;
                      l44.push((o(s85 = {
                      }, t259, "x" === t259 ? r75.getXForValue(a122.value, e197, !1) : r75.getYForValue(a122.value, i147, !1)), o(s85, "attrs", a122), s85));
                  }), l44;
              }
          },
          {
              key: "drawGoalLine",
              value: function(t260) {
                  var e198 = t260.barXPosition, i148 = t260.barYPosition, a123 = t260.goalX, s86 = t260.goalY, r76 = t260.barWidth, o63 = t260.barHeight, n56 = new b(this.barCtx.ctx), l45 = n56.group({
                      className: "apexcharts-bar-goals-groups"
                  }), h38 = null;
                  return this.barCtx.isHorizontal ? Array.isArray(a123) && a123.forEach(function(t261) {
                      var e199 = void 0 !== t261.attrs.strokeHeight ? t261.attrs.strokeHeight : o63 / 2, a124 = i148 + e199 + o63 / 2;
                      h38 = n56.drawLine(t261.x, a124 - 2 * e199, t261.x, a124, t261.attrs.strokeColor ? t261.attrs.strokeColor : void 0, t261.attrs.strokeDashArray, t261.attrs.strokeWidth ? t261.attrs.strokeWidth : 2, t261.attrs.strokeLineCap), l45.add(h38);
                  }) : Array.isArray(s86) && s86.forEach(function(t262) {
                      var i149 = void 0 !== t262.attrs.strokeWidth ? t262.attrs.strokeWidth : r76 / 2, a125 = e198 + i149 + r76 / 2;
                      h38 = n56.drawLine(a125 - 2 * i149, t262.y, a125, t262.y, t262.attrs.strokeColor ? t262.attrs.strokeColor : void 0, t262.attrs.strokeDashArray, t262.attrs.strokeHeight ? t262.attrs.strokeHeight : 2, t262.attrs.strokeLineCap), l45.add(h38);
                  }), l45;
              }
          }
      ]), t248;
  }(), E = function() {
      function t263(e200, i150) {
          a(this, t263), this.ctx = e200, this.w = e200.w;
          var s87 = this.w;
          this.barOptions = s87.config.plotOptions.bar, this.isHorizontal = this.barOptions.horizontal, this.strokeWidth = s87.config.stroke.width, this.isNullValue = !1, this.isRangeBar = s87.globals.seriesRangeBar.length && this.isHorizontal, this.xyRatios = i150, null !== this.xyRatios && (this.xRatio = i150.xRatio, this.initialXRatio = i150.initialXRatio, this.yRatio = i150.yRatio, this.invertedXRatio = i150.invertedXRatio, this.invertedYRatio = i150.invertedYRatio, this.baseLineY = i150.baseLineY, this.baseLineInvertedY = i150.baseLineInvertedY), this.yaxisIndex = 0, this.seriesLen = 0, this.barHelpers = new X(this);
      }
      return r(t263, [
          {
              key: "draw",
              value: function(t264, i151) {
                  var a126 = this.w, s88 = new b(this.ctx), r77 = new y(this.ctx, a126);
                  t264 = r77.getLogSeries(t264), this.series = t264, this.yRatio = r77.getLogYRatios(this.yRatio), this.barHelpers.initVariables(t264);
                  var o64 = s88.group({
                      class: "apexcharts-bar-series apexcharts-plot-series"
                  });
                  a126.config.dataLabels.enabled && this.totalItems > this.barOptions.dataLabels.maxItems && console.warn("WARNING: DataLabels are enabled but there are too many to display. This may cause performance issue when rendering.");
                  for(var n57 = 0, l46 = 0; n57 < t264.length; n57++, l46++){
                      var h39, c36, d32, g26, u23 = void 0, f19 = void 0, x13 = [], v15 = [], m12 = a126.globals.comboCharts ? i151[n57] : n57, w8 = s88.group({
                          class: "apexcharts-series",
                          rel: n57 + 1,
                          seriesName: p.escapeString(a126.globals.seriesNames[m12]),
                          "data:realIndex": m12
                      });
                      this.ctx.series.addCollapsedClassToSeries(w8, m12), t264[n57].length > 0 && (this.visibleI = this.visibleI + 1);
                      var k8 = 0, A6 = 0;
                      this.yRatio.length > 1 && (this.yaxisIndex = m12), this.isReversed = a126.config.yaxis[this.yaxisIndex] && a126.config.yaxis[this.yaxisIndex].reversed;
                      var S6 = this.barHelpers.initialPositions();
                      f19 = S6.y, k8 = S6.barHeight, c36 = S6.yDivision, g26 = S6.zeroW, u23 = S6.x, A6 = S6.barWidth, h39 = S6.xDivision, d32 = S6.zeroH, this.horizontal || v15.push(u23 + A6 / 2);
                      for(var C5 = s88.group({
                          class: "apexcharts-datalabels",
                          "data:realIndex": m12
                      }), L4 = s88.group({
                          class: "apexcharts-bar-goals-markers",
                          style: "pointer-events: none"
                      }), P4 = 0; P4 < a126.globals.dataPoints; P4++){
                          var T5 = this.barHelpers.getStrokeWidth(n57, P4, m12), M5 = null, I3 = {
                              indexes: {
                                  i: n57,
                                  j: P4,
                                  realIndex: m12,
                                  bc: l46
                              },
                              x: u23,
                              y: f19,
                              strokeWidth: T5,
                              elSeries: w8
                          };
                          this.isHorizontal ? (M5 = this.drawBarPaths(e(e({
                          }, I3), {
                          }, {
                              barHeight: k8,
                              zeroW: g26,
                              yDivision: c36
                          })), A6 = this.series[n57][P4] / this.invertedYRatio) : (M5 = this.drawColumnPaths(e(e({
                          }, I3), {
                          }, {
                              xDivision: h39,
                              barWidth: A6,
                              zeroH: d32
                          })), k8 = this.series[n57][P4] / this.yRatio[this.yaxisIndex]);
                          var z2 = this.barHelpers.drawGoalLine({
                              barXPosition: M5.barXPosition,
                              barYPosition: M5.barYPosition,
                              goalX: M5.goalX,
                              goalY: M5.goalY,
                              barHeight: k8,
                              barWidth: A6
                          });
                          z2 && L4.add(z2), f19 = M5.y, u23 = M5.x, P4 > 0 && v15.push(u23 + A6 / 2), x13.push(f19);
                          var X2 = this.barHelpers.getPathFillColor(t264, n57, P4, m12);
                          this.renderSeries({
                              realIndex: m12,
                              pathFill: X2,
                              j: P4,
                              i: n57,
                              pathFrom: M5.pathFrom,
                              pathTo: M5.pathTo,
                              strokeWidth: T5,
                              elSeries: w8,
                              x: u23,
                              y: f19,
                              series: t264,
                              barHeight: k8,
                              barWidth: A6,
                              elDataLabelsWrap: C5,
                              elGoalsMarkers: L4,
                              visibleSeries: this.visibleI,
                              type: "bar"
                          });
                      }
                      a126.globals.seriesXvalues[m12] = v15, a126.globals.seriesYvalues[m12] = x13, o64.add(w8);
                  }
                  return o64;
              }
          },
          {
              key: "renderSeries",
              value: function(t265) {
                  var e201 = t265.realIndex, i152 = t265.pathFill, a127 = t265.lineFill, s89 = t265.j, r78 = t265.i, o65 = t265.pathFrom, n58 = t265.pathTo, l47 = t265.strokeWidth, h40 = t265.elSeries, c37 = t265.x, d33 = t265.y, g27 = t265.y1, u24 = t265.y2, p18 = t265.series, f20 = t265.barHeight, v16 = t265.barWidth, m13 = t265.barYPosition, y8 = t265.elDataLabelsWrap, w9 = t265.elGoalsMarkers, k9 = t265.visibleSeries, A7 = t265.type, S7 = this.w, C6 = new b(this.ctx);
                  a127 || (a127 = this.barOptions.distributed ? S7.globals.stroke.colors[s89] : S7.globals.stroke.colors[e201]), S7.config.series[r78].data[s89] && S7.config.series[r78].data[s89].strokeColor && (a127 = S7.config.series[r78].data[s89].strokeColor), this.isNullValue && (i152 = "none");
                  var L5 = s89 / S7.config.chart.animations.animateGradually.delay * (S7.config.chart.animations.speed / S7.globals.dataPoints) / 2.4, P5 = C6.renderPaths({
                      i: r78,
                      j: s89,
                      realIndex: e201,
                      pathFrom: o65,
                      pathTo: n58,
                      stroke: a127,
                      strokeWidth: l47,
                      strokeLineCap: S7.config.stroke.lineCap,
                      fill: i152,
                      animationDelay: L5,
                      initialSpeed: S7.config.chart.animations.speed,
                      dataChangeSpeed: S7.config.chart.animations.dynamicAnimation.speed,
                      className: "apexcharts-".concat(A7, "-area")
                  });
                  P5.attr("clip-path", "url(#gridRectMask".concat(S7.globals.cuid, ")"));
                  var T6 = S7.config.forecastDataPoints;
                  T6.count > 0 && s89 >= S7.globals.dataPoints - T6.count && (P5.node.setAttribute("stroke-dasharray", T6.dashArray), P5.node.setAttribute("stroke-width", T6.strokeWidth), P5.node.setAttribute("fill-opacity", T6.fillOpacity)), void 0 !== g27 && void 0 !== u24 && (P5.attr("data-range-y1", g27), P5.attr("data-range-y2", u24)), new x(this.ctx).setSelectionFilter(P5, e201, s89), h40.add(P5);
                  var M6 = new I(this).handleBarDataLabels({
                      x: c37,
                      y: d33,
                      y1: g27,
                      y2: u24,
                      i: r78,
                      j: s89,
                      series: p18,
                      realIndex: e201,
                      barHeight: f20,
                      barWidth: v16,
                      barYPosition: m13,
                      renderedPath: P5,
                      visibleSeries: k9
                  });
                  return null !== M6 && y8.add(M6), h40.add(y8), w9 && h40.add(w9), h40;
              }
          },
          {
              key: "drawBarPaths",
              value: function(t266) {
                  var e202 = t266.indexes, i153 = t266.barHeight, a128 = t266.strokeWidth, s90 = t266.zeroW, r79 = t266.x, o66 = t266.y, n59 = t266.yDivision, l48 = t266.elSeries, h41 = this.w, c38 = e202.i, d34 = e202.j;
                  h41.globals.isXNumeric && (o66 = (h41.globals.seriesX[c38][d34] - h41.globals.minX) / this.invertedXRatio - i153);
                  var g28 = o66 + i153 * this.visibleI;
                  r79 = this.barHelpers.getXForValue(this.series[c38][d34], s90);
                  var u25 = this.barHelpers.getBarpaths({
                      barYPosition: g28,
                      barHeight: i153,
                      x1: s90,
                      x2: r79,
                      strokeWidth: a128,
                      series: this.series,
                      realIndex: e202.realIndex,
                      i: c38,
                      j: d34,
                      w: h41
                  });
                  return h41.globals.isXNumeric || (o66 += n59), this.barHelpers.barBackground({
                      j: d34,
                      i: c38,
                      y1: g28 - i153 * this.visibleI,
                      y2: i153 * this.seriesLen,
                      elSeries: l48
                  }), {
                      pathTo: u25.pathTo,
                      pathFrom: u25.pathFrom,
                      x: r79,
                      y: o66,
                      goalX: this.barHelpers.getGoalValues("x", s90, null, c38, d34),
                      barYPosition: g28
                  };
              }
          },
          {
              key: "drawColumnPaths",
              value: function(t267) {
                  var e203 = t267.indexes, i154 = t267.x, a129 = t267.y, s91 = t267.xDivision, r80 = t267.barWidth, o67 = t267.zeroH, n60 = t267.strokeWidth, l49 = t267.elSeries, h42 = this.w, c39 = e203.realIndex, d35 = e203.i, g29 = e203.j, u26 = e203.bc;
                  if (h42.globals.isXNumeric) {
                      var p19 = c39;
                      h42.globals.seriesX[c39].length || (p19 = h42.globals.maxValsInArrayIndex), i154 = (h42.globals.seriesX[p19][g29] - h42.globals.minX) / this.xRatio - r80 * this.seriesLen / 2;
                  }
                  var f21 = i154 + r80 * this.visibleI;
                  a129 = this.barHelpers.getYForValue(this.series[d35][g29], o67);
                  var x14 = this.barHelpers.getColumnPaths({
                      barXPosition: f21,
                      barWidth: r80,
                      y1: o67,
                      y2: a129,
                      strokeWidth: n60,
                      series: this.series,
                      realIndex: e203.realIndex,
                      i: d35,
                      j: g29,
                      w: h42
                  });
                  return h42.globals.isXNumeric || (i154 += s91), this.barHelpers.barBackground({
                      bc: u26,
                      j: g29,
                      i: d35,
                      x1: f21 - n60 / 2 - r80 * this.visibleI,
                      x2: r80 * this.seriesLen + n60 / 2,
                      elSeries: l49
                  }), {
                      pathTo: x14.pathTo,
                      pathFrom: x14.pathFrom,
                      x: i154,
                      y: a129,
                      goalY: this.barHelpers.getGoalValues("y", null, o67, d35, g29),
                      barXPosition: f21
                  };
              }
          },
          {
              key: "getPreviousPath",
              value: function(t268, e) {
                  for(var i155, a130 = this.w, s92 = 0; s92 < a130.globals.previousPaths.length; s92++){
                      var r81 = a130.globals.previousPaths[s92];
                      r81.paths && r81.paths.length > 0 && parseInt(r81.realIndex, 10) === parseInt(t268, 10) && void 0 !== a130.globals.previousPaths[s92].paths[e] && (i155 = a130.globals.previousPaths[s92].paths[e].d);
                  }
                  return i155;
              }
          }
      ]), t263;
  }(), Y = function() {
      function t269(e204) {
          a(this, t269), this.ctx = e204, this.w = e204.w, this.months31 = [
              1,
              3,
              5,
              7,
              8,
              10,
              12
          ], this.months30 = [
              2,
              4,
              6,
              9,
              11
          ], this.daysCntOfYear = [
              0,
              31,
              59,
              90,
              120,
              151,
              181,
              212,
              243,
              273,
              304,
              334
          ];
      }
      return r(t269, [
          {
              key: "isValidDate",
              value: function(t270) {
                  return !isNaN(this.parseDate(t270));
              }
          },
          {
              key: "getTimeStamp",
              value: function(t271) {
                  return Date.parse(t271) ? this.w.config.xaxis.labels.datetimeUTC ? new Date(new Date(t271).toISOString().substr(0, 25)).getTime() : new Date(t271).getTime() : t271;
              }
          },
          {
              key: "getDate",
              value: function(t272) {
                  return this.w.config.xaxis.labels.datetimeUTC ? new Date(new Date(t272).toUTCString()) : new Date(t272);
              }
          },
          {
              key: "parseDate",
              value: function(t273) {
                  var e205 = Date.parse(t273);
                  if (!isNaN(e205)) return this.getTimeStamp(t273);
                  var i156 = Date.parse(t273.replace(/-/g, "/").replace(/[a-z]+/gi, " "));
                  return i156 = this.getTimeStamp(i156);
              }
          },
          {
              key: "parseDateWithTimezone",
              value: function(t274) {
                  return Date.parse(t274.replace(/-/g, "/").replace(/[a-z]+/gi, " "));
              }
          },
          {
              key: "formatDate",
              value: function(t275, e206) {
                  var i157 = this.w.globals.locale, a131 = this.w.config.xaxis.labels.datetimeUTC, s93 = [
                      "\0"
                  ].concat(g(i157.months)), r82 = [
                      "\x01"
                  ].concat(g(i157.shortMonths)), o68 = [
                      "\x02"
                  ].concat(g(i157.days)), n61 = [
                      "\x03"
                  ].concat(g(i157.shortDays));
                  function l50(t276, e207) {
                      var i158 = t276 + "";
                      for(e207 = e207 || 2; i158.length < e207;)i158 = "0" + i158;
                      return i158;
                  }
                  var h43 = a131 ? t275.getUTCFullYear() : t275.getFullYear();
                  e206 = (e206 = (e206 = e206.replace(/(^|[^\\])yyyy+/g, "$1" + h43)).replace(/(^|[^\\])yy/g, "$1" + h43.toString().substr(2, 2))).replace(/(^|[^\\])y/g, "$1" + h43);
                  var c40 = (a131 ? t275.getUTCMonth() : t275.getMonth()) + 1;
                  e206 = (e206 = (e206 = (e206 = e206.replace(/(^|[^\\])MMMM+/g, "$1" + s93[0])).replace(/(^|[^\\])MMM/g, "$1" + r82[0])).replace(/(^|[^\\])MM/g, "$1" + l50(c40))).replace(/(^|[^\\])M/g, "$1" + c40);
                  var d36 = a131 ? t275.getUTCDate() : t275.getDate();
                  e206 = (e206 = (e206 = (e206 = e206.replace(/(^|[^\\])dddd+/g, "$1" + o68[0])).replace(/(^|[^\\])ddd/g, "$1" + n61[0])).replace(/(^|[^\\])dd/g, "$1" + l50(d36))).replace(/(^|[^\\])d/g, "$1" + d36);
                  var u27 = a131 ? t275.getUTCHours() : t275.getHours(), p20 = u27 > 12 ? u27 - 12 : 0 === u27 ? 12 : u27;
                  e206 = (e206 = (e206 = (e206 = e206.replace(/(^|[^\\])HH+/g, "$1" + l50(u27))).replace(/(^|[^\\])H/g, "$1" + u27)).replace(/(^|[^\\])hh+/g, "$1" + l50(p20))).replace(/(^|[^\\])h/g, "$1" + p20);
                  var f22 = a131 ? t275.getUTCMinutes() : t275.getMinutes();
                  e206 = (e206 = e206.replace(/(^|[^\\])mm+/g, "$1" + l50(f22))).replace(/(^|[^\\])m/g, "$1" + f22);
                  var x15 = a131 ? t275.getUTCSeconds() : t275.getSeconds();
                  e206 = (e206 = e206.replace(/(^|[^\\])ss+/g, "$1" + l50(x15))).replace(/(^|[^\\])s/g, "$1" + x15);
                  var b9 = a131 ? t275.getUTCMilliseconds() : t275.getMilliseconds();
                  e206 = e206.replace(/(^|[^\\])fff+/g, "$1" + l50(b9, 3)), b9 = Math.round(b9 / 10), e206 = e206.replace(/(^|[^\\])ff/g, "$1" + l50(b9)), b9 = Math.round(b9 / 10);
                  var v17 = u27 < 12 ? "AM" : "PM";
                  e206 = (e206 = (e206 = e206.replace(/(^|[^\\])f/g, "$1" + b9)).replace(/(^|[^\\])TT+/g, "$1" + v17)).replace(/(^|[^\\])T/g, "$1" + v17.charAt(0));
                  var m14 = v17.toLowerCase();
                  e206 = (e206 = e206.replace(/(^|[^\\])tt+/g, "$1" + m14)).replace(/(^|[^\\])t/g, "$1" + m14.charAt(0));
                  var y9 = -t275.getTimezoneOffset(), w10 = a131 || !y9 ? "Z" : y9 > 0 ? "+" : "-";
                  if (!a131) {
                      var k10 = (y9 = Math.abs(y9)) % 60;
                      w10 += l50(Math.floor(y9 / 60)) + ":" + l50(k10);
                  }
                  e206 = e206.replace(/(^|[^\\])K/g, "$1" + w10);
                  var A = (a131 ? t275.getUTCDay() : t275.getDay()) + 1;
                  return e206 = (e206 = (e206 = (e206 = (e206 = e206.replace(new RegExp(o68[0], "g"), o68[A])).replace(new RegExp(n61[0], "g"), n61[A])).replace(new RegExp(s93[0], "g"), s93[c40])).replace(new RegExp(r82[0], "g"), r82[c40])).replace(/\\(.)/g, "$1");
              }
          },
          {
              key: "getTimeUnitsfromTimestamp",
              value: function(t277, e208, i) {
                  var a132 = this.w;
                  void 0 !== a132.config.xaxis.min && (t277 = a132.config.xaxis.min), void 0 !== a132.config.xaxis.max && (e208 = a132.config.xaxis.max);
                  var s94 = this.getDate(t277), r83 = this.getDate(e208), o69 = this.formatDate(s94, "yyyy MM dd HH mm ss fff").split(" "), n62 = this.formatDate(r83, "yyyy MM dd HH mm ss fff").split(" ");
                  return {
                      minMillisecond: parseInt(o69[6], 10),
                      maxMillisecond: parseInt(n62[6], 10),
                      minSecond: parseInt(o69[5], 10),
                      maxSecond: parseInt(n62[5], 10),
                      minMinute: parseInt(o69[4], 10),
                      maxMinute: parseInt(n62[4], 10),
                      minHour: parseInt(o69[3], 10),
                      maxHour: parseInt(n62[3], 10),
                      minDate: parseInt(o69[2], 10),
                      maxDate: parseInt(n62[2], 10),
                      minMonth: parseInt(o69[1], 10) - 1,
                      maxMonth: parseInt(n62[1], 10) - 1,
                      minYear: parseInt(o69[0], 10),
                      maxYear: parseInt(n62[0], 10)
                  };
              }
          },
          {
              key: "isLeapYear",
              value: function(t278) {
                  return t278 % 4 == 0 && t278 % 100 != 0 || t278 % 400 == 0;
              }
          },
          {
              key: "calculcateLastDaysOfMonth",
              value: function(t279, e209, i159) {
                  return this.determineDaysOfMonths(t279, e209) - i159;
              }
          },
          {
              key: "determineDaysOfYear",
              value: function(t280) {
                  var e210 = 365;
                  return this.isLeapYear(t280) && (e210 = 366), e210;
              }
          },
          {
              key: "determineRemainingDaysOfYear",
              value: function(t, e211, i160) {
                  var a133 = this.daysCntOfYear[e211] + i160;
                  return e211 > 1 && this.isLeapYear() && a133++, a133;
              }
          },
          {
              key: "determineDaysOfMonths",
              value: function(t281, e212) {
                  var i161 = 30;
                  switch(t281 = p.monthMod(t281), !0){
                      case this.months30.indexOf(t281) > -1:
                          2 === t281 && (i161 = this.isLeapYear(e212) ? 29 : 28);
                          break;
                      case this.months31.indexOf(t281) > -1:
                      default:
                          i161 = 31;
                  }
                  return i161;
              }
          }
      ]), t269;
  }(), F = function(t282) {
      n(s95, E);
      var i162 = d(s95);
      function s95() {
          return a(this, s95), i162.apply(this, arguments);
      }
      return r(s95, [
          {
              key: "draw",
              value: function(t283, i163) {
                  var a134 = this.w, s96 = new b(this.ctx);
                  this.rangeBarOptions = this.w.config.plotOptions.rangeBar, this.series = t283, this.seriesRangeStart = a134.globals.seriesRangeStart, this.seriesRangeEnd = a134.globals.seriesRangeEnd, this.barHelpers.initVariables(t283);
                  for(var r84 = s96.group({
                      class: "apexcharts-rangebar-series apexcharts-plot-series"
                  }), o70 = 0; o70 < t283.length; o70++){
                      var n63, l51, h44, c41 = void 0, d37 = void 0, g30 = void 0, u28 = a134.globals.comboCharts ? i163[o70] : o70, f23 = s96.group({
                          class: "apexcharts-series",
                          seriesName: p.escapeString(a134.globals.seriesNames[u28]),
                          rel: o70 + 1,
                          "data:realIndex": u28
                      });
                      this.ctx.series.addCollapsedClassToSeries(f23, u28), t283[o70].length > 0 && (this.visibleI = this.visibleI + 1);
                      var x16 = 0, v18 = 0;
                      this.yRatio.length > 1 && (this.yaxisIndex = u28);
                      var m15 = this.barHelpers.initialPositions();
                      d37 = m15.y, h44 = m15.zeroW, c41 = m15.x, v18 = m15.barWidth, n63 = m15.xDivision, l51 = m15.zeroH;
                      for(var y10 = s96.group({
                          class: "apexcharts-datalabels",
                          "data:realIndex": u28
                      }), w11 = s96.group({
                          class: "apexcharts-rangebar-goals-markers",
                          style: "pointer-events: none"
                      }), k11 = 0; k11 < a134.globals.dataPoints; k11++){
                          var A8 = this.barHelpers.getStrokeWidth(o70, k11, u28), S8 = this.seriesRangeStart[o70][k11], C7 = this.seriesRangeEnd[o70][k11], L6 = null, P6 = null, T7 = {
                              x: c41,
                              y: d37,
                              strokeWidth: A8,
                              elSeries: f23
                          };
                          if (g30 = m15.yDivision, x16 = m15.barHeight, this.isHorizontal) {
                              P6 = d37 + x16 * this.visibleI;
                              var M7 = this.seriesLen;
                              a134.config.plotOptions.bar.rangeBarGroupRows && (M7 = 1);
                              var I4 = (g30 - x16 * M7) / 2;
                              if (void 0 === a134.config.series[o70].data[k11]) break;
                              if (a134.config.series[o70].data[k11].x) {
                                  var z3 = this.detectOverlappingBars({
                                      i: o70,
                                      j: k11,
                                      barYPosition: P6,
                                      srty: I4,
                                      barHeight: x16,
                                      yDivision: g30,
                                      initPositions: m15
                                  });
                                  x16 = z3.barHeight, P6 = z3.barYPosition;
                              }
                              v18 = (L6 = this.drawRangeBarPaths(e({
                                  indexes: {
                                      i: o70,
                                      j: k11,
                                      realIndex: u28
                                  },
                                  barHeight: x16,
                                  barYPosition: P6,
                                  zeroW: h44,
                                  yDivision: g30,
                                  y1: S8,
                                  y2: C7
                              }, T7))).barWidth;
                          } else x16 = (L6 = this.drawRangeColumnPaths(e({
                              indexes: {
                                  i: o70,
                                  j: k11,
                                  realIndex: u28
                              },
                              zeroH: l51,
                              barWidth: v18,
                              xDivision: n63
                          }, T7))).barHeight;
                          var X3 = this.barHelpers.drawGoalLine({
                              barXPosition: L6.barXPosition,
                              barYPosition: P6,
                              goalX: L6.goalX,
                              goalY: L6.goalY,
                              barHeight: x16,
                              barWidth: v18
                          });
                          X3 && w11.add(X3), d37 = L6.y, c41 = L6.x;
                          var E2 = this.barHelpers.getPathFillColor(t283, o70, k11, u28), Y1 = a134.globals.stroke.colors[u28];
                          this.renderSeries({
                              realIndex: u28,
                              pathFill: E2,
                              lineFill: Y1,
                              j: k11,
                              i: o70,
                              x: c41,
                              y: d37,
                              y1: S8,
                              y2: C7,
                              pathFrom: L6.pathFrom,
                              pathTo: L6.pathTo,
                              strokeWidth: A8,
                              elSeries: f23,
                              series: t283,
                              barHeight: x16,
                              barYPosition: P6,
                              barWidth: v18,
                              elDataLabelsWrap: y10,
                              elGoalsMarkers: w11,
                              visibleSeries: this.visibleI,
                              type: "rangebar"
                          });
                      }
                      r84.add(f23);
                  }
                  return r84;
              }
          },
          {
              key: "detectOverlappingBars",
              value: function(t284) {
                  var e = t284.i, i = t284.j, a135 = t284.barYPosition, s97 = t284.srty, r85 = t284.barHeight, o71 = t284.yDivision, n64 = t284.initPositions, l52 = this.w, h45 = [], c42 = l52.config.series[e].data[i].rangeName, d38 = l52.config.series[e].data[i].x, g31 = l52.globals.labels.indexOf(d38), u29 = l52.globals.seriesRangeBar[e].findIndex(function(t285) {
                      return t285.x === d38 && t285.overlaps.length > 0;
                  });
                  return a135 = l52.config.plotOptions.bar.rangeBarGroupRows ? s97 + o71 * g31 : s97 + r85 * this.visibleI + o71 * g31, u29 > -1 && !l52.config.plotOptions.bar.rangeBarOverlap && (h45 = l52.globals.seriesRangeBar[e][u29].overlaps).indexOf(c42) > -1 && (a135 = (r85 = n64.barHeight / h45.length) * this.visibleI + o71 * (100 - parseInt(this.barOptions.barHeight, 10)) / 100 / 2 + r85 * (this.visibleI + h45.indexOf(c42)) + o71 * g31), {
                      barYPosition: a135,
                      barHeight: r85
                  };
              }
          },
          {
              key: "drawRangeColumnPaths",
              value: function(t286) {
                  var e213 = t286.indexes, i164 = t286.x;
                  t286.strokeWidth;
                  var a136 = t286.xDivision, s98 = t286.barWidth, r86 = t286.zeroH, o72 = this.w, n65 = e213.i, l53 = e213.j, h46 = this.yRatio[this.yaxisIndex], c43 = e213.realIndex, d39 = this.getRangeValue(c43, l53), g32 = Math.min(d39.start, d39.end), u30 = Math.max(d39.start, d39.end);
                  o72.globals.isXNumeric && (i164 = (o72.globals.seriesX[n65][l53] - o72.globals.minX) / this.xRatio - s98 / 2);
                  var p21 = i164 + s98 * this.visibleI;
                  void 0 === this.series[n65][l53] || null === this.series[n65][l53] ? g32 = r86 : (g32 = r86 - g32 / h46, u30 = r86 - u30 / h46);
                  var f24 = Math.abs(u30 - g32), x17 = this.barHelpers.getColumnPaths({
                      barXPosition: p21,
                      barWidth: s98,
                      y1: g32,
                      y2: u30,
                      strokeWidth: this.strokeWidth,
                      series: this.seriesRangeEnd,
                      realIndex: e213.realIndex,
                      i: c43,
                      j: l53,
                      w: o72
                  });
                  return o72.globals.isXNumeric || (i164 += a136), {
                      pathTo: x17.pathTo,
                      pathFrom: x17.pathFrom,
                      barHeight: f24,
                      x: i164,
                      y: u30,
                      goalY: this.barHelpers.getGoalValues("y", null, r86, n65, l53),
                      barXPosition: p21
                  };
              }
          },
          {
              key: "drawRangeBarPaths",
              value: function(t287) {
                  var e214 = t287.indexes, i165 = t287.y, a137 = t287.y1, s99 = t287.y2, r87 = t287.yDivision, o73 = t287.barHeight, n66 = t287.barYPosition, l54 = t287.zeroW, h47 = this.w, c44 = l54 + a137 / this.invertedYRatio, d40 = l54 + s99 / this.invertedYRatio, g33 = Math.abs(d40 - c44), u31 = this.barHelpers.getBarpaths({
                      barYPosition: n66,
                      barHeight: o73,
                      x1: c44,
                      x2: d40,
                      strokeWidth: this.strokeWidth,
                      series: this.seriesRangeEnd,
                      i: e214.realIndex,
                      realIndex: e214.realIndex,
                      j: e214.j,
                      w: h47
                  });
                  return h47.globals.isXNumeric || (i165 += r87), {
                      pathTo: u31.pathTo,
                      pathFrom: u31.pathFrom,
                      barWidth: g33,
                      x: d40,
                      goalX: this.barHelpers.getGoalValues("x", l54, null, e214.realIndex, e214.j),
                      y: i165
                  };
              }
          },
          {
              key: "getRangeValue",
              value: function(t, e) {
                  var i166 = this.w;
                  return {
                      start: i166.globals.seriesRangeStart[t][e],
                      end: i166.globals.seriesRangeEnd[t][e]
                  };
              }
          },
          {
              key: "getTooltipValues",
              value: function(t288) {
                  var e215 = t288.ctx, i167 = t288.seriesIndex, a138 = t288.dataPointIndex, s100 = t288.y1, r88 = t288.y2, o74 = t288.w, n67 = o74.globals.seriesRangeStart[i167][a138], l55 = o74.globals.seriesRangeEnd[i167][a138], h48 = o74.globals.labels[a138], c45 = o74.config.series[i167].name ? o74.config.series[i167].name : "", d41 = o74.config.tooltip.y.formatter, g34 = o74.config.tooltip.y.title.formatter, u32 = {
                      w: o74,
                      seriesIndex: i167,
                      dataPointIndex: a138,
                      start: n67,
                      end: l55
                  };
                  "function" == typeof g34 && (c45 = g34(c45, u32)), Number.isFinite(s100) && Number.isFinite(r88) && (n67 = s100, l55 = r88, o74.config.series[i167].data[a138].x && (h48 = o74.config.series[i167].data[a138].x + ":"), "function" == typeof d41 && (h48 = d41(h48, u32)));
                  var p22 = "", f25 = "", x18 = o74.globals.colors[i167];
                  if (void 0 === o74.config.tooltip.x.formatter) {
                      if ("datetime" === o74.config.xaxis.type) {
                          var b10 = new Y(e215);
                          p22 = b10.formatDate(b10.getDate(n67), o74.config.tooltip.x.format), f25 = b10.formatDate(b10.getDate(l55), o74.config.tooltip.x.format);
                      } else p22 = n67, f25 = l55;
                  } else p22 = o74.config.tooltip.x.formatter(n67), f25 = o74.config.tooltip.x.formatter(l55);
                  return {
                      start: n67,
                      end: l55,
                      startVal: p22,
                      endVal: f25,
                      ylabel: h48,
                      color: x18,
                      seriesName: c45
                  };
              }
          },
          {
              key: "buildCustomTooltipHTML",
              value: function(t289) {
                  var e216 = t289.color, i168 = t289.seriesName;
                  return '<div class="apexcharts-tooltip-rangebar"><div> <span class="series-name" style="color: ' + e216 + '">' + (i168 || "") + '</span></div><div> <span class="category">' + t289.ylabel + ' </span> <span class="value start-value">' + t289.start + '</span> <span class="separator">-</span> <span class="value end-value">' + t289.end + "</span></div></div>";
              }
          }
      ]), s95;
  }(), R = function() {
      function t290(e217) {
          a(this, t290), this.opts = e217;
      }
      return r(t290, [
          {
              key: "line",
              value: function() {
                  return {
                      chart: {
                          animations: {
                              easing: "swing"
                          }
                      },
                      dataLabels: {
                          enabled: !1
                      },
                      stroke: {
                          width: 5,
                          curve: "straight"
                      },
                      markers: {
                          size: 0,
                          hover: {
                              sizeOffset: 6
                          }
                      },
                      xaxis: {
                          crosshairs: {
                              width: 1
                          }
                      }
                  };
              }
          },
          {
              key: "sparkline",
              value: function(t291) {
                  this.opts.yaxis[0].show = !1, this.opts.yaxis[0].title.text = "", this.opts.yaxis[0].axisBorder.show = !1, this.opts.yaxis[0].axisTicks.show = !1, this.opts.yaxis[0].floating = !0;
                  return p.extend(t291, {
                      grid: {
                          show: !1,
                          padding: {
                              left: 0,
                              right: 0,
                              top: 0,
                              bottom: 0
                          }
                      },
                      legend: {
                          show: !1
                      },
                      xaxis: {
                          labels: {
                              show: !1
                          },
                          tooltip: {
                              enabled: !1
                          },
                          axisBorder: {
                              show: !1
                          },
                          axisTicks: {
                              show: !1
                          }
                      },
                      chart: {
                          toolbar: {
                              show: !1
                          },
                          zoom: {
                              enabled: !1
                          }
                      },
                      dataLabels: {
                          enabled: !1
                      }
                  });
              }
          },
          {
              key: "bar",
              value: function() {
                  return {
                      chart: {
                          stacked: !1,
                          animations: {
                              easing: "swing"
                          }
                      },
                      plotOptions: {
                          bar: {
                              dataLabels: {
                                  position: "center"
                              }
                          }
                      },
                      dataLabels: {
                          style: {
                              colors: [
                                  "#fff"
                              ]
                          },
                          background: {
                              enabled: !1
                          }
                      },
                      stroke: {
                          width: 0,
                          lineCap: "round"
                      },
                      fill: {
                          opacity: 0.85
                      },
                      legend: {
                          markers: {
                              shape: "square",
                              radius: 2,
                              size: 8
                          }
                      },
                      tooltip: {
                          shared: !1,
                          intersect: !0
                      },
                      xaxis: {
                          tooltip: {
                              enabled: !1
                          },
                          tickPlacement: "between",
                          crosshairs: {
                              width: "barWidth",
                              position: "back",
                              fill: {
                                  type: "gradient"
                              },
                              dropShadow: {
                                  enabled: !1
                              },
                              stroke: {
                                  width: 0
                              }
                          }
                      }
                  };
              }
          },
          {
              key: "candlestick",
              value: function() {
                  var t292 = this;
                  return {
                      stroke: {
                          width: 1,
                          colors: [
                              "#333"
                          ]
                      },
                      fill: {
                          opacity: 1
                      },
                      dataLabels: {
                          enabled: !1
                      },
                      tooltip: {
                          shared: !0,
                          custom: function(e218) {
                              var i169 = e218.seriesIndex, a139 = e218.dataPointIndex, s101 = e218.w;
                              return t292._getBoxTooltip(s101, i169, a139, [
                                  "Open",
                                  "High",
                                  "",
                                  "Low",
                                  "Close"
                              ], "candlestick");
                          }
                      },
                      states: {
                          active: {
                              filter: {
                                  type: "none"
                              }
                          }
                      },
                      xaxis: {
                          crosshairs: {
                              width: 1
                          }
                      }
                  };
              }
          },
          {
              key: "boxPlot",
              value: function() {
                  var t293 = this;
                  return {
                      chart: {
                          animations: {
                              dynamicAnimation: {
                                  enabled: !1
                              }
                          }
                      },
                      stroke: {
                          width: 1,
                          colors: [
                              "#24292e"
                          ]
                      },
                      dataLabels: {
                          enabled: !1
                      },
                      tooltip: {
                          shared: !0,
                          custom: function(e219) {
                              var i170 = e219.seriesIndex, a140 = e219.dataPointIndex, s102 = e219.w;
                              return t293._getBoxTooltip(s102, i170, a140, [
                                  "Minimum",
                                  "Q1",
                                  "Median",
                                  "Q3",
                                  "Maximum"
                              ], "boxPlot");
                          }
                      },
                      markers: {
                          size: 5,
                          strokeWidth: 1,
                          strokeColors: "#111"
                      },
                      xaxis: {
                          crosshairs: {
                              width: 1
                          }
                      }
                  };
              }
          },
          {
              key: "rangeBar",
              value: function() {
                  return {
                      stroke: {
                          width: 0,
                          lineCap: "square"
                      },
                      plotOptions: {
                          bar: {
                              borderRadius: 0,
                              dataLabels: {
                                  position: "center"
                              }
                          }
                      },
                      dataLabels: {
                          enabled: !1,
                          formatter: function(t, e220) {
                              e220.ctx;
                              var i = e220.seriesIndex, a = e220.dataPointIndex, s103 = e220.w, r89 = s103.globals.seriesRangeStart[i][a];
                              return s103.globals.seriesRangeEnd[i][a] - r89;
                          },
                          background: {
                              enabled: !1
                          },
                          style: {
                              colors: [
                                  "#fff"
                              ]
                          }
                      },
                      tooltip: {
                          shared: !1,
                          followCursor: !0,
                          custom: function(t294) {
                              return t294.w.config.plotOptions && t294.w.config.plotOptions.bar && t294.w.config.plotOptions.bar.horizontal ? (function(t295) {
                                  var e221 = new F(t295.ctx, null), i171 = e221.getTooltipValues(t295), a141 = i171.color, s104 = i171.seriesName, r90 = i171.ylabel, o75 = i171.startVal, n68 = i171.endVal;
                                  return e221.buildCustomTooltipHTML({
                                      color: a141,
                                      seriesName: s104,
                                      ylabel: r90,
                                      start: o75,
                                      end: n68
                                  });
                              })(t294) : (function(t296) {
                                  var e222 = new F(t296.ctx, null), i172 = e222.getTooltipValues(t296), a142 = i172.color, s105 = i172.seriesName, r91 = i172.ylabel, o76 = i172.start, n69 = i172.end;
                                  return e222.buildCustomTooltipHTML({
                                      color: a142,
                                      seriesName: s105,
                                      ylabel: r91,
                                      start: o76,
                                      end: n69
                                  });
                              })(t294);
                          }
                      },
                      xaxis: {
                          tickPlacement: "between",
                          tooltip: {
                              enabled: !1
                          },
                          crosshairs: {
                              stroke: {
                                  width: 0
                              }
                          }
                      }
                  };
              }
          },
          {
              key: "area",
              value: function() {
                  return {
                      stroke: {
                          width: 4
                      },
                      fill: {
                          type: "gradient",
                          gradient: {
                              inverseColors: !1,
                              shade: "light",
                              type: "vertical",
                              opacityFrom: 0.65,
                              opacityTo: 0.5,
                              stops: [
                                  0,
                                  100,
                                  100
                              ]
                          }
                      },
                      markers: {
                          size: 0,
                          hover: {
                              sizeOffset: 6
                          }
                      },
                      tooltip: {
                          followCursor: !1
                      }
                  };
              }
          },
          {
              key: "brush",
              value: function(t297) {
                  return p.extend(t297, {
                      chart: {
                          toolbar: {
                              autoSelected: "selection",
                              show: !1
                          },
                          zoom: {
                              enabled: !1
                          }
                      },
                      dataLabels: {
                          enabled: !1
                      },
                      stroke: {
                          width: 1
                      },
                      tooltip: {
                          enabled: !1
                      },
                      xaxis: {
                          tooltip: {
                              enabled: !1
                          }
                      }
                  });
              }
          },
          {
              key: "stacked100",
              value: function(t298) {
                  t298.dataLabels = t298.dataLabels || {
                  }, t298.dataLabels.formatter = t298.dataLabels.formatter || void 0;
                  var e223 = t298.dataLabels.formatter;
                  return t298.yaxis.forEach(function(e, i) {
                      t298.yaxis[i].min = 0, t298.yaxis[i].max = 100;
                  }), "bar" === t298.chart.type && (t298.dataLabels.formatter = e223 || function(t299) {
                      return "number" == typeof t299 && t299 ? t299.toFixed(0) + "%" : t299;
                  }), t298;
              }
          },
          {
              key: "convertCatToNumeric",
              value: function(t300) {
                  return t300.xaxis.convertedCatToNumeric = !0, t300;
              }
          },
          {
              key: "convertCatToNumericXaxis",
              value: function(t301, e, i173) {
                  t301.xaxis.type = "numeric", t301.xaxis.labels = t301.xaxis.labels || {
                  }, t301.xaxis.labels.formatter = t301.xaxis.labels.formatter || function(t302) {
                      return p.isNumber(t302) ? Math.floor(t302) : t302;
                  };
                  var a143 = t301.xaxis.labels.formatter, s106 = t301.xaxis.categories && t301.xaxis.categories.length ? t301.xaxis.categories : t301.labels;
                  return i173 && i173.length && (s106 = i173.map(function(t303) {
                      return Array.isArray(t303) ? t303 : String(t303);
                  })), s106 && s106.length && (t301.xaxis.labels.formatter = function(t304) {
                      return p.isNumber(t304) ? a143(s106[Math.floor(t304) - 1]) : a143(t304);
                  }), t301.xaxis.categories = [], t301.labels = [], t301.xaxis.tickAmount = t301.xaxis.tickAmount || "dataPoints", t301;
              }
          },
          {
              key: "bubble",
              value: function() {
                  return {
                      dataLabels: {
                          style: {
                              colors: [
                                  "#fff"
                              ]
                          }
                      },
                      tooltip: {
                          shared: !1,
                          intersect: !0
                      },
                      xaxis: {
                          crosshairs: {
                              width: 0
                          }
                      },
                      fill: {
                          type: "solid",
                          gradient: {
                              shade: "light",
                              inverse: !0,
                              shadeIntensity: 0.55,
                              opacityFrom: 0.4,
                              opacityTo: 0.8
                          }
                      }
                  };
              }
          },
          {
              key: "scatter",
              value: function() {
                  return {
                      dataLabels: {
                          enabled: !1
                      },
                      tooltip: {
                          shared: !1,
                          intersect: !0
                      },
                      markers: {
                          size: 6,
                          strokeWidth: 1,
                          hover: {
                              sizeOffset: 2
                          }
                      }
                  };
              }
          },
          {
              key: "heatmap",
              value: function() {
                  return {
                      chart: {
                          stacked: !1
                      },
                      fill: {
                          opacity: 1
                      },
                      dataLabels: {
                          style: {
                              colors: [
                                  "#fff"
                              ]
                          }
                      },
                      stroke: {
                          colors: [
                              "#fff"
                          ]
                      },
                      tooltip: {
                          followCursor: !0,
                          marker: {
                              show: !1
                          },
                          x: {
                              show: !1
                          }
                      },
                      legend: {
                          position: "top",
                          markers: {
                              shape: "square",
                              size: 10,
                              offsetY: 2
                          }
                      },
                      grid: {
                          padding: {
                              right: 20
                          }
                      }
                  };
              }
          },
          {
              key: "treemap",
              value: function() {
                  return {
                      chart: {
                          zoom: {
                              enabled: !1
                          }
                      },
                      dataLabels: {
                          style: {
                              fontSize: 14,
                              fontWeight: 600,
                              colors: [
                                  "#fff"
                              ]
                          }
                      },
                      stroke: {
                          show: !0,
                          width: 2,
                          colors: [
                              "#fff"
                          ]
                      },
                      legend: {
                          show: !1
                      },
                      fill: {
                          gradient: {
                              stops: [
                                  0,
                                  100
                              ]
                          }
                      },
                      tooltip: {
                          followCursor: !0,
                          x: {
                              show: !1
                          }
                      },
                      grid: {
                          padding: {
                              left: 0,
                              right: 0
                          }
                      },
                      xaxis: {
                          crosshairs: {
                              show: !1
                          },
                          tooltip: {
                              enabled: !1
                          }
                      }
                  };
              }
          },
          {
              key: "pie",
              value: function() {
                  return {
                      chart: {
                          toolbar: {
                              show: !1
                          }
                      },
                      plotOptions: {
                          pie: {
                              donut: {
                                  labels: {
                                      show: !1
                                  }
                              }
                          }
                      },
                      dataLabels: {
                          formatter: function(t305) {
                              return t305.toFixed(1) + "%";
                          },
                          style: {
                              colors: [
                                  "#fff"
                              ]
                          },
                          background: {
                              enabled: !1
                          },
                          dropShadow: {
                              enabled: !0
                          }
                      },
                      stroke: {
                          colors: [
                              "#fff"
                          ]
                      },
                      fill: {
                          opacity: 1,
                          gradient: {
                              shade: "light",
                              stops: [
                                  0,
                                  100
                              ]
                          }
                      },
                      tooltip: {
                          theme: "dark",
                          fillSeriesColor: !0
                      },
                      legend: {
                          position: "right"
                      }
                  };
              }
          },
          {
              key: "donut",
              value: function() {
                  return {
                      chart: {
                          toolbar: {
                              show: !1
                          }
                      },
                      dataLabels: {
                          formatter: function(t306) {
                              return t306.toFixed(1) + "%";
                          },
                          style: {
                              colors: [
                                  "#fff"
                              ]
                          },
                          background: {
                              enabled: !1
                          },
                          dropShadow: {
                              enabled: !0
                          }
                      },
                      stroke: {
                          colors: [
                              "#fff"
                          ]
                      },
                      fill: {
                          opacity: 1,
                          gradient: {
                              shade: "light",
                              shadeIntensity: 0.35,
                              stops: [
                                  80,
                                  100
                              ],
                              opacityFrom: 1,
                              opacityTo: 1
                          }
                      },
                      tooltip: {
                          theme: "dark",
                          fillSeriesColor: !0
                      },
                      legend: {
                          position: "right"
                      }
                  };
              }
          },
          {
              key: "polarArea",
              value: function() {
                  return this.opts.yaxis[0].tickAmount = this.opts.yaxis[0].tickAmount ? this.opts.yaxis[0].tickAmount : 6, {
                      chart: {
                          toolbar: {
                              show: !1
                          }
                      },
                      dataLabels: {
                          formatter: function(t307) {
                              return t307.toFixed(1) + "%";
                          },
                          enabled: !1
                      },
                      stroke: {
                          show: !0,
                          width: 2
                      },
                      fill: {
                          opacity: 0.7
                      },
                      tooltip: {
                          theme: "dark",
                          fillSeriesColor: !0
                      },
                      legend: {
                          position: "right"
                      }
                  };
              }
          },
          {
              key: "radar",
              value: function() {
                  return this.opts.yaxis[0].labels.offsetY = this.opts.yaxis[0].labels.offsetY ? this.opts.yaxis[0].labels.offsetY : 6, {
                      dataLabels: {
                          enabled: !1,
                          style: {
                              fontSize: "11px"
                          }
                      },
                      stroke: {
                          width: 2
                      },
                      markers: {
                          size: 3,
                          strokeWidth: 1,
                          strokeOpacity: 1
                      },
                      fill: {
                          opacity: 0.2
                      },
                      tooltip: {
                          shared: !1,
                          intersect: !0,
                          followCursor: !0
                      },
                      grid: {
                          show: !1
                      },
                      xaxis: {
                          labels: {
                              formatter: function(t308) {
                                  return t308;
                              },
                              style: {
                                  colors: [
                                      "#a8a8a8"
                                  ],
                                  fontSize: "11px"
                              }
                          },
                          tooltip: {
                              enabled: !1
                          },
                          crosshairs: {
                              show: !1
                          }
                      }
                  };
              }
          },
          {
              key: "radialBar",
              value: function() {
                  return {
                      chart: {
                          animations: {
                              dynamicAnimation: {
                                  enabled: !0,
                                  speed: 800
                              }
                          },
                          toolbar: {
                              show: !1
                          }
                      },
                      fill: {
                          gradient: {
                              shade: "dark",
                              shadeIntensity: 0.4,
                              inverseColors: !1,
                              type: "diagonal2",
                              opacityFrom: 1,
                              opacityTo: 1,
                              stops: [
                                  70,
                                  98,
                                  100
                              ]
                          }
                      },
                      legend: {
                          show: !1,
                          position: "right"
                      },
                      tooltip: {
                          enabled: !1,
                          fillSeriesColor: !0
                      }
                  };
              }
          },
          {
              key: "_getBoxTooltip",
              value: function(t309, e224, i, a144, s107) {
                  var r92 = t309.globals.seriesCandleO[e224][i], o77 = t309.globals.seriesCandleH[e224][i], n70 = t309.globals.seriesCandleM[e224][i], l56 = t309.globals.seriesCandleL[e224][i], h49 = t309.globals.seriesCandleC[e224][i];
                  return t309.config.series[e224].type && t309.config.series[e224].type !== s107 ? '<div class="apexcharts-custom-tooltip">\n          '.concat(t309.config.series[e224].name ? t309.config.series[e224].name : "series-" + (e224 + 1), ": <strong>").concat(t309.globals.series[e224][i], "</strong>\n        </div>") : '<div class="apexcharts-tooltip-box apexcharts-tooltip-'.concat(t309.config.chart.type, '">') + "<div>".concat(a144[0], ': <span class="value">') + r92 + "</span></div>" + "<div>".concat(a144[1], ': <span class="value">') + o77 + "</span></div>" + (n70 ? "<div>".concat(a144[2], ': <span class="value">') + n70 + "</span></div>" : "") + "<div>".concat(a144[3], ': <span class="value">') + l56 + "</span></div>" + "<div>".concat(a144[4], ': <span class="value">') + h49 + "</span></div></div>";
              }
          }
      ]), t290;
  }(), H = function() {
      function t310(e225) {
          a(this, t310), this.opts = e225;
      }
      return r(t310, [
          {
              key: "init",
              value: function(t311) {
                  var e226 = t311.responsiveOverride, a145 = this.opts, s108 = new S, r93 = new R(a145);
                  this.chartType = a145.chart.type, "histogram" === this.chartType && (a145.chart.type = "bar", a145 = p.extend({
                      plotOptions: {
                          bar: {
                              columnWidth: "99.99%"
                          }
                      }
                  }, a145)), a145 = this.extendYAxis(a145), a145 = this.extendAnnotations(a145);
                  var o78 = s108.init(), n71 = {
                  };
                  if (a145 && "object" === i(a145)) {
                      var l57 = {
                      };
                      l57 = -1 !== [
                          "line",
                          "area",
                          "bar",
                          "candlestick",
                          "boxPlot",
                          "rangeBar",
                          "histogram",
                          "bubble",
                          "scatter",
                          "heatmap",
                          "treemap",
                          "pie",
                          "polarArea",
                          "donut",
                          "radar",
                          "radialBar"
                      ].indexOf(a145.chart.type) ? r93[a145.chart.type]() : r93.line(), a145.chart.brush && a145.chart.brush.enabled && (l57 = r93.brush(l57)), a145.chart.stacked && "100%" === a145.chart.stackType && (a145 = r93.stacked100(a145)), this.checkForDarkTheme(window.Apex), this.checkForDarkTheme(a145), a145.xaxis = a145.xaxis || window.Apex.xaxis || {
                      }, e226 || (a145.xaxis.convertedCatToNumeric = !1), ((a145 = this.checkForCatToNumericXAxis(this.chartType, l57, a145)).chart.sparkline && a145.chart.sparkline.enabled || window.Apex.chart && window.Apex.chart.sparkline && window.Apex.chart.sparkline.enabled) && (l57 = r93.sparkline(l57)), n71 = p.extend(o78, l57);
                  }
                  var h50 = p.extend(n71, window.Apex);
                  return o78 = p.extend(h50, a145), o78 = this.handleUserInputErrors(o78);
              }
          },
          {
              key: "checkForCatToNumericXAxis",
              value: function(t312, e227, i174) {
                  var a146 = new R(i174), s109 = ("bar" === t312 || "boxPlot" === t312) && i174.plotOptions && i174.plotOptions.bar && i174.plotOptions.bar.horizontal, r94 = "pie" === t312 || "polarArea" === t312 || "donut" === t312 || "radar" === t312 || "radialBar" === t312 || "heatmap" === t312, o79 = "datetime" !== i174.xaxis.type && "numeric" !== i174.xaxis.type, n72 = i174.xaxis.tickPlacement ? i174.xaxis.tickPlacement : e227.xaxis && e227.xaxis.tickPlacement;
                  return s109 || r94 || !o79 || "between" === n72 || (i174 = a146.convertCatToNumeric(i174)), i174;
              }
          },
          {
              key: "extendYAxis",
              value: function(t313, e228) {
                  var i175 = new S;
                  (void 0 === t313.yaxis || !t313.yaxis || Array.isArray(t313.yaxis) && 0 === t313.yaxis.length) && (t313.yaxis = {
                  }), t313.yaxis.constructor !== Array && window.Apex.yaxis && window.Apex.yaxis.constructor !== Array && (t313.yaxis = p.extend(t313.yaxis, window.Apex.yaxis)), t313.yaxis.constructor !== Array ? t313.yaxis = [
                      p.extend(i175.yAxis, t313.yaxis)
                  ] : t313.yaxis = p.extendArray(t313.yaxis, i175.yAxis);
                  var a147 = !1;
                  t313.yaxis.forEach(function(t314) {
                      t314.logarithmic && (a147 = !0);
                  });
                  var s110 = t313.series;
                  return e228 && !s110 && (s110 = e228.config.series), a147 && s110.length !== t313.yaxis.length && s110.length && (t313.yaxis = s110.map(function(e229, a148) {
                      if (e229.name || (s110[a148].name = "series-".concat(a148 + 1)), t313.yaxis[a148]) return t313.yaxis[a148].seriesName = s110[a148].name, t313.yaxis[a148];
                      var r95 = p.extend(i175.yAxis, t313.yaxis[0]);
                      return r95.show = !1, r95;
                  })), a147 && s110.length > 1 && s110.length !== t313.yaxis.length && console.warn("A multi-series logarithmic chart should have equal number of series and y-axes. Please make sure to equalize both."), t313;
              }
          },
          {
              key: "extendAnnotations",
              value: function(t315) {
                  return void 0 === t315.annotations && (t315.annotations = {
                  }, t315.annotations.yaxis = [], t315.annotations.xaxis = [], t315.annotations.points = []), t315 = this.extendYAxisAnnotations(t315), t315 = this.extendXAxisAnnotations(t315), t315 = this.extendPointAnnotations(t315);
              }
          },
          {
              key: "extendYAxisAnnotations",
              value: function(t316) {
                  var e230 = new S;
                  return t316.annotations.yaxis = p.extendArray(void 0 !== t316.annotations.yaxis ? t316.annotations.yaxis : [], e230.yAxisAnnotation), t316;
              }
          },
          {
              key: "extendXAxisAnnotations",
              value: function(t317) {
                  var e231 = new S;
                  return t317.annotations.xaxis = p.extendArray(void 0 !== t317.annotations.xaxis ? t317.annotations.xaxis : [], e231.xAxisAnnotation), t317;
              }
          },
          {
              key: "extendPointAnnotations",
              value: function(t318) {
                  var e232 = new S;
                  return t318.annotations.points = p.extendArray(void 0 !== t318.annotations.points ? t318.annotations.points : [], e232.pointAnnotation), t318;
              }
          },
          {
              key: "checkForDarkTheme",
              value: function(t319) {
                  t319.theme && "dark" === t319.theme.mode && (t319.tooltip || (t319.tooltip = {
                  }), "light" !== t319.tooltip.theme && (t319.tooltip.theme = "dark"), t319.chart.foreColor || (t319.chart.foreColor = "#f6f7f8"), t319.chart.background || (t319.chart.background = "#424242"), t319.theme.palette || (t319.theme.palette = "palette4"));
              }
          },
          {
              key: "handleUserInputErrors",
              value: function(t320) {
                  var e233 = t320;
                  if (e233.tooltip.shared && e233.tooltip.intersect) throw new Error("tooltip.shared cannot be enabled when tooltip.intersect is true. Turn off any other option by setting it to false.");
                  if ("bar" === e233.chart.type && e233.plotOptions.bar.horizontal) {
                      if (e233.yaxis.length > 1) throw new Error("Multiple Y Axis for bars are not supported. Switch to column chart by setting plotOptions.bar.horizontal=false");
                      e233.yaxis[0].reversed && (e233.yaxis[0].opposite = !0), e233.xaxis.tooltip.enabled = !1, e233.yaxis[0].tooltip.enabled = !1, e233.chart.zoom.enabled = !1;
                  }
                  return "bar" !== e233.chart.type && "rangeBar" !== e233.chart.type || e233.tooltip.shared && "barWidth" === e233.xaxis.crosshairs.width && e233.series.length > 1 && (e233.xaxis.crosshairs.width = "tickWidth"), "candlestick" !== e233.chart.type && "boxPlot" !== e233.chart.type || e233.yaxis[0].reversed && (console.warn("Reversed y-axis in ".concat(e233.chart.type, " chart is not supported.")), e233.yaxis[0].reversed = !1), Array.isArray(e233.stroke.width) && "line" !== e233.chart.type && "area" !== e233.chart.type && (console.warn("stroke.width option accepts array only for line and area charts. Reverted back to Number"), e233.stroke.width = e233.stroke.width[0]), e233;
              }
          }
      ]), t310;
  }(), D = function() {
      function t321() {
          a(this, t321);
      }
      return r(t321, [
          {
              key: "initGlobalVars",
              value: function(t322) {
                  t322.series = [], t322.seriesCandleO = [], t322.seriesCandleH = [], t322.seriesCandleM = [], t322.seriesCandleL = [], t322.seriesCandleC = [], t322.seriesRangeStart = [], t322.seriesRangeEnd = [], t322.seriesRangeBar = [], t322.seriesPercent = [], t322.seriesGoals = [], t322.seriesX = [], t322.seriesZ = [], t322.seriesNames = [], t322.seriesTotals = [], t322.seriesLog = [], t322.seriesColors = [], t322.stackedSeriesTotals = [], t322.seriesXvalues = [], t322.seriesYvalues = [], t322.labels = [], t322.categoryLabels = [], t322.timescaleLabels = [], t322.noLabelsProvided = !1, t322.resizeTimer = null, t322.selectionResizeTimer = null, t322.delayedElements = [], t322.pointsArray = [], t322.dataLabelsRects = [], t322.isXNumeric = !1, t322.xaxisLabelsCount = 0, t322.skipLastTimelinelabel = !1, t322.skipFirstTimelinelabel = !1, t322.isDataXYZ = !1, t322.isMultiLineX = !1, t322.isMultipleYAxis = !1, t322.maxY = -Number.MAX_VALUE, t322.minY = Number.MIN_VALUE, t322.minYArr = [], t322.maxYArr = [], t322.maxX = -Number.MAX_VALUE, t322.minX = Number.MAX_VALUE, t322.initialMaxX = -Number.MAX_VALUE, t322.initialMinX = Number.MAX_VALUE, t322.maxDate = 0, t322.minDate = Number.MAX_VALUE, t322.minZ = Number.MAX_VALUE, t322.maxZ = -Number.MAX_VALUE, t322.minXDiff = Number.MAX_VALUE, t322.yAxisScale = [], t322.xAxisScale = null, t322.xAxisTicksPositions = [], t322.yLabelsCoords = [], t322.yTitleCoords = [], t322.barPadForNumericAxis = 0, t322.padHorizontal = 0, t322.xRange = 0, t322.yRange = [], t322.zRange = 0, t322.dataPoints = 0, t322.xTickAmount = 0;
              }
          },
          {
              key: "globalVars",
              value: function(t323) {
                  return {
                      chartID: null,
                      cuid: null,
                      events: {
                          beforeMount: [],
                          mounted: [],
                          updated: [],
                          clicked: [],
                          selection: [],
                          dataPointSelection: [],
                          zoomed: [],
                          scrolled: []
                      },
                      colors: [],
                      clientX: null,
                      clientY: null,
                      fill: {
                          colors: []
                      },
                      stroke: {
                          colors: []
                      },
                      dataLabels: {
                          style: {
                              colors: []
                          }
                      },
                      radarPolygons: {
                          fill: {
                              colors: []
                          }
                      },
                      markers: {
                          colors: [],
                          size: t323.markers.size,
                          largestSize: 0
                      },
                      animationEnded: !1,
                      isTouchDevice: "ontouchstart" in window || navigator.msMaxTouchPoints,
                      isDirty: !1,
                      isExecCalled: !1,
                      initialConfig: null,
                      initialSeries: [],
                      lastXAxis: [],
                      lastYAxis: [],
                      columnSeries: null,
                      labels: [],
                      timescaleLabels: [],
                      noLabelsProvided: !1,
                      allSeriesCollapsed: !1,
                      collapsedSeries: [],
                      collapsedSeriesIndices: [],
                      ancillaryCollapsedSeries: [],
                      ancillaryCollapsedSeriesIndices: [],
                      risingSeries: [],
                      dataFormatXNumeric: !1,
                      capturedSeriesIndex: -1,
                      capturedDataPointIndex: -1,
                      selectedDataPoints: [],
                      goldenPadding: 35,
                      invalidLogScale: !1,
                      ignoreYAxisIndexes: [],
                      yAxisSameScaleIndices: [],
                      maxValsInArrayIndex: 0,
                      radialSize: 0,
                      selection: void 0,
                      zoomEnabled: "zoom" === t323.chart.toolbar.autoSelected && t323.chart.toolbar.tools.zoom && t323.chart.zoom.enabled,
                      panEnabled: "pan" === t323.chart.toolbar.autoSelected && t323.chart.toolbar.tools.pan,
                      selectionEnabled: "selection" === t323.chart.toolbar.autoSelected && t323.chart.toolbar.tools.selection,
                      yaxis: null,
                      mousedown: !1,
                      lastClientPosition: {
                      },
                      visibleXRange: void 0,
                      yValueDecimal: 0,
                      total: 0,
                      SVGNS: "http://www.w3.org/2000/svg",
                      svgWidth: 0,
                      svgHeight: 0,
                      noData: !1,
                      locale: {
                      },
                      dom: {
                      },
                      memory: {
                          methodsToExec: []
                      },
                      shouldAnimate: !0,
                      skipLastTimelinelabel: !1,
                      skipFirstTimelinelabel: !1,
                      delayedElements: [],
                      axisCharts: !0,
                      isDataXYZ: !1,
                      resized: !1,
                      resizeTimer: null,
                      comboCharts: !1,
                      dataChanged: !1,
                      previousPaths: [],
                      allSeriesHasEqualX: !0,
                      pointsArray: [],
                      dataLabelsRects: [],
                      lastDrawnDataLabelsIndexes: [],
                      hasNullValues: !1,
                      easing: null,
                      zoomed: !1,
                      gridWidth: 0,
                      gridHeight: 0,
                      rotateXLabels: !1,
                      defaultLabels: !1,
                      xLabelFormatter: void 0,
                      yLabelFormatters: [],
                      xaxisTooltipFormatter: void 0,
                      ttKeyFormatter: void 0,
                      ttVal: void 0,
                      ttZFormatter: void 0,
                      LINE_HEIGHT_RATIO: 1.618,
                      xAxisLabelsHeight: 0,
                      xAxisLabelsWidth: 0,
                      yAxisLabelsWidth: 0,
                      scaleX: 1,
                      scaleY: 1,
                      translateX: 0,
                      translateY: 0,
                      translateYAxisX: [],
                      yAxisWidths: [],
                      translateXAxisY: 0,
                      translateXAxisX: 0,
                      tooltip: null
                  };
              }
          },
          {
              key: "init",
              value: function(t324) {
                  var e234 = this.globalVars(t324);
                  return this.initGlobalVars(e234), e234.initialConfig = p.extend({
                  }, t324), e234.initialSeries = p.clone(t324.series), e234.lastXAxis = p.clone(e234.initialConfig.xaxis), e234.lastYAxis = p.clone(e234.initialConfig.yaxis), e234;
              }
          }
      ]), t321;
  }(), N = function() {
      function t325(e235) {
          a(this, t325), this.opts = e235;
      }
      return r(t325, [
          {
              key: "init",
              value: function() {
                  var t326 = new H(this.opts).init({
                      responsiveOverride: !1
                  });
                  return {
                      config: t326,
                      globals: (new D).init(t326)
                  };
              }
          }
      ]), t325;
  }(), O = function() {
      function t327(e236) {
          a(this, t327), this.ctx = e236, this.w = e236.w, this.twoDSeries = [], this.threeDSeries = [], this.twoDSeriesX = [], this.seriesGoals = [], this.coreUtils = new y(this.ctx);
      }
      return r(t327, [
          {
              key: "isMultiFormat",
              value: function() {
                  return this.isFormatXY() || this.isFormat2DArray();
              }
          },
          {
              key: "isFormatXY",
              value: function() {
                  var t328 = this.w.config.series.slice(), e237 = new z(this.ctx);
                  if (this.activeSeriesIndex = e237.getActiveConfigSeriesIndex(), void 0 !== t328[this.activeSeriesIndex].data && t328[this.activeSeriesIndex].data.length > 0 && null !== t328[this.activeSeriesIndex].data[0] && void 0 !== t328[this.activeSeriesIndex].data[0].x && null !== t328[this.activeSeriesIndex].data[0]) return !0;
              }
          },
          {
              key: "isFormat2DArray",
              value: function() {
                  var t329 = this.w.config.series.slice(), e238 = new z(this.ctx);
                  if (this.activeSeriesIndex = e238.getActiveConfigSeriesIndex(), void 0 !== t329[this.activeSeriesIndex].data && t329[this.activeSeriesIndex].data.length > 0 && void 0 !== t329[this.activeSeriesIndex].data[0] && null !== t329[this.activeSeriesIndex].data[0] && t329[this.activeSeriesIndex].data[0].constructor === Array) return !0;
              }
          },
          {
              key: "handleFormat2DArray",
              value: function(t330, e) {
                  for(var i176 = this.w.config, a149 = this.w.globals, s111 = "boxPlot" === i176.chart.type || "boxPlot" === i176.series[e].type, r96 = 0; r96 < t330[e].data.length; r96++)if (void 0 !== t330[e].data[r96][1] && (Array.isArray(t330[e].data[r96][1]) && 4 === t330[e].data[r96][1].length && !s111 ? this.twoDSeries.push(p.parseNumber(t330[e].data[r96][1][3])) : t330[e].data[r96].length >= 5 ? this.twoDSeries.push(p.parseNumber(t330[e].data[r96][4])) : this.twoDSeries.push(p.parseNumber(t330[e].data[r96][1])), a149.dataFormatXNumeric = !0), "datetime" === i176.xaxis.type) {
                      var o80 = new Date(t330[e].data[r96][0]);
                      o80 = new Date(o80).getTime(), this.twoDSeriesX.push(o80);
                  } else this.twoDSeriesX.push(t330[e].data[r96][0]);
                  for(var n73 = 0; n73 < t330[e].data.length; n73++)void 0 !== t330[e].data[n73][2] && (this.threeDSeries.push(t330[e].data[n73][2]), a149.isDataXYZ = !0);
              }
          },
          {
              key: "handleFormatXY",
              value: function(t331, e239) {
                  var i177 = this.w.config, a150 = this.w.globals, s112 = new Y(this.ctx), r97 = e239;
                  a150.collapsedSeriesIndices.indexOf(e239) > -1 && (r97 = this.activeSeriesIndex);
                  for(var o81 = 0; o81 < t331[e239].data.length; o81++)void 0 !== t331[e239].data[o81].y && (Array.isArray(t331[e239].data[o81].y) ? this.twoDSeries.push(p.parseNumber(t331[e239].data[o81].y[t331[e239].data[o81].y.length - 1])) : this.twoDSeries.push(p.parseNumber(t331[e239].data[o81].y))), void 0 !== t331[e239].data[o81].goals && Array.isArray(t331[e239].data[o81].goals) ? (void 0 === this.seriesGoals[e239] && (this.seriesGoals[e239] = []), this.seriesGoals[e239].push(t331[e239].data[o81].goals)) : (void 0 === this.seriesGoals[e239] && (this.seriesGoals[e239] = []), this.seriesGoals[e239].push(null));
                  for(var n74 = 0; n74 < t331[r97].data.length; n74++){
                      var l58 = "string" == typeof t331[r97].data[n74].x, h51 = Array.isArray(t331[r97].data[n74].x), c46 = !h51 && !!s112.isValidDate(t331[r97].data[n74].x.toString());
                      if (l58 || c46) {
                          if (l58 || i177.xaxis.convertedCatToNumeric) {
                              var d42 = a150.isBarHorizontal && a150.isRangeData;
                              "datetime" !== i177.xaxis.type || d42 ? (this.fallbackToCategory = !0, this.twoDSeriesX.push(t331[r97].data[n74].x)) : this.twoDSeriesX.push(s112.parseDate(t331[r97].data[n74].x));
                          } else "datetime" === i177.xaxis.type ? this.twoDSeriesX.push(s112.parseDate(t331[r97].data[n74].x.toString())) : (a150.dataFormatXNumeric = !0, a150.isXNumeric = !0, this.twoDSeriesX.push(parseFloat(t331[r97].data[n74].x)));
                      } else h51 ? (this.fallbackToCategory = !0, this.twoDSeriesX.push(t331[r97].data[n74].x)) : (a150.isXNumeric = !0, a150.dataFormatXNumeric = !0, this.twoDSeriesX.push(t331[r97].data[n74].x));
                  }
                  if (t331[e239].data[0] && void 0 !== t331[e239].data[0].z) {
                      for(var g35 = 0; g35 < t331[e239].data.length; g35++)this.threeDSeries.push(t331[e239].data[g35].z);
                      a150.isDataXYZ = !0;
                  }
              }
          },
          {
              key: "handleRangeData",
              value: function(t332, e240) {
                  var i178 = this.w.globals, a151 = {
                  };
                  return this.isFormat2DArray() ? a151 = this.handleRangeDataFormat("array", t332, e240) : this.isFormatXY() && (a151 = this.handleRangeDataFormat("xy", t332, e240)), i178.seriesRangeStart.push(a151.start), i178.seriesRangeEnd.push(a151.end), i178.seriesRangeBar.push(a151.rangeUniques), i178.seriesRangeBar.forEach(function(t333, e241) {
                      t333 && t333.forEach(function(t334, e242) {
                          t334.y.forEach(function(e243, i179) {
                              for(var a152 = 0; a152 < t334.y.length; a152++)if (i179 !== a152) {
                                  var s113 = e243.y1, r98 = e243.y2, o82 = t334.y[a152].y1;
                                  s113 <= t334.y[a152].y2 && o82 <= r98 && (t334.overlaps.indexOf(e243.rangeName) < 0 && t334.overlaps.push(e243.rangeName), t334.overlaps.indexOf(t334.y[a152].rangeName) < 0 && t334.overlaps.push(t334.y[a152].rangeName));
                              }
                          });
                      });
                  }), a151;
              }
          },
          {
              key: "handleCandleStickBoxData",
              value: function(t335, e244) {
                  var i180 = this.w.globals, a153 = {
                  };
                  return this.isFormat2DArray() ? a153 = this.handleCandleStickBoxDataFormat("array", t335, e244) : this.isFormatXY() && (a153 = this.handleCandleStickBoxDataFormat("xy", t335, e244)), i180.seriesCandleO[e244] = a153.o, i180.seriesCandleH[e244] = a153.h, i180.seriesCandleM[e244] = a153.m, i180.seriesCandleL[e244] = a153.l, i180.seriesCandleC[e244] = a153.c, a153;
              }
          },
          {
              key: "handleRangeDataFormat",
              value: function(t336, e245, i181) {
                  var a154 = [], s114 = [], r99 = e245[i181].data.filter(function(t337, e246, i182) {
                      return e246 === i182.findIndex(function(e247) {
                          return e247.x === t337.x;
                      });
                  }).map(function(t338, e) {
                      return {
                          x: t338.x,
                          overlaps: [],
                          y: []
                      };
                  }), o83 = "Please provide [Start, End] values in valid format. Read more https://apexcharts.com/docs/series/#rangecharts", n75 = new z(this.ctx).getActiveConfigSeriesIndex();
                  if ("array" === t336) {
                      if (2 !== e245[n75].data[0][1].length) throw new Error(o83);
                      for(var l59 = 0; l59 < e245[i181].data.length; l59++)a154.push(e245[i181].data[l59][1][0]), s114.push(e245[i181].data[l59][1][1]);
                  } else if ("xy" === t336) {
                      if (2 !== e245[n75].data[0].y.length) throw new Error(o83);
                      for(var h52 = function(t339) {
                          var o84 = p.randomId(), n76 = e245[i181].data[t339].x, l60 = {
                              y1: e245[i181].data[t339].y[0],
                              y2: e245[i181].data[t339].y[1],
                              rangeName: o84
                          };
                          e245[i181].data[t339].rangeName = o84;
                          var h = r99.findIndex(function(t340) {
                              return t340.x === n76;
                          });
                          r99[h].y.push(l60), a154.push(l60.y1), s114.push(l60.y2);
                      }, c47 = 0; c47 < e245[i181].data.length; c47++)h52(c47);
                  }
                  return {
                      start: a154,
                      end: s114,
                      rangeUniques: r99
                  };
              }
          },
          {
              key: "handleCandleStickBoxDataFormat",
              value: function(t341, e248, i) {
                  var a155 = this.w, s115 = "boxPlot" === a155.config.chart.type || "boxPlot" === a155.config.series[i].type, r100 = [], o85 = [], n77 = [], l61 = [], h53 = [];
                  if ("array" === t341) {
                      if (s115 && 6 === e248[i].data[0].length || !s115 && 5 === e248[i].data[0].length) for(var c48 = 0; c48 < e248[i].data.length; c48++)r100.push(e248[i].data[c48][1]), o85.push(e248[i].data[c48][2]), s115 ? (n77.push(e248[i].data[c48][3]), l61.push(e248[i].data[c48][4]), h53.push(e248[i].data[c48][5])) : (l61.push(e248[i].data[c48][3]), h53.push(e248[i].data[c48][4]));
                      else for(var d43 = 0; d43 < e248[i].data.length; d43++)Array.isArray(e248[i].data[d43][1]) && (r100.push(e248[i].data[d43][1][0]), o85.push(e248[i].data[d43][1][1]), s115 ? (n77.push(e248[i].data[d43][1][2]), l61.push(e248[i].data[d43][1][3]), h53.push(e248[i].data[d43][1][4])) : (l61.push(e248[i].data[d43][1][2]), h53.push(e248[i].data[d43][1][3])));
                  } else if ("xy" === t341) for(var g36 = 0; g36 < e248[i].data.length; g36++)Array.isArray(e248[i].data[g36].y) && (r100.push(e248[i].data[g36].y[0]), o85.push(e248[i].data[g36].y[1]), s115 ? (n77.push(e248[i].data[g36].y[2]), l61.push(e248[i].data[g36].y[3]), h53.push(e248[i].data[g36].y[4])) : (l61.push(e248[i].data[g36].y[2]), h53.push(e248[i].data[g36].y[3])));
                  return {
                      o: r100,
                      h: o85,
                      m: n77,
                      l: l61,
                      c: h53
                  };
              }
          },
          {
              key: "parseDataAxisCharts",
              value: function(t342) {
                  var e249 = this, i183 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : this.ctx, a156 = this.w.config, s116 = this.w.globals, r101 = new Y(i183), o86 = a156.labels.length > 0 ? a156.labels.slice() : a156.xaxis.categories.slice();
                  s116.isRangeBar = "rangeBar" === a156.chart.type && s116.isBarHorizontal;
                  for(var n78 = function() {
                      for(var t343 = 0; t343 < o86.length; t343++)if ("string" == typeof o86[t343]) {
                          if (!r101.isValidDate(o86[t343])) throw new Error("You have provided invalid Date format. Please provide a valid JavaScript Date");
                          e249.twoDSeriesX.push(r101.parseDate(o86[t343]));
                      } else e249.twoDSeriesX.push(o86[t343]);
                  }, l62 = 0; l62 < t342.length; l62++){
                      if (this.twoDSeries = [], this.twoDSeriesX = [], this.threeDSeries = [], void 0 === t342[l62].data) return void console.error("It is a possibility that you may have not included 'data' property in series.");
                      if ("rangeBar" !== a156.chart.type && "rangeArea" !== a156.chart.type && "rangeBar" !== t342[l62].type && "rangeArea" !== t342[l62].type || (s116.isRangeData = !0, this.handleRangeData(t342, l62)), this.isMultiFormat()) this.isFormat2DArray() ? this.handleFormat2DArray(t342, l62) : this.isFormatXY() && this.handleFormatXY(t342, l62), "candlestick" !== a156.chart.type && "candlestick" !== t342[l62].type && "boxPlot" !== a156.chart.type && "boxPlot" !== t342[l62].type || this.handleCandleStickBoxData(t342, l62), s116.series.push(this.twoDSeries), s116.labels.push(this.twoDSeriesX), s116.seriesX.push(this.twoDSeriesX), s116.seriesGoals = this.seriesGoals, l62 !== this.activeSeriesIndex || this.fallbackToCategory || (s116.isXNumeric = !0);
                      else {
                          "datetime" === a156.xaxis.type ? (s116.isXNumeric = !0, n78(), s116.seriesX.push(this.twoDSeriesX)) : "numeric" === a156.xaxis.type && (s116.isXNumeric = !0, o86.length > 0 && (this.twoDSeriesX = o86, s116.seriesX.push(this.twoDSeriesX))), s116.labels.push(this.twoDSeriesX);
                          var h54 = t342[l62].data.map(function(t344) {
                              return p.parseNumber(t344);
                          });
                          s116.series.push(h54);
                      }
                      s116.seriesZ.push(this.threeDSeries), void 0 !== t342[l62].name ? s116.seriesNames.push(t342[l62].name) : s116.seriesNames.push("series-" + parseInt(l62 + 1, 10)), void 0 !== t342[l62].color ? s116.seriesColors.push(t342[l62].color) : s116.seriesColors.push(void 0);
                  }
                  return this.w;
              }
          },
          {
              key: "parseDataNonAxisCharts",
              value: function(t345) {
                  var e250 = this.w.globals, i184 = this.w.config;
                  e250.series = t345.slice(), e250.seriesNames = i184.labels.slice();
                  for(var a157 = 0; a157 < e250.series.length; a157++)void 0 === e250.seriesNames[a157] && e250.seriesNames.push("series-" + (a157 + 1));
                  return this.w;
              }
          },
          {
              key: "handleExternalLabelsData",
              value: function(t346) {
                  var e251 = this.w.config, i185 = this.w.globals;
                  if (e251.xaxis.categories.length > 0) i185.labels = e251.xaxis.categories;
                  else if (e251.labels.length > 0) i185.labels = e251.labels.slice();
                  else if (this.fallbackToCategory) {
                      if (i185.labels = i185.labels[0], i185.seriesRangeBar.length && (i185.seriesRangeBar.map(function(t347) {
                          t347.forEach(function(t348) {
                              i185.labels.indexOf(t348.x) < 0 && t348.x && i185.labels.push(t348.x);
                          });
                      }), i185.labels = i185.labels.filter(function(t349, e252, i186) {
                          return i186.indexOf(t349) === e252;
                      })), e251.xaxis.convertedCatToNumeric) new R(e251).convertCatToNumericXaxis(e251, this.ctx, i185.seriesX[0]), this._generateExternalLabels(t346);
                  } else this._generateExternalLabels(t346);
              }
          },
          {
              key: "_generateExternalLabels",
              value: function(t350) {
                  var e253 = this.w.globals, i187 = this.w.config, a158 = [];
                  if (e253.axisCharts) {
                      if (e253.series.length > 0) {
                          if (this.isFormatXY()) for(var s117 = i187.series.map(function(t351, e254) {
                              return t351.data.filter(function(t352, e255, i188) {
                                  return i188.findIndex(function(e256) {
                                      return e256.x === t352.x;
                                  }) === e255;
                              });
                          }), r = s117.reduce(function(t353, e257, i189, a159) {
                              return a159[t353].length > e257.length ? t353 : i189;
                          }, 0), o87 = 0; o87 < s117[r].length; o87++)a158.push(o87 + 1);
                          else for(var n79 = 0; n79 < e253.series[e253.maxValsInArrayIndex].length; n79++)a158.push(n79 + 1);
                      }
                      e253.seriesX = [];
                      for(var l63 = 0; l63 < t350.length; l63++)e253.seriesX.push(a158);
                      e253.isXNumeric = !0;
                  }
                  if (0 === a158.length) {
                      a158 = e253.axisCharts ? [] : e253.series.map(function(t, e258) {
                          return e258 + 1;
                      });
                      for(var h55 = 0; h55 < t350.length; h55++)e253.seriesX.push(a158);
                  }
                  e253.labels = a158, i187.xaxis.convertedCatToNumeric && (e253.categoryLabels = a158.map(function(t354) {
                      return i187.xaxis.labels.formatter(t354);
                  })), e253.noLabelsProvided = !0;
              }
          },
          {
              key: "parseData",
              value: function(t355) {
                  var e259 = this.w, i190 = e259.config, a160 = e259.globals;
                  if (this.excludeCollapsedSeriesInYAxis(), this.fallbackToCategory = !1, this.ctx.core.resetGlobals(), this.ctx.core.isMultipleY(), a160.axisCharts ? this.parseDataAxisCharts(t355) : this.parseDataNonAxisCharts(t355), this.coreUtils.getLargestSeries(), "bar" === i190.chart.type && i190.chart.stacked) {
                      var s118 = new z(this.ctx);
                      a160.series = s118.setNullSeriesToZeroValues(a160.series);
                  }
                  this.coreUtils.getSeriesTotals(), a160.axisCharts && this.coreUtils.getStackedSeriesTotals(), this.coreUtils.getPercentSeries(), a160.dataFormatXNumeric || a160.isXNumeric && ("numeric" !== i190.xaxis.type || 0 !== i190.labels.length || 0 !== i190.xaxis.categories.length) || this.handleExternalLabelsData(t355);
                  for(var r102 = this.coreUtils.getCategoryLabels(a160.labels), o88 = 0; o88 < r102.length; o88++)if (Array.isArray(r102[o88])) {
                      a160.isMultiLineX = !0;
                      break;
                  }
              }
          },
          {
              key: "excludeCollapsedSeriesInYAxis",
              value: function() {
                  var t356 = this, e260 = this.w;
                  e260.globals.ignoreYAxisIndexes = e260.globals.collapsedSeries.map(function(i191, a) {
                      if (t356.w.globals.isMultipleYAxis && !e260.config.chart.stacked) return i191.index;
                  });
              }
          }
      ]), t327;
  }(), W = function() {
      function t357(e261) {
          a(this, t357), this.ctx = e261, this.w = e261.w, this.tooltipKeyFormat = "dd MMM";
      }
      return r(t357, [
          {
              key: "xLabelFormat",
              value: function(t358, e262, i192, a161) {
                  var s119 = this.w;
                  if ("datetime" === s119.config.xaxis.type && void 0 === s119.config.xaxis.labels.formatter && void 0 === s119.config.tooltip.x.formatter) {
                      var r103 = new Y(this.ctx);
                      return r103.formatDate(r103.getDate(e262), s119.config.tooltip.x.format);
                  }
                  return t358(e262, i192, a161);
              }
          },
          {
              key: "defaultGeneralFormatter",
              value: function(t359) {
                  return Array.isArray(t359) ? t359.map(function(t360) {
                      return t360;
                  }) : t359;
              }
          },
          {
              key: "defaultYFormatter",
              value: function(t361, e263, i) {
                  var a162 = this.w;
                  return p.isNumber(t361) && (t361 = 0 !== a162.globals.yValueDecimal ? t361.toFixed(void 0 !== e263.decimalsInFloat ? e263.decimalsInFloat : a162.globals.yValueDecimal) : a162.globals.maxYArr[i] - a162.globals.minYArr[i] < 5 ? t361.toFixed(1) : t361.toFixed(0)), t361;
              }
          },
          {
              key: "setLabelFormatters",
              value: function() {
                  var t362 = this, e264 = this.w;
                  return e264.globals.xaxisTooltipFormatter = function(e265) {
                      return t362.defaultGeneralFormatter(e265);
                  }, e264.globals.ttKeyFormatter = function(e266) {
                      return t362.defaultGeneralFormatter(e266);
                  }, e264.globals.ttZFormatter = function(t363) {
                      return t363;
                  }, e264.globals.legendFormatter = function(e267) {
                      return t362.defaultGeneralFormatter(e267);
                  }, void 0 !== e264.config.xaxis.labels.formatter ? e264.globals.xLabelFormatter = e264.config.xaxis.labels.formatter : e264.globals.xLabelFormatter = function(t364) {
                      if (p.isNumber(t364)) {
                          if (!e264.config.xaxis.convertedCatToNumeric && "numeric" === e264.config.xaxis.type) {
                              if (p.isNumber(e264.config.xaxis.decimalsInFloat)) return t364.toFixed(e264.config.xaxis.decimalsInFloat);
                              var i193 = e264.globals.maxX - e264.globals.minX;
                              return i193 > 0 && i193 < 100 ? t364.toFixed(1) : t364.toFixed(0);
                          }
                          if (e264.globals.isBarHorizontal) {
                              if (e264.globals.maxY - e264.globals.minYArr < 4) return t364.toFixed(1);
                          }
                          return t364.toFixed(0);
                      }
                      return t364;
                  }, "function" == typeof e264.config.tooltip.x.formatter ? e264.globals.ttKeyFormatter = e264.config.tooltip.x.formatter : e264.globals.ttKeyFormatter = e264.globals.xLabelFormatter, "function" == typeof e264.config.xaxis.tooltip.formatter && (e264.globals.xaxisTooltipFormatter = e264.config.xaxis.tooltip.formatter), (Array.isArray(e264.config.tooltip.y) || void 0 !== e264.config.tooltip.y.formatter) && (e264.globals.ttVal = e264.config.tooltip.y), void 0 !== e264.config.tooltip.z.formatter && (e264.globals.ttZFormatter = e264.config.tooltip.z.formatter), void 0 !== e264.config.legend.formatter && (e264.globals.legendFormatter = e264.config.legend.formatter), e264.config.yaxis.forEach(function(i194, a163) {
                      void 0 !== i194.labels.formatter ? e264.globals.yLabelFormatters[a163] = i194.labels.formatter : e264.globals.yLabelFormatters[a163] = function(s120) {
                          return e264.globals.xyCharts ? Array.isArray(s120) ? s120.map(function(e268) {
                              return t362.defaultYFormatter(e268, i194, a163);
                          }) : t362.defaultYFormatter(s120, i194, a163) : s120;
                      };
                  }), e264.globals;
              }
          },
          {
              key: "heatmapLabelFormatters",
              value: function() {
                  var t365 = this.w;
                  if ("heatmap" === t365.config.chart.type) {
                      t365.globals.yAxisScale[0].result = t365.globals.seriesNames.slice();
                      var e269 = t365.globals.seriesNames.reduce(function(t366, e271) {
                          return t366.length > e271.length ? t366 : e271;
                      }, 0);
                      t365.globals.yAxisScale[0].niceMax = e269, t365.globals.yAxisScale[0].niceMin = e269;
                  }
              }
          }
      ]), t357;
  }(), B = function() {
      function t367(e272) {
          a(this, t367), this.ctx = e272, this.w = e272.w;
      }
      return r(t367, [
          {
              key: "getLabel",
              value: function(t368, e273, i195, a164) {
                  var s121 = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : [], r104 = arguments.length > 5 && void 0 !== arguments[5] ? arguments[5] : "12px", o89 = this.w, n80 = void 0 === t368[a164] ? "" : t368[a164], l64 = n80, h56 = o89.globals.xLabelFormatter, c49 = o89.config.xaxis.labels.formatter, d44 = !1, g37 = new W(this.ctx), u33 = n80;
                  l64 = g37.xLabelFormat(h56, n80, u33, {
                      i: a164,
                      dateFormatter: new Y(this.ctx).formatDate,
                      w: o89
                  }), void 0 !== c49 && (l64 = c49(n80, t368[a164], {
                      i: a164,
                      dateFormatter: new Y(this.ctx).formatDate,
                      w: o89
                  }));
                  var p23 = function(t369) {
                      var i196 = null;
                      return e273.forEach(function(t370) {
                          "month" === t370.unit ? i196 = "year" : "day" === t370.unit ? i196 = "month" : "hour" === t370.unit ? i196 = "day" : "minute" === t370.unit && (i196 = "hour");
                      }), i196 === t369;
                  };
                  e273.length > 0 ? (d44 = p23(e273[a164].unit), i195 = e273[a164].position, l64 = e273[a164].value) : "datetime" === o89.config.xaxis.type && void 0 === c49 && (l64 = ""), void 0 === l64 && (l64 = ""), l64 = Array.isArray(l64) ? l64 : l64.toString();
                  var f26 = new b(this.ctx), x19 = {
                  };
                  x19 = o89.globals.rotateXLabels ? f26.getTextRects(l64, parseInt(r104, 10), null, "rotate(".concat(o89.config.xaxis.labels.rotate, " 0 0)"), !1) : f26.getTextRects(l64, parseInt(r104, 10));
                  var v19 = !o89.config.xaxis.labels.showDuplicates && this.ctx.timeScale;
                  return !Array.isArray(l64) && (0 === l64.indexOf("NaN") || 0 === l64.toLowerCase().indexOf("invalid") || l64.toLowerCase().indexOf("infinity") >= 0 || s121.indexOf(l64) >= 0 && v19) && (l64 = ""), {
                      x: i195,
                      text: l64,
                      textRect: x19,
                      isBold: d44
                  };
              }
          },
          {
              key: "checkLabelBasedOnTickamount",
              value: function(t371, e274, i197) {
                  var a165 = this.w, s122 = a165.config.xaxis.tickAmount;
                  return "dataPoints" === s122 && (s122 = Math.round(a165.globals.gridWidth / 120)), s122 > i197 || t371 % Math.round(i197 / (s122 + 1)) == 0 || (e274.text = ""), e274;
              }
          },
          {
              key: "checkForOverflowingLabels",
              value: function(t372, e275, i198, a166, s123) {
                  var r105 = this.w;
                  if (0 === t372 && r105.globals.skipFirstTimelinelabel && (e275.text = ""), t372 === i198 - 1 && r105.globals.skipLastTimelinelabel && (e275.text = ""), r105.config.xaxis.labels.hideOverlappingLabels && a166.length > 0) {
                      var o90 = s123[s123.length - 1];
                      e275.x < o90.textRect.width / (r105.globals.rotateXLabels ? Math.abs(r105.config.xaxis.labels.rotate) / 12 : 1.01) + o90.x && (e275.text = "");
                  }
                  return e275;
              }
          },
          {
              key: "checkForReversedLabels",
              value: function(t, e276) {
                  var i199 = this.w;
                  return i199.config.yaxis[t] && i199.config.yaxis[t].reversed && e276.reverse(), e276;
              }
          },
          {
              key: "isYAxisHidden",
              value: function(t373) {
                  var e277 = this.w, i200 = new y(this.ctx);
                  return !e277.config.yaxis[t373].show || !e277.config.yaxis[t373].showForNullSeries && i200.isSeriesNull(t373) && -1 === e277.globals.collapsedSeriesIndices.indexOf(t373);
              }
          },
          {
              key: "getYAxisForeColor",
              value: function(t374, e) {
                  var i201 = this.w;
                  return Array.isArray(t374) && i201.globals.yAxisScale[e] && this.ctx.theme.pushExtraColors(t374, i201.globals.yAxisScale[e].result.length, !1), t374;
              }
          },
          {
              key: "drawYAxisTicks",
              value: function(t375, e278, i202, a167, s, r106, o91) {
                  var n81 = this.w, l65 = new b(this.ctx), h57 = n81.globals.translateY;
                  if (a167.show && e278 > 0) {
                      !0 === n81.config.yaxis[s].opposite && (t375 += a167.width);
                      for(var c50 = e278; c50 >= 0; c50--){
                          var d45 = h57 + e278 / 10 + n81.config.yaxis[s].labels.offsetY - 1;
                          n81.globals.isBarHorizontal && (d45 = r106 * c50), "heatmap" === n81.config.chart.type && (d45 += r106 / 2);
                          var g38 = l65.drawLine(t375 + i202.offsetX - a167.width + a167.offsetX, d45 + a167.offsetY, t375 + i202.offsetX + a167.offsetX, d45 + a167.offsetY, a167.color);
                          o91.add(g38), h57 += r106;
                      }
                  }
              }
          }
      ]), t367;
  }(), V = function() {
      function t376(e279) {
          a(this, t376), this.ctx = e279, this.w = e279.w;
      }
      return r(t376, [
          {
              key: "scaleSvgNode",
              value: function(t377, e280) {
                  var i203 = parseFloat(t377.getAttributeNS(null, "width")), a168 = parseFloat(t377.getAttributeNS(null, "height"));
                  t377.setAttributeNS(null, "width", i203 * e280), t377.setAttributeNS(null, "height", a168 * e280), t377.setAttributeNS(null, "viewBox", "0 0 " + i203 + " " + a168);
              }
          },
          {
              key: "fixSvgStringForIe11",
              value: function(t378) {
                  if (!p.isIE11()) return t378.replace(/&nbsp;/g, "&#160;");
                  var e281 = 0, i204 = t378.replace(/xmlns="http:\/\/www.w3.org\/2000\/svg"/g, function(t379) {
                      return 2 === ++e281 ? 'xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:svgjs="http://svgjs.dev"' : t379;
                  });
                  return i204 = (i204 = i204.replace(/xmlns:NS\d+=""/g, "")).replace(/NS\d+:(\w+:\w+=")/g, "$1");
              }
          },
          {
              key: "getSvgString",
              value: function(t380) {
                  var e282 = this.w.globals.dom.Paper.svg();
                  if (1 !== t380) {
                      var i205 = this.w.globals.dom.Paper.node.cloneNode(!0);
                      this.scaleSvgNode(i205, t380), e282 = (new XMLSerializer).serializeToString(i205);
                  }
                  return this.fixSvgStringForIe11(e282);
              }
          },
          {
              key: "cleanup",
              value: function() {
                  var t381 = this.w, e283 = t381.globals.dom.baseEl.getElementsByClassName("apexcharts-xcrosshairs"), i206 = t381.globals.dom.baseEl.getElementsByClassName("apexcharts-ycrosshairs"), a169 = t381.globals.dom.baseEl.querySelectorAll(".apexcharts-zoom-rect, .apexcharts-selection-rect");
                  Array.prototype.forEach.call(a169, function(t382) {
                      t382.setAttribute("width", 0);
                  }), e283 && e283[0] && (e283[0].setAttribute("x", -500), e283[0].setAttribute("x1", -500), e283[0].setAttribute("x2", -500)), i206 && i206[0] && (i206[0].setAttribute("y", -100), i206[0].setAttribute("y1", -100), i206[0].setAttribute("y2", -100));
              }
          },
          {
              key: "svgUrl",
              value: function() {
                  this.cleanup();
                  var t383 = this.getSvgString(), e284 = new Blob([
                      t383
                  ], {
                      type: "image/svg+xml;charset=utf-8"
                  });
                  return URL.createObjectURL(e284);
              }
          },
          {
              key: "dataURI",
              value: function(t384) {
                  var e285 = this;
                  return new Promise(function(i207) {
                      var a170 = e285.w, s124 = t384 ? t384.scale || t384.width / a170.globals.svgWidth : 1;
                      e285.cleanup();
                      var r107 = document.createElement("canvas");
                      r107.width = a170.globals.svgWidth * s124, r107.height = parseInt(a170.globals.dom.elWrap.style.height, 10) * s124;
                      var o92 = "transparent" === a170.config.chart.background ? "#fff" : a170.config.chart.background, n82 = r107.getContext("2d");
                      n82.fillStyle = o92, n82.fillRect(0, 0, r107.width * s124, r107.height * s124);
                      var l66 = e285.getSvgString(s124);
                      if (window.canvg && p.isIE11()) {
                          var h58 = window.canvg.Canvg.fromString(n82, l66, {
                              ignoreClear: !0,
                              ignoreDimensions: !0
                          });
                          h58.start();
                          var c51 = r107.msToBlob();
                          h58.stop(), i207({
                              blob: c51
                          });
                      } else {
                          var d46 = "data:image/svg+xml," + encodeURIComponent(l66), g39 = new Image;
                          g39.crossOrigin = "anonymous", g39.onload = function() {
                              if (n82.drawImage(g39, 0, 0), r107.msToBlob) {
                                  var t385 = r107.msToBlob();
                                  i207({
                                      blob: t385
                                  });
                              } else {
                                  var e286 = r107.toDataURL("image/png");
                                  i207({
                                      imgURI: e286
                                  });
                              }
                          }, g39.src = d46;
                      }
                  });
              }
          },
          {
              key: "exportToSVG",
              value: function() {
                  this.triggerDownload(this.svgUrl(), this.w.config.chart.toolbar.export.svg.filename, ".svg");
              }
          },
          {
              key: "exportToPng",
              value: function() {
                  var t386 = this;
                  this.dataURI().then(function(e287) {
                      var i208 = e287.imgURI, a171 = e287.blob;
                      a171 ? navigator.msSaveOrOpenBlob(a171, t386.w.globals.chartID + ".png") : t386.triggerDownload(i208, t386.w.config.chart.toolbar.export.png.filename, ".png");
                  });
              }
          },
          {
              key: "exportToCSV",
              value: function(t387) {
                  var e288 = this, i209 = t387.series, a172 = t387.columnDelimiter, s125 = t387.lineDelimiter, r108 = void 0 === s125 ? "\n" : s125, o93 = this.w, n83 = [], l67 = [], h59 = "", c52 = new O(this.ctx), d47 = new B(this.ctx), g40 = function(t388) {
                      var i210 = "";
                      if (o93.globals.axisCharts) {
                          if ("category" === o93.config.xaxis.type || o93.config.xaxis.convertedCatToNumeric) {
                              if (o93.globals.isBarHorizontal) {
                                  var s126 = o93.globals.yLabelFormatters[0], r109 = new z(e288.ctx).getActiveConfigSeriesIndex();
                                  i210 = s126(o93.globals.labels[t388], {
                                      seriesIndex: r109,
                                      dataPointIndex: t388,
                                      w: o93
                                  });
                              } else i210 = d47.getLabel(o93.globals.labels, o93.globals.timescaleLabels, 0, t388).text;
                          }
                          "datetime" === o93.config.xaxis.type && (o93.config.xaxis.categories.length ? i210 = o93.config.xaxis.categories[t388] : o93.config.labels.length && (i210 = o93.config.labels[t388]));
                      } else i210 = o93.config.labels[t388];
                      return Array.isArray(i210) && (i210 = i210.join(" ")), p.isNumber(i210) ? i210 : i210.split(a172).join("");
                  };
                  n83.push(o93.config.chart.toolbar.export.csv.headerCategory), i209.map(function(t389, e289) {
                      var i211 = t389.name ? t389.name : "series-".concat(e289);
                      o93.globals.axisCharts && n83.push(i211.split(a172).join("") ? i211.split(a172).join("") : "series-".concat(e289));
                  }), o93.globals.axisCharts || (n83.push(o93.config.chart.toolbar.export.csv.headerValue), l67.push(n83.join(a172))), i209.map(function(t390, e290) {
                      o93.globals.axisCharts ? (function(t391, e291) {
                          if (n83.length && 0 === e291 && l67.push(n83.join(a172)), t391.data && t391.data.length) for(var s127 = 0; s127 < t391.data.length; s127++){
                              n83 = [];
                              var r110 = g40(s127);
                              if (r110 || (c52.isFormatXY() ? r110 = i209[e291].data[s127].x : c52.isFormat2DArray() && (r110 = i209[e291].data[s127] ? i209[e291].data[s127][0] : "")), 0 === e291) {
                                  n83.push((d48 = r110, "datetime" === o93.config.xaxis.type && String(d48).length >= 10 ? o93.config.chart.toolbar.export.csv.dateFormatter(r110) : p.isNumber(r110) ? r110 : r110.split(a172).join("")));
                                  for(var h60 = 0; h60 < o93.globals.series.length; h60++)n83.push(o93.globals.series[h60][s127]);
                              }
                              ("candlestick" === o93.config.chart.type || t391.type && "candlestick" === t391.type) && (n83.pop(), n83.push(o93.globals.seriesCandleO[e291][s127]), n83.push(o93.globals.seriesCandleH[e291][s127]), n83.push(o93.globals.seriesCandleL[e291][s127]), n83.push(o93.globals.seriesCandleC[e291][s127])), ("boxPlot" === o93.config.chart.type || t391.type && "boxPlot" === t391.type) && (n83.pop(), n83.push(o93.globals.seriesCandleO[e291][s127]), n83.push(o93.globals.seriesCandleH[e291][s127]), n83.push(o93.globals.seriesCandleM[e291][s127]), n83.push(o93.globals.seriesCandleL[e291][s127]), n83.push(o93.globals.seriesCandleC[e291][s127])), "rangeBar" === o93.config.chart.type && (n83.pop(), n83.push(o93.globals.seriesRangeStart[e291][s127]), n83.push(o93.globals.seriesRangeEnd[e291][s127])), n83.length && l67.push(n83.join(a172));
                          }
                          var d48;
                      })(t390, e290) : ((n83 = []).push(o93.globals.labels[e290].split(a172).join("")), n83.push(o93.globals.series[e290]), l67.push(n83.join(a172)));
                  }), h59 += l67.join(r108), this.triggerDownload("data:text/csv; charset=utf-8," + encodeURIComponent("\ufeff" + h59), o93.config.chart.toolbar.export.csv.filename, ".csv");
              }
          },
          {
              key: "triggerDownload",
              value: function(t392, e292, i212) {
                  var a173 = document.createElement("a");
                  a173.href = t392, a173.download = (e292 || this.w.globals.chartID) + i212, document.body.appendChild(a173), a173.click(), document.body.removeChild(a173);
              }
          }
      ]), t376;
  }(), G = function() {
      function t393(e293) {
          a(this, t393), this.ctx = e293, this.w = e293.w;
          var i213 = this.w;
          this.axesUtils = new B(e293), this.xaxisLabels = i213.globals.labels.slice(), i213.globals.timescaleLabels.length > 0 && !i213.globals.isBarHorizontal && (this.xaxisLabels = i213.globals.timescaleLabels.slice()), i213.config.xaxis.overwriteCategories && (this.xaxisLabels = i213.config.xaxis.overwriteCategories), this.drawnLabels = [], this.drawnLabelsRects = [], "top" === i213.config.xaxis.position ? this.offY = 0 : this.offY = i213.globals.gridHeight + 1, this.offY = this.offY + i213.config.xaxis.axisBorder.offsetY, this.isCategoryBarHorizontal = "bar" === i213.config.chart.type && i213.config.plotOptions.bar.horizontal, this.xaxisFontSize = i213.config.xaxis.labels.style.fontSize, this.xaxisFontFamily = i213.config.xaxis.labels.style.fontFamily, this.xaxisForeColors = i213.config.xaxis.labels.style.colors, this.xaxisBorderWidth = i213.config.xaxis.axisBorder.width, this.isCategoryBarHorizontal && (this.xaxisBorderWidth = i213.config.yaxis[0].axisBorder.width.toString()), this.xaxisBorderWidth.indexOf("%") > -1 ? this.xaxisBorderWidth = i213.globals.gridWidth * parseInt(this.xaxisBorderWidth, 10) / 100 : this.xaxisBorderWidth = parseInt(this.xaxisBorderWidth, 10), this.xaxisBorderHeight = i213.config.xaxis.axisBorder.height, this.yaxis = i213.config.yaxis[0];
      }
      return r(t393, [
          {
              key: "drawXaxis",
              value: function() {
                  var t394, e294 = this, i214 = this.w, a174 = new b(this.ctx), s128 = a174.group({
                      class: "apexcharts-xaxis",
                      transform: "translate(".concat(i214.config.xaxis.offsetX, ", ").concat(i214.config.xaxis.offsetY, ")")
                  }), r111 = a174.group({
                      class: "apexcharts-xaxis-texts-g",
                      transform: "translate(".concat(i214.globals.translateXAxisX, ", ").concat(i214.globals.translateXAxisY, ")")
                  });
                  s128.add(r111);
                  for(var o94 = i214.globals.padHorizontal, n84 = [], l68 = 0; l68 < this.xaxisLabels.length; l68++)n84.push(this.xaxisLabels[l68]);
                  var h61 = n84.length;
                  if (i214.globals.isXNumeric) {
                      var c53 = h61 > 1 ? h61 - 1 : h61;
                      t394 = i214.globals.gridWidth / c53, o94 = o94 + t394 / 2 + i214.config.xaxis.labels.offsetX;
                  } else t394 = i214.globals.gridWidth / n84.length, o94 = o94 + t394 + i214.config.xaxis.labels.offsetX;
                  for(var d49 = function(s129) {
                      var l69 = o94 - t394 / 2 + i214.config.xaxis.labels.offsetX;
                      0 === s129 && 1 === h61 && t394 / 2 === o94 && 1 === i214.globals.dataPoints && (l69 = i214.globals.gridWidth / 2);
                      var c54 = e294.axesUtils.getLabel(n84, i214.globals.timescaleLabels, l69, s129, e294.drawnLabels, e294.xaxisFontSize), d50 = 28;
                      i214.globals.rotateXLabels && (d50 = 22);
                      if ((c54 = void 0 !== i214.config.xaxis.tickAmount && "dataPoints" !== i214.config.xaxis.tickAmount && "datetime" !== i214.config.xaxis.type ? e294.axesUtils.checkLabelBasedOnTickamount(s129, c54, h61) : e294.axesUtils.checkForOverflowingLabels(s129, c54, h61, e294.drawnLabels, e294.drawnLabelsRects)).text && i214.globals.xaxisLabelsCount++, i214.config.xaxis.labels.show) {
                          var g42 = a174.drawText({
                              x: c54.x,
                              y: e294.offY + i214.config.xaxis.labels.offsetY + d50 - ("top" === i214.config.xaxis.position ? i214.globals.xAxisHeight + i214.config.xaxis.axisTicks.height - 2 : 0),
                              text: c54.text,
                              textAnchor: "middle",
                              fontWeight: c54.isBold ? 600 : i214.config.xaxis.labels.style.fontWeight,
                              fontSize: e294.xaxisFontSize,
                              fontFamily: e294.xaxisFontFamily,
                              foreColor: Array.isArray(e294.xaxisForeColors) ? i214.config.xaxis.convertedCatToNumeric ? e294.xaxisForeColors[i214.globals.minX + s129 - 1] : e294.xaxisForeColors[s129] : e294.xaxisForeColors,
                              isPlainText: !1,
                              cssClass: "apexcharts-xaxis-label " + i214.config.xaxis.labels.style.cssClass
                          });
                          r111.add(g42);
                          var u35 = document.createElementNS(i214.globals.SVGNS, "title");
                          u35.textContent = Array.isArray(c54.text) ? c54.text.join(" ") : c54.text, g42.node.appendChild(u35), "" !== c54.text && (e294.drawnLabels.push(c54.text), e294.drawnLabelsRects.push(c54));
                      }
                      o94 += t394;
                  }, g41 = 0; g41 <= h61 - 1; g41++)d49(g41);
                  if (void 0 !== i214.config.xaxis.title.text) {
                      var u34 = a174.group({
                          class: "apexcharts-xaxis-title"
                      }), p24 = a174.drawText({
                          x: i214.globals.gridWidth / 2 + i214.config.xaxis.title.offsetX,
                          y: this.offY + parseFloat(this.xaxisFontSize) + i214.globals.xAxisLabelsHeight + i214.config.xaxis.title.offsetY,
                          text: i214.config.xaxis.title.text,
                          textAnchor: "middle",
                          fontSize: i214.config.xaxis.title.style.fontSize,
                          fontFamily: i214.config.xaxis.title.style.fontFamily,
                          fontWeight: i214.config.xaxis.title.style.fontWeight,
                          foreColor: i214.config.xaxis.title.style.color,
                          cssClass: "apexcharts-xaxis-title-text " + i214.config.xaxis.title.style.cssClass
                      });
                      u34.add(p24), s128.add(u34);
                  }
                  if (i214.config.xaxis.axisBorder.show) {
                      var f27 = i214.globals.barPadForNumericAxis, x20 = a174.drawLine(i214.globals.padHorizontal + i214.config.xaxis.axisBorder.offsetX - f27, this.offY, this.xaxisBorderWidth + f27, this.offY, i214.config.xaxis.axisBorder.color, 0, this.xaxisBorderHeight);
                      s128.add(x20);
                  }
                  return s128;
              }
          },
          {
              key: "drawXaxisInversed",
              value: function(t395) {
                  var e295, i215, a175 = this, s130 = this.w, r112 = new b(this.ctx), o95 = s130.config.yaxis[0].opposite ? s130.globals.translateYAxisX[t395] : 0, n85 = r112.group({
                      class: "apexcharts-yaxis apexcharts-xaxis-inversed",
                      rel: t395
                  }), l70 = r112.group({
                      class: "apexcharts-yaxis-texts-g apexcharts-xaxis-inversed-texts-g",
                      transform: "translate(" + o95 + ", 0)"
                  });
                  n85.add(l70);
                  var h62 = [];
                  if (s130.config.yaxis[t395].show) for(var c55 = 0; c55 < this.xaxisLabels.length; c55++)h62.push(this.xaxisLabels[c55]);
                  e295 = s130.globals.gridHeight / h62.length, i215 = -e295 / 2.2;
                  var d51 = s130.globals.yLabelFormatters[0], g43 = s130.config.yaxis[0].labels;
                  if (g43.show) for(var u36 = function(o96) {
                      var n86 = void 0 === h62[o96] ? "" : h62[o96];
                      n86 = d51(n86, {
                          seriesIndex: t395,
                          dataPointIndex: o96,
                          w: s130
                      });
                      var c56 = a175.axesUtils.getYAxisForeColor(g43.style.colors, t395), u37 = 0;
                      Array.isArray(n86) && (u37 = n86.length / 2 * parseInt(g43.style.fontSize, 10));
                      var p26 = r112.drawText({
                          x: g43.offsetX - 15,
                          y: i215 + e295 + g43.offsetY - u37,
                          text: n86,
                          textAnchor: a175.yaxis.opposite ? "start" : "end",
                          foreColor: Array.isArray(c56) ? c56[o96] : c56,
                          fontSize: g43.style.fontSize,
                          fontFamily: g43.style.fontFamily,
                          fontWeight: g43.style.fontWeight,
                          isPlainText: !1,
                          cssClass: "apexcharts-yaxis-label " + g43.style.cssClass
                      });
                      l70.add(p26);
                      var f29 = document.createElementNS(s130.globals.SVGNS, "title");
                      if (f29.textContent = Array.isArray(n86) ? n86.join(" ") : n86, p26.node.appendChild(f29), 0 !== s130.config.yaxis[t395].labels.rotate) {
                          var x22 = r112.rotateAroundCenter(p26.node);
                          p26.node.setAttribute("transform", "rotate(".concat(s130.config.yaxis[t395].labels.rotate, " 0 ").concat(x22.y, ")"));
                      }
                      i215 += e295;
                  }, p25 = 0; p25 <= h62.length - 1; p25++)u36(p25);
                  if (void 0 !== s130.config.yaxis[0].title.text) {
                      var f28 = r112.group({
                          class: "apexcharts-yaxis-title apexcharts-xaxis-title-inversed",
                          transform: "translate(" + o95 + ", 0)"
                      }), x21 = r112.drawText({
                          x: 0,
                          y: s130.globals.gridHeight / 2,
                          text: s130.config.yaxis[0].title.text,
                          textAnchor: "middle",
                          foreColor: s130.config.yaxis[0].title.style.color,
                          fontSize: s130.config.yaxis[0].title.style.fontSize,
                          fontWeight: s130.config.yaxis[0].title.style.fontWeight,
                          fontFamily: s130.config.yaxis[0].title.style.fontFamily,
                          cssClass: "apexcharts-yaxis-title-text " + s130.config.yaxis[0].title.style.cssClass
                      });
                      f28.add(x21), n85.add(f28);
                  }
                  var v20 = 0;
                  this.isCategoryBarHorizontal && s130.config.yaxis[0].opposite && (v20 = s130.globals.gridWidth);
                  var m16 = s130.config.xaxis.axisBorder;
                  if (m16.show) {
                      var y11 = r112.drawLine(s130.globals.padHorizontal + m16.offsetX + v20, 1 + m16.offsetY, s130.globals.padHorizontal + m16.offsetX + v20, s130.globals.gridHeight + m16.offsetY, m16.color, 0);
                      n85.add(y11);
                  }
                  return s130.config.yaxis[0].axisTicks.show && this.axesUtils.drawYAxisTicks(v20, h62.length, s130.config.yaxis[0].axisBorder, s130.config.yaxis[0].axisTicks, 0, e295, n85), n85;
              }
          },
          {
              key: "drawXaxisTicks",
              value: function(t396, e296) {
                  var i216 = this.w, a176 = t396;
                  if (!(t396 < 0 || t396 - 2 > i216.globals.gridWidth)) {
                      var s131 = this.offY + i216.config.xaxis.axisTicks.offsetY, r113 = s131 + i216.config.xaxis.axisTicks.height;
                      if ("top" === i216.config.xaxis.position && (r113 = s131 - i216.config.xaxis.axisTicks.height), i216.config.xaxis.axisTicks.show) {
                          var o97 = new b(this.ctx).drawLine(t396 + i216.config.xaxis.axisTicks.offsetX, s131 + i216.config.xaxis.offsetY, a176 + i216.config.xaxis.axisTicks.offsetX, r113 + i216.config.xaxis.offsetY, i216.config.xaxis.axisTicks.color);
                          e296.add(o97), o97.node.classList.add("apexcharts-xaxis-tick");
                      }
                  }
              }
          },
          {
              key: "getXAxisTicksPositions",
              value: function() {
                  var t397 = this.w, e297 = [], i217 = this.xaxisLabels.length, a177 = t397.globals.padHorizontal;
                  if (t397.globals.timescaleLabels.length > 0) for(var s132 = 0; s132 < i217; s132++)a177 = this.xaxisLabels[s132].position, e297.push(a177);
                  else for(var r114 = i217, o98 = 0; o98 < r114; o98++){
                      var n87 = r114;
                      t397.globals.isXNumeric && "bar" !== t397.config.chart.type && (n87 -= 1), a177 += t397.globals.gridWidth / n87, e297.push(a177);
                  }
                  return e297;
              }
          },
          {
              key: "xAxisLabelCorrections",
              value: function() {
                  var t398 = this.w, e298 = new b(this.ctx), i218 = t398.globals.dom.baseEl.querySelector(".apexcharts-xaxis-texts-g"), a178 = t398.globals.dom.baseEl.querySelectorAll(".apexcharts-xaxis-texts-g text"), s133 = t398.globals.dom.baseEl.querySelectorAll(".apexcharts-yaxis-inversed text"), r115 = t398.globals.dom.baseEl.querySelectorAll(".apexcharts-xaxis-inversed-texts-g text tspan");
                  if (t398.globals.rotateXLabels || t398.config.xaxis.labels.rotateAlways) for(var o99 = 0; o99 < a178.length; o99++){
                      var n88 = e298.rotateAroundCenter(a178[o99]);
                      n88.y = n88.y - 1, n88.x = n88.x + 1, a178[o99].setAttribute("transform", "rotate(".concat(t398.config.xaxis.labels.rotate, " ").concat(n88.x, " ").concat(n88.y, ")")), a178[o99].setAttribute("text-anchor", "end");
                      i218.setAttribute("transform", "translate(0, ".concat(-10, ")"));
                      var l71 = a178[o99].childNodes;
                      t398.config.xaxis.labels.trim && Array.prototype.forEach.call(l71, function(i219) {
                          e298.placeTextWithEllipsis(i219, i219.textContent, t398.globals.xAxisLabelsHeight - ("bottom" === t398.config.legend.position ? 20 : 10));
                      });
                  }
                  else !function() {
                      for(var i220 = t398.globals.gridWidth / (t398.globals.labels.length + 1), s134 = 0; s134 < a178.length; s134++){
                          var r116 = a178[s134].childNodes;
                          t398.config.xaxis.labels.trim && "datetime" !== t398.config.xaxis.type && Array.prototype.forEach.call(r116, function(t399) {
                              e298.placeTextWithEllipsis(t399, t399.textContent, i220);
                          });
                      }
                  }();
                  if (s133.length > 0) {
                      var h63 = s133[s133.length - 1].getBBox(), c57 = s133[0].getBBox();
                      h63.x < -20 && s133[s133.length - 1].parentNode.removeChild(s133[s133.length - 1]), c57.x + c57.width > t398.globals.gridWidth && !t398.globals.isBarHorizontal && s133[0].parentNode.removeChild(s133[0]);
                      for(var d52 = 0; d52 < r115.length; d52++)e298.placeTextWithEllipsis(r115[d52], r115[d52].textContent, t398.config.yaxis[0].labels.maxWidth - 2 * parseFloat(t398.config.yaxis[0].title.style.fontSize) - 20);
                  }
              }
          }
      ]), t393;
  }(), _ = function() {
      function t400(e299) {
          a(this, t400), this.ctx = e299, this.w = e299.w;
          var i221 = this.w;
          this.xaxisLabels = i221.globals.labels.slice(), this.axesUtils = new B(e299), this.isRangeBar = i221.globals.seriesRangeBar.length, i221.globals.timescaleLabels.length > 0 && (this.xaxisLabels = i221.globals.timescaleLabels.slice());
      }
      return r(t400, [
          {
              key: "drawGridArea",
              value: function() {
                  var t401 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null, e300 = this.w, i222 = new b(this.ctx);
                  null === t401 && (t401 = i222.group({
                      class: "apexcharts-grid"
                  }));
                  var a179 = i222.drawLine(e300.globals.padHorizontal, 1, e300.globals.padHorizontal, e300.globals.gridHeight, "transparent"), s135 = i222.drawLine(e300.globals.padHorizontal, e300.globals.gridHeight, e300.globals.gridWidth, e300.globals.gridHeight, "transparent");
                  return t401.add(s135), t401.add(a179), t401;
              }
          },
          {
              key: "drawGrid",
              value: function() {
                  var t402 = null;
                  return this.w.globals.axisCharts && (t402 = this.renderGrid(), this.drawGridArea(t402.el)), t402;
              }
          },
          {
              key: "createGridMask",
              value: function() {
                  var t403 = this.w, e301 = t403.globals, i223 = new b(this.ctx), a180 = Array.isArray(t403.config.stroke.width) ? 0 : t403.config.stroke.width;
                  if (Array.isArray(t403.config.stroke.width)) {
                      var s136 = 0;
                      t403.config.stroke.width.forEach(function(t404) {
                          s136 = Math.max(s136, t404);
                      }), a180 = s136;
                  }
                  e301.dom.elGridRectMask = document.createElementNS(e301.SVGNS, "clipPath"), e301.dom.elGridRectMask.setAttribute("id", "gridRectMask".concat(e301.cuid)), e301.dom.elGridRectMarkerMask = document.createElementNS(e301.SVGNS, "clipPath"), e301.dom.elGridRectMarkerMask.setAttribute("id", "gridRectMarkerMask".concat(e301.cuid)), e301.dom.elForecastMask = document.createElementNS(e301.SVGNS, "clipPath"), e301.dom.elForecastMask.setAttribute("id", "forecastMask".concat(e301.cuid)), e301.dom.elNonForecastMask = document.createElementNS(e301.SVGNS, "clipPath"), e301.dom.elNonForecastMask.setAttribute("id", "nonForecastMask".concat(e301.cuid));
                  var r117 = t403.config.chart.type, o100 = 0, n89 = 0;
                  ("bar" === r117 || "rangeBar" === r117 || "candlestick" === r117 || "boxPlot" === r117 || t403.globals.comboBarCount > 0) && t403.globals.isXNumeric && !t403.globals.isBarHorizontal && (o100 = t403.config.grid.padding.left, n89 = t403.config.grid.padding.right, e301.barPadForNumericAxis > o100 && (o100 = e301.barPadForNumericAxis, n89 = e301.barPadForNumericAxis)), e301.dom.elGridRect = i223.drawRect(-a180 / 2 - o100 - 2, -a180 / 2, e301.gridWidth + a180 + n89 + o100 + 4, e301.gridHeight + a180, 0, "#fff"), new y(this).getLargestMarkerSize();
                  var l72 = t403.globals.markers.largestSize + 1;
                  e301.dom.elGridRectMarker = i223.drawRect(2 * -l72, 2 * -l72, e301.gridWidth + 4 * l72, e301.gridHeight + 4 * l72, 0, "#fff"), e301.dom.elGridRectMask.appendChild(e301.dom.elGridRect.node), e301.dom.elGridRectMarkerMask.appendChild(e301.dom.elGridRectMarker.node);
                  var h64 = e301.dom.baseEl.querySelector("defs");
                  h64.appendChild(e301.dom.elGridRectMask), h64.appendChild(e301.dom.elForecastMask), h64.appendChild(e301.dom.elNonForecastMask), h64.appendChild(e301.dom.elGridRectMarkerMask);
              }
          },
          {
              key: "_drawGridLines",
              value: function(t405) {
                  var e302 = t405.i, i224 = t405.x1, a181 = t405.y1, s137 = t405.x2, r118 = t405.y2, o101 = t405.xCount, n90 = t405.parent, l73 = this.w;
                  0 === e302 && l73.globals.skipFirstTimelinelabel || e302 === o101 - 1 && l73.globals.skipLastTimelinelabel && !l73.config.xaxis.labels.formatter || "radar" === l73.config.chart.type || (l73.config.grid.xaxis.lines.show && this._drawGridLine({
                      x1: i224,
                      y1: a181,
                      x2: s137,
                      y2: r118,
                      parent: n90
                  }), new G(this.ctx).drawXaxisTicks(i224, this.elg));
              }
          },
          {
              key: "_drawGridLine",
              value: function(t406) {
                  var e303 = t406.x1, i225 = t406.y1, a182 = t406.x2, s138 = t406.y2, r119 = t406.parent, o102 = this.w, n91 = r119.node.classList.contains("apexcharts-gridlines-horizontal"), l74 = o102.config.grid.strokeDashArray, h65 = o102.globals.barPadForNumericAxis, c58 = new b(this).drawLine(e303 - (n91 ? h65 : 0), i225, a182 + (n91 ? h65 : 0), s138, o102.config.grid.borderColor, l74);
                  c58.node.classList.add("apexcharts-gridline"), r119.add(c58);
              }
          },
          {
              key: "_drawGridBandRect",
              value: function(t407) {
                  var e = t407.c, i226 = t407.x1, a183 = t407.y1, s139 = t407.x2, r120 = t407.y2, o103 = t407.type, n92 = this.w, l75 = new b(this.ctx), h66 = n92.globals.barPadForNumericAxis;
                  if ("column" !== o103 || "datetime" !== n92.config.xaxis.type) {
                      var c59 = n92.config.grid[o103].colors[e], d53 = l75.drawRect(i226 - ("row" === o103 ? h66 : 0), a183, s139 + ("row" === o103 ? 2 * h66 : 0), r120, 0, c59, n92.config.grid[o103].opacity);
                      this.elg.add(d53), d53.attr("clip-path", "url(#gridRectMask".concat(n92.globals.cuid, ")")), d53.node.classList.add("apexcharts-grid-".concat(o103));
                  }
              }
          },
          {
              key: "_drawXYLines",
              value: function(t408) {
                  var e304 = this, i227 = t408.xCount, a184 = t408.tickAmount, s140 = this.w;
                  if (s140.config.grid.xaxis.lines.show || s140.config.xaxis.axisTicks.show) {
                      var r121, o104 = s140.globals.padHorizontal, n93 = s140.globals.gridHeight;
                      s140.globals.timescaleLabels.length ? (function(t409) {
                          for(var a185 = t409.xC, s141 = t409.x1, r123 = t409.y1, o106 = t409.x2, n95 = t409.y2, l77 = 0; l77 < a185; l77++)s141 = e304.xaxisLabels[l77].position, o106 = e304.xaxisLabels[l77].position, e304._drawGridLines({
                              i: l77,
                              x1: s141,
                              y1: r123,
                              x2: o106,
                              y2: n95,
                              xCount: i227,
                              parent: e304.elgridLinesV
                          });
                      })({
                          xC: i227,
                          x1: o104,
                          y1: 0,
                          x2: r121,
                          y2: n93
                      }) : (s140.globals.isXNumeric && (i227 = s140.globals.xAxisScale.result.length), s140.config.xaxis.convertedCatToNumeric && (i227 = s140.globals.xaxisLabelsCount), (function(t410) {
                          var a186 = t410.xC, r124 = t410.x1, o107 = t410.y1, n96 = t410.x2, l78 = t410.y2;
                          if (void 0 !== s140.config.xaxis.tickAmount && "dataPoints" !== s140.config.xaxis.tickAmount) s140.globals.dom.baseEl.querySelectorAll(".apexcharts-text.apexcharts-xaxis-label tspan:not(:empty)").forEach(function(t411, a187) {
                              var s142 = t411.getBBox();
                              e304._drawGridLines({
                                  i: a187,
                                  x1: s142.x + s142.width / 2,
                                  y1: o107,
                                  x2: s142.x + s142.width / 2,
                                  y2: l78,
                                  xCount: i227,
                                  parent: e304.elgridLinesV
                              });
                          });
                          else for(var h68 = 0; h68 < a186 + (s140.globals.isXNumeric ? 0 : 1); h68++)0 === h68 && 1 === a186 && 1 === s140.globals.dataPoints && (n96 = r124 = s140.globals.gridWidth / 2), e304._drawGridLines({
                              i: h68,
                              x1: r124,
                              y1: o107,
                              x2: n96,
                              y2: l78,
                              xCount: i227,
                              parent: e304.elgridLinesV
                          }), n96 = r124 += s140.globals.gridWidth / (s140.globals.isXNumeric ? a186 - 1 : a186);
                      })({
                          xC: i227,
                          x1: o104,
                          y1: 0,
                          x2: r121,
                          y2: n93
                      }));
                  }
                  if (s140.config.grid.yaxis.lines.show) {
                      var l76 = 0, h67 = 0, c60 = s140.globals.gridWidth, d54 = a184 + 1;
                      this.isRangeBar && (d54 = s140.globals.labels.length);
                      for(var g44 = 0; g44 < d54 + (this.isRangeBar ? 1 : 0); g44++)this._drawGridLine({
                          x1: 0,
                          y1: l76,
                          x2: c60,
                          y2: h67,
                          parent: this.elgridLinesH
                      }), h67 = l76 += s140.globals.gridHeight / (this.isRangeBar ? d54 : a184);
                  }
              }
          },
          {
              key: "_drawInvertedXYLines",
              value: function(t412) {
                  var e305 = t412.xCount, i228 = this.w;
                  if (i228.config.grid.xaxis.lines.show || i228.config.xaxis.axisTicks.show) for(var a188, s143 = i228.globals.padHorizontal, r125 = i228.globals.gridHeight, o108 = 0; o108 < e305 + 1; o108++)i228.config.grid.xaxis.lines.show && this._drawGridLine({
                      x1: s143,
                      y1: 0,
                      x2: a188,
                      y2: r125,
                      parent: this.elgridLinesV
                  }), new G(this.ctx).drawXaxisTicks(s143, this.elg), a188 = s143 = s143 + i228.globals.gridWidth / e305 + 0.3;
                  if (i228.config.grid.yaxis.lines.show) for(var n97 = 0, l79 = 0, h69 = i228.globals.gridWidth, c61 = 0; c61 < i228.globals.dataPoints + 1; c61++)this._drawGridLine({
                      x1: 0,
                      y1: n97,
                      x2: h69,
                      y2: l79,
                      parent: this.elgridLinesH
                  }), l79 = n97 += i228.globals.gridHeight / i228.globals.dataPoints;
              }
          },
          {
              key: "renderGrid",
              value: function() {
                  var t413 = this.w, e306 = new b(this.ctx);
                  this.elg = e306.group({
                      class: "apexcharts-grid"
                  }), this.elgridLinesH = e306.group({
                      class: "apexcharts-gridlines-horizontal"
                  }), this.elgridLinesV = e306.group({
                      class: "apexcharts-gridlines-vertical"
                  }), this.elg.add(this.elgridLinesH), this.elg.add(this.elgridLinesV), t413.config.grid.show || (this.elgridLinesV.hide(), this.elgridLinesH.hide());
                  for(var i229, a189 = t413.globals.yAxisScale.length ? t413.globals.yAxisScale[0].result.length - 1 : 5, s144 = 0; s144 < t413.globals.series.length && (void 0 !== t413.globals.yAxisScale[s144] && (a189 = t413.globals.yAxisScale[s144].result.length - 1), !(a189 > 2)); s144++);
                  return !t413.globals.isBarHorizontal || this.isRangeBar ? (i229 = this.xaxisLabels.length, this.isRangeBar && (a189 = t413.globals.labels.length, t413.config.xaxis.tickAmount && t413.config.xaxis.labels.formatter && (i229 = t413.config.xaxis.tickAmount)), this._drawXYLines({
                      xCount: i229,
                      tickAmount: a189
                  })) : (i229 = a189, a189 = t413.globals.xTickAmount, this._drawInvertedXYLines({
                      xCount: i229,
                      tickAmount: a189
                  })), this.drawGridBands(i229, a189), {
                      el: this.elg,
                      xAxisTickWidth: t413.globals.gridWidth / i229
                  };
              }
          },
          {
              key: "drawGridBands",
              value: function(t414, e307) {
                  var i230 = this.w;
                  if (void 0 !== i230.config.grid.row.colors && i230.config.grid.row.colors.length > 0) for(var a190 = 0, s145 = i230.globals.gridHeight / e307, r126 = i230.globals.gridWidth, o109 = 0, n98 = 0; o109 < e307; o109++, n98++)n98 >= i230.config.grid.row.colors.length && (n98 = 0), this._drawGridBandRect({
                      c: n98,
                      x1: 0,
                      y1: a190,
                      x2: r126,
                      y2: s145,
                      type: "row"
                  }), a190 += i230.globals.gridHeight / e307;
                  if (void 0 !== i230.config.grid.column.colors && i230.config.grid.column.colors.length > 0) for(var l80 = i230.globals.isBarHorizontal || "category" !== i230.config.xaxis.type && !i230.config.xaxis.convertedCatToNumeric ? t414 : t414 - 1, h70 = i230.globals.padHorizontal, c62 = i230.globals.padHorizontal + i230.globals.gridWidth / l80, d55 = i230.globals.gridHeight, g45 = 0, u38 = 0; g45 < t414; g45++, u38++)u38 >= i230.config.grid.column.colors.length && (u38 = 0), this._drawGridBandRect({
                      c: u38,
                      x1: h70,
                      y1: 0,
                      x2: c62,
                      y2: d55,
                      type: "column"
                  }), h70 += i230.globals.gridWidth / l80;
              }
          }
      ]), t400;
  }(), j = function() {
      function t415(e308) {
          a(this, t415), this.ctx = e308, this.w = e308.w;
      }
      return r(t415, [
          {
              key: "niceScale",
              value: function(t416, e309) {
                  var i231 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 10, a191 = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : 0, s146 = arguments.length > 4 ? arguments[4] : void 0, r127 = this.w, o110 = Math.abs(e309 - t416);
                  if ("dataPoints" === (i231 = this._adjustTicksForSmallRange(i231, a191, o110)) && (i231 = r127.globals.dataPoints - 1), t416 === Number.MIN_VALUE && 0 === e309 || !p.isNumber(t416) && !p.isNumber(e309) || t416 === Number.MIN_VALUE && e309 === -Number.MAX_VALUE) {
                      t416 = 0, e309 = i231;
                      var n99 = this.linearScale(t416, e309, i231);
                      return n99;
                  }
                  t416 > e309 ? (console.warn("axis.min cannot be greater than axis.max"), e309 = t416 + 0.1) : t416 === e309 && (t416 = 0 === t416 ? 0 : t416 - 0.5, e309 = 0 === e309 ? 2 : e309 + 0.5);
                  var l81 = [];
                  o110 < 1 && s146 && ("candlestick" === r127.config.chart.type || "candlestick" === r127.config.series[a191].type || "boxPlot" === r127.config.chart.type || "boxPlot" === r127.config.series[a191].type || r127.globals.isRangeData) && (e309 *= 1.01);
                  var h71 = i231 + 1;
                  h71 < 2 ? h71 = 2 : h71 > 2 && (h71 -= 2);
                  var c63 = o110 / h71, d56 = Math.floor(p.log10(c63)), g46 = Math.pow(10, d56), u39 = Math.round(c63 / g46);
                  u39 < 1 && (u39 = 1);
                  var f30 = u39 * g46, x23 = f30 * Math.floor(t416 / f30), b11 = f30 * Math.ceil(e309 / f30), v21 = x23;
                  if (s146 && o110 > 2) {
                      for(; l81.push(v21), !((v21 += f30) > b11););
                      return {
                          result: l81,
                          niceMin: l81[0],
                          niceMax: l81[l81.length - 1]
                      };
                  }
                  var m17 = t416;
                  (l81 = []).push(m17);
                  for(var y12 = Math.abs(e309 - t416) / i231, w12 = 0; w12 <= i231; w12++)m17 += y12, l81.push(m17);
                  return l81[l81.length - 2] >= e309 && l81.pop(), {
                      result: l81,
                      niceMin: l81[0],
                      niceMax: l81[l81.length - 1]
                  };
              }
          },
          {
              key: "linearScale",
              value: function(t417, e310) {
                  var i232 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 10, a192 = arguments.length > 3 ? arguments[3] : void 0, s147 = Math.abs(e310 - t417);
                  "dataPoints" === (i232 = this._adjustTicksForSmallRange(i232, a192, s147)) && (i232 = this.w.globals.dataPoints - 1);
                  var r128 = s147 / i232;
                  i232 === Number.MAX_VALUE && (i232 = 10, r128 = 1);
                  for(var o111 = [], n100 = t417; i232 >= 0;)o111.push(n100), n100 += r128, i232 -= 1;
                  return {
                      result: o111,
                      niceMin: o111[0],
                      niceMax: o111[o111.length - 1]
                  };
              }
          },
          {
              key: "logarithmicScale",
              value: function(t418, e311, i233) {
                  for(var a193 = [], s148 = Math.ceil(Math.log(e311) / Math.log(i233)) + 1, r129 = 0; r129 < s148; r129++)a193.push(Math.pow(i233, r129));
                  return 0 === t418 && a193.unshift(t418), {
                      result: a193,
                      niceMin: a193[0],
                      niceMax: a193[a193.length - 1]
                  };
              }
          },
          {
              key: "_adjustTicksForSmallRange",
              value: function(t419, e312, i234) {
                  var a194 = t419;
                  if (void 0 !== e312 && this.w.config.yaxis[e312].labels.formatter && void 0 === this.w.config.yaxis[e312].tickAmount) {
                      var s149 = this.w.config.yaxis[e312].labels.formatter(1);
                      p.isNumber(Number(s149)) && !p.isFloat(s149) && (a194 = Math.ceil(i234));
                  }
                  return a194 < t419 ? a194 : t419;
              }
          },
          {
              key: "setYScaleForIndex",
              value: function(t420, e313, i235) {
                  var a195 = this.w.globals, s150 = this.w.config, r130 = a195.isBarHorizontal ? s150.xaxis : s150.yaxis[t420];
                  void 0 === a195.yAxisScale[t420] && (a195.yAxisScale[t420] = []);
                  var o112 = Math.abs(i235 - e313);
                  if (r130.logarithmic && o112 <= 5 && (a195.invalidLogScale = !0), r130.logarithmic && o112 > 5) a195.allSeriesCollapsed = !1, a195.yAxisScale[t420] = this.logarithmicScale(e313, i235, r130.logBase);
                  else if (i235 !== -Number.MAX_VALUE && p.isNumber(i235)) {
                      if (a195.allSeriesCollapsed = !1, void 0 === r130.min && void 0 === r130.max || r130.forceNiceScale) {
                          var n101 = void 0 === s150.yaxis[t420].max && void 0 === s150.yaxis[t420].min || s150.yaxis[t420].forceNiceScale;
                          a195.yAxisScale[t420] = this.niceScale(e313, i235, r130.tickAmount ? r130.tickAmount : o112 < 5 && o112 > 1 ? o112 + 1 : 5, t420, n101);
                      } else a195.yAxisScale[t420] = this.linearScale(e313, i235, r130.tickAmount, t420);
                  } else a195.yAxisScale[t420] = this.linearScale(0, 5, 5);
              }
          },
          {
              key: "setXScale",
              value: function(t421, e314) {
                  var i236 = this.w, a196 = i236.globals, s151 = i236.config.xaxis, r131 = Math.abs(e314 - t421);
                  return e314 !== -Number.MAX_VALUE && p.isNumber(e314) ? a196.xAxisScale = this.linearScale(t421, e314, s151.tickAmount ? s151.tickAmount : r131 < 5 && r131 > 1 ? r131 + 1 : 5, 0) : a196.xAxisScale = this.linearScale(0, 5, 5), a196.xAxisScale;
              }
          },
          {
              key: "setMultipleYScales",
              value: function() {
                  var t422 = this, e315 = this.w.globals, i237 = this.w.config, a197 = e315.minYArr.concat([]), s152 = e315.maxYArr.concat([]), r132 = [];
                  i237.yaxis.forEach(function(e316, o113) {
                      var n102 = o113;
                      i237.series.forEach(function(t423, i238) {
                          t423.name === e316.seriesName && (n102 = i238, o113 !== i238 ? r132.push({
                              index: i238,
                              similarIndex: o113,
                              alreadyExists: !0
                          }) : r132.push({
                              index: i238
                          }));
                      });
                      var l82 = a197[n102], h72 = s152[n102];
                      t422.setYScaleForIndex(o113, l82, h72);
                  }), this.sameScaleInMultipleAxes(a197, s152, r132);
              }
          },
          {
              key: "sameScaleInMultipleAxes",
              value: function(t424, e317, i239) {
                  var a198 = this, s153 = this.w.config, r133 = this.w.globals, o114 = [];
                  i239.forEach(function(t425) {
                      t425.alreadyExists && (void 0 === o114[t425.index] && (o114[t425.index] = []), o114[t425.index].push(t425.index), o114[t425.index].push(t425.similarIndex));
                  }), r133.yAxisSameScaleIndices = o114, o114.forEach(function(t426, e318) {
                      o114.forEach(function(i240, a199) {
                          var s154, r134;
                          e318 !== a199 && (s154 = t426, r134 = i240, s154.filter(function(t427) {
                              return -1 !== r134.indexOf(t427);
                          })).length > 0 && (o114[e318] = o114[e318].concat(o114[a199]));
                      });
                  });
                  var n103 = o114.map(function(t428) {
                      return t428.filter(function(e319, i241) {
                          return t428.indexOf(e319) === i241;
                      });
                  }).map(function(t429) {
                      return t429.sort();
                  });
                  o114 = o114.filter(function(t430) {
                      return !!t430;
                  });
                  var l83 = n103.slice(), h73 = l83.map(function(t431) {
                      return JSON.stringify(t431);
                  });
                  l83 = l83.filter(function(t432, e320) {
                      return h73.indexOf(JSON.stringify(t432)) === e320;
                  });
                  var c64 = [], d57 = [];
                  t424.forEach(function(t433, i242) {
                      l83.forEach(function(a200, s) {
                          a200.indexOf(i242) > -1 && (void 0 === c64[s] && (c64[s] = [], d57[s] = []), c64[s].push({
                              key: i242,
                              value: t433
                          }), d57[s].push({
                              key: i242,
                              value: e317[i242]
                          }));
                      });
                  });
                  var g47 = Array.apply(null, Array(l83.length)).map(Number.prototype.valueOf, Number.MIN_VALUE), u40 = Array.apply(null, Array(l83.length)).map(Number.prototype.valueOf, -Number.MAX_VALUE);
                  c64.forEach(function(t434, e) {
                      t434.forEach(function(t435, i) {
                          g47[e] = Math.min(t435.value, g47[e]);
                      });
                  }), d57.forEach(function(t436, e) {
                      t436.forEach(function(t437, i) {
                          u40[e] = Math.max(t437.value, u40[e]);
                      });
                  }), t424.forEach(function(t438, e321) {
                      d57.forEach(function(t439, i) {
                          var o115 = g47[i], n104 = u40[i];
                          s153.chart.stacked && (n104 = 0, t439.forEach(function(t440, e) {
                              t440.value !== -Number.MAX_VALUE && (n104 += t440.value), o115 !== Number.MIN_VALUE && (o115 += c64[i][e].value);
                          })), t439.forEach(function(i, l) {
                              t439[l].key === e321 && (void 0 !== s153.yaxis[e321].min && (o115 = "function" == typeof s153.yaxis[e321].min ? s153.yaxis[e321].min(r133.minY) : s153.yaxis[e321].min), void 0 !== s153.yaxis[e321].max && (n104 = "function" == typeof s153.yaxis[e321].max ? s153.yaxis[e321].max(r133.maxY) : s153.yaxis[e321].max), a198.setYScaleForIndex(e321, o115, n104));
                          });
                      });
                  });
              }
          },
          {
              key: "autoScaleY",
              value: function(t441, e322, i243) {
                  t441 || (t441 = this);
                  var a201 = t441.w;
                  if (a201.globals.isMultipleYAxis || a201.globals.collapsedSeries.length) return console.warn("autoScaleYaxis is not supported in a multi-yaxis chart."), e322;
                  var s155 = a201.globals.seriesX[0], r135 = a201.config.chart.stacked;
                  return e322.forEach(function(t442, o116) {
                      for(var n105 = 0, l84 = 0; l84 < s155.length; l84++)if (s155[l84] >= i243.xaxis.min) {
                          n105 = l84;
                          break;
                      }
                      var h74, c65, d58 = a201.globals.minYArr[o116], g48 = a201.globals.maxYArr[o116], u41 = a201.globals.stackedSeriesTotals;
                      a201.globals.series.forEach(function(o117, l) {
                          var p27 = o117[n105];
                          r135 ? (p27 = u41[n105], h74 = c65 = p27, u41.forEach(function(t443, e) {
                              s155[e] <= i243.xaxis.max && s155[e] >= i243.xaxis.min && (t443 > c65 && null !== t443 && (c65 = t443), o117[e] < h74 && null !== o117[e] && (h74 = o117[e]));
                          })) : (h74 = c65 = p27, o117.forEach(function(t444, e) {
                              if (s155[e] <= i243.xaxis.max && s155[e] >= i243.xaxis.min) {
                                  var r136 = t444, o118 = t444;
                                  a201.globals.series.forEach(function(i244, a) {
                                      null !== t444 && (r136 = Math.min(i244[e], r136), o118 = Math.max(i244[e], o118));
                                  }), o118 > c65 && null !== o118 && (c65 = o118), r136 < h74 && null !== r136 && (h74 = r136);
                              }
                          })), void 0 === h74 && void 0 === c65 && (h74 = d58, c65 = g48), (c65 *= c65 < 0 ? 0.9 : 1.1) < 0 && c65 < g48 && (c65 = g48), (h74 *= h74 < 0 ? 1.1 : 0.9) < 0 && h74 > d58 && (h74 = d58), e322.length > 1 ? (e322[l].min = void 0 === t442.min ? h74 : t442.min, e322[l].max = void 0 === t442.max ? c65 : t442.max) : (e322[0].min = void 0 === t442.min ? h74 : t442.min, e322[0].max = void 0 === t442.max ? c65 : t442.max);
                      });
                  }), e322;
              }
          }
      ]), t415;
  }(), U = function() {
      function t445(e323) {
          a(this, t445), this.ctx = e323, this.w = e323.w, this.scales = new j(e323);
      }
      return r(t445, [
          {
              key: "init",
              value: function() {
                  this.setYRange(), this.setXRange(), this.setZRange();
              }
          },
          {
              key: "getMinYMaxY",
              value: function(t446) {
                  var e324 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : Number.MAX_VALUE, i245 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : -Number.MAX_VALUE, a202 = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : null, s156 = this.w.config, r137 = this.w.globals, o119 = -Number.MAX_VALUE, n106 = Number.MIN_VALUE;
                  null === a202 && (a202 = t446 + 1);
                  var l85 = r137.series, h75 = l85, c66 = l85;
                  "candlestick" === s156.chart.type ? (h75 = r137.seriesCandleL, c66 = r137.seriesCandleH) : "boxPlot" === s156.chart.type ? (h75 = r137.seriesCandleO, c66 = r137.seriesCandleC) : r137.isRangeData && (h75 = r137.seriesRangeStart, c66 = r137.seriesRangeEnd);
                  for(var d59 = t446; d59 < a202; d59++){
                      r137.dataPoints = Math.max(r137.dataPoints, l85[d59].length), r137.categoryLabels.length && (r137.dataPoints = r137.categoryLabels.filter(function(t447) {
                          return void 0 !== t447;
                      }).length);
                      for(var g49 = 0; g49 < r137.series[d59].length; g49++){
                          var u42 = l85[d59][g49];
                          null !== u42 && p.isNumber(u42) ? (void 0 !== c66[d59][g49] && (o119 = Math.max(o119, c66[d59][g49]), e324 = Math.min(e324, c66[d59][g49])), void 0 !== h75[d59][g49] && (e324 = Math.min(e324, h75[d59][g49]), i245 = Math.max(i245, h75[d59][g49])), "candlestick" !== this.w.config.chart.type && "boxPlot" !== this.w.config.chart.type || (void 0 !== r137.seriesCandleC[d59][g49] && (o119 = Math.max(o119, r137.seriesCandleO[d59][g49]), o119 = Math.max(o119, r137.seriesCandleH[d59][g49]), o119 = Math.max(o119, r137.seriesCandleL[d59][g49]), o119 = Math.max(o119, r137.seriesCandleC[d59][g49]), "boxPlot" === this.w.config.chart.type && (o119 = Math.max(o119, r137.seriesCandleM[d59][g49]))), !s156.series[d59].type || "candlestick" === s156.series[d59].type && "boxPlot" === s156.series[d59].type || (o119 = Math.max(o119, r137.series[d59][g49]), e324 = Math.min(e324, r137.series[d59][g49])), i245 = o119), r137.seriesGoals[d59] && r137.seriesGoals[d59][g49] && Array.isArray(r137.seriesGoals[d59][g49]) && r137.seriesGoals[d59][g49].forEach(function(t448) {
                              n106 !== Number.MIN_VALUE && (n106 = Math.min(n106, t448.value), e324 = n106), o119 = Math.max(o119, t448.value), i245 = o119;
                          }), p.isFloat(u42) && (u42 = p.noExponents(u42), r137.yValueDecimal = Math.max(r137.yValueDecimal, u42.toString().split(".")[1].length)), n106 > h75[d59][g49] && h75[d59][g49] < 0 && (n106 = h75[d59][g49])) : r137.hasNullValues = !0;
                      }
                  }
                  return "rangeBar" === s156.chart.type && r137.seriesRangeStart.length && r137.isBarHorizontal && (n106 = e324), "bar" === s156.chart.type && (n106 < 0 && o119 < 0 && (o119 = 0), n106 === Number.MIN_VALUE && (n106 = 0)), {
                      minY: n106,
                      maxY: o119,
                      lowestY: e324,
                      highestY: i245
                  };
              }
          },
          {
              key: "setYRange",
              value: function() {
                  var t449 = this.w.globals, e325 = this.w.config;
                  t449.maxY = -Number.MAX_VALUE, t449.minY = Number.MIN_VALUE;
                  var i246 = Number.MAX_VALUE;
                  if (t449.isMultipleYAxis) for(var a203 = 0; a203 < t449.series.length; a203++){
                      var s157 = this.getMinYMaxY(a203, i246, null, a203 + 1);
                      t449.minYArr.push(s157.minY), t449.maxYArr.push(s157.maxY), i246 = s157.lowestY;
                  }
                  var r138 = this.getMinYMaxY(0, i246, null, t449.series.length);
                  if (t449.minY = r138.minY, t449.maxY = r138.maxY, i246 = r138.lowestY, e325.chart.stacked && this._setStackedMinMax(), ("line" === e325.chart.type || "area" === e325.chart.type || "candlestick" === e325.chart.type || "boxPlot" === e325.chart.type || "rangeBar" === e325.chart.type && !t449.isBarHorizontal) && t449.minY === Number.MIN_VALUE && i246 !== -Number.MAX_VALUE && i246 !== t449.maxY) {
                      var o120 = t449.maxY - i246;
                      (i246 >= 0 && i246 <= 10 || void 0 !== e325.yaxis[0].min || void 0 !== e325.yaxis[0].max) && (o120 = 0), t449.minY = i246 - 5 * o120 / 100, i246 > 0 && t449.minY < 0 && (t449.minY = 0), t449.maxY = t449.maxY + 5 * o120 / 100;
                  }
                  if (e325.yaxis.forEach(function(e326, i) {
                      void 0 !== e326.max && ("number" == typeof e326.max ? t449.maxYArr[i] = e326.max : "function" == typeof e326.max && (t449.maxYArr[i] = e326.max(t449.isMultipleYAxis ? t449.maxYArr[i] : t449.maxY)), t449.maxY = t449.maxYArr[i]), void 0 !== e326.min && ("number" == typeof e326.min ? t449.minYArr[i] = e326.min : "function" == typeof e326.min && (t449.minYArr[i] = e326.min(t449.isMultipleYAxis ? t449.minYArr[i] === Number.MIN_VALUE ? 0 : t449.minYArr[i] : t449.minY)), t449.minY = t449.minYArr[i]);
                  }), t449.isBarHorizontal) [
                      "min",
                      "max"
                  ].forEach(function(i247) {
                      void 0 !== e325.xaxis[i247] && "number" == typeof e325.xaxis[i247] && ("min" === i247 ? t449.minY = e325.xaxis[i247] : t449.maxY = e325.xaxis[i247]);
                  });
                  return t449.isMultipleYAxis ? (this.scales.setMultipleYScales(), t449.minY = i246, t449.yAxisScale.forEach(function(e327, i) {
                      t449.minYArr[i] = e327.niceMin, t449.maxYArr[i] = e327.niceMax;
                  })) : (this.scales.setYScaleForIndex(0, t449.minY, t449.maxY), t449.minY = t449.yAxisScale[0].niceMin, t449.maxY = t449.yAxisScale[0].niceMax, t449.minYArr[0] = t449.yAxisScale[0].niceMin, t449.maxYArr[0] = t449.yAxisScale[0].niceMax), {
                      minY: t449.minY,
                      maxY: t449.maxY,
                      minYArr: t449.minYArr,
                      maxYArr: t449.maxYArr,
                      yAxisScale: t449.yAxisScale
                  };
              }
          },
          {
              key: "setXRange",
              value: function() {
                  var t450 = this.w.globals, e328 = this.w.config, i248 = "numeric" === e328.xaxis.type || "datetime" === e328.xaxis.type || "category" === e328.xaxis.type && !t450.noLabelsProvided || t450.noLabelsProvided || t450.isXNumeric;
                  if (t450.isXNumeric && (function() {
                      for(var e329 = 0; e329 < t450.series.length; e329++)if (t450.labels[e329]) for(var i249 = 0; i249 < t450.labels[e329].length; i249++)null !== t450.labels[e329][i249] && p.isNumber(t450.labels[e329][i249]) && (t450.maxX = Math.max(t450.maxX, t450.labels[e329][i249]), t450.initialMaxX = Math.max(t450.maxX, t450.labels[e329][i249]), t450.minX = Math.min(t450.minX, t450.labels[e329][i249]), t450.initialMinX = Math.min(t450.minX, t450.labels[e329][i249]));
                  })(), t450.noLabelsProvided && 0 === e328.xaxis.categories.length && (t450.maxX = t450.labels[t450.labels.length - 1], t450.initialMaxX = t450.labels[t450.labels.length - 1], t450.minX = 1, t450.initialMinX = 1), t450.isXNumeric || t450.noLabelsProvided || t450.dataFormatXNumeric) {
                      var a204;
                      if (void 0 === e328.xaxis.tickAmount ? (a204 = Math.round(t450.svgWidth / 150), "numeric" === e328.xaxis.type && t450.dataPoints < 30 && (a204 = t450.dataPoints - 1), a204 > t450.dataPoints && 0 !== t450.dataPoints && (a204 = t450.dataPoints - 1)) : "dataPoints" === e328.xaxis.tickAmount ? (t450.series.length > 1 && (a204 = t450.series[t450.maxValsInArrayIndex].length - 1), t450.isXNumeric && (a204 = t450.maxX - t450.minX - 1)) : a204 = e328.xaxis.tickAmount, t450.xTickAmount = a204, void 0 !== e328.xaxis.max && "number" == typeof e328.xaxis.max && (t450.maxX = e328.xaxis.max), void 0 !== e328.xaxis.min && "number" == typeof e328.xaxis.min && (t450.minX = e328.xaxis.min), void 0 !== e328.xaxis.range && (t450.minX = t450.maxX - e328.xaxis.range), t450.minX !== Number.MAX_VALUE && t450.maxX !== -Number.MAX_VALUE) {
                          if (e328.xaxis.convertedCatToNumeric && !t450.dataFormatXNumeric) {
                              for(var s158 = [], r139 = t450.minX - 1; r139 < t450.maxX; r139++)s158.push(r139 + 1);
                              t450.xAxisScale = {
                                  result: s158,
                                  niceMin: s158[0],
                                  niceMax: s158[s158.length - 1]
                              };
                          } else t450.xAxisScale = this.scales.setXScale(t450.minX, t450.maxX);
                      } else t450.xAxisScale = this.scales.linearScale(1, a204, a204), t450.noLabelsProvided && t450.labels.length > 0 && (t450.xAxisScale = this.scales.linearScale(1, t450.labels.length, a204 - 1), t450.seriesX = t450.labels.slice());
                      i248 && (t450.labels = t450.xAxisScale.result.slice());
                  }
                  return t450.isBarHorizontal && t450.labels.length && (t450.xTickAmount = t450.labels.length), this._handleSingleDataPoint(), this._getMinXDiff(), {
                      minX: t450.minX,
                      maxX: t450.maxX
                  };
              }
          },
          {
              key: "setZRange",
              value: function() {
                  var t451 = this.w.globals;
                  if (t451.isDataXYZ) {
                      for(var e330 = 0; e330 < t451.series.length; e330++)if (void 0 !== t451.seriesZ[e330]) for(var i250 = 0; i250 < t451.seriesZ[e330].length; i250++)null !== t451.seriesZ[e330][i250] && p.isNumber(t451.seriesZ[e330][i250]) && (t451.maxZ = Math.max(t451.maxZ, t451.seriesZ[e330][i250]), t451.minZ = Math.min(t451.minZ, t451.seriesZ[e330][i250]));
                  }
              }
          },
          {
              key: "_handleSingleDataPoint",
              value: function() {
                  var t452 = this.w.globals, e331 = this.w.config;
                  if (t452.minX === t452.maxX) {
                      var i251 = new Y(this.ctx);
                      if ("datetime" === e331.xaxis.type) {
                          var a205 = i251.getDate(t452.minX);
                          e331.xaxis.labels.datetimeUTC ? a205.setUTCDate(a205.getUTCDate() - 2) : a205.setDate(a205.getDate() - 2), t452.minX = new Date(a205).getTime();
                          var s159 = i251.getDate(t452.maxX);
                          e331.xaxis.labels.datetimeUTC ? s159.setUTCDate(s159.getUTCDate() + 2) : s159.setDate(s159.getDate() + 2), t452.maxX = new Date(s159).getTime();
                      } else ("numeric" === e331.xaxis.type || "category" === e331.xaxis.type && !t452.noLabelsProvided) && (t452.minX = t452.minX - 2, t452.initialMinX = t452.minX, t452.maxX = t452.maxX + 2, t452.initialMaxX = t452.maxX);
                  }
              }
          },
          {
              key: "_getMinXDiff",
              value: function() {
                  var t453 = this.w.globals;
                  t453.isXNumeric && t453.seriesX.forEach(function(e332, i252) {
                      1 === e332.length && e332.push(t453.seriesX[t453.maxValsInArrayIndex][t453.seriesX[t453.maxValsInArrayIndex].length - 1]);
                      var a206 = e332.slice();
                      a206.sort(function(t454, e333) {
                          return t454 - e333;
                      }), a206.forEach(function(e334, i253) {
                          if (i253 > 0) {
                              var s160 = e334 - a206[i253 - 1];
                              s160 > 0 && (t453.minXDiff = Math.min(s160, t453.minXDiff));
                          }
                      }), 1 !== t453.dataPoints && t453.minXDiff !== Number.MAX_VALUE || (t453.minXDiff = 0.5);
                  });
              }
          },
          {
              key: "_setStackedMinMax",
              value: function() {
                  var t455 = this.w.globals, e335 = [], i254 = [];
                  if (t455.series.length) for(var a207 = 0; a207 < t455.series[t455.maxValsInArrayIndex].length; a207++)for(var s161 = 0, r140 = 0, o121 = 0; o121 < t455.series.length; o121++)null !== t455.series[o121][a207] && p.isNumber(t455.series[o121][a207]) && (t455.series[o121][a207] > 0 ? s161 = s161 + parseFloat(t455.series[o121][a207]) + 0.0001 : r140 += parseFloat(t455.series[o121][a207])), o121 === t455.series.length - 1 && (e335.push(s161), i254.push(r140));
                  for(var n107 = 0; n107 < e335.length; n107++)t455.maxY = Math.max(t455.maxY, e335[n107]), t455.minY = Math.min(t455.minY, i254[n107]);
              }
          }
      ]), t445;
  }(), q = function() {
      function t456(e336) {
          a(this, t456), this.ctx = e336, this.w = e336.w;
          var i255 = this.w;
          this.xaxisFontSize = i255.config.xaxis.labels.style.fontSize, this.axisFontFamily = i255.config.xaxis.labels.style.fontFamily, this.xaxisForeColors = i255.config.xaxis.labels.style.colors, this.isCategoryBarHorizontal = "bar" === i255.config.chart.type && i255.config.plotOptions.bar.horizontal, this.xAxisoffX = 0, "bottom" === i255.config.xaxis.position && (this.xAxisoffX = i255.globals.gridHeight), this.drawnLabels = [], this.axesUtils = new B(e336);
      }
      return r(t456, [
          {
              key: "drawYaxis",
              value: function(t457) {
                  var e337 = this, i256 = this.w, a208 = new b(this.ctx), s162 = i256.config.yaxis[t457].labels.style, r141 = s162.fontSize, o122 = s162.fontFamily, n108 = s162.fontWeight, l86 = a208.group({
                      class: "apexcharts-yaxis",
                      rel: t457,
                      transform: "translate(" + i256.globals.translateYAxisX[t457] + ", 0)"
                  });
                  if (this.axesUtils.isYAxisHidden(t457)) return l86;
                  var h76 = a208.group({
                      class: "apexcharts-yaxis-texts-g"
                  });
                  l86.add(h76);
                  var c67 = i256.globals.yAxisScale[t457].result.length - 1, d60 = i256.globals.gridHeight / c67, g50 = i256.globals.translateY, u43 = i256.globals.yLabelFormatters[t457], p28 = i256.globals.yAxisScale[t457].result.slice();
                  p28 = this.axesUtils.checkForReversedLabels(t457, p28);
                  var f31 = "";
                  if (i256.config.yaxis[t457].labels.show) for(var x24 = function(l87) {
                      var x25 = p28[l87];
                      x25 = u43(x25, l87, i256);
                      var b12 = i256.config.yaxis[t457].labels.padding;
                      i256.config.yaxis[t457].opposite && 0 !== i256.config.yaxis.length && (b12 *= -1);
                      var v23 = e337.axesUtils.getYAxisForeColor(s162.colors, t457), m19 = a208.drawText({
                          x: b12,
                          y: g50 + c67 / 10 + i256.config.yaxis[t457].labels.offsetY + 1,
                          text: x25,
                          textAnchor: i256.config.yaxis[t457].opposite ? "start" : "end",
                          fontSize: r141,
                          fontFamily: o122,
                          fontWeight: n108,
                          foreColor: Array.isArray(v23) ? v23[l87] : v23,
                          isPlainText: !1,
                          cssClass: "apexcharts-yaxis-label " + s162.cssClass
                      });
                      l87 === c67 && (f31 = m19), h76.add(m19);
                      var y14 = document.createElementNS(i256.globals.SVGNS, "title");
                      if (y14.textContent = Array.isArray(x25) ? x25.join(" ") : x25, m19.node.appendChild(y14), 0 !== i256.config.yaxis[t457].labels.rotate) {
                          var w14 = a208.rotateAroundCenter(f31.node), k13 = a208.rotateAroundCenter(m19.node);
                          m19.node.setAttribute("transform", "rotate(".concat(i256.config.yaxis[t457].labels.rotate, " ").concat(w14.x, " ").concat(k13.y, ")"));
                      }
                      g50 += d60;
                  }, v22 = c67; v22 >= 0; v22--)x24(v22);
                  if (void 0 !== i256.config.yaxis[t457].title.text) {
                      var m18 = a208.group({
                          class: "apexcharts-yaxis-title"
                      }), y13 = 0;
                      i256.config.yaxis[t457].opposite && (y13 = i256.globals.translateYAxisX[t457]);
                      var w13 = a208.drawText({
                          x: y13,
                          y: i256.globals.gridHeight / 2 + i256.globals.translateY + i256.config.yaxis[t457].title.offsetY,
                          text: i256.config.yaxis[t457].title.text,
                          textAnchor: "end",
                          foreColor: i256.config.yaxis[t457].title.style.color,
                          fontSize: i256.config.yaxis[t457].title.style.fontSize,
                          fontWeight: i256.config.yaxis[t457].title.style.fontWeight,
                          fontFamily: i256.config.yaxis[t457].title.style.fontFamily,
                          cssClass: "apexcharts-yaxis-title-text " + i256.config.yaxis[t457].title.style.cssClass
                      });
                      m18.add(w13), l86.add(m18);
                  }
                  var k12 = i256.config.yaxis[t457].axisBorder, A9 = 31 + k12.offsetX;
                  if (i256.config.yaxis[t457].opposite && (A9 = -31 - k12.offsetX), k12.show) {
                      var S9 = a208.drawLine(A9, i256.globals.translateY + k12.offsetY - 2, A9, i256.globals.gridHeight + i256.globals.translateY + k12.offsetY + 2, k12.color, 0, k12.width);
                      l86.add(S9);
                  }
                  return i256.config.yaxis[t457].axisTicks.show && this.axesUtils.drawYAxisTicks(A9, c67, k12, i256.config.yaxis[t457].axisTicks, t457, d60, l86), l86;
              }
          },
          {
              key: "drawYaxisInversed",
              value: function(t458) {
                  var e338 = this.w, i257 = new b(this.ctx), a209 = i257.group({
                      class: "apexcharts-xaxis apexcharts-yaxis-inversed"
                  }), s163 = i257.group({
                      class: "apexcharts-xaxis-texts-g",
                      transform: "translate(".concat(e338.globals.translateXAxisX, ", ").concat(e338.globals.translateXAxisY, ")")
                  });
                  a209.add(s163);
                  var r142 = e338.globals.yAxisScale[t458].result.length - 1, o123 = e338.globals.gridWidth / r142 + 0.1, n109 = o123 + e338.config.xaxis.labels.offsetX, l88 = e338.globals.xLabelFormatter, h77 = e338.globals.yAxisScale[t458].result.slice(), c68 = e338.globals.timescaleLabels;
                  c68.length > 0 && (this.xaxisLabels = c68.slice(), r142 = (h77 = c68.slice()).length), h77 = this.axesUtils.checkForReversedLabels(t458, h77);
                  var d61 = c68.length;
                  if (e338.config.xaxis.labels.show) for(var g51 = d61 ? 0 : r142; d61 ? g51 < d61 : g51 >= 0; d61 ? g51++ : g51--){
                      var u44 = h77[g51];
                      u44 = l88(u44, g51, e338);
                      var p29 = e338.globals.gridWidth + e338.globals.padHorizontal - (n109 - o123 + e338.config.xaxis.labels.offsetX);
                      if (c68.length) {
                          var f32 = this.axesUtils.getLabel(h77, c68, p29, g51, this.drawnLabels, this.xaxisFontSize);
                          p29 = f32.x, u44 = f32.text, this.drawnLabels.push(f32.text), 0 === g51 && e338.globals.skipFirstTimelinelabel && (u44 = ""), g51 === h77.length - 1 && e338.globals.skipLastTimelinelabel && (u44 = "");
                      }
                      var x26 = i257.drawText({
                          x: p29,
                          y: this.xAxisoffX + e338.config.xaxis.labels.offsetY + 30 - ("top" === e338.config.xaxis.position ? e338.globals.xAxisHeight + e338.config.xaxis.axisTicks.height - 2 : 0),
                          text: u44,
                          textAnchor: "middle",
                          foreColor: Array.isArray(this.xaxisForeColors) ? this.xaxisForeColors[t458] : this.xaxisForeColors,
                          fontSize: this.xaxisFontSize,
                          fontFamily: this.xaxisFontFamily,
                          fontWeight: e338.config.xaxis.labels.style.fontWeight,
                          isPlainText: !1,
                          cssClass: "apexcharts-xaxis-label " + e338.config.xaxis.labels.style.cssClass
                      });
                      s163.add(x26), x26.tspan(u44);
                      var v24 = document.createElementNS(e338.globals.SVGNS, "title");
                      v24.textContent = u44, x26.node.appendChild(v24), n109 += o123;
                  }
                  return this.inversedYAxisTitleText(a209), this.inversedYAxisBorder(a209), a209;
              }
          },
          {
              key: "inversedYAxisBorder",
              value: function(t459) {
                  var e339 = this.w, i258 = new b(this.ctx), a210 = e339.config.xaxis.axisBorder;
                  if (a210.show) {
                      var s164 = 0;
                      "bar" === e339.config.chart.type && e339.globals.isXNumeric && (s164 -= 15);
                      var r143 = i258.drawLine(e339.globals.padHorizontal + s164 + a210.offsetX, this.xAxisoffX, e339.globals.gridWidth, this.xAxisoffX, a210.color, 0, a210.height);
                      t459.add(r143);
                  }
              }
          },
          {
              key: "inversedYAxisTitleText",
              value: function(t460) {
                  var e340 = this.w, i259 = new b(this.ctx);
                  if (void 0 !== e340.config.xaxis.title.text) {
                      var a211 = i259.group({
                          class: "apexcharts-xaxis-title apexcharts-yaxis-title-inversed"
                      }), s165 = i259.drawText({
                          x: e340.globals.gridWidth / 2 + e340.config.xaxis.title.offsetX,
                          y: this.xAxisoffX + parseFloat(this.xaxisFontSize) + parseFloat(e340.config.xaxis.title.style.fontSize) + e340.config.xaxis.title.offsetY + 20,
                          text: e340.config.xaxis.title.text,
                          textAnchor: "middle",
                          fontSize: e340.config.xaxis.title.style.fontSize,
                          fontFamily: e340.config.xaxis.title.style.fontFamily,
                          fontWeight: e340.config.xaxis.title.style.fontWeight,
                          foreColor: e340.config.xaxis.title.style.color,
                          cssClass: "apexcharts-xaxis-title-text " + e340.config.xaxis.title.style.cssClass
                      });
                      a211.add(s165), t460.add(a211);
                  }
              }
          },
          {
              key: "yAxisTitleRotate",
              value: function(t461, e341) {
                  var i260 = this.w, a212 = new b(this.ctx), s166 = {
                      width: 0,
                      height: 0
                  }, r144 = {
                      width: 0,
                      height: 0
                  }, o124 = i260.globals.dom.baseEl.querySelector(" .apexcharts-yaxis[rel='".concat(t461, "'] .apexcharts-yaxis-texts-g"));
                  null !== o124 && (s166 = o124.getBoundingClientRect());
                  var n110 = i260.globals.dom.baseEl.querySelector(".apexcharts-yaxis[rel='".concat(t461, "'] .apexcharts-yaxis-title text"));
                  if (null !== n110 && (r144 = n110.getBoundingClientRect()), null !== n110) {
                      var l89 = this.xPaddingForYAxisTitle(t461, s166, r144, e341);
                      n110.setAttribute("x", l89.xPos - (e341 ? 10 : 0));
                  }
                  if (null !== n110) {
                      var h78 = a212.rotateAroundCenter(n110);
                      n110.setAttribute("transform", "rotate(".concat(e341 ? -1 * i260.config.yaxis[t461].title.rotate : i260.config.yaxis[t461].title.rotate, " ").concat(h78.x, " ").concat(h78.y, ")"));
                  }
              }
          },
          {
              key: "xPaddingForYAxisTitle",
              value: function(t462, e342, i261, a213) {
                  var s167 = this.w, r145 = 0, o125 = 0, n111 = 10;
                  return void 0 === s167.config.yaxis[t462].title.text || t462 < 0 ? {
                      xPos: o125,
                      padd: 0
                  } : (a213 ? (o125 = e342.width + s167.config.yaxis[t462].title.offsetX + i261.width / 2 + n111 / 2, 0 === (r145 += 1) && (o125 -= n111 / 2)) : (o125 = -1 * e342.width + s167.config.yaxis[t462].title.offsetX + n111 / 2 + i261.width / 2, s167.globals.isBarHorizontal && (n111 = 25, o125 = -1 * e342.width - s167.config.yaxis[t462].title.offsetX - n111)), {
                      xPos: o125,
                      padd: n111
                  });
              }
          },
          {
              key: "setYAxisXPosition",
              value: function(t463, e343) {
                  var i262 = this.w, a214 = 0, s168 = 0, r146 = 18, o126 = 1;
                  i262.config.yaxis.length > 1 && (this.multipleYs = !0), i262.config.yaxis.map(function(n112, l90) {
                      var h79 = i262.globals.ignoreYAxisIndexes.indexOf(l90) > -1 || !n112.show || n112.floating || 0 === t463[l90].width, c69 = t463[l90].width + e343[l90].width;
                      n112.opposite ? i262.globals.isBarHorizontal ? (s168 = i262.globals.gridWidth + i262.globals.translateX - 1, i262.globals.translateYAxisX[l90] = s168 - n112.labels.offsetX) : (s168 = i262.globals.gridWidth + i262.globals.translateX + o126, h79 || (o126 = o126 + c69 + 20), i262.globals.translateYAxisX[l90] = s168 - n112.labels.offsetX + 20) : (a214 = i262.globals.translateX - r146, h79 || (r146 = r146 + c69 + 20), i262.globals.translateYAxisX[l90] = a214 + n112.labels.offsetX);
                  });
              }
          },
          {
              key: "setYAxisTextAlignments",
              value: function() {
                  var t464 = this.w, e344 = t464.globals.dom.baseEl.getElementsByClassName("apexcharts-yaxis");
                  (e344 = p.listToArray(e344)).forEach(function(e, i263) {
                      var a215 = t464.config.yaxis[i263];
                      if (a215 && void 0 !== a215.labels.align) {
                          var s169 = t464.globals.dom.baseEl.querySelector(".apexcharts-yaxis[rel='".concat(i263, "'] .apexcharts-yaxis-texts-g")), r147 = t464.globals.dom.baseEl.querySelectorAll(".apexcharts-yaxis[rel='".concat(i263, "'] .apexcharts-yaxis-label"));
                          r147 = p.listToArray(r147);
                          var o127 = s169.getBoundingClientRect();
                          "left" === a215.labels.align ? (r147.forEach(function(t465, e) {
                              t465.setAttribute("text-anchor", "start");
                          }), a215.opposite || s169.setAttribute("transform", "translate(-".concat(o127.width, ", 0)"))) : "center" === a215.labels.align ? (r147.forEach(function(t466, e) {
                              t466.setAttribute("text-anchor", "middle");
                          }), s169.setAttribute("transform", "translate(".concat(o127.width / 2 * (a215.opposite ? 1 : -1), ", 0)"))) : "right" === a215.labels.align && (r147.forEach(function(t467, e) {
                              t467.setAttribute("text-anchor", "end");
                          }), a215.opposite && s169.setAttribute("transform", "translate(".concat(o127.width, ", 0)")));
                      }
                  });
              }
          }
      ]), t456;
  }(), Z = function() {
      function t468(e345) {
          a(this, t468), this.ctx = e345, this.w = e345.w, this.documentEvent = p.bind(this.documentEvent, this);
      }
      return r(t468, [
          {
              key: "addEventListener",
              value: function(t469, e346) {
                  var i264 = this.w;
                  i264.globals.events.hasOwnProperty(t469) ? i264.globals.events[t469].push(e346) : i264.globals.events[t469] = [
                      e346
                  ];
              }
          },
          {
              key: "removeEventListener",
              value: function(t470, e347) {
                  var i265 = this.w;
                  if (i265.globals.events.hasOwnProperty(t470)) {
                      var a216 = i265.globals.events[t470].indexOf(e347);
                      -1 !== a216 && i265.globals.events[t470].splice(a216, 1);
                  }
              }
          },
          {
              key: "fireEvent",
              value: function(t471, e348) {
                  var i266 = this.w;
                  if (i266.globals.events.hasOwnProperty(t471)) {
                      e348 && e348.length || (e348 = []);
                      for(var a217 = i266.globals.events[t471], s170 = a217.length, r148 = 0; r148 < s170; r148++)a217[r148].apply(null, e348);
                  }
              }
          },
          {
              key: "setupEventHandlers",
              value: function() {
                  var t472 = this, e349 = this.w, i267 = this.ctx, a218 = e349.globals.dom.baseEl.querySelector(e349.globals.chartClass);
                  this.ctx.eventList.forEach(function(t473) {
                      a218.addEventListener(t473, function(t474) {
                          var a219 = Object.assign({
                          }, e349, {
                              seriesIndex: e349.globals.capturedSeriesIndex,
                              dataPointIndex: e349.globals.capturedDataPointIndex
                          });
                          "mousemove" === t474.type || "touchmove" === t474.type ? "function" == typeof e349.config.chart.events.mouseMove && e349.config.chart.events.mouseMove(t474, i267, a219) : "mouseleave" === t474.type || "touchleave" === t474.type ? "function" == typeof e349.config.chart.events.mouseLeave && e349.config.chart.events.mouseLeave(t474, i267, a219) : ("mouseup" === t474.type && 1 === t474.which || "touchend" === t474.type) && ("function" == typeof e349.config.chart.events.click && e349.config.chart.events.click(t474, i267, a219), i267.ctx.events.fireEvent("click", [
                              t474,
                              i267,
                              a219
                          ]));
                      }, {
                          capture: !1,
                          passive: !0
                      });
                  }), this.ctx.eventList.forEach(function(i268) {
                      e349.globals.dom.baseEl.addEventListener(i268, t472.documentEvent, {
                          passive: !0
                      });
                  }), this.ctx.core.setupBrushHandler();
              }
          },
          {
              key: "documentEvent",
              value: function(t475) {
                  var e350 = this.w, i269 = t475.target.className;
                  if ("click" === t475.type) {
                      var a220 = e350.globals.dom.baseEl.querySelector(".apexcharts-menu");
                      a220 && a220.classList.contains("apexcharts-menu-open") && "apexcharts-menu-icon" !== i269 && a220.classList.remove("apexcharts-menu-open");
                  }
                  e350.globals.clientX = "touchmove" === t475.type ? t475.touches[0].clientX : t475.clientX, e350.globals.clientY = "touchmove" === t475.type ? t475.touches[0].clientY : t475.clientY;
              }
          }
      ]), t468;
  }(), $ = function() {
      function t476(e351) {
          a(this, t476), this.ctx = e351, this.w = e351.w;
      }
      return r(t476, [
          {
              key: "setCurrentLocaleValues",
              value: function(t477) {
                  var e352 = this.w.config.chart.locales;
                  window.Apex.chart && window.Apex.chart.locales && window.Apex.chart.locales.length > 0 && (e352 = this.w.config.chart.locales.concat(window.Apex.chart.locales));
                  var i270 = e352.filter(function(e353) {
                      return e353.name === t477;
                  })[0];
                  if (!i270) throw new Error("Wrong locale name provided. Please make sure you set the correct locale name in options");
                  var a221 = p.extend(A, i270);
                  this.w.globals.locale = a221.options;
              }
          }
      ]), t476;
  }(), J = function() {
      function t478(e354) {
          a(this, t478), this.ctx = e354, this.w = e354.w;
      }
      return r(t478, [
          {
              key: "drawAxis",
              value: function(t479, e355) {
                  var i271, a222, s171 = this.w.globals, r149 = this.w.config, o128 = new G(this.ctx), n113 = new q(this.ctx);
                  s171.axisCharts && "radar" !== t479 && (s171.isBarHorizontal ? (a222 = n113.drawYaxisInversed(0), i271 = o128.drawXaxisInversed(0), s171.dom.elGraphical.add(i271), s171.dom.elGraphical.add(a222)) : (i271 = o128.drawXaxis(), s171.dom.elGraphical.add(i271), r149.yaxis.map(function(t, e356) {
                      -1 === s171.ignoreYAxisIndexes.indexOf(e356) && (a222 = n113.drawYaxis(e356), s171.dom.Paper.add(a222));
                  })));
              }
          }
      ]), t478;
  }(), Q = function() {
      function t480(e357) {
          a(this, t480), this.ctx = e357, this.w = e357.w;
      }
      return r(t480, [
          {
              key: "drawXCrosshairs",
              value: function() {
                  var t481 = this.w, e358 = new b(this.ctx), i272 = new x(this.ctx), a223 = t481.config.xaxis.crosshairs.fill.gradient, s172 = t481.config.xaxis.crosshairs.dropShadow, r150 = t481.config.xaxis.crosshairs.fill.type, o129 = a223.colorFrom, n114 = a223.colorTo, l91 = a223.opacityFrom, h80 = a223.opacityTo, c70 = a223.stops, d62 = s172.enabled, g52 = s172.left, u45 = s172.top, f33 = s172.blur, v25 = s172.color, m20 = s172.opacity, y15 = t481.config.xaxis.crosshairs.fill.color;
                  if (t481.config.xaxis.crosshairs.show) {
                      "gradient" === r150 && (y15 = e358.drawGradient("vertical", o129, n114, l91, h80, null, c70, null));
                      var w15 = e358.drawRect();
                      1 === t481.config.xaxis.crosshairs.width && (w15 = e358.drawLine());
                      var k14 = t481.globals.gridHeight;
                      (!p.isNumber(k14) || k14 < 0) && (k14 = 0);
                      var A10 = t481.config.xaxis.crosshairs.width;
                      (!p.isNumber(A10) || A10 < 0) && (A10 = 0), w15.attr({
                          class: "apexcharts-xcrosshairs",
                          x: 0,
                          y: 0,
                          y2: k14,
                          width: A10,
                          height: k14,
                          fill: y15,
                          filter: "none",
                          "fill-opacity": t481.config.xaxis.crosshairs.opacity,
                          stroke: t481.config.xaxis.crosshairs.stroke.color,
                          "stroke-width": t481.config.xaxis.crosshairs.stroke.width,
                          "stroke-dasharray": t481.config.xaxis.crosshairs.stroke.dashArray
                      }), d62 && (w15 = i272.dropShadow(w15, {
                          left: g52,
                          top: u45,
                          blur: f33,
                          color: v25,
                          opacity: m20
                      })), t481.globals.dom.elGraphical.add(w15);
                  }
              }
          },
          {
              key: "drawYCrosshairs",
              value: function() {
                  var t482 = this.w, e359 = new b(this.ctx), i273 = t482.config.yaxis[0].crosshairs, a224 = t482.globals.barPadForNumericAxis;
                  if (t482.config.yaxis[0].crosshairs.show) {
                      var s173 = e359.drawLine(-a224, 0, t482.globals.gridWidth + a224, 0, i273.stroke.color, i273.stroke.dashArray, i273.stroke.width);
                      s173.attr({
                          class: "apexcharts-ycrosshairs"
                      }), t482.globals.dom.elGraphical.add(s173);
                  }
                  var r151 = e359.drawLine(-a224, 0, t482.globals.gridWidth + a224, 0, i273.stroke.color, 0, 0);
                  r151.attr({
                      class: "apexcharts-ycrosshairs-hidden"
                  }), t482.globals.dom.elGraphical.add(r151);
              }
          }
      ]), t480;
  }(), K = function() {
      function t483(e360) {
          a(this, t483), this.ctx = e360, this.w = e360.w;
      }
      return r(t483, [
          {
              key: "checkResponsiveConfig",
              value: function(t484) {
                  var e361 = this, i274 = this.w, a225 = i274.config;
                  if (0 !== a225.responsive.length) {
                      var s174 = a225.responsive.slice();
                      s174.sort(function(t485, e362) {
                          return t485.breakpoint > e362.breakpoint ? 1 : e362.breakpoint > t485.breakpoint ? -1 : 0;
                      }).reverse();
                      var r152 = new H({
                      }), o130 = function() {
                          var t486 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {
                          }, a226 = s174[0].breakpoint, o132 = window.innerWidth > 0 ? window.innerWidth : screen.width;
                          if (o132 > a226) {
                              var n117 = y.extendArrayProps(r152, i274.globals.initialConfig, i274);
                              t486 = p.extend(n117, t486), t486 = p.extend(i274.config, t486), e361.overrideResponsiveOptions(t486);
                          } else for(var l92 = 0; l92 < s174.length; l92++)o132 < s174[l92].breakpoint && (t486 = y.extendArrayProps(r152, s174[l92].options, i274), t486 = p.extend(i274.config, t486), e361.overrideResponsiveOptions(t486));
                      };
                      if (t484) {
                          var n115 = y.extendArrayProps(r152, t484, i274);
                          n115 = p.extend(i274.config, n115), o130(n115 = p.extend(n115, t484));
                      } else o130({
                      });
                  }
              }
          },
          {
              key: "overrideResponsiveOptions",
              value: function(t487) {
                  var e363 = new H(t487).init({
                      responsiveOverride: !0
                  });
                  this.w.config = e363;
              }
          }
      ]), t483;
  }(), tt = function() {
      function t488(e364) {
          a(this, t488), this.ctx = e364, this.colors = [], this.w = e364.w;
          var i275 = this.w;
          this.isColorFn = !1, this.isHeatmapDistributed = "treemap" === i275.config.chart.type && i275.config.plotOptions.treemap.distributed || "heatmap" === i275.config.chart.type && i275.config.plotOptions.heatmap.distributed, this.isBarDistributed = i275.config.plotOptions.bar.distributed && ("bar" === i275.config.chart.type || "rangeBar" === i275.config.chart.type);
      }
      return r(t488, [
          {
              key: "init",
              value: function() {
                  this.setDefaultColors();
              }
          },
          {
              key: "setDefaultColors",
              value: function() {
                  var t489 = this, e365 = this.w, i276 = new p;
                  if (e365.globals.dom.elWrap.classList.add("apexcharts-theme-".concat(e365.config.theme.mode)), void 0 === e365.config.colors ? e365.globals.colors = this.predefined() : (e365.globals.colors = e365.config.colors, Array.isArray(e365.config.colors) && e365.config.colors.length > 0 && "function" == typeof e365.config.colors[0] && (e365.globals.colors = e365.config.series.map(function(i, a228) {
                      var s176 = e365.config.colors[a228];
                      return s176 || (s176 = e365.config.colors[0]), "function" == typeof s176 ? (t489.isColorFn = !0, s176({
                          value: e365.globals.axisCharts ? e365.globals.series[a228][0] ? e365.globals.series[a228][0] : 0 : e365.globals.series[a228],
                          seriesIndex: a228,
                          dataPointIndex: a228,
                          w: e365
                      })) : s176;
                  }))), e365.globals.seriesColors.map(function(t490, i) {
                      t490 && (e365.globals.colors[i] = t490);
                  }), e365.config.theme.monochrome.enabled) {
                      var a227 = [], s175 = e365.globals.series.length;
                      (this.isBarDistributed || this.isHeatmapDistributed) && (s175 = e365.globals.series[0].length * e365.globals.series.length);
                      for(var r153 = e365.config.theme.monochrome.color, o133 = 1 / (s175 / e365.config.theme.monochrome.shadeIntensity), n118 = e365.config.theme.monochrome.shadeTo, l93 = 0, h81 = 0; h81 < s175; h81++){
                          var c71 = void 0;
                          "dark" === n118 ? (c71 = i276.shadeColor(-1 * l93, r153), l93 += o133) : (c71 = i276.shadeColor(l93, r153), l93 += o133), a227.push(c71);
                      }
                      e365.globals.colors = a227.slice();
                  }
                  var d63 = e365.globals.colors.slice();
                  this.pushExtraColors(e365.globals.colors);
                  [
                      "fill",
                      "stroke"
                  ].forEach(function(i) {
                      void 0 === e365.config[i].colors ? e365.globals[i].colors = t489.isColorFn ? e365.config.colors : d63 : e365.globals[i].colors = e365.config[i].colors.slice(), t489.pushExtraColors(e365.globals[i].colors);
                  }), void 0 === e365.config.dataLabels.style.colors ? e365.globals.dataLabels.style.colors = d63 : e365.globals.dataLabels.style.colors = e365.config.dataLabels.style.colors.slice(), this.pushExtraColors(e365.globals.dataLabels.style.colors, 50), void 0 === e365.config.plotOptions.radar.polygons.fill.colors ? e365.globals.radarPolygons.fill.colors = [
                      "dark" === e365.config.theme.mode ? "#424242" : "none"
                  ] : e365.globals.radarPolygons.fill.colors = e365.config.plotOptions.radar.polygons.fill.colors.slice(), this.pushExtraColors(e365.globals.radarPolygons.fill.colors, 20), void 0 === e365.config.markers.colors ? e365.globals.markers.colors = d63 : e365.globals.markers.colors = e365.config.markers.colors.slice(), this.pushExtraColors(e365.globals.markers.colors);
              }
          },
          {
              key: "pushExtraColors",
              value: function(t491, e366) {
                  var i277 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : null, a229 = this.w, s177 = e366 || a229.globals.series.length;
                  if (null === i277 && (i277 = this.isBarDistributed || this.isHeatmapDistributed || "heatmap" === a229.config.chart.type && a229.config.plotOptions.heatmap.colorScale.inverse), i277 && a229.globals.series.length && (s177 = a229.globals.series[a229.globals.maxValsInArrayIndex].length * a229.globals.series.length), t491.length < s177) for(var r154 = s177 - t491.length, o134 = 0; o134 < r154; o134++)t491.push(t491[o134]);
              }
          },
          {
              key: "updateThemeOptions",
              value: function(t492) {
                  t492.chart = t492.chart || {
                  }, t492.tooltip = t492.tooltip || {
                  };
                  var e367 = t492.theme.mode || "light", i278 = t492.theme.palette ? t492.theme.palette : "dark" === e367 ? "palette4" : "palette1", a230 = t492.chart.foreColor ? t492.chart.foreColor : "dark" === e367 ? "#f6f7f8" : "#373d3f";
                  return t492.tooltip.theme = e367, t492.chart.foreColor = a230, t492.theme.palette = i278, t492;
              }
          },
          {
              key: "predefined",
              value: function() {
                  switch(this.w.config.theme.palette){
                      case "palette1":
                          this.colors = [
                              "#008FFB",
                              "#00E396",
                              "#FEB019",
                              "#FF4560",
                              "#775DD0"
                          ];
                          break;
                      case "palette2":
                          this.colors = [
                              "#3f51b5",
                              "#03a9f4",
                              "#4caf50",
                              "#f9ce1d",
                              "#FF9800"
                          ];
                          break;
                      case "palette3":
                          this.colors = [
                              "#33b2df",
                              "#546E7A",
                              "#d4526e",
                              "#13d8aa",
                              "#A5978B"
                          ];
                          break;
                      case "palette4":
                          this.colors = [
                              "#4ecdc4",
                              "#c7f464",
                              "#81D4FA",
                              "#fd6a6a",
                              "#546E7A"
                          ];
                          break;
                      case "palette5":
                          this.colors = [
                              "#2b908f",
                              "#f9a3a4",
                              "#90ee7e",
                              "#fa4443",
                              "#69d2e7"
                          ];
                          break;
                      case "palette6":
                          this.colors = [
                              "#449DD1",
                              "#F86624",
                              "#EA3546",
                              "#662E9B",
                              "#C5D86D"
                          ];
                          break;
                      case "palette7":
                          this.colors = [
                              "#D7263D",
                              "#1B998B",
                              "#2E294E",
                              "#F46036",
                              "#E2C044"
                          ];
                          break;
                      case "palette8":
                          this.colors = [
                              "#662E9B",
                              "#F86624",
                              "#F9C80E",
                              "#EA3546",
                              "#43BCCD"
                          ];
                          break;
                      case "palette9":
                          this.colors = [
                              "#5C4742",
                              "#A5978B",
                              "#8D5B4C",
                              "#5A2A27",
                              "#C4BBAF"
                          ];
                          break;
                      case "palette10":
                          this.colors = [
                              "#A300D6",
                              "#7D02EB",
                              "#5653FE",
                              "#2983FF",
                              "#00B1F2"
                          ];
                          break;
                      default:
                          this.colors = [
                              "#008FFB",
                              "#00E396",
                              "#FEB019",
                              "#FF4560",
                              "#775DD0"
                          ];
                  }
                  return this.colors;
              }
          }
      ]), t488;
  }(), et = function() {
      function t493(e368) {
          a(this, t493), this.ctx = e368, this.w = e368.w;
      }
      return r(t493, [
          {
              key: "draw",
              value: function() {
                  this.drawTitleSubtitle("title"), this.drawTitleSubtitle("subtitle");
              }
          },
          {
              key: "drawTitleSubtitle",
              value: function(t494) {
                  var e369 = this.w, i279 = "title" === t494 ? e369.config.title : e369.config.subtitle, a231 = e369.globals.svgWidth / 2, s178 = i279.offsetY, r155 = "middle";
                  if ("left" === i279.align ? (a231 = 10, r155 = "start") : "right" === i279.align && (a231 = e369.globals.svgWidth - 10, r155 = "end"), a231 += i279.offsetX, s178 = s178 + parseInt(i279.style.fontSize, 10) + i279.margin / 2, void 0 !== i279.text) {
                      var o135 = new b(this.ctx).drawText({
                          x: a231,
                          y: s178,
                          text: i279.text,
                          textAnchor: r155,
                          fontSize: i279.style.fontSize,
                          fontFamily: i279.style.fontFamily,
                          fontWeight: i279.style.fontWeight,
                          foreColor: i279.style.color,
                          opacity: 1
                      });
                      o135.node.setAttribute("class", "apexcharts-".concat(t494, "-text")), e369.globals.dom.Paper.add(o135);
                  }
              }
          }
      ]), t493;
  }(), it = function() {
      function t495(e370) {
          a(this, t495), this.w = e370.w, this.dCtx = e370;
      }
      return r(t495, [
          {
              key: "getTitleSubtitleCoords",
              value: function(t496) {
                  var e371 = this.w, i280 = 0, a232 = 0, s179 = "title" === t496 ? e371.config.title.floating : e371.config.subtitle.floating, r156 = e371.globals.dom.baseEl.querySelector(".apexcharts-".concat(t496, "-text"));
                  if (null !== r156 && !s179) {
                      var o136 = r156.getBoundingClientRect();
                      i280 = o136.width, a232 = e371.globals.axisCharts ? o136.height + 5 : o136.height;
                  }
                  return {
                      width: i280,
                      height: a232
                  };
              }
          },
          {
              key: "getLegendsRect",
              value: function() {
                  var t497 = this.w, e372 = t497.globals.dom.baseEl.querySelector(".apexcharts-legend");
                  t497.config.legend.height || "top" !== t497.config.legend.position && "bottom" !== t497.config.legend.position || (e372.style.maxHeight = t497.globals.svgHeight / 2 + "px");
                  var i281 = Object.assign({
                  }, p.getBoundingClientRect(e372));
                  return null !== e372 && !t497.config.legend.floating && t497.config.legend.show ? this.dCtx.lgRect = {
                      x: i281.x,
                      y: i281.y,
                      height: i281.height,
                      width: 0 === i281.height ? 0 : i281.width
                  } : this.dCtx.lgRect = {
                      x: 0,
                      y: 0,
                      height: 0,
                      width: 0
                  }, "left" !== t497.config.legend.position && "right" !== t497.config.legend.position || 1.5 * this.dCtx.lgRect.width > t497.globals.svgWidth && (this.dCtx.lgRect.width = t497.globals.svgWidth / 1.5), this.dCtx.lgRect;
              }
          },
          {
              key: "getLargestStringFromMultiArr",
              value: function(t498, e373) {
                  var i282 = t498;
                  if (this.w.globals.isMultiLineX) {
                      var a233 = e373.map(function(t499, e) {
                          return Array.isArray(t499) ? t499.length : 1;
                      }), s = Math.max.apply(Math, g(a233));
                      i282 = e373[a233.indexOf(s)];
                  }
                  return i282;
              }
          }
      ]), t495;
  }(), at = function() {
      function t500(e374) {
          a(this, t500), this.w = e374.w, this.dCtx = e374;
      }
      return r(t500, [
          {
              key: "getxAxisLabelsCoords",
              value: function() {
                  var t501, e375 = this.w, i283 = e375.globals.labels.slice();
                  if (e375.config.xaxis.convertedCatToNumeric && 0 === i283.length && (i283 = e375.globals.categoryLabels), e375.globals.timescaleLabels.length > 0) {
                      var a234 = this.getxAxisTimeScaleLabelsCoords();
                      t501 = {
                          width: a234.width,
                          height: a234.height
                      }, e375.globals.rotateXLabels = !1;
                  } else {
                      this.dCtx.lgWidthForSideLegends = "left" !== e375.config.legend.position && "right" !== e375.config.legend.position || e375.config.legend.floating ? 0 : this.dCtx.lgRect.width;
                      var s180 = e375.globals.xLabelFormatter, r157 = p.getLargestStringFromArr(i283), o137 = this.dCtx.dimHelpers.getLargestStringFromMultiArr(r157, i283);
                      e375.globals.isBarHorizontal && (o137 = r157 = e375.globals.yAxisScale[0].result.reduce(function(t502, e376) {
                          return t502.length > e376.length ? t502 : e376;
                      }, 0));
                      var n119 = new W(this.dCtx.ctx), l94 = r157;
                      r157 = n119.xLabelFormat(s180, r157, l94, {
                          i: void 0,
                          dateFormatter: new Y(this.dCtx.ctx).formatDate,
                          w: e375
                      }), o137 = n119.xLabelFormat(s180, o137, l94, {
                          i: void 0,
                          dateFormatter: new Y(this.dCtx.ctx).formatDate,
                          w: e375
                      }), (e375.config.xaxis.convertedCatToNumeric && void 0 === r157 || "" === String(r157).trim()) && (o137 = r157 = "1");
                      var h82 = new b(this.dCtx.ctx), c72 = h82.getTextRects(r157, e375.config.xaxis.labels.style.fontSize), d64 = c72;
                      if (r157 !== o137 && (d64 = h82.getTextRects(o137, e375.config.xaxis.labels.style.fontSize)), (t501 = {
                          width: c72.width >= d64.width ? c72.width : d64.width,
                          height: c72.height >= d64.height ? c72.height : d64.height
                      }).width * i283.length > e375.globals.svgWidth - this.dCtx.lgWidthForSideLegends - this.dCtx.yAxisWidth - this.dCtx.gridPad.left - this.dCtx.gridPad.right && 0 !== e375.config.xaxis.labels.rotate || e375.config.xaxis.labels.rotateAlways) {
                          if (!e375.globals.isBarHorizontal) {
                              e375.globals.rotateXLabels = !0;
                              var g53 = function(t503) {
                                  return h82.getTextRects(t503, e375.config.xaxis.labels.style.fontSize, e375.config.xaxis.labels.style.fontFamily, "rotate(".concat(e375.config.xaxis.labels.rotate, " 0 0)"), !1);
                              };
                              c72 = g53(r157), r157 !== o137 && (d64 = g53(o137)), t501.height = (c72.height > d64.height ? c72.height : d64.height) / 1.5, t501.width = c72.width > d64.width ? c72.width : d64.width;
                          }
                      } else e375.globals.rotateXLabels = !1;
                  }
                  return e375.config.xaxis.labels.show || (t501 = {
                      width: 0,
                      height: 0
                  }), {
                      width: t501.width,
                      height: t501.height
                  };
              }
          },
          {
              key: "getxAxisTitleCoords",
              value: function() {
                  var t504 = this.w, e377 = 0, i284 = 0;
                  if (void 0 !== t504.config.xaxis.title.text) {
                      var a235 = new b(this.dCtx.ctx).getTextRects(t504.config.xaxis.title.text, t504.config.xaxis.title.style.fontSize);
                      e377 = a235.width, i284 = a235.height;
                  }
                  return {
                      width: e377,
                      height: i284
                  };
              }
          },
          {
              key: "getxAxisTimeScaleLabelsCoords",
              value: function() {
                  var t505, e378 = this.w;
                  this.dCtx.timescaleLabels = e378.globals.timescaleLabels.slice();
                  var i285 = this.dCtx.timescaleLabels.map(function(t506) {
                      return t506.value;
                  }), a236 = i285.reduce(function(t507, e379) {
                      return void 0 === t507 ? (console.error("You have possibly supplied invalid Date format. Please supply a valid JavaScript Date"), 0) : t507.length > e379.length ? t507 : e379;
                  }, 0);
                  return 1.05 * (t505 = new b(this.dCtx.ctx).getTextRects(a236, e378.config.xaxis.labels.style.fontSize)).width * i285.length > e378.globals.gridWidth && 0 !== e378.config.xaxis.labels.rotate && (e378.globals.overlappingXLabels = !0), t505;
              }
          },
          {
              key: "additionalPaddingXLabels",
              value: function(t508) {
                  var e380 = this, i286 = this.w, a237 = i286.globals, s181 = i286.config, r158 = s181.xaxis.type, o138 = t508.width;
                  a237.skipLastTimelinelabel = !1, a237.skipFirstTimelinelabel = !1;
                  var n120 = i286.config.yaxis[0].opposite && i286.globals.isBarHorizontal, l95 = function(t509, n121) {
                      (function(t510) {
                          return -1 !== a237.collapsedSeriesIndices.indexOf(t510);
                      })(n121) || (function(t511) {
                          if (e380.dCtx.timescaleLabels && e380.dCtx.timescaleLabels.length) {
                              var n122 = e380.dCtx.timescaleLabels[0], l96 = e380.dCtx.timescaleLabels[e380.dCtx.timescaleLabels.length - 1].position + o138 / 1.75 - e380.dCtx.yAxisWidthRight, h83 = n122.position - o138 / 1.75 + e380.dCtx.yAxisWidthLeft, c73 = "right" === i286.config.legend.position && e380.dCtx.lgRect.width > 0 ? e380.dCtx.lgRect.width : 0;
                              l96 > a237.svgWidth - a237.translateX - c73 && (a237.skipLastTimelinelabel = !0), h83 < -(t511.show && !t511.floating || "bar" !== s181.chart.type && "candlestick" !== s181.chart.type && "rangeBar" !== s181.chart.type && "boxPlot" !== s181.chart.type ? 10 : o138 / 1.75) && (a237.skipFirstTimelinelabel = !0);
                          } else "datetime" === r158 ? e380.dCtx.gridPad.right < o138 && !a237.rotateXLabels && (a237.skipLastTimelinelabel = !0) : "datetime" !== r158 && e380.dCtx.gridPad.right < o138 / 2 - e380.dCtx.yAxisWidthRight && !a237.rotateXLabels && !i286.config.xaxis.labels.trim && ("between" !== i286.config.xaxis.tickPlacement || i286.globals.isBarHorizontal) && (e380.dCtx.xPadRight = o138 / 2 + 1);
                      })(t509);
                  };
                  s181.yaxis.forEach(function(t512, i287) {
                      n120 ? (e380.dCtx.gridPad.left < o138 && (e380.dCtx.xPadLeft = o138 / 2 + 1), e380.dCtx.xPadRight = o138 / 2 + 1) : l95(t512, i287);
                  });
              }
          }
      ]), t500;
  }(), st = function() {
      function t513(e381) {
          a(this, t513), this.w = e381.w, this.dCtx = e381;
      }
      return r(t513, [
          {
              key: "getyAxisLabelsCoords",
              value: function() {
                  var t514 = this, e382 = this.w, i288 = [], a238 = 10, s182 = new B(this.dCtx.ctx);
                  return e382.config.yaxis.map(function(r159, o139) {
                      var n123 = e382.globals.yAxisScale[o139], l97 = 0;
                      if (!s182.isYAxisHidden(o139) && r159.labels.show && void 0 !== r159.labels.minWidth && (l97 = r159.labels.minWidth), !s182.isYAxisHidden(o139) && r159.labels.show && n123.result.length) {
                          var h84 = e382.globals.yLabelFormatters[o139], c74 = n123.niceMin === Number.MIN_VALUE ? 0 : n123.niceMin, d65 = String(c74).length > String(n123.niceMax).length ? c74 : n123.niceMax, g54 = h84(d65, {
                              seriesIndex: o139,
                              dataPointIndex: -1,
                              w: e382
                          }), u46 = g54;
                          if (void 0 !== g54 && 0 !== g54.length || (g54 = d65), e382.globals.isBarHorizontal) {
                              a238 = 0;
                              var f34 = e382.globals.labels.slice();
                              g54 = h84(g54 = p.getLargestStringFromArr(f34), {
                                  seriesIndex: o139,
                                  dataPointIndex: -1,
                                  w: e382
                              }), u46 = t514.dCtx.dimHelpers.getLargestStringFromMultiArr(g54, f34);
                          }
                          var x27 = new b(t514.dCtx.ctx), v26 = "rotate(".concat(r159.labels.rotate, " 0 0)"), m21 = x27.getTextRects(g54, r159.labels.style.fontSize, r159.labels.style.fontFamily, v26, !1), y16 = m21;
                          g54 !== u46 && (y16 = x27.getTextRects(u46, r159.labels.style.fontSize, r159.labels.style.fontFamily, v26, !1)), i288.push({
                              width: (l97 > y16.width || l97 > m21.width ? l97 : y16.width > m21.width ? y16.width : m21.width) + a238,
                              height: y16.height > m21.height ? y16.height : m21.height
                          });
                      } else i288.push({
                          width: 0,
                          height: 0
                      });
                  }), i288;
              }
          },
          {
              key: "getyAxisTitleCoords",
              value: function() {
                  var t515 = this, e383 = this.w, i289 = [];
                  return e383.config.yaxis.map(function(e384, a) {
                      if (e384.show && void 0 !== e384.title.text) {
                          var s183 = new b(t515.dCtx.ctx), r160 = "rotate(".concat(e384.title.rotate, " 0 0)"), o140 = s183.getTextRects(e384.title.text, e384.title.style.fontSize, e384.title.style.fontFamily, r160, !1);
                          i289.push({
                              width: o140.width,
                              height: o140.height
                          });
                      } else i289.push({
                          width: 0,
                          height: 0
                      });
                  }), i289;
              }
          },
          {
              key: "getTotalYAxisWidth",
              value: function() {
                  var t516 = this.w, e385 = 0, i290 = 0, a239 = 0, s184 = t516.globals.yAxisScale.length > 1 ? 10 : 0, r161 = new B(this.dCtx.ctx), o141 = function(o142, n124) {
                      var l98 = t516.config.yaxis[n124].floating, h85 = 0;
                      o142.width > 0 && !l98 ? (h85 = o142.width + s184, (function(e386) {
                          return t516.globals.ignoreYAxisIndexes.indexOf(e386) > -1;
                      })(n124) && (h85 = h85 - o142.width - s184)) : h85 = l98 || r161.isYAxisHidden(n124) ? 0 : 5, t516.config.yaxis[n124].opposite ? a239 += h85 : i290 += h85, e385 += h85;
                  };
                  return t516.globals.yLabelsCoords.map(function(t517, e387) {
                      o141(t517, e387);
                  }), t516.globals.yTitleCoords.map(function(t518, e388) {
                      o141(t518, e388);
                  }), t516.globals.isBarHorizontal && !t516.config.yaxis[0].floating && (e385 = t516.globals.yLabelsCoords[0].width + t516.globals.yTitleCoords[0].width + 15), this.dCtx.yAxisWidthLeft = i290, this.dCtx.yAxisWidthRight = a239, e385;
              }
          }
      ]), t513;
  }(), rt = function() {
      function t519(e389) {
          a(this, t519), this.w = e389.w, this.dCtx = e389;
      }
      return r(t519, [
          {
              key: "gridPadForColumnsInNumericAxis",
              value: function(t520) {
                  var e390 = this.w;
                  if (e390.globals.noData || e390.globals.allSeriesCollapsed) return 0;
                  var i291 = function(t521) {
                      return "bar" === t521 || "rangeBar" === t521 || "candlestick" === t521 || "boxPlot" === t521;
                  }, a240 = e390.config.chart.type, s185 = 0, r162 = i291(a240) ? e390.config.series.length : 1;
                  if (e390.globals.comboBarCount > 0 && (r162 = e390.globals.comboBarCount), e390.globals.collapsedSeries.forEach(function(t522) {
                      i291(t522.type) && (r162 -= 1);
                  }), e390.config.chart.stacked && (r162 = 1), (i291(a240) || e390.globals.comboBarCount > 0) && e390.globals.isXNumeric && !e390.globals.isBarHorizontal && r162 > 0) {
                      var o143, n125, l99 = Math.abs(e390.globals.initialMaxX - e390.globals.initialMinX);
                      l99 <= 3 && (l99 = e390.globals.dataPoints), o143 = l99 / t520, e390.globals.minXDiff && e390.globals.minXDiff / o143 > 0 && (n125 = e390.globals.minXDiff / o143), n125 > t520 / 2 && (n125 /= 2), (s185 = n125 / r162 * parseInt(e390.config.plotOptions.bar.columnWidth, 10) / 100) < 1 && (s185 = 1), s185 = s185 / (r162 > 1 ? 1 : 1.5) + 5, e390.globals.barPadForNumericAxis = s185;
                  }
                  return s185;
              }
          },
          {
              key: "gridPadFortitleSubtitle",
              value: function() {
                  var t523 = this, e391 = this.w, i292 = e391.globals, a241 = this.dCtx.isSparkline || !e391.globals.axisCharts ? 0 : 10;
                  [
                      "title",
                      "subtitle"
                  ].forEach(function(i) {
                      void 0 !== e391.config[i].text ? a241 += e391.config[i].margin : a241 += t523.dCtx.isSparkline || !e391.globals.axisCharts ? 0 : 5;
                  }), !e391.config.legend.show || "bottom" !== e391.config.legend.position || e391.config.legend.floating || e391.globals.axisCharts || (a241 += 10);
                  var s186 = this.dCtx.dimHelpers.getTitleSubtitleCoords("title"), r163 = this.dCtx.dimHelpers.getTitleSubtitleCoords("subtitle");
                  i292.gridHeight = i292.gridHeight - s186.height - r163.height - a241, i292.translateY = i292.translateY + s186.height + r163.height + a241;
              }
          },
          {
              key: "setGridXPosForDualYAxis",
              value: function(t524, e392) {
                  var i293 = this.w, a242 = new B(this.dCtx.ctx);
                  i293.config.yaxis.map(function(s187, r164) {
                      -1 !== i293.globals.ignoreYAxisIndexes.indexOf(r164) || s187.floating || a242.isYAxisHidden(r164) || (s187.opposite && (i293.globals.translateX = i293.globals.translateX - (e392[r164].width + t524[r164].width) - parseInt(i293.config.yaxis[r164].labels.style.fontSize, 10) / 1.2 - 12), i293.globals.translateX < 2 && (i293.globals.translateX = 2));
                  });
              }
          }
      ]), t519;
  }(), ot = function() {
      function t525(e393) {
          a(this, t525), this.ctx = e393, this.w = e393.w, this.lgRect = {
          }, this.yAxisWidth = 0, this.yAxisWidthLeft = 0, this.yAxisWidthRight = 0, this.xAxisHeight = 0, this.isSparkline = this.w.config.chart.sparkline.enabled, this.dimHelpers = new it(this), this.dimYAxis = new st(this), this.dimXAxis = new at(this), this.dimGrid = new rt(this), this.lgWidthForSideLegends = 0, this.gridPad = this.w.config.grid.padding, this.xPadRight = 0, this.xPadLeft = 0;
      }
      return r(t525, [
          {
              key: "plotCoords",
              value: function() {
                  var t526 = this.w.globals;
                  this.lgRect = this.dimHelpers.getLegendsRect(), t526.axisCharts ? this.setDimensionsForAxisCharts() : this.setDimensionsForNonAxisCharts(), this.dimGrid.gridPadFortitleSubtitle(), t526.gridHeight = t526.gridHeight - this.gridPad.top - this.gridPad.bottom, t526.gridWidth = t526.gridWidth - this.gridPad.left - this.gridPad.right - this.xPadRight - this.xPadLeft;
                  var e394 = this.dimGrid.gridPadForColumnsInNumericAxis(t526.gridWidth);
                  t526.gridWidth = t526.gridWidth - 2 * e394, t526.translateX = t526.translateX + this.gridPad.left + this.xPadLeft + (e394 > 0 ? e394 + 4 : 0), t526.translateY = t526.translateY + this.gridPad.top;
              }
          },
          {
              key: "setDimensionsForAxisCharts",
              value: function() {
                  var t527 = this, e395 = this.w, i294 = e395.globals, a243 = this.dimYAxis.getyAxisLabelsCoords(), s188 = this.dimYAxis.getyAxisTitleCoords();
                  e395.globals.yLabelsCoords = [], e395.globals.yTitleCoords = [], e395.config.yaxis.map(function(t, i295) {
                      e395.globals.yLabelsCoords.push({
                          width: a243[i295].width,
                          index: i295
                      }), e395.globals.yTitleCoords.push({
                          width: s188[i295].width,
                          index: i295
                      });
                  }), this.yAxisWidth = this.dimYAxis.getTotalYAxisWidth();
                  var r165 = this.dimXAxis.getxAxisLabelsCoords(), o144 = this.dimXAxis.getxAxisTitleCoords();
                  this.conditionalChecksForAxisCoords(r165, o144), i294.translateXAxisY = e395.globals.rotateXLabels ? this.xAxisHeight / 8 : -4, i294.translateXAxisX = e395.globals.rotateXLabels && e395.globals.isXNumeric && e395.config.xaxis.labels.rotate <= -45 ? -this.xAxisWidth / 4 : 0, e395.globals.isBarHorizontal && (i294.rotateXLabels = !1, i294.translateXAxisY = parseInt(e395.config.xaxis.labels.style.fontSize, 10) / 1.5 * -1), i294.translateXAxisY = i294.translateXAxisY + e395.config.xaxis.labels.offsetY, i294.translateXAxisX = i294.translateXAxisX + e395.config.xaxis.labels.offsetX;
                  var n126 = this.yAxisWidth, l100 = this.xAxisHeight;
                  i294.xAxisLabelsHeight = this.xAxisHeight - o144.height, i294.xAxisLabelsWidth = this.xAxisWidth, i294.xAxisHeight = this.xAxisHeight;
                  var h86 = 10;
                  ("radar" === e395.config.chart.type || this.isSparkline) && (n126 = 0, l100 = i294.goldenPadding), this.isSparkline && (this.lgRect = {
                      height: 0,
                      width: 0
                  }), (this.isSparkline || "treemap" === e395.config.chart.type) && (n126 = 0, l100 = 0, h86 = 0), this.isSparkline || this.dimXAxis.additionalPaddingXLabels(r165);
                  var c75 = function() {
                      i294.translateX = n126, i294.gridHeight = i294.svgHeight - t527.lgRect.height - l100 - (t527.isSparkline || "treemap" === e395.config.chart.type ? 0 : e395.globals.rotateXLabels ? 10 : 15), i294.gridWidth = i294.svgWidth - n126;
                  };
                  switch("top" === e395.config.xaxis.position && (h86 = i294.xAxisHeight - e395.config.xaxis.axisTicks.height - 5), e395.config.legend.position){
                      case "bottom":
                          i294.translateY = h86, c75();
                          break;
                      case "top":
                          i294.translateY = this.lgRect.height + h86, c75();
                          break;
                      case "left":
                          i294.translateY = h86, i294.translateX = this.lgRect.width + n126, i294.gridHeight = i294.svgHeight - l100 - 12, i294.gridWidth = i294.svgWidth - this.lgRect.width - n126;
                          break;
                      case "right":
                          i294.translateY = h86, i294.translateX = n126, i294.gridHeight = i294.svgHeight - l100 - 12, i294.gridWidth = i294.svgWidth - this.lgRect.width - n126 - 5;
                          break;
                      default:
                          throw new Error("Legend position not supported");
                  }
                  this.dimGrid.setGridXPosForDualYAxis(s188, a243), new q(this.ctx).setYAxisXPosition(a243, s188);
              }
          },
          {
              key: "setDimensionsForNonAxisCharts",
              value: function() {
                  var t528 = this.w, e396 = t528.globals, i296 = t528.config, a244 = 0;
                  t528.config.legend.show && !t528.config.legend.floating && (a244 = 20);
                  var s = "pie" === i296.chart.type || "polarArea" === i296.chart.type || "donut" === i296.chart.type ? "pie" : "radialBar", r166 = i296.plotOptions[s].offsetY, o145 = i296.plotOptions[s].offsetX;
                  if (!i296.legend.show || i296.legend.floating) return e396.gridHeight = e396.svgHeight - i296.grid.padding.left + i296.grid.padding.right, e396.gridWidth = e396.gridHeight, e396.translateY = r166, void (e396.translateX = o145 + (e396.svgWidth - e396.gridWidth) / 2);
                  switch(i296.legend.position){
                      case "bottom":
                          e396.gridHeight = e396.svgHeight - this.lgRect.height - e396.goldenPadding, e396.gridWidth = e396.svgWidth, e396.translateY = r166 - 10, e396.translateX = o145 + (e396.svgWidth - e396.gridWidth) / 2;
                          break;
                      case "top":
                          e396.gridHeight = e396.svgHeight - this.lgRect.height - e396.goldenPadding, e396.gridWidth = e396.svgWidth, e396.translateY = this.lgRect.height + r166 + 10, e396.translateX = o145 + (e396.svgWidth - e396.gridWidth) / 2;
                          break;
                      case "left":
                          e396.gridWidth = e396.svgWidth - this.lgRect.width - a244, e396.gridHeight = "auto" !== i296.chart.height ? e396.svgHeight : e396.gridWidth, e396.translateY = r166, e396.translateX = o145 + this.lgRect.width + a244;
                          break;
                      case "right":
                          e396.gridWidth = e396.svgWidth - this.lgRect.width - a244 - 5, e396.gridHeight = "auto" !== i296.chart.height ? e396.svgHeight : e396.gridWidth, e396.translateY = r166, e396.translateX = o145 + 10;
                          break;
                      default:
                          throw new Error("Legend position not supported");
                  }
              }
          },
          {
              key: "conditionalChecksForAxisCoords",
              value: function(t529, e397) {
                  var i297 = this.w, a245 = t529.height + e397.height, s189 = i297.globals.isMultiLineX ? 1.2 : i297.globals.LINE_HEIGHT_RATIO, r167 = i297.globals.rotateXLabels ? 22 : 10, o146 = i297.globals.rotateXLabels && "bottom" === i297.config.legend.position ? 10 : 0;
                  this.xAxisHeight = a245 * s189 + r167 + o146, this.xAxisWidth = t529.width, this.xAxisHeight - e397.height > i297.config.xaxis.labels.maxHeight && (this.xAxisHeight = i297.config.xaxis.labels.maxHeight), i297.config.xaxis.labels.minHeight && this.xAxisHeight < i297.config.xaxis.labels.minHeight && (this.xAxisHeight = i297.config.xaxis.labels.minHeight), i297.config.xaxis.floating && (this.xAxisHeight = 0);
                  var n127 = 0, l101 = 0;
                  i297.config.yaxis.forEach(function(t530) {
                      n127 += t530.labels.minWidth, l101 += t530.labels.maxWidth;
                  }), this.yAxisWidth < n127 && (this.yAxisWidth = n127), this.yAxisWidth > l101 && (this.yAxisWidth = l101);
              }
          }
      ]), t525;
  }(), nt = function() {
      function t531(e398) {
          a(this, t531), this.w = e398.w, this.lgCtx = e398;
      }
      return r(t531, [
          {
              key: "getLegendStyles",
              value: function() {
                  var t532 = document.createElement("style");
                  t532.setAttribute("type", "text/css");
                  var e399 = document.createTextNode("\t\n    \t\n      .apexcharts-legend {\t\n        display: flex;\t\n        overflow: auto;\t\n        padding: 0 10px;\t\n      }\t\n      .apexcharts-legend.apx-legend-position-bottom, .apexcharts-legend.apx-legend-position-top {\t\n        flex-wrap: wrap\t\n      }\t\n      .apexcharts-legend.apx-legend-position-right, .apexcharts-legend.apx-legend-position-left {\t\n        flex-direction: column;\t\n        bottom: 0;\t\n      }\t\n      .apexcharts-legend.apx-legend-position-bottom.apexcharts-align-left, .apexcharts-legend.apx-legend-position-top.apexcharts-align-left, .apexcharts-legend.apx-legend-position-right, .apexcharts-legend.apx-legend-position-left {\t\n        justify-content: flex-start;\t\n      }\t\n      .apexcharts-legend.apx-legend-position-bottom.apexcharts-align-center, .apexcharts-legend.apx-legend-position-top.apexcharts-align-center {\t\n        justify-content: center;  \t\n      }\t\n      .apexcharts-legend.apx-legend-position-bottom.apexcharts-align-right, .apexcharts-legend.apx-legend-position-top.apexcharts-align-right {\t\n        justify-content: flex-end;\t\n      }\t\n      .apexcharts-legend-series {\t\n        cursor: pointer;\t\n        line-height: normal;\t\n      }\t\n      .apexcharts-legend.apx-legend-position-bottom .apexcharts-legend-series, .apexcharts-legend.apx-legend-position-top .apexcharts-legend-series{\t\n        display: flex;\t\n        align-items: center;\t\n      }\t\n      .apexcharts-legend-text {\t\n        position: relative;\t\n        font-size: 14px;\t\n      }\t\n      .apexcharts-legend-text *, .apexcharts-legend-marker * {\t\n        pointer-events: none;\t\n      }\t\n      .apexcharts-legend-marker {\t\n        position: relative;\t\n        display: inline-block;\t\n        cursor: pointer;\t\n        margin-right: 3px;\t\n        border-style: solid;\n      }\t\n      \t\n      .apexcharts-legend.apexcharts-align-right .apexcharts-legend-series, .apexcharts-legend.apexcharts-align-left .apexcharts-legend-series{\t\n        display: inline-block;\t\n      }\t\n      .apexcharts-legend-series.apexcharts-no-click {\t\n        cursor: auto;\t\n      }\t\n      .apexcharts-legend .apexcharts-hidden-zero-series, .apexcharts-legend .apexcharts-hidden-null-series {\t\n        display: none !important;\t\n      }\t\n      .apexcharts-inactive-legend {\t\n        opacity: 0.45;\t\n      }");
                  return t532.appendChild(e399), t532;
              }
          },
          {
              key: "getLegendBBox",
              value: function() {
                  var t533 = this.w.globals.dom.baseEl.querySelector(".apexcharts-legend").getBoundingClientRect(), e400 = t533.width;
                  return {
                      clwh: t533.height,
                      clww: e400
                  };
              }
          },
          {
              key: "appendToForeignObject",
              value: function() {
                  var t534 = this.w.globals;
                  t534.dom.elLegendForeign = document.createElementNS(t534.SVGNS, "foreignObject");
                  var e401 = t534.dom.elLegendForeign;
                  e401.setAttribute("x", 0), e401.setAttribute("y", 0), e401.setAttribute("width", t534.svgWidth), e401.setAttribute("height", t534.svgHeight), t534.dom.elLegendWrap.setAttribute("xmlns", "http://www.w3.org/1999/xhtml"), e401.appendChild(t534.dom.elLegendWrap), e401.appendChild(this.getLegendStyles()), t534.dom.Paper.node.insertBefore(e401, t534.dom.elGraphical.node);
              }
          },
          {
              key: "toggleDataSeries",
              value: function(t535, e402) {
                  var i298 = this, a246 = this.w;
                  if (a246.globals.axisCharts || "radialBar" === a246.config.chart.type) {
                      a246.globals.resized = !0;
                      var s190 = null, r168 = null;
                      if (a246.globals.risingSeries = [], a246.globals.axisCharts ? (s190 = a246.globals.dom.baseEl.querySelector(".apexcharts-series[data\\:realIndex='".concat(t535, "']")), r168 = parseInt(s190.getAttribute("data:realIndex"), 10)) : (s190 = a246.globals.dom.baseEl.querySelector(".apexcharts-series[rel='".concat(t535 + 1, "']")), r168 = parseInt(s190.getAttribute("rel"), 10) - 1), e402) [
                          {
                              cs: a246.globals.collapsedSeries,
                              csi: a246.globals.collapsedSeriesIndices
                          },
                          {
                              cs: a246.globals.ancillaryCollapsedSeries,
                              csi: a246.globals.ancillaryCollapsedSeriesIndices
                          }
                      ].forEach(function(t536) {
                          i298.riseCollapsedSeries(t536.cs, t536.csi, r168);
                      });
                      else this.hideSeries({
                          seriesEl: s190,
                          realIndex: r168
                      });
                  } else {
                      var o147 = a246.globals.dom.Paper.select(" .apexcharts-series[rel='".concat(t535 + 1, "'] path")), n128 = a246.config.chart.type;
                      if ("pie" === n128 || "polarArea" === n128 || "donut" === n128) {
                          var l102 = a246.config.plotOptions.pie.donut.labels;
                          new b(this.lgCtx.ctx).pathMouseDown(o147.members[0], null), this.lgCtx.ctx.pie.printDataLabelsInner(o147.members[0].node, l102);
                      }
                      o147.fire("click");
                  }
              }
          },
          {
              key: "hideSeries",
              value: function(t537) {
                  var e403 = t537.seriesEl, i299 = t537.realIndex, a247 = this.w, s191 = p.clone(a247.config.series);
                  if (a247.globals.axisCharts) {
                      var r169 = !1;
                      if (a247.config.yaxis[i299] && a247.config.yaxis[i299].show && a247.config.yaxis[i299].showAlways && (r169 = !0, a247.globals.ancillaryCollapsedSeriesIndices.indexOf(i299) < 0 && (a247.globals.ancillaryCollapsedSeries.push({
                          index: i299,
                          data: s191[i299].data.slice(),
                          type: e403.parentNode.className.baseVal.split("-")[1]
                      }), a247.globals.ancillaryCollapsedSeriesIndices.push(i299))), !r169) {
                          a247.globals.collapsedSeries.push({
                              index: i299,
                              data: s191[i299].data.slice(),
                              type: e403.parentNode.className.baseVal.split("-")[1]
                          }), a247.globals.collapsedSeriesIndices.push(i299);
                          var o148 = a247.globals.risingSeries.indexOf(i299);
                          a247.globals.risingSeries.splice(o148, 1);
                      }
                  } else a247.globals.collapsedSeries.push({
                      index: i299,
                      data: s191[i299]
                  }), a247.globals.collapsedSeriesIndices.push(i299);
                  for(var n129 = e403.childNodes, l103 = 0; l103 < n129.length; l103++)n129[l103].classList.contains("apexcharts-series-markers-wrap") && (n129[l103].classList.contains("apexcharts-hide") ? n129[l103].classList.remove("apexcharts-hide") : n129[l103].classList.add("apexcharts-hide"));
                  a247.globals.allSeriesCollapsed = a247.globals.collapsedSeries.length === a247.config.series.length, s191 = this._getSeriesBasedOnCollapsedState(s191), this.lgCtx.ctx.updateHelpers._updateSeries(s191, a247.config.chart.animations.dynamicAnimation.enabled);
              }
          },
          {
              key: "riseCollapsedSeries",
              value: function(t538, e404, i300) {
                  var a248 = this.w, s192 = p.clone(a248.config.series);
                  if (t538.length > 0) {
                      for(var r170 = 0; r170 < t538.length; r170++)t538[r170].index === i300 && (a248.globals.axisCharts ? (s192[i300].data = t538[r170].data.slice(), t538.splice(r170, 1), e404.splice(r170, 1), a248.globals.risingSeries.push(i300)) : (s192[i300] = t538[r170].data, t538.splice(r170, 1), e404.splice(r170, 1), a248.globals.risingSeries.push(i300)));
                      s192 = this._getSeriesBasedOnCollapsedState(s192), this.lgCtx.ctx.updateHelpers._updateSeries(s192, a248.config.chart.animations.dynamicAnimation.enabled);
                  }
              }
          },
          {
              key: "_getSeriesBasedOnCollapsedState",
              value: function(t539) {
                  var e405 = this.w;
                  return e405.globals.axisCharts ? t539.forEach(function(i, a249) {
                      e405.globals.collapsedSeriesIndices.indexOf(a249) > -1 && (t539[a249].data = []);
                  }) : t539.forEach(function(i, a250) {
                      e405.globals.collapsedSeriesIndices.indexOf(a250) > -1 && (t539[a250] = 0);
                  }), t539;
              }
          }
      ]), t531;
  }(), lt = function() {
      function t540(e406, i) {
          a(this, t540), this.ctx = e406, this.w = e406.w, this.onLegendClick = this.onLegendClick.bind(this), this.onLegendHovered = this.onLegendHovered.bind(this), this.isBarsDistributed = "bar" === this.w.config.chart.type && this.w.config.plotOptions.bar.distributed && 1 === this.w.config.series.length, this.legendHelpers = new nt(this);
      }
      return r(t540, [
          {
              key: "init",
              value: function() {
                  var t541 = this.w, e407 = t541.globals, i301 = t541.config;
                  if ((i301.legend.showForSingleSeries && 1 === e407.series.length || this.isBarsDistributed || e407.series.length > 1 || !e407.axisCharts) && i301.legend.show) {
                      for(; e407.dom.elLegendWrap.firstChild;)e407.dom.elLegendWrap.removeChild(e407.dom.elLegendWrap.firstChild);
                      this.drawLegends(), p.isIE11() ? document.getElementsByTagName("head")[0].appendChild(this.legendHelpers.getLegendStyles()) : this.legendHelpers.appendToForeignObject(), "bottom" === i301.legend.position || "top" === i301.legend.position ? this.legendAlignHorizontal() : "right" !== i301.legend.position && "left" !== i301.legend.position || this.legendAlignVertical();
                  }
              }
          },
          {
              key: "drawLegends",
              value: function() {
                  var t542 = this, e408 = this.w, i302 = e408.config.legend.fontFamily, a251 = e408.globals.seriesNames, s193 = e408.globals.colors.slice();
                  if ("heatmap" === e408.config.chart.type) {
                      var r171 = e408.config.plotOptions.heatmap.colorScale.ranges;
                      a251 = r171.map(function(t543) {
                          return t543.name ? t543.name : t543.from + " - " + t543.to;
                      }), s193 = r171.map(function(t544) {
                          return t544.color;
                      });
                  } else this.isBarsDistributed && (a251 = e408.globals.labels.slice());
                  e408.config.legend.customLegendItems.length && (a251 = e408.config.legend.customLegendItems);
                  for(var o149 = e408.globals.legendFormatter, n130 = e408.config.legend.inverseOrder, l104 = n130 ? a251.length - 1 : 0; n130 ? l104 >= 0 : l104 <= a251.length - 1; n130 ? l104-- : l104++){
                      var h87 = o149(a251[l104], {
                          seriesIndex: l104,
                          w: e408
                      }), c76 = !1, d66 = !1;
                      if (e408.globals.collapsedSeries.length > 0) for(var g55 = 0; g55 < e408.globals.collapsedSeries.length; g55++)e408.globals.collapsedSeries[g55].index === l104 && (c76 = !0);
                      if (e408.globals.ancillaryCollapsedSeriesIndices.length > 0) for(var u47 = 0; u47 < e408.globals.ancillaryCollapsedSeriesIndices.length; u47++)e408.globals.ancillaryCollapsedSeriesIndices[u47] === l104 && (d66 = !0);
                      var f35 = document.createElement("span");
                      f35.classList.add("apexcharts-legend-marker");
                      var x28 = e408.config.legend.markers.offsetX, v27 = e408.config.legend.markers.offsetY, m22 = e408.config.legend.markers.height, w16 = e408.config.legend.markers.width, k15 = e408.config.legend.markers.strokeWidth, A11 = e408.config.legend.markers.strokeColor, S10 = e408.config.legend.markers.radius, C8 = f35.style;
                      C8.background = s193[l104], C8.color = s193[l104], C8.setProperty("background", s193[l104], "important"), e408.config.legend.markers.fillColors && e408.config.legend.markers.fillColors[l104] && (C8.background = e408.config.legend.markers.fillColors[l104]), void 0 !== e408.globals.seriesColors[l104] && (C8.background = e408.globals.seriesColors[l104], C8.color = e408.globals.seriesColors[l104]), C8.height = Array.isArray(m22) ? parseFloat(m22[l104]) + "px" : parseFloat(m22) + "px", C8.width = Array.isArray(w16) ? parseFloat(w16[l104]) + "px" : parseFloat(w16) + "px", C8.left = (Array.isArray(x28) ? parseFloat(x28[l104]) : parseFloat(x28)) + "px", C8.top = (Array.isArray(v27) ? parseFloat(v27[l104]) : parseFloat(v27)) + "px", C8.borderWidth = Array.isArray(k15) ? k15[l104] : k15, C8.borderColor = Array.isArray(A11) ? A11[l104] : A11, C8.borderRadius = Array.isArray(S10) ? parseFloat(S10[l104]) + "px" : parseFloat(S10) + "px", e408.config.legend.markers.customHTML && (Array.isArray(e408.config.legend.markers.customHTML) ? e408.config.legend.markers.customHTML[l104] && (f35.innerHTML = e408.config.legend.markers.customHTML[l104]()) : f35.innerHTML = e408.config.legend.markers.customHTML()), b.setAttrs(f35, {
                          rel: l104 + 1,
                          "data:collapsed": c76 || d66
                      }), (c76 || d66) && f35.classList.add("apexcharts-inactive-legend");
                      var L7 = document.createElement("div"), P7 = document.createElement("span");
                      P7.classList.add("apexcharts-legend-text"), P7.innerHTML = Array.isArray(h87) ? h87.join(" ") : h87;
                      var T8 = e408.config.legend.labels.useSeriesColors ? e408.globals.colors[l104] : e408.config.legend.labels.colors;
                      T8 || (T8 = e408.config.chart.foreColor), P7.style.color = T8, P7.style.fontSize = parseFloat(e408.config.legend.fontSize) + "px", P7.style.fontWeight = e408.config.legend.fontWeight, P7.style.fontFamily = i302 || e408.config.chart.fontFamily, b.setAttrs(P7, {
                          rel: l104 + 1,
                          i: l104,
                          "data:default-text": encodeURIComponent(h87),
                          "data:collapsed": c76 || d66
                      }), L7.appendChild(f35), L7.appendChild(P7);
                      var M8 = new y(this.ctx);
                      if (!e408.config.legend.showForZeroSeries) 0 === M8.getSeriesTotalByIndex(l104) && M8.seriesHaveSameValues(l104) && !M8.isSeriesNull(l104) && -1 === e408.globals.collapsedSeriesIndices.indexOf(l104) && -1 === e408.globals.ancillaryCollapsedSeriesIndices.indexOf(l104) && L7.classList.add("apexcharts-hidden-zero-series");
                      e408.config.legend.showForNullSeries || M8.isSeriesNull(l104) && -1 === e408.globals.collapsedSeriesIndices.indexOf(l104) && -1 === e408.globals.ancillaryCollapsedSeriesIndices.indexOf(l104) && L7.classList.add("apexcharts-hidden-null-series"), e408.globals.dom.elLegendWrap.appendChild(L7), e408.globals.dom.elLegendWrap.classList.add("apexcharts-align-".concat(e408.config.legend.horizontalAlign)), e408.globals.dom.elLegendWrap.classList.add("apx-legend-position-" + e408.config.legend.position), L7.classList.add("apexcharts-legend-series"), L7.style.margin = "".concat(e408.config.legend.itemMargin.vertical, "px ").concat(e408.config.legend.itemMargin.horizontal, "px"), e408.globals.dom.elLegendWrap.style.width = e408.config.legend.width ? e408.config.legend.width + "px" : "", e408.globals.dom.elLegendWrap.style.height = e408.config.legend.height ? e408.config.legend.height + "px" : "", b.setAttrs(L7, {
                          rel: l104 + 1,
                          seriesName: p.escapeString(a251[l104]),
                          "data:collapsed": c76 || d66
                      }), (c76 || d66) && L7.classList.add("apexcharts-inactive-legend"), e408.config.legend.onItemClick.toggleDataSeries || L7.classList.add("apexcharts-no-click");
                  }
                  e408.globals.dom.elWrap.addEventListener("click", t542.onLegendClick, !0), e408.config.legend.onItemHover.highlightDataSeries && 0 === e408.config.legend.customLegendItems.length && (e408.globals.dom.elWrap.addEventListener("mousemove", t542.onLegendHovered, !0), e408.globals.dom.elWrap.addEventListener("mouseout", t542.onLegendHovered, !0));
              }
          },
          {
              key: "setLegendWrapXY",
              value: function(t545, e409) {
                  var i303 = this.w, a252 = i303.globals.dom.baseEl.querySelector(".apexcharts-legend"), s194 = a252.getBoundingClientRect(), r172 = 0, o150 = 0;
                  if ("bottom" === i303.config.legend.position) o150 += i303.globals.svgHeight - s194.height / 2;
                  else if ("top" === i303.config.legend.position) {
                      var n131 = new ot(this.ctx), l105 = n131.dimHelpers.getTitleSubtitleCoords("title").height, h88 = n131.dimHelpers.getTitleSubtitleCoords("subtitle").height;
                      o150 = o150 + (l105 > 0 ? l105 - 10 : 0) + (h88 > 0 ? h88 - 10 : 0);
                  }
                  a252.style.position = "absolute", r172 = r172 + t545 + i303.config.legend.offsetX, o150 = o150 + e409 + i303.config.legend.offsetY, a252.style.left = r172 + "px", a252.style.top = o150 + "px", "bottom" === i303.config.legend.position ? (a252.style.top = "auto", a252.style.bottom = 5 - i303.config.legend.offsetY + "px") : "right" === i303.config.legend.position && (a252.style.left = "auto", a252.style.right = 25 + i303.config.legend.offsetX + "px");
                  [
                      "width",
                      "height"
                  ].forEach(function(t) {
                      a252.style[t] && (a252.style[t] = parseInt(i303.config.legend[t], 10) + "px");
                  });
              }
          },
          {
              key: "legendAlignHorizontal",
              value: function() {
                  var t546 = this.w;
                  t546.globals.dom.baseEl.querySelector(".apexcharts-legend").style.right = 0;
                  var e410 = this.legendHelpers.getLegendBBox(), i304 = new ot(this.ctx), a253 = i304.dimHelpers.getTitleSubtitleCoords("title"), s195 = i304.dimHelpers.getTitleSubtitleCoords("subtitle"), r173 = 0;
                  "bottom" === t546.config.legend.position ? r173 = -e410.clwh / 1.8 : "top" === t546.config.legend.position && (r173 = a253.height + s195.height + t546.config.title.margin + t546.config.subtitle.margin - 10), this.setLegendWrapXY(20, r173);
              }
          },
          {
              key: "legendAlignVertical",
              value: function() {
                  var t547 = this.w, e411 = this.legendHelpers.getLegendBBox(), i305 = 0;
                  "left" === t547.config.legend.position && (i305 = 20), "right" === t547.config.legend.position && (i305 = t547.globals.svgWidth - e411.clww - 10), this.setLegendWrapXY(i305, 20);
              }
          },
          {
              key: "onLegendHovered",
              value: function(t548) {
                  var e412 = this.w, i306 = t548.target.classList.contains("apexcharts-legend-text") || t548.target.classList.contains("apexcharts-legend-marker");
                  if ("heatmap" === e412.config.chart.type || this.isBarsDistributed) {
                      if (i306) {
                          var a254 = parseInt(t548.target.getAttribute("rel"), 10) - 1;
                          this.ctx.events.fireEvent("legendHover", [
                              this.ctx,
                              a254,
                              this.w
                          ]), new z(this.ctx).highlightRangeInSeries(t548, t548.target);
                      }
                  } else !t548.target.classList.contains("apexcharts-inactive-legend") && i306 && new z(this.ctx).toggleSeriesOnHover(t548, t548.target);
              }
          },
          {
              key: "onLegendClick",
              value: function(t549) {
                  var e413 = this.w;
                  if (!e413.config.legend.customLegendItems.length && (t549.target.classList.contains("apexcharts-legend-text") || t549.target.classList.contains("apexcharts-legend-marker"))) {
                      var i307 = parseInt(t549.target.getAttribute("rel"), 10) - 1, a255 = "true" === t549.target.getAttribute("data:collapsed"), s196 = this.w.config.chart.events.legendClick;
                      "function" == typeof s196 && s196(this.ctx, i307, this.w), this.ctx.events.fireEvent("legendClick", [
                          this.ctx,
                          i307,
                          this.w
                      ]);
                      var r174 = this.w.config.legend.markers.onClick;
                      "function" == typeof r174 && t549.target.classList.contains("apexcharts-legend-marker") && (r174(this.ctx, i307, this.w), this.ctx.events.fireEvent("legendMarkerClick", [
                          this.ctx,
                          i307,
                          this.w
                      ])), "treemap" !== e413.config.chart.type && "heatmap" !== e413.config.chart.type && !this.isBarsDistributed && e413.config.legend.onItemClick.toggleDataSeries && this.legendHelpers.toggleDataSeries(i307, a255);
                  }
              }
          }
      ]), t540;
  }(), ht = function() {
      function t550(e414) {
          a(this, t550), this.ctx = e414, this.w = e414.w;
          var i308 = this.w;
          this.ev = this.w.config.chart.events, this.selectedClass = "apexcharts-selected", this.localeValues = this.w.globals.locale.toolbar, this.minX = i308.globals.minX, this.maxX = i308.globals.maxX;
      }
      return r(t550, [
          {
              key: "createToolbar",
              value: function() {
                  var t551 = this, e415 = this.w, i309 = function() {
                      return document.createElement("div");
                  }, a256 = i309();
                  if (a256.setAttribute("class", "apexcharts-toolbar"), a256.style.top = e415.config.chart.toolbar.offsetY + "px", a256.style.right = 3 - e415.config.chart.toolbar.offsetX + "px", e415.globals.dom.elWrap.appendChild(a256), this.elZoom = i309(), this.elZoomIn = i309(), this.elZoomOut = i309(), this.elPan = i309(), this.elSelection = i309(), this.elZoomReset = i309(), this.elMenuIcon = i309(), this.elMenu = i309(), this.elCustomIcons = [], this.t = e415.config.chart.toolbar.tools, Array.isArray(this.t.customIcons)) for(var s197 = 0; s197 < this.t.customIcons.length; s197++)this.elCustomIcons.push(i309());
                  var r175 = [], o151 = function(i310, a257, s198) {
                      var o152 = i310.toLowerCase();
                      t551.t[o152] && e415.config.chart.zoom.enabled && r175.push({
                          el: a257,
                          icon: "string" == typeof t551.t[o152] ? t551.t[o152] : s198,
                          title: t551.localeValues[i310],
                          class: "apexcharts-".concat(o152, "-icon")
                      });
                  };
                  o151("zoomIn", this.elZoomIn, '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24">\n    <path d="M0 0h24v24H0z" fill="none"/>\n    <path d="M13 7h-2v4H7v2h4v4h2v-4h4v-2h-4V7zm-1-5C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8z"/>\n</svg>\n'), o151("zoomOut", this.elZoomOut, '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24">\n    <path d="M0 0h24v24H0z" fill="none"/>\n    <path d="M7 11v2h10v-2H7zm5-9C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8z"/>\n</svg>\n');
                  var n132 = function(i311) {
                      t551.t[i311] && e415.config.chart[i311].enabled && r175.push({
                          el: "zoom" === i311 ? t551.elZoom : t551.elSelection,
                          icon: "string" == typeof t551.t[i311] ? t551.t[i311] : "zoom" === i311 ? '<svg xmlns="http://www.w3.org/2000/svg" fill="#000000" height="24" viewBox="0 0 24 24" width="24">\n    <path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/>\n    <path d="M0 0h24v24H0V0z" fill="none"/>\n    <path d="M12 10h-2v2H9v-2H7V9h2V7h1v2h2v1z"/>\n</svg>' : '<svg fill="#6E8192" height="24" viewBox="0 0 24 24" width="24" xmlns="http://www.w3.org/2000/svg">\n    <path d="M0 0h24v24H0z" fill="none"/>\n    <path d="M3 5h2V3c-1.1 0-2 .9-2 2zm0 8h2v-2H3v2zm4 8h2v-2H7v2zM3 9h2V7H3v2zm10-6h-2v2h2V3zm6 0v2h2c0-1.1-.9-2-2-2zM5 21v-2H3c0 1.1.9 2 2 2zm-2-4h2v-2H3v2zM9 3H7v2h2V3zm2 18h2v-2h-2v2zm8-8h2v-2h-2v2zm0 8c1.1 0 2-.9 2-2h-2v2zm0-12h2V7h-2v2zm0 8h2v-2h-2v2zm-4 4h2v-2h-2v2zm0-16h2V3h-2v2z"/>\n</svg>',
                          title: t551.localeValues["zoom" === i311 ? "selectionZoom" : "selection"],
                          class: e415.globals.isTouchDevice ? "apexcharts-element-hidden" : "apexcharts-".concat(i311, "-icon")
                      });
                  };
                  n132("zoom"), n132("selection"), this.t.pan && e415.config.chart.zoom.enabled && r175.push({
                      el: this.elPan,
                      icon: "string" == typeof this.t.pan ? this.t.pan : '<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" fill="#000000" height="24" viewBox="0 0 24 24" width="24">\n    <defs>\n        <path d="M0 0h24v24H0z" id="a"/>\n    </defs>\n    <clipPath id="b">\n        <use overflow="visible" xlink:href="#a"/>\n    </clipPath>\n    <path clip-path="url(#b)" d="M23 5.5V20c0 2.2-1.8 4-4 4h-7.3c-1.08 0-2.1-.43-2.85-1.19L1 14.83s1.26-1.23 1.3-1.25c.22-.19.49-.29.79-.29.22 0 .42.06.6.16.04.01 4.31 2.46 4.31 2.46V4c0-.83.67-1.5 1.5-1.5S11 3.17 11 4v7h1V1.5c0-.83.67-1.5 1.5-1.5S15 .67 15 1.5V11h1V2.5c0-.83.67-1.5 1.5-1.5s1.5.67 1.5 1.5V11h1V5.5c0-.83.67-1.5 1.5-1.5s1.5.67 1.5 1.5z"/>\n</svg>',
                      title: this.localeValues.pan,
                      class: e415.globals.isTouchDevice ? "apexcharts-element-hidden" : "apexcharts-pan-icon"
                  }), o151("reset", this.elZoomReset, '<svg fill="#000000" height="24" viewBox="0 0 24 24" width="24" xmlns="http://www.w3.org/2000/svg">\n    <path d="M10 20v-6h4v6h5v-8h3L12 3 2 12h3v8z"/>\n    <path d="M0 0h24v24H0z" fill="none"/>\n</svg>'), this.t.download && r175.push({
                      el: this.elMenuIcon,
                      icon: "string" == typeof this.t.download ? this.t.download : '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><path fill="none" d="M0 0h24v24H0V0z"/><path d="M3 18h18v-2H3v2zm0-5h18v-2H3v2zm0-7v2h18V6H3z"/></svg>',
                      title: this.localeValues.menu,
                      class: "apexcharts-menu-icon"
                  });
                  for(var l106 = 0; l106 < this.elCustomIcons.length; l106++)r175.push({
                      el: this.elCustomIcons[l106],
                      icon: this.t.customIcons[l106].icon,
                      title: this.t.customIcons[l106].title,
                      index: this.t.customIcons[l106].index,
                      class: "apexcharts-toolbar-custom-icon " + this.t.customIcons[l106].class
                  });
                  r175.forEach(function(t552, e416) {
                      t552.index && p.moveIndexInArray(r175, e416, t552.index);
                  });
                  for(var h89 = 0; h89 < r175.length; h89++)b.setAttrs(r175[h89].el, {
                      class: r175[h89].class,
                      title: r175[h89].title
                  }), r175[h89].el.innerHTML = r175[h89].icon, a256.appendChild(r175[h89].el);
                  this._createHamburgerMenu(a256), e415.globals.zoomEnabled ? this.elZoom.classList.add(this.selectedClass) : e415.globals.panEnabled ? this.elPan.classList.add(this.selectedClass) : e415.globals.selectionEnabled && this.elSelection.classList.add(this.selectedClass), this.addToolbarEventListeners();
              }
          },
          {
              key: "_createHamburgerMenu",
              value: function(t553) {
                  this.elMenuItems = [], t553.appendChild(this.elMenu), b.setAttrs(this.elMenu, {
                      class: "apexcharts-menu"
                  });
                  var e417 = [
                      {
                          name: "exportSVG",
                          title: this.localeValues.exportToSVG
                      },
                      {
                          name: "exportPNG",
                          title: this.localeValues.exportToPNG
                      },
                      {
                          name: "exportCSV",
                          title: this.localeValues.exportToCSV
                      }
                  ];
                  this.w.globals.allSeriesHasEqualX || e417.splice(2, 1);
                  for(var i312 = 0; i312 < e417.length; i312++)this.elMenuItems.push(document.createElement("div")), this.elMenuItems[i312].innerHTML = e417[i312].title, b.setAttrs(this.elMenuItems[i312], {
                      class: "apexcharts-menu-item ".concat(e417[i312].name),
                      title: e417[i312].title
                  }), this.elMenu.appendChild(this.elMenuItems[i312]);
              }
          },
          {
              key: "addToolbarEventListeners",
              value: function() {
                  var t554 = this;
                  this.elZoomReset.addEventListener("click", this.handleZoomReset.bind(this)), this.elSelection.addEventListener("click", this.toggleZoomSelection.bind(this, "selection")), this.elZoom.addEventListener("click", this.toggleZoomSelection.bind(this, "zoom")), this.elZoomIn.addEventListener("click", this.handleZoomIn.bind(this)), this.elZoomOut.addEventListener("click", this.handleZoomOut.bind(this)), this.elPan.addEventListener("click", this.togglePanning.bind(this)), this.elMenuIcon.addEventListener("click", this.toggleMenu.bind(this)), this.elMenuItems.forEach(function(e419) {
                      e419.classList.contains("exportSVG") ? e419.addEventListener("click", t554.handleDownload.bind(t554, "svg")) : e419.classList.contains("exportPNG") ? e419.addEventListener("click", t554.handleDownload.bind(t554, "png")) : e419.classList.contains("exportCSV") && e419.addEventListener("click", t554.handleDownload.bind(t554, "csv"));
                  });
                  for(var e418 = 0; e418 < this.t.customIcons.length; e418++)this.elCustomIcons[e418].addEventListener("click", this.t.customIcons[e418].click.bind(this, this.ctx, this.ctx.w));
              }
          },
          {
              key: "toggleZoomSelection",
              value: function(t555) {
                  this.ctx.getSyncedCharts().forEach(function(e420) {
                      e420.ctx.toolbar.toggleOtherControls();
                      var i313 = "selection" === t555 ? e420.ctx.toolbar.elSelection : e420.ctx.toolbar.elZoom, a = "selection" === t555 ? "selectionEnabled" : "zoomEnabled";
                      e420.w.globals[a] = !e420.w.globals[a], i313.classList.contains(e420.ctx.toolbar.selectedClass) ? i313.classList.remove(e420.ctx.toolbar.selectedClass) : i313.classList.add(e420.ctx.toolbar.selectedClass);
                  });
              }
          },
          {
              key: "getToolbarIconsReference",
              value: function() {
                  var t556 = this.w;
                  this.elZoom || (this.elZoom = t556.globals.dom.baseEl.querySelector(".apexcharts-zoom-icon")), this.elPan || (this.elPan = t556.globals.dom.baseEl.querySelector(".apexcharts-pan-icon")), this.elSelection || (this.elSelection = t556.globals.dom.baseEl.querySelector(".apexcharts-selection-icon"));
              }
          },
          {
              key: "enableZoomPanFromToolbar",
              value: function(t557) {
                  this.toggleOtherControls(), "pan" === t557 ? this.w.globals.panEnabled = !0 : this.w.globals.zoomEnabled = !0;
                  var e421 = "pan" === t557 ? this.elPan : this.elZoom, i314 = "pan" === t557 ? this.elZoom : this.elPan;
                  e421 && e421.classList.add(this.selectedClass), i314 && i314.classList.remove(this.selectedClass);
              }
          },
          {
              key: "togglePanning",
              value: function() {
                  this.ctx.getSyncedCharts().forEach(function(t558) {
                      t558.ctx.toolbar.toggleOtherControls(), t558.w.globals.panEnabled = !t558.w.globals.panEnabled, t558.ctx.toolbar.elPan.classList.contains(t558.ctx.toolbar.selectedClass) ? t558.ctx.toolbar.elPan.classList.remove(t558.ctx.toolbar.selectedClass) : t558.ctx.toolbar.elPan.classList.add(t558.ctx.toolbar.selectedClass);
                  });
              }
          },
          {
              key: "toggleOtherControls",
              value: function() {
                  var t559 = this, e422 = this.w;
                  e422.globals.panEnabled = !1, e422.globals.zoomEnabled = !1, e422.globals.selectionEnabled = !1, this.getToolbarIconsReference(), [
                      this.elPan,
                      this.elSelection,
                      this.elZoom
                  ].forEach(function(e423) {
                      e423 && e423.classList.remove(t559.selectedClass);
                  });
              }
          },
          {
              key: "handleZoomIn",
              value: function() {
                  var t560 = this.w;
                  t560.globals.isRangeBar && (this.minX = t560.globals.minY, this.maxX = t560.globals.maxY);
                  var e424 = (this.minX + this.maxX) / 2, i315 = (this.minX + e424) / 2, a258 = (this.maxX + e424) / 2, s199 = this._getNewMinXMaxX(i315, a258);
                  t560.globals.disableZoomIn || this.zoomUpdateOptions(s199.minX, s199.maxX);
              }
          },
          {
              key: "handleZoomOut",
              value: function() {
                  var t561 = this.w;
                  if (t561.globals.isRangeBar && (this.minX = t561.globals.minY, this.maxX = t561.globals.maxY), !("datetime" === t561.config.xaxis.type && new Date(this.minX).getUTCFullYear() < 1000)) {
                      var e425 = (this.minX + this.maxX) / 2, i316 = this.minX - (e425 - this.minX), a259 = this.maxX - (e425 - this.maxX), s200 = this._getNewMinXMaxX(i316, a259);
                      t561.globals.disableZoomOut || this.zoomUpdateOptions(s200.minX, s200.maxX);
                  }
              }
          },
          {
              key: "_getNewMinXMaxX",
              value: function(t562, e426) {
                  var i317 = this.w.config.xaxis.convertedCatToNumeric;
                  return {
                      minX: i317 ? Math.floor(t562) : t562,
                      maxX: i317 ? Math.floor(e426) : e426
                  };
              }
          },
          {
              key: "zoomUpdateOptions",
              value: function(t563, e427) {
                  var i318 = this.w;
                  if (void 0 !== t563 || void 0 !== e427) {
                      if (!(i318.config.xaxis.convertedCatToNumeric && (t563 < 1 && (t563 = 1, e427 = i318.globals.dataPoints), e427 - t563 < 2))) {
                          var a260 = {
                              min: t563,
                              max: e427
                          }, s201 = this.getBeforeZoomRange(a260);
                          s201 && (a260 = s201.xaxis);
                          var r176 = {
                              xaxis: a260
                          }, o153 = p.clone(i318.globals.initialConfig.yaxis);
                          if (i318.config.chart.zoom.autoScaleYaxis) o153 = new j(this.ctx).autoScaleY(this.ctx, o153, {
                              xaxis: a260
                          });
                          i318.config.chart.group || (r176.yaxis = o153), this.w.globals.zoomed = !0, this.ctx.updateHelpers._updateOptions(r176, !1, this.w.config.chart.animations.dynamicAnimation.enabled), this.zoomCallback(a260, o153);
                      }
                  } else this.handleZoomReset();
              }
          },
          {
              key: "zoomCallback",
              value: function(t564, e428) {
                  "function" == typeof this.ev.zoomed && this.ev.zoomed(this.ctx, {
                      xaxis: t564,
                      yaxis: e428
                  });
              }
          },
          {
              key: "getBeforeZoomRange",
              value: function(t565, e429) {
                  var i319 = null;
                  return "function" == typeof this.ev.beforeZoom && (i319 = this.ev.beforeZoom(this, {
                      xaxis: t565,
                      yaxis: e429
                  })), i319;
              }
          },
          {
              key: "toggleMenu",
              value: function() {
                  var t566 = this;
                  window.setTimeout(function() {
                      t566.elMenu.classList.contains("apexcharts-menu-open") ? t566.elMenu.classList.remove("apexcharts-menu-open") : t566.elMenu.classList.add("apexcharts-menu-open");
                  }, 0);
              }
          },
          {
              key: "handleDownload",
              value: function(t567) {
                  var e430 = this.w, i320 = new V(this.ctx);
                  switch(t567){
                      case "svg":
                          i320.exportToSVG(this.ctx);
                          break;
                      case "png":
                          i320.exportToPng(this.ctx);
                          break;
                      case "csv":
                          i320.exportToCSV({
                              series: e430.config.series,
                              columnDelimiter: e430.config.chart.toolbar.export.csv.columnDelimiter
                          });
                  }
              }
          },
          {
              key: "handleZoomReset",
              value: function(t568) {
                  this.ctx.getSyncedCharts().forEach(function(t569) {
                      var e431 = t569.w;
                      if (e431.globals.lastXAxis.min = void 0, e431.globals.lastXAxis.max = void 0, t569.updateHelpers.revertDefaultAxisMinMax(), "function" == typeof e431.config.chart.events.beforeResetZoom) {
                          var i321 = e431.config.chart.events.beforeResetZoom(t569, e431);
                          i321 && t569.updateHelpers.revertDefaultAxisMinMax(i321);
                      }
                      "function" == typeof e431.config.chart.events.zoomed && t569.ctx.toolbar.zoomCallback({
                          min: e431.config.xaxis.min,
                          max: e431.config.xaxis.max
                      }), e431.globals.zoomed = !1;
                      var a261 = t569.ctx.series.emptyCollapsedSeries(p.clone(e431.globals.initialSeries));
                      t569.updateHelpers._updateSeries(a261, e431.config.chart.animations.dynamicAnimation.enabled);
                  });
              }
          },
          {
              key: "destroy",
              value: function() {
                  this.elZoom = null, this.elZoomIn = null, this.elZoomOut = null, this.elPan = null, this.elSelection = null, this.elZoomReset = null, this.elMenuIcon = null;
              }
          }
      ]), t550;
  }(), ct = function(t570) {
      n(i322, ht);
      var e432 = d(i322);
      function i322(t571) {
          var s202;
          return a(this, i322), (s202 = e432.call(this, t571)).ctx = t571, s202.w = t571.w, s202.dragged = !1, s202.graphics = new b(s202.ctx), s202.eventList = [
              "mousedown",
              "mouseleave",
              "mousemove",
              "touchstart",
              "touchmove",
              "mouseup",
              "touchend"
          ], s202.clientX = 0, s202.clientY = 0, s202.startX = 0, s202.endX = 0, s202.dragX = 0, s202.startY = 0, s202.endY = 0, s202.dragY = 0, s202.moveDirection = "none", s202;
      }
      return r(i322, [
          {
              key: "init",
              value: function(t572) {
                  var e433 = this, i323 = t572.xyRatios, a262 = this.w, s203 = this;
                  this.xyRatios = i323, this.zoomRect = this.graphics.drawRect(0, 0, 0, 0), this.selectionRect = this.graphics.drawRect(0, 0, 0, 0), this.gridRect = a262.globals.dom.baseEl.querySelector(".apexcharts-grid"), this.zoomRect.node.classList.add("apexcharts-zoom-rect"), this.selectionRect.node.classList.add("apexcharts-selection-rect"), a262.globals.dom.elGraphical.add(this.zoomRect), a262.globals.dom.elGraphical.add(this.selectionRect), "x" === a262.config.chart.selection.type ? this.slDraggableRect = this.selectionRect.draggable({
                      minX: 0,
                      minY: 0,
                      maxX: a262.globals.gridWidth,
                      maxY: a262.globals.gridHeight
                  }).on("dragmove", this.selectionDragging.bind(this, "dragging")) : "y" === a262.config.chart.selection.type ? this.slDraggableRect = this.selectionRect.draggable({
                      minX: 0,
                      maxX: a262.globals.gridWidth
                  }).on("dragmove", this.selectionDragging.bind(this, "dragging")) : this.slDraggableRect = this.selectionRect.draggable().on("dragmove", this.selectionDragging.bind(this, "dragging")), this.preselectedSelection(), this.hoverArea = a262.globals.dom.baseEl.querySelector("".concat(a262.globals.chartClass, " .apexcharts-svg")), this.hoverArea.classList.add("apexcharts-zoomable"), this.eventList.forEach(function(t573) {
                      e433.hoverArea.addEventListener(t573, s203.svgMouseEvents.bind(s203, i323), {
                          capture: !1,
                          passive: !0
                      });
                  });
              }
          },
          {
              key: "destroy",
              value: function() {
                  this.slDraggableRect && (this.slDraggableRect.draggable(!1), this.slDraggableRect.off(), this.selectionRect.off()), this.selectionRect = null, this.zoomRect = null, this.gridRect = null;
              }
          },
          {
              key: "svgMouseEvents",
              value: function(t574, e434) {
                  var i324 = this.w, a263 = this, s204 = this.ctx.toolbar, r177 = i324.globals.zoomEnabled ? i324.config.chart.zoom.type : i324.config.chart.selection.type, o154 = i324.config.chart.toolbar.autoSelected;
                  if (e434.shiftKey ? (this.shiftWasPressed = !0, s204.enableZoomPanFromToolbar("pan" === o154 ? "zoom" : "pan")) : this.shiftWasPressed && (s204.enableZoomPanFromToolbar(o154), this.shiftWasPressed = !1), e434.target) {
                      var n133, l107 = e434.target.classList;
                      if (e434.target.parentNode && null !== e434.target.parentNode && (n133 = e434.target.parentNode.classList), !(l107.contains("apexcharts-selection-rect") || l107.contains("apexcharts-legend-marker") || l107.contains("apexcharts-legend-text") || n133 && n133.contains("apexcharts-toolbar"))) {
                          if (a263.clientX = "touchmove" === e434.type || "touchstart" === e434.type ? e434.touches[0].clientX : "touchend" === e434.type ? e434.changedTouches[0].clientX : e434.clientX, a263.clientY = "touchmove" === e434.type || "touchstart" === e434.type ? e434.touches[0].clientY : "touchend" === e434.type ? e434.changedTouches[0].clientY : e434.clientY, "mousedown" === e434.type && 1 === e434.which) {
                              var h90 = a263.gridRect.getBoundingClientRect();
                              a263.startX = a263.clientX - h90.left, a263.startY = a263.clientY - h90.top, a263.dragged = !1, a263.w.globals.mousedown = !0;
                          }
                          if (("mousemove" === e434.type && 1 === e434.which || "touchmove" === e434.type) && (a263.dragged = !0, i324.globals.panEnabled ? (i324.globals.selection = null, a263.w.globals.mousedown && a263.panDragging({
                              context: a263,
                              zoomtype: r177,
                              xyRatios: t574
                          })) : (a263.w.globals.mousedown && i324.globals.zoomEnabled || a263.w.globals.mousedown && i324.globals.selectionEnabled) && (a263.selection = a263.selectionDrawing({
                              context: a263,
                              zoomtype: r177
                          }))), "mouseup" === e434.type || "touchend" === e434.type || "mouseleave" === e434.type) {
                              var c77 = a263.gridRect.getBoundingClientRect();
                              a263.w.globals.mousedown && (a263.endX = a263.clientX - c77.left, a263.endY = a263.clientY - c77.top, a263.dragX = Math.abs(a263.endX - a263.startX), a263.dragY = Math.abs(a263.endY - a263.startY), (i324.globals.zoomEnabled || i324.globals.selectionEnabled) && a263.selectionDrawn({
                                  context: a263,
                                  zoomtype: r177
                              }), i324.globals.panEnabled && i324.config.xaxis.convertedCatToNumeric && a263.delayedPanScrolled()), i324.globals.zoomEnabled && a263.hideSelectionRect(this.selectionRect), a263.dragged = !1, a263.w.globals.mousedown = !1;
                          }
                          this.makeSelectionRectDraggable();
                      }
                  }
              }
          },
          {
              key: "makeSelectionRectDraggable",
              value: function() {
                  var t575 = this.w;
                  if (this.selectionRect) {
                      var e435 = this.selectionRect.node.getBoundingClientRect();
                      e435.width > 0 && e435.height > 0 && this.slDraggableRect.selectize({
                          points: "l, r",
                          pointSize: 8,
                          pointType: "rect"
                      }).resize({
                          constraint: {
                              minX: 0,
                              minY: 0,
                              maxX: t575.globals.gridWidth,
                              maxY: t575.globals.gridHeight
                          }
                      }).on("resizing", this.selectionDragging.bind(this, "resizing"));
                  }
              }
          },
          {
              key: "preselectedSelection",
              value: function() {
                  var t576 = this.w, e436 = this.xyRatios;
                  if (!t576.globals.zoomEnabled) {
                      if (void 0 !== t576.globals.selection && null !== t576.globals.selection) this.drawSelectionRect(t576.globals.selection);
                      else if (void 0 !== t576.config.chart.selection.xaxis.min && void 0 !== t576.config.chart.selection.xaxis.max) {
                          var i325 = (t576.config.chart.selection.xaxis.min - t576.globals.minX) / e436.xRatio, a264 = {
                              x: i325,
                              y: 0,
                              width: t576.globals.gridWidth - (t576.globals.maxX - t576.config.chart.selection.xaxis.max) / e436.xRatio - i325,
                              height: t576.globals.gridHeight,
                              translateX: 0,
                              translateY: 0,
                              selectionEnabled: !0
                          };
                          this.drawSelectionRect(a264), this.makeSelectionRectDraggable(), "function" == typeof t576.config.chart.events.selection && t576.config.chart.events.selection(this.ctx, {
                              xaxis: {
                                  min: t576.config.chart.selection.xaxis.min,
                                  max: t576.config.chart.selection.xaxis.max
                              },
                              yaxis: {
                              }
                          });
                      }
                  }
              }
          },
          {
              key: "drawSelectionRect",
              value: function(t577) {
                  var e437 = t577.x, i326 = t577.y, a265 = t577.width, s205 = t577.height, r178 = t577.translateX, o155 = void 0 === r178 ? 0 : r178, n134 = t577.translateY, l108 = void 0 === n134 ? 0 : n134, h91 = this.w, c78 = this.zoomRect, d67 = this.selectionRect;
                  if (this.dragged || null !== h91.globals.selection) {
                      var g56 = {
                          transform: "translate(" + o155 + ", " + l108 + ")"
                      };
                      h91.globals.zoomEnabled && this.dragged && (a265 < 0 && (a265 = 1), c78.attr({
                          x: e437,
                          y: i326,
                          width: a265,
                          height: s205,
                          fill: h91.config.chart.zoom.zoomedArea.fill.color,
                          "fill-opacity": h91.config.chart.zoom.zoomedArea.fill.opacity,
                          stroke: h91.config.chart.zoom.zoomedArea.stroke.color,
                          "stroke-width": h91.config.chart.zoom.zoomedArea.stroke.width,
                          "stroke-opacity": h91.config.chart.zoom.zoomedArea.stroke.opacity
                      }), b.setAttrs(c78.node, g56)), h91.globals.selectionEnabled && (d67.attr({
                          x: e437,
                          y: i326,
                          width: a265 > 0 ? a265 : 0,
                          height: s205 > 0 ? s205 : 0,
                          fill: h91.config.chart.selection.fill.color,
                          "fill-opacity": h91.config.chart.selection.fill.opacity,
                          stroke: h91.config.chart.selection.stroke.color,
                          "stroke-width": h91.config.chart.selection.stroke.width,
                          "stroke-dasharray": h91.config.chart.selection.stroke.dashArray,
                          "stroke-opacity": h91.config.chart.selection.stroke.opacity
                      }), b.setAttrs(d67.node, g56));
                  }
              }
          },
          {
              key: "hideSelectionRect",
              value: function(t578) {
                  t578 && t578.attr({
                      x: 0,
                      y: 0,
                      width: 0,
                      height: 0
                  });
              }
          },
          {
              key: "selectionDrawing",
              value: function(t579) {
                  var e438 = t579.context, i327 = t579.zoomtype, a266 = this.w, s206 = e438, r179 = this.gridRect.getBoundingClientRect(), o156 = s206.startX - 1, n135 = s206.startY, l109 = !1, h92 = !1, c79 = s206.clientX - r179.left - o156, d68 = s206.clientY - r179.top - n135, g57 = {
                  };
                  return Math.abs(c79 + o156) > a266.globals.gridWidth ? c79 = a266.globals.gridWidth - o156 : s206.clientX - r179.left < 0 && (c79 = o156), o156 > s206.clientX - r179.left && (l109 = !0, c79 = Math.abs(c79)), n135 > s206.clientY - r179.top && (h92 = !0, d68 = Math.abs(d68)), g57 = "x" === i327 ? {
                      x: l109 ? o156 - c79 : o156,
                      y: 0,
                      width: c79,
                      height: a266.globals.gridHeight
                  } : "y" === i327 ? {
                      x: 0,
                      y: h92 ? n135 - d68 : n135,
                      width: a266.globals.gridWidth,
                      height: d68
                  } : {
                      x: l109 ? o156 - c79 : o156,
                      y: h92 ? n135 - d68 : n135,
                      width: c79,
                      height: d68
                  }, s206.drawSelectionRect(g57), s206.selectionDragging("resizing"), g57;
              }
          },
          {
              key: "selectionDragging",
              value: function(t580, e439) {
                  var i328 = this, a267 = this.w, s207 = this.xyRatios, r180 = this.selectionRect, o157 = 0;
                  "resizing" === t580 && (o157 = 30);
                  var n136 = function(t581) {
                      return parseFloat(r180.node.getAttribute(t581));
                  }, l110 = {
                      x: n136("x"),
                      y: n136("y"),
                      width: n136("width"),
                      height: n136("height")
                  };
                  a267.globals.selection = l110, "function" == typeof a267.config.chart.events.selection && a267.globals.selectionEnabled && (clearTimeout(this.w.globals.selectionResizeTimer), this.w.globals.selectionResizeTimer = window.setTimeout(function() {
                      var t582 = i328.gridRect.getBoundingClientRect(), e440 = r180.node.getBoundingClientRect(), o158 = {
                          xaxis: {
                              min: a267.globals.xAxisScale.niceMin + (e440.left - t582.left) * s207.xRatio,
                              max: a267.globals.xAxisScale.niceMin + (e440.right - t582.left) * s207.xRatio
                          },
                          yaxis: {
                              min: a267.globals.yAxisScale[0].niceMin + (t582.bottom - e440.bottom) * s207.yRatio[0],
                              max: a267.globals.yAxisScale[0].niceMax - (e440.top - t582.top) * s207.yRatio[0]
                          }
                      };
                      a267.config.chart.events.selection(i328.ctx, o158), a267.config.chart.brush.enabled && void 0 !== a267.config.chart.events.brushScrolled && a267.config.chart.events.brushScrolled(i328.ctx, o158);
                  }, o157));
              }
          },
          {
              key: "selectionDrawn",
              value: function(t583) {
                  var e441 = t583.context, i329 = t583.zoomtype, a268 = this.w, s208 = e441, r181 = this.xyRatios, o159 = this.ctx.toolbar;
                  if (s208.startX > s208.endX) {
                      var n137 = s208.startX;
                      s208.startX = s208.endX, s208.endX = n137;
                  }
                  if (s208.startY > s208.endY) {
                      var l111 = s208.startY;
                      s208.startY = s208.endY, s208.endY = l111;
                  }
                  var h93 = void 0, c80 = void 0;
                  a268.globals.isRangeBar ? (h93 = a268.globals.yAxisScale[0].niceMin + s208.startX * r181.invertedYRatio, c80 = a268.globals.yAxisScale[0].niceMin + s208.endX * r181.invertedYRatio) : (h93 = a268.globals.xAxisScale.niceMin + s208.startX * r181.xRatio, c80 = a268.globals.xAxisScale.niceMin + s208.endX * r181.xRatio);
                  var d69 = [], g58 = [];
                  if (a268.config.yaxis.forEach(function(t, e) {
                      d69.push(a268.globals.yAxisScale[e].niceMax - r181.yRatio[e] * s208.startY), g58.push(a268.globals.yAxisScale[e].niceMax - r181.yRatio[e] * s208.endY);
                  }), s208.dragged && (s208.dragX > 10 || s208.dragY > 10) && h93 !== c80) {
                      if (a268.globals.zoomEnabled) {
                          var u48 = p.clone(a268.globals.initialConfig.yaxis), f36 = p.clone(a268.globals.initialConfig.xaxis);
                          if (a268.globals.zoomed = !0, a268.config.xaxis.convertedCatToNumeric && (h93 = Math.floor(h93), c80 = Math.floor(c80), h93 < 1 && (h93 = 1, c80 = a268.globals.dataPoints), c80 - h93 < 2 && (c80 = h93 + 1)), "xy" !== i329 && "x" !== i329 || (f36 = {
                              min: h93,
                              max: c80
                          }), "xy" !== i329 && "y" !== i329 || u48.forEach(function(t, e) {
                              u48[e].min = g58[e], u48[e].max = d69[e];
                          }), a268.config.chart.zoom.autoScaleYaxis) {
                              var x29 = new j(s208.ctx);
                              u48 = x29.autoScaleY(s208.ctx, u48, {
                                  xaxis: f36
                              });
                          }
                          if (o159) {
                              var b13 = o159.getBeforeZoomRange(f36, u48);
                              b13 && (f36 = b13.xaxis ? b13.xaxis : f36, u48 = b13.yaxis ? b13.yaxis : u48);
                          }
                          var v28 = {
                              xaxis: f36
                          };
                          a268.config.chart.group || (v28.yaxis = u48), s208.ctx.updateHelpers._updateOptions(v28, !1, s208.w.config.chart.animations.dynamicAnimation.enabled), "function" == typeof a268.config.chart.events.zoomed && o159.zoomCallback(f36, u48);
                      } else if (a268.globals.selectionEnabled) {
                          var m23, y17 = null;
                          m23 = {
                              min: h93,
                              max: c80
                          }, "xy" !== i329 && "y" !== i329 || (y17 = p.clone(a268.config.yaxis)).forEach(function(t, e) {
                              y17[e].min = g58[e], y17[e].max = d69[e];
                          }), a268.globals.selection = s208.selection, "function" == typeof a268.config.chart.events.selection && a268.config.chart.events.selection(s208.ctx, {
                              xaxis: m23,
                              yaxis: y17
                          });
                      }
                  }
              }
          },
          {
              key: "panDragging",
              value: function(t584) {
                  var e442 = t584.context, i330 = this.w, a269 = e442;
                  if (void 0 !== i330.globals.lastClientPosition.x) {
                      var s209 = i330.globals.lastClientPosition.x - a269.clientX, r182 = i330.globals.lastClientPosition.y - a269.clientY;
                      Math.abs(s209) > Math.abs(r182) && s209 > 0 ? this.moveDirection = "left" : Math.abs(s209) > Math.abs(r182) && s209 < 0 ? this.moveDirection = "right" : Math.abs(r182) > Math.abs(s209) && r182 > 0 ? this.moveDirection = "up" : Math.abs(r182) > Math.abs(s209) && r182 < 0 && (this.moveDirection = "down");
                  }
                  i330.globals.lastClientPosition = {
                      x: a269.clientX,
                      y: a269.clientY
                  };
                  var o160 = i330.globals.isRangeBar ? i330.globals.minY : i330.globals.minX, n138 = i330.globals.isRangeBar ? i330.globals.maxY : i330.globals.maxX;
                  i330.config.xaxis.convertedCatToNumeric || a269.panScrolled(o160, n138);
              }
          },
          {
              key: "delayedPanScrolled",
              value: function() {
                  var t585 = this.w, e443 = t585.globals.minX, i331 = t585.globals.maxX, a270 = (t585.globals.maxX - t585.globals.minX) / 2;
                  "left" === this.moveDirection ? (e443 = t585.globals.minX + a270, i331 = t585.globals.maxX + a270) : "right" === this.moveDirection && (e443 = t585.globals.minX - a270, i331 = t585.globals.maxX - a270), e443 = Math.floor(e443), i331 = Math.floor(i331), this.updateScrolledChart({
                      xaxis: {
                          min: e443,
                          max: i331
                      }
                  }, e443, i331);
              }
          },
          {
              key: "panScrolled",
              value: function(t586, e444) {
                  var i332 = this.w, a271 = this.xyRatios, s210 = p.clone(i332.globals.initialConfig.yaxis), r183 = a271.xRatio, o161 = i332.globals.minX, n139 = i332.globals.maxX;
                  i332.globals.isRangeBar && (r183 = a271.invertedYRatio, o161 = i332.globals.minY, n139 = i332.globals.maxY), "left" === this.moveDirection ? (t586 = o161 + i332.globals.gridWidth / 15 * r183, e444 = n139 + i332.globals.gridWidth / 15 * r183) : "right" === this.moveDirection && (t586 = o161 - i332.globals.gridWidth / 15 * r183, e444 = n139 - i332.globals.gridWidth / 15 * r183), i332.globals.isRangeBar || (t586 < i332.globals.initialMinX || e444 > i332.globals.initialMaxX) && (t586 = o161, e444 = n139);
                  var l112 = {
                      min: t586,
                      max: e444
                  };
                  i332.config.chart.zoom.autoScaleYaxis && (s210 = new j(this.ctx).autoScaleY(this.ctx, s210, {
                      xaxis: l112
                  }));
                  var h94 = {
                      xaxis: {
                          min: t586,
                          max: e444
                      }
                  };
                  i332.config.chart.group || (h94.yaxis = s210), this.updateScrolledChart(h94, t586, e444);
              }
          },
          {
              key: "updateScrolledChart",
              value: function(t587, e445, i333) {
                  var a272 = this.w;
                  this.ctx.updateHelpers._updateOptions(t587, !1, !1), "function" == typeof a272.config.chart.events.scrolled && a272.config.chart.events.scrolled(this.ctx, {
                      xaxis: {
                          min: e445,
                          max: i333
                      }
                  });
              }
          }
      ]), i322;
  }(), dt = function() {
      function t588(e446) {
          a(this, t588), this.w = e446.w, this.ttCtx = e446, this.ctx = e446.ctx;
      }
      return r(t588, [
          {
              key: "getNearestValues",
              value: function(t589) {
                  var e447 = t589.hoverArea, i334 = t589.elGrid, a273 = t589.clientX, s211 = t589.clientY, r184 = this.w, o162 = i334.getBoundingClientRect(), n140 = o162.width, l113 = o162.height, h95 = n140 / (r184.globals.dataPoints - 1), c81 = l113 / r184.globals.dataPoints, d70 = this.hasBars();
                  !r184.globals.comboCharts && !d70 || r184.config.xaxis.convertedCatToNumeric || (h95 = n140 / r184.globals.dataPoints);
                  var g59 = a273 - o162.left - r184.globals.barPadForNumericAxis, u49 = s211 - o162.top;
                  g59 < 0 || u49 < 0 || g59 > n140 || u49 > l113 ? (e447.classList.remove("hovering-zoom"), e447.classList.remove("hovering-pan")) : r184.globals.zoomEnabled ? (e447.classList.remove("hovering-pan"), e447.classList.add("hovering-zoom")) : r184.globals.panEnabled && (e447.classList.remove("hovering-zoom"), e447.classList.add("hovering-pan"));
                  var f37 = Math.round(g59 / h95), x30 = Math.floor(u49 / c81);
                  d70 && !r184.config.xaxis.convertedCatToNumeric && (f37 = Math.ceil(g59 / h95), f37 -= 1);
                  for(var b14, v29 = null, m24 = null, y18 = [], w17 = 0; w17 < r184.globals.seriesXvalues.length; w17++)y18.push([
                      r184.globals.seriesXvalues[w17][0] - 0.000001
                  ].concat(r184.globals.seriesXvalues[w17]));
                  if (y18 = y18.map(function(t590) {
                      return t590.filter(function(t591) {
                          return t591;
                      });
                  }), b14 = r184.globals.seriesYvalues.map(function(t592) {
                      return t592.filter(function(t593) {
                          return p.isNumber(t593);
                      });
                  }), r184.globals.isXNumeric) {
                      var k16 = this.ttCtx.getElGrid().getBoundingClientRect(), A12 = g59 * (k16.width / n140), S11 = u49 * (k16.height / l113);
                      v29 = (m24 = this.closestInMultiArray(A12, S11, y18, b14)).index, f37 = m24.j, null !== v29 && (y18 = r184.globals.seriesXvalues[v29], f37 = (m24 = this.closestInArray(A12, y18)).index);
                  }
                  return r184.globals.capturedSeriesIndex = null === v29 ? -1 : v29, (!f37 || f37 < 1) && (f37 = 0), r184.globals.isBarHorizontal ? r184.globals.capturedDataPointIndex = x30 : r184.globals.capturedDataPointIndex = f37, {
                      capturedSeries: v29,
                      j: r184.globals.isBarHorizontal ? x30 : f37,
                      hoverX: g59,
                      hoverY: u49
                  };
              }
          },
          {
              key: "closestInMultiArray",
              value: function(t594, e448, i335, a274) {
                  var s212 = this.w, r185 = 0, o163 = null, n141 = -1;
                  s212.globals.series.length > 1 ? r185 = this.getFirstActiveXArray(i335) : o163 = 0;
                  var l114 = a274[r185][0], h96 = i335[r185][0], c82 = Math.abs(t594 - h96), d71 = Math.abs(e448 - l114), g60 = d71 + c82;
                  return a274.map(function(s213, r186) {
                      s213.map(function(s, l115) {
                          var h97 = Math.abs(e448 - a274[r186][l115]), u50 = Math.abs(t594 - i335[r186][l115]), p30 = u50 + h97;
                          p30 < g60 && (g60 = p30, c82 = u50, d71 = h97, o163 = r186, n141 = l115);
                      });
                  }), {
                      index: o163,
                      j: n141
                  };
              }
          },
          {
              key: "getFirstActiveXArray",
              value: function(t595) {
                  for(var e449 = this.w, i336 = 0, a275 = t595.map(function(t596, e450) {
                      return t596.length > 0 ? e450 : -1;
                  }), s214 = 0; s214 < a275.length; s214++)if (-1 !== a275[s214] && -1 === e449.globals.collapsedSeriesIndices.indexOf(s214) && -1 === e449.globals.ancillaryCollapsedSeriesIndices.indexOf(s214)) {
                      i336 = a275[s214];
                      break;
                  }
                  return i336;
              }
          },
          {
              key: "closestInArray",
              value: function(t597, e451) {
                  for(var i337 = e451[0], a276 = null, s215 = Math.abs(t597 - i337), r187 = 0; r187 < e451.length; r187++){
                      var o164 = Math.abs(t597 - e451[r187]);
                      o164 < s215 && (s215 = o164, a276 = r187);
                  }
                  return {
                      index: a276
                  };
              }
          },
          {
              key: "isXoverlap",
              value: function(t598) {
                  var e452 = [], i338 = this.w.globals.seriesX.filter(function(t599) {
                      return void 0 !== t599[0];
                  });
                  if (i338.length > 0) for(var a277 = 0; a277 < i338.length - 1; a277++)void 0 !== i338[a277][t598] && void 0 !== i338[a277 + 1][t598] && i338[a277][t598] !== i338[a277 + 1][t598] && e452.push("unEqual");
                  return 0 === e452.length;
              }
          },
          {
              key: "isInitialSeriesSameLen",
              value: function() {
                  for(var t600 = !0, e453 = this.w.globals.initialSeries, i339 = 0; i339 < e453.length - 1; i339++)if (e453[i339].data.length !== e453[i339 + 1].data.length) {
                      t600 = !1;
                      break;
                  }
                  return t600;
              }
          },
          {
              key: "getBarsHeight",
              value: function(t601) {
                  return g(t601).reduce(function(t602, e454) {
                      return t602 + e454.getBBox().height;
                  }, 0);
              }
          },
          {
              key: "getElMarkers",
              value: function() {
                  return this.w.globals.dom.baseEl.querySelectorAll(" .apexcharts-series-markers");
              }
          },
          {
              key: "getAllMarkers",
              value: function() {
                  var t603 = this.w.globals.dom.baseEl.querySelectorAll(".apexcharts-series-markers-wrap");
                  (t603 = g(t603)).sort(function(t604, e456) {
                      return Number(e456.getAttribute("data:realIndex")) < Number(t604.getAttribute("data:realIndex")) ? 0 : -1;
                  });
                  var e455 = [];
                  return t603.forEach(function(t605) {
                      e455.push(t605.querySelector(".apexcharts-marker"));
                  }), e455;
              }
          },
          {
              key: "hasMarkers",
              value: function() {
                  return this.getElMarkers().length > 0;
              }
          },
          {
              key: "getElBars",
              value: function() {
                  return this.w.globals.dom.baseEl.querySelectorAll(".apexcharts-bar-series,  .apexcharts-candlestick-series, .apexcharts-boxPlot-series, .apexcharts-rangebar-series");
              }
          },
          {
              key: "hasBars",
              value: function() {
                  return this.getElBars().length > 0;
              }
          },
          {
              key: "getHoverMarkerSize",
              value: function(t) {
                  var e457 = this.w, i340 = e457.config.markers.hover.size;
                  return void 0 === i340 && (i340 = e457.globals.markers.size[t] + e457.config.markers.hover.sizeOffset), i340;
              }
          },
          {
              key: "toggleAllTooltipSeriesGroups",
              value: function(t606) {
                  var e458 = this.w, i341 = this.ttCtx;
                  0 === i341.allTooltipSeriesGroups.length && (i341.allTooltipSeriesGroups = e458.globals.dom.baseEl.querySelectorAll(".apexcharts-tooltip-series-group"));
                  for(var a278 = i341.allTooltipSeriesGroups, s216 = 0; s216 < a278.length; s216++)"enable" === t606 ? (a278[s216].classList.add("apexcharts-active"), a278[s216].style.display = e458.config.tooltip.items.display) : (a278[s216].classList.remove("apexcharts-active"), a278[s216].style.display = "none");
              }
          }
      ]), t588;
  }(), gt = function() {
      function t607(e459) {
          a(this, t607), this.w = e459.w, this.ctx = e459.ctx, this.ttCtx = e459, this.tooltipUtil = new dt(e459);
      }
      return r(t607, [
          {
              key: "drawSeriesTexts",
              value: function(t608) {
                  var e460 = t608.shared, i342 = void 0 === e460 || e460, a279 = t608.ttItems, s217 = t608.i, r188 = void 0 === s217 ? 0 : s217, o165 = t608.j, n142 = void 0 === o165 ? null : o165, l116 = t608.y1, h98 = t608.y2, c83 = t608.e, d72 = this.w;
                  void 0 !== d72.config.tooltip.custom ? this.handleCustomTooltip({
                      i: r188,
                      j: n142,
                      y1: l116,
                      y2: h98,
                      w: d72
                  }) : this.toggleActiveInactiveSeries(i342);
                  var g61 = this.getValuesToPrint({
                      i: r188,
                      j: n142
                  });
                  this.printLabels({
                      i: r188,
                      j: n142,
                      values: g61,
                      ttItems: a279,
                      shared: i342,
                      e: c83
                  });
                  var u51 = this.ttCtx.getElTooltip();
                  this.ttCtx.tooltipRect.ttWidth = u51.getBoundingClientRect().width, this.ttCtx.tooltipRect.ttHeight = u51.getBoundingClientRect().height;
              }
          },
          {
              key: "printLabels",
              value: function(t609) {
                  var i343, a280 = this, s218 = t609.i, r189 = t609.j, o166 = t609.values, n143 = t609.ttItems, l117 = t609.shared, h99 = t609.e, c84 = this.w, d73 = [], g62 = function(t) {
                      return c84.globals.seriesGoals[t] && c84.globals.seriesGoals[t][r189] && Array.isArray(c84.globals.seriesGoals[t][r189]);
                  }, u52 = o166.xVal, p31 = o166.zVal, f38 = o166.xAxisTTVal, x31 = "", b15 = c84.globals.colors[s218];
                  null !== r189 && c84.config.plotOptions.bar.distributed && (b15 = c84.globals.colors[r189]);
                  for(var v30 = function(t610, o167) {
                      var v31 = a280.getFormatters(s218);
                      x31 = a280.getSeriesName({
                          fn: v31.yLbTitleFormatter,
                          index: s218,
                          seriesIndex: s218,
                          j: r189
                      }), "treemap" === c84.config.chart.type && (x31 = v31.yLbTitleFormatter(String(c84.config.series[s218].data[r189].x), {
                          series: c84.globals.series,
                          seriesIndex: s218,
                          dataPointIndex: r189,
                          w: c84
                      }));
                      var m26 = c84.config.tooltip.inverseOrder ? o167 : t610;
                      if (c84.globals.axisCharts) {
                          var y20 = function(t611) {
                              return v31.yLbFormatter(c84.globals.series[t611][r189], {
                                  series: c84.globals.series,
                                  seriesIndex: t611,
                                  dataPointIndex: r189,
                                  w: c84
                              });
                          };
                          l117 ? (v31 = a280.getFormatters(m26), x31 = a280.getSeriesName({
                              fn: v31.yLbTitleFormatter,
                              index: m26,
                              seriesIndex: s218,
                              j: r189
                          }), b15 = c84.globals.colors[m26], i343 = y20(m26), g62(m26) && (d73 = c84.globals.seriesGoals[m26][r189].map(function(t612) {
                              return {
                                  attrs: t612,
                                  val: v31.yLbFormatter(t612.value, {
                                      seriesIndex: m26,
                                      dataPointIndex: r189,
                                      w: c84
                                  })
                              };
                          }))) : (h99 && h99.target && h99.target.getAttribute("fill") && (b15 = h99.target.getAttribute("fill")), i343 = y20(s218), g62(s218) && Array.isArray(c84.globals.seriesGoals[s218][r189]) && (d73 = c84.globals.seriesGoals[s218][r189].map(function(t613) {
                              return {
                                  attrs: t613,
                                  val: v31.yLbFormatter(t613.value, {
                                      seriesIndex: s218,
                                      dataPointIndex: r189,
                                      w: c84
                                  })
                              };
                          })));
                      }
                      null === r189 && (i343 = v31.yLbFormatter(c84.globals.series[s218], e(e({
                      }, c84), {
                      }, {
                          seriesIndex: s218,
                          dataPointIndex: s218
                      }))), a280.DOMHandling({
                          i: s218,
                          t: m26,
                          j: r189,
                          ttItems: n143,
                          values: {
                              val: i343,
                              goalVals: d73,
                              xVal: u52,
                              xAxisTTVal: f38,
                              zVal: p31
                          },
                          seriesName: x31,
                          shared: l117,
                          pColor: b15
                      });
                  }, m25 = 0, y19 = c84.globals.series.length - 1; m25 < c84.globals.series.length; m25++, y19--)v30(m25, y19);
              }
          },
          {
              key: "getFormatters",
              value: function(t614) {
                  var e461, i344 = this.w, a281 = i344.globals.yLabelFormatters[t614];
                  return void 0 !== i344.globals.ttVal ? Array.isArray(i344.globals.ttVal) ? (a281 = i344.globals.ttVal[t614] && i344.globals.ttVal[t614].formatter, e461 = i344.globals.ttVal[t614] && i344.globals.ttVal[t614].title && i344.globals.ttVal[t614].title.formatter) : (a281 = i344.globals.ttVal.formatter, "function" == typeof i344.globals.ttVal.title.formatter && (e461 = i344.globals.ttVal.title.formatter)) : e461 = i344.config.tooltip.y.title.formatter, "function" != typeof a281 && (a281 = i344.globals.yLabelFormatters[0] ? i344.globals.yLabelFormatters[0] : function(t615) {
                      return t615;
                  }), "function" != typeof e461 && (e461 = function(t616) {
                      return t616;
                  }), {
                      yLbFormatter: a281,
                      yLbTitleFormatter: e461
                  };
              }
          },
          {
              key: "getSeriesName",
              value: function(t617) {
                  var e462 = t617.fn, i = t617.index, a282 = t617.seriesIndex, s219 = t617.j, r190 = this.w;
                  return e462(String(r190.globals.seriesNames[i]), {
                      series: r190.globals.series,
                      seriesIndex: a282,
                      dataPointIndex: s219,
                      w: r190
                  });
              }
          },
          {
              key: "DOMHandling",
              value: function(t618) {
                  t618.i;
                  var e463 = t618.t, i345 = t618.j, a283 = t618.ttItems, s220 = t618.values, r191 = t618.seriesName, o168 = t618.shared, n144 = t618.pColor, l118 = this.w, h100 = this.ttCtx, c85 = s220.val, d74 = s220.goalVals, g63 = s220.xVal, u53 = s220.xAxisTTVal, p32 = s220.zVal, f39 = null;
                  f39 = a283[e463].children, l118.config.tooltip.fillSeriesColor && (a283[e463].style.backgroundColor = n144, f39[0].style.display = "none"), h100.showTooltipTitle && (null === h100.tooltipTitle && (h100.tooltipTitle = l118.globals.dom.baseEl.querySelector(".apexcharts-tooltip-title")), h100.tooltipTitle.innerHTML = g63), h100.isXAxisTooltipEnabled && (h100.xaxisTooltipText.innerHTML = "" !== u53 ? u53 : g63);
                  var x32 = a283[e463].querySelector(".apexcharts-tooltip-text-y-label");
                  x32 && (x32.innerHTML = r191 || "");
                  var b16 = a283[e463].querySelector(".apexcharts-tooltip-text-y-value");
                  b16 && (b16.innerHTML = void 0 !== c85 ? c85 : ""), f39[0] && f39[0].classList.contains("apexcharts-tooltip-marker") && (l118.config.tooltip.marker.fillColors && Array.isArray(l118.config.tooltip.marker.fillColors) && (n144 = l118.config.tooltip.marker.fillColors[e463]), f39[0].style.backgroundColor = n144), l118.config.tooltip.marker.show || (f39[0].style.display = "none");
                  var v32 = a283[e463].querySelector(".apexcharts-tooltip-text-goals-label"), m27 = a283[e463].querySelector(".apexcharts-tooltip-text-goals-value");
                  if (d74.length && l118.globals.seriesGoals[e463]) {
                      var y21 = function() {
                          var t619 = "<div >", e464 = "<div>";
                          d74.forEach(function(i346, a) {
                              t619 += ' <div style="display: flex"><span class="apexcharts-tooltip-marker" style="background-color: '.concat(i346.attrs.strokeColor, '; height: 3px; border-radius: 0; top: 5px;"></span> ').concat(i346.attrs.name, "</div>"), e464 += "<div>".concat(i346.val, "</div>");
                          }), v32.innerHTML = t619 + "</div>", m27.innerHTML = e464 + "</div>";
                      };
                      o168 ? l118.globals.seriesGoals[e463][i345] && Array.isArray(l118.globals.seriesGoals[e463][i345]) ? y21() : (v32.innerHTML = "", m27.innerHTML = "") : y21();
                  } else v32.innerHTML = "", m27.innerHTML = "";
                  null !== p32 && (a283[e463].querySelector(".apexcharts-tooltip-text-z-label").innerHTML = l118.config.tooltip.z.title, a283[e463].querySelector(".apexcharts-tooltip-text-z-value").innerHTML = void 0 !== p32 ? p32 : "");
                  o168 && f39[0] && (null == c85 || l118.globals.ancillaryCollapsedSeriesIndices.indexOf(e463) > -1 || l118.globals.collapsedSeriesIndices.indexOf(e463) > -1 ? f39[0].parentNode.style.display = "none" : f39[0].parentNode.style.display = l118.config.tooltip.items.display);
              }
          },
          {
              key: "toggleActiveInactiveSeries",
              value: function(t620) {
                  var e465 = this.w;
                  if (t620) this.tooltipUtil.toggleAllTooltipSeriesGroups("enable");
                  else {
                      this.tooltipUtil.toggleAllTooltipSeriesGroups("disable");
                      var i347 = e465.globals.dom.baseEl.querySelector(".apexcharts-tooltip-series-group");
                      i347 && (i347.classList.add("apexcharts-active"), i347.style.display = e465.config.tooltip.items.display);
                  }
              }
          },
          {
              key: "getValuesToPrint",
              value: function(t621) {
                  var e466 = t621.i, i348 = t621.j, a284 = this.w, s221 = this.ctx.series.filteredSeriesX(), r192 = "", o169 = "", n145 = null, l119 = null, h101 = {
                      series: a284.globals.series,
                      seriesIndex: e466,
                      dataPointIndex: i348,
                      w: a284
                  }, c86 = a284.globals.ttZFormatter;
                  null === i348 ? l119 = a284.globals.series[e466] : a284.globals.isXNumeric && "treemap" !== a284.config.chart.type ? (r192 = s221[e466][i348], 0 === s221[e466].length && (r192 = s221[this.tooltipUtil.getFirstActiveXArray(s221)][i348])) : r192 = void 0 !== a284.globals.labels[i348] ? a284.globals.labels[i348] : "";
                  var d75 = r192;
                  a284.globals.isXNumeric && "datetime" === a284.config.xaxis.type ? r192 = new W(this.ctx).xLabelFormat(a284.globals.ttKeyFormatter, d75, d75, {
                      i: void 0,
                      dateFormatter: new Y(this.ctx).formatDate,
                      w: this.w
                  }) : r192 = a284.globals.isBarHorizontal ? a284.globals.yLabelFormatters[0](d75, h101) : a284.globals.xLabelFormatter(d75, h101);
                  return void 0 !== a284.config.tooltip.x.formatter && (r192 = a284.globals.ttKeyFormatter(d75, h101)), a284.globals.seriesZ.length > 0 && a284.globals.seriesZ[e466].length > 0 && (n145 = c86(a284.globals.seriesZ[e466][i348], a284)), o169 = "function" == typeof a284.config.xaxis.tooltip.formatter ? a284.globals.xaxisTooltipFormatter(d75, h101) : r192, {
                      val: Array.isArray(l119) ? l119.join(" ") : l119,
                      xVal: Array.isArray(r192) ? r192.join(" ") : r192,
                      xAxisTTVal: Array.isArray(o169) ? o169.join(" ") : o169,
                      zVal: n145
                  };
              }
          },
          {
              key: "handleCustomTooltip",
              value: function(t622) {
                  var e467 = t622.i, i349 = t622.j, a285 = t622.y1, s222 = t622.y2, r193 = t622.w, o170 = this.ttCtx.getElTooltip(), n146 = r193.config.tooltip.custom;
                  Array.isArray(n146) && n146[e467] && (n146 = n146[e467]), o170.innerHTML = n146({
                      ctx: this.ctx,
                      series: r193.globals.series,
                      seriesIndex: e467,
                      dataPointIndex: i349,
                      y1: a285,
                      y2: s222,
                      w: r193
                  });
              }
          }
      ]), t607;
  }(), ut = function() {
      function t623(e468) {
          a(this, t623), this.ttCtx = e468, this.ctx = e468.ctx, this.w = e468.w;
      }
      return r(t623, [
          {
              key: "moveXCrosshairs",
              value: function(t624) {
                  var e469 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : null, i350 = this.ttCtx, a286 = this.w, s223 = i350.getElXCrosshairs(), r194 = t624 - i350.xcrosshairsWidth / 2, o171 = a286.globals.labels.slice().length;
                  if (null !== e469 && (r194 = a286.globals.gridWidth / o171 * e469), null === s223 || a286.globals.isBarHorizontal || (s223.setAttribute("x", r194), s223.setAttribute("x1", r194), s223.setAttribute("x2", r194), s223.setAttribute("y2", a286.globals.gridHeight), s223.classList.add("apexcharts-active")), r194 < 0 && (r194 = 0), r194 > a286.globals.gridWidth && (r194 = a286.globals.gridWidth), i350.isXAxisTooltipEnabled) {
                      var n147 = r194;
                      "tickWidth" !== a286.config.xaxis.crosshairs.width && "barWidth" !== a286.config.xaxis.crosshairs.width || (n147 = r194 + i350.xcrosshairsWidth / 2), this.moveXAxisTooltip(n147);
                  }
              }
          },
          {
              key: "moveYCrosshairs",
              value: function(t625) {
                  var e470 = this.ttCtx;
                  null !== e470.ycrosshairs && b.setAttrs(e470.ycrosshairs, {
                      y1: t625,
                      y2: t625
                  }), null !== e470.ycrosshairsHidden && b.setAttrs(e470.ycrosshairsHidden, {
                      y1: t625,
                      y2: t625
                  });
              }
          },
          {
              key: "moveXAxisTooltip",
              value: function(t626) {
                  var e471 = this.w, i351 = this.ttCtx;
                  if (null !== i351.xaxisTooltip && 0 !== i351.xcrosshairsWidth) {
                      i351.xaxisTooltip.classList.add("apexcharts-active");
                      var a287 = i351.xaxisOffY + e471.config.xaxis.tooltip.offsetY + e471.globals.translateY + 1 + e471.config.xaxis.offsetY;
                      if (t626 -= i351.xaxisTooltip.getBoundingClientRect().width / 2, !isNaN(t626)) {
                          t626 += e471.globals.translateX;
                          var s224;
                          s224 = new b(this.ctx).getTextRects(i351.xaxisTooltipText.innerHTML), i351.xaxisTooltipText.style.minWidth = s224.width + "px", i351.xaxisTooltip.style.left = t626 + "px", i351.xaxisTooltip.style.top = a287 + "px";
                      }
                  }
              }
          },
          {
              key: "moveYAxisTooltip",
              value: function(t627) {
                  var e472 = this.w, i352 = this.ttCtx;
                  null === i352.yaxisTTEls && (i352.yaxisTTEls = e472.globals.dom.baseEl.querySelectorAll(".apexcharts-yaxistooltip"));
                  var a288 = parseInt(i352.ycrosshairsHidden.getAttribute("y1"), 10), s225 = e472.globals.translateY + a288, r195 = i352.yaxisTTEls[t627].getBoundingClientRect().height, o172 = e472.globals.translateYAxisX[t627] - 2;
                  e472.config.yaxis[t627].opposite && (o172 -= 26), s225 -= r195 / 2, -1 === e472.globals.ignoreYAxisIndexes.indexOf(t627) ? (i352.yaxisTTEls[t627].classList.add("apexcharts-active"), i352.yaxisTTEls[t627].style.top = s225 + "px", i352.yaxisTTEls[t627].style.left = o172 + e472.config.yaxis[t627].tooltip.offsetX + "px") : i352.yaxisTTEls[t627].classList.remove("apexcharts-active");
              }
          },
          {
              key: "moveTooltip",
              value: function(t628, e473) {
                  var i353 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : null, a289 = this.w, s226 = this.ttCtx, r196 = s226.getElTooltip(), o173 = s226.tooltipRect, n148 = null !== i353 ? parseFloat(i353) : 1, l120 = parseFloat(t628) + n148 + 5, h102 = parseFloat(e473) + n148 / 2;
                  if (l120 > a289.globals.gridWidth / 2 && (l120 = l120 - o173.ttWidth - n148 - 15), l120 > a289.globals.gridWidth - o173.ttWidth - 10 && (l120 = a289.globals.gridWidth - o173.ttWidth), l120 < -20 && (l120 = -20), a289.config.tooltip.followCursor) {
                      var c87 = s226.getElGrid(), d76 = c87.getBoundingClientRect();
                      h102 = s226.e.clientY + a289.globals.translateY - d76.top - o173.ttHeight / 2;
                  } else a289.globals.isBarHorizontal || (o173.ttHeight / 2 + h102 > a289.globals.gridHeight && (h102 = a289.globals.gridHeight - o173.ttHeight + a289.globals.translateY), h102 < 0 && (h102 = 0));
                  isNaN(l120) || (l120 += a289.globals.translateX, r196.style.left = l120 + "px", r196.style.top = h102 + "px");
              }
          },
          {
              key: "moveMarkers",
              value: function(t629, e474) {
                  var i354 = this.w, a290 = this.ttCtx;
                  if (i354.globals.markers.size[t629] > 0) for(var s227 = i354.globals.dom.baseEl.querySelectorAll(" .apexcharts-series[data\\:realIndex='".concat(t629, "'] .apexcharts-marker")), r197 = 0; r197 < s227.length; r197++)parseInt(s227[r197].getAttribute("rel"), 10) === e474 && (a290.marker.resetPointsSize(), a290.marker.enlargeCurrentPoint(e474, s227[r197]));
                  else a290.marker.resetPointsSize(), this.moveDynamicPointOnHover(e474, t629);
              }
          },
          {
              key: "moveDynamicPointOnHover",
              value: function(t, e475) {
                  var i355, a291, s228 = this.w, r198 = this.ttCtx, o174 = s228.globals.pointsArray, n149 = r198.tooltipUtil.getHoverMarkerSize(e475), l121 = s228.config.series[e475].type;
                  if (!l121 || "column" !== l121 && "candlestick" !== l121 && "boxPlot" !== l121) {
                      i355 = o174[e475][t][0], a291 = o174[e475][t][1] ? o174[e475][t][1] : 0;
                      var h103 = s228.globals.dom.baseEl.querySelector(".apexcharts-series[data\\:realIndex='".concat(e475, "'] .apexcharts-series-markers circle"));
                      h103 && a291 < s228.globals.gridHeight && a291 > 0 && (h103.setAttribute("r", n149), h103.setAttribute("cx", i355), h103.setAttribute("cy", a291)), this.moveXCrosshairs(i355), r198.fixedTooltip || this.moveTooltip(i355, a291, n149);
                  }
              }
          },
          {
              key: "moveDynamicPointsOnHover",
              value: function(t) {
                  var e476, i356 = this.ttCtx, a292 = i356.w, s229 = 0, r199 = 0, o175 = a292.globals.pointsArray;
                  e476 = new z(this.ctx).getActiveConfigSeriesIndex(!0);
                  var n150 = i356.tooltipUtil.getHoverMarkerSize(e476);
                  o175[e476] && (s229 = o175[e476][t][0], r199 = o175[e476][t][1]);
                  var l122 = i356.tooltipUtil.getAllMarkers();
                  if (null !== l122) for(var h104 = 0; h104 < a292.globals.series.length; h104++){
                      var c88 = o175[h104];
                      if (a292.globals.comboCharts && void 0 === c88 && l122.splice(h104, 0, null), c88 && c88.length) {
                          var d77 = o175[h104][t][1];
                          l122[h104].setAttribute("cx", s229), null !== d77 && !isNaN(d77) && d77 < a292.globals.gridHeight + n150 && d77 + n150 > 0 ? (l122[h104] && l122[h104].setAttribute("r", n150), l122[h104] && l122[h104].setAttribute("cy", d77)) : l122[h104] && l122[h104].setAttribute("r", 0);
                      }
                  }
                  if (this.moveXCrosshairs(s229), !i356.fixedTooltip) {
                      var g64 = r199 || a292.globals.gridHeight;
                      this.moveTooltip(s229, g64, n150);
                  }
              }
          },
          {
              key: "moveStickyTooltipOverBars",
              value: function(t630) {
                  var e477 = this.w, i357 = this.ttCtx, a293 = e477.globals.columnSeries ? e477.globals.columnSeries.length : e477.globals.series.length, s230 = a293 >= 2 && a293 % 2 == 0 ? Math.floor(a293 / 2) : Math.floor(a293 / 2) + 1;
                  e477.globals.isBarHorizontal && (s230 = new z(this.ctx).getActiveConfigSeriesIndex(!1, "desc") + 1);
                  var r200 = e477.globals.dom.baseEl.querySelector(".apexcharts-bar-series .apexcharts-series[rel='".concat(s230, "'] path[j='").concat(t630, "'], .apexcharts-candlestick-series .apexcharts-series[rel='").concat(s230, "'] path[j='").concat(t630, "'], .apexcharts-boxPlot-series .apexcharts-series[rel='").concat(s230, "'] path[j='").concat(t630, "'], .apexcharts-rangebar-series .apexcharts-series[rel='").concat(s230, "'] path[j='").concat(t630, "']")), o176 = r200 ? parseFloat(r200.getAttribute("cx")) : 0, n151 = r200 ? parseFloat(r200.getAttribute("cy")) : 0, l123 = r200 ? parseFloat(r200.getAttribute("barWidth")) : 0, h105 = r200 ? parseFloat(r200.getAttribute("barHeight")) : 0, c89 = i357.getElGrid().getBoundingClientRect(), d78 = r200.classList.contains("apexcharts-candlestick-area") || r200.classList.contains("apexcharts-boxPlot-area");
                  if (e477.globals.isXNumeric ? (r200 && !d78 && (o176 -= a293 % 2 != 0 ? l123 / 2 : 0), r200 && d78 && e477.globals.comboCharts && (o176 -= l123 / 2)) : e477.globals.isBarHorizontal || (o176 = i357.xAxisTicksPositions[t630 - 1] + i357.dataPointsDividedWidth / 2, isNaN(o176) && (o176 = i357.xAxisTicksPositions[t630] - i357.dataPointsDividedWidth / 2)), e477.globals.isBarHorizontal ? n151 += h105 / 3 : n151 = i357.e.clientY - c89.top - i357.tooltipRect.ttHeight / 2, e477.globals.isBarHorizontal || this.moveXCrosshairs(o176), !i357.fixedTooltip) {
                      var g65 = n151 || e477.globals.gridHeight;
                      this.moveTooltip(o176, g65);
                  }
              }
          }
      ]), t623;
  }(), pt = function() {
      function t631(e478) {
          a(this, t631), this.w = e478.w, this.ttCtx = e478, this.ctx = e478.ctx, this.tooltipPosition = new ut(e478);
      }
      return r(t631, [
          {
              key: "drawDynamicPoints",
              value: function() {
                  var t632 = this.w, e479 = new b(this.ctx), i358 = new P(this.ctx), a294 = t632.globals.dom.baseEl.querySelectorAll(".apexcharts-series");
                  a294 = g(a294), t632.config.chart.stacked && a294.sort(function(t633, e480) {
                      return parseFloat(t633.getAttribute("data:realIndex")) - parseFloat(e480.getAttribute("data:realIndex"));
                  });
                  for(var s231 = 0; s231 < a294.length; s231++){
                      var r201 = a294[s231].querySelector(".apexcharts-series-markers-wrap");
                      if (null !== r201) {
                          var o177 = void 0, n152 = "apexcharts-marker w".concat((Math.random() + 1).toString(36).substring(4));
                          "line" !== t632.config.chart.type && "area" !== t632.config.chart.type || t632.globals.comboCharts || t632.config.tooltip.intersect || (n152 += " no-pointer-events");
                          var l124 = i358.getMarkerConfig({
                              cssClass: n152,
                              seriesIndex: Number(r201.getAttribute("data:realIndex"))
                          });
                          (o177 = e479.drawMarker(0, 0, l124)).node.setAttribute("default-marker-size", 0);
                          var h106 = document.createElementNS(t632.globals.SVGNS, "g");
                          h106.classList.add("apexcharts-series-markers"), h106.appendChild(o177.node), r201.appendChild(h106);
                      }
                  }
              }
          },
          {
              key: "enlargeCurrentPoint",
              value: function(t634, e481) {
                  var i359 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : null, a295 = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : null, s232 = this.w;
                  "bubble" !== s232.config.chart.type && this.newPointSize(t634, e481);
                  var r202 = e481.getAttribute("cx"), o178 = e481.getAttribute("cy");
                  if (null !== i359 && null !== a295 && (r202 = i359, o178 = a295), this.tooltipPosition.moveXCrosshairs(r202), !this.fixedTooltip) {
                      if ("radar" === s232.config.chart.type) {
                          var n153 = this.ttCtx.getElGrid(), l125 = n153.getBoundingClientRect();
                          r202 = this.ttCtx.e.clientX - l125.left;
                      }
                      this.tooltipPosition.moveTooltip(r202, o178, s232.config.markers.hover.size);
                  }
              }
          },
          {
              key: "enlargePoints",
              value: function(t635) {
                  for(var e482 = this.w, i360 = this, a296 = this.ttCtx, s233 = t635, r203 = e482.globals.dom.baseEl.querySelectorAll(".apexcharts-series:not(.apexcharts-series-collapsed) .apexcharts-marker"), o179 = e482.config.markers.hover.size, n154 = 0; n154 < r203.length; n154++){
                      var l126 = r203[n154].getAttribute("rel"), h = r203[n154].getAttribute("index");
                      if (void 0 === o179 && (o179 = e482.globals.markers.size[h] + e482.config.markers.hover.sizeOffset), s233 === parseInt(l126, 10)) {
                          i360.newPointSize(s233, r203[n154]);
                          var c90 = r203[n154].getAttribute("cx"), d79 = r203[n154].getAttribute("cy");
                          i360.tooltipPosition.moveXCrosshairs(c90), a296.fixedTooltip || i360.tooltipPosition.moveTooltip(c90, d79, o179);
                      } else i360.oldPointSize(r203[n154]);
                  }
              }
          },
          {
              key: "newPointSize",
              value: function(t636, e483) {
                  var i361 = this.w, a297 = i361.config.markers.hover.size, s234 = 0 === t636 ? e483.parentNode.firstChild : e483.parentNode.lastChild;
                  if ("0" !== s234.getAttribute("default-marker-size")) {
                      var r = parseInt(s234.getAttribute("index"), 10);
                      void 0 === a297 && (a297 = i361.globals.markers.size[r] + i361.config.markers.hover.sizeOffset), a297 < 0 && (a297 = 0), s234.setAttribute("r", a297);
                  }
              }
          },
          {
              key: "oldPointSize",
              value: function(t637) {
                  var e484 = parseFloat(t637.getAttribute("default-marker-size"));
                  t637.setAttribute("r", e484);
              }
          },
          {
              key: "resetPointsSize",
              value: function() {
                  for(var t638 = this.w.globals.dom.baseEl.querySelectorAll(".apexcharts-series:not(.apexcharts-series-collapsed) .apexcharts-marker"), e485 = 0; e485 < t638.length; e485++){
                      var i362 = parseFloat(t638[e485].getAttribute("default-marker-size"));
                      p.isNumber(i362) && i362 >= 0 ? t638[e485].setAttribute("r", i362) : t638[e485].setAttribute("r", 0);
                  }
              }
          }
      ]), t631;
  }(), ft = function() {
      function t639(e486) {
          a(this, t639), this.w = e486.w, this.ttCtx = e486;
      }
      return r(t639, [
          {
              key: "getAttr",
              value: function(t640, e487) {
                  return parseFloat(t640.target.getAttribute(e487));
              }
          },
          {
              key: "handleHeatTreeTooltip",
              value: function(t641) {
                  var e488 = t641.e, i363 = t641.opt, a298 = t641.x, s235 = t641.y, r204 = t641.type, o180 = this.ttCtx, n155 = this.w;
                  if (e488.target.classList.contains("apexcharts-".concat(r204, "-rect"))) {
                      var l127 = this.getAttr(e488, "i"), h107 = this.getAttr(e488, "j"), c91 = this.getAttr(e488, "cx"), d80 = this.getAttr(e488, "cy"), g66 = this.getAttr(e488, "width"), u54 = this.getAttr(e488, "height");
                      if (o180.tooltipLabels.drawSeriesTexts({
                          ttItems: i363.ttItems,
                          i: l127,
                          j: h107,
                          shared: !1,
                          e: e488
                      }), n155.globals.capturedSeriesIndex = l127, n155.globals.capturedDataPointIndex = h107, a298 = c91 + o180.tooltipRect.ttWidth / 2 + g66, s235 = d80 + o180.tooltipRect.ttHeight / 2 - u54 / 2, o180.tooltipPosition.moveXCrosshairs(c91 + g66 / 2), a298 > n155.globals.gridWidth / 2 && (a298 = c91 - o180.tooltipRect.ttWidth / 2 + g66), o180.w.config.tooltip.followCursor) {
                          var p33 = n155.globals.dom.elWrap.getBoundingClientRect();
                          a298 = n155.globals.clientX - p33.left - (a298 > n155.globals.gridWidth / 2 ? o180.tooltipRect.ttWidth : 0), s235 = n155.globals.clientY - p33.top;
                      }
                  }
                  return {
                      x: a298,
                      y: s235
                  };
              }
          },
          {
              key: "handleMarkerTooltip",
              value: function(t642) {
                  var e489, i364, a299 = t642.e, s236 = t642.opt, r205 = t642.x, o181 = t642.y, n156 = this.w, l128 = this.ttCtx;
                  if (a299.target.classList.contains("apexcharts-marker")) {
                      var h108 = parseInt(s236.paths.getAttribute("cx"), 10), c92 = parseInt(s236.paths.getAttribute("cy"), 10), d81 = parseFloat(s236.paths.getAttribute("val"));
                      if (i364 = parseInt(s236.paths.getAttribute("rel"), 10), e489 = parseInt(s236.paths.parentNode.parentNode.parentNode.getAttribute("rel"), 10) - 1, l128.intersect) {
                          var g67 = p.findAncestor(s236.paths, "apexcharts-series");
                          g67 && (e489 = parseInt(g67.getAttribute("data:realIndex"), 10));
                      }
                      if (l128.tooltipLabels.drawSeriesTexts({
                          ttItems: s236.ttItems,
                          i: e489,
                          j: i364,
                          shared: !l128.showOnIntersect && n156.config.tooltip.shared,
                          e: a299
                      }), "mouseup" === a299.type && l128.markerClick(a299, e489, i364), n156.globals.capturedSeriesIndex = e489, n156.globals.capturedDataPointIndex = i364, r205 = h108, o181 = c92 + n156.globals.translateY - 1.4 * l128.tooltipRect.ttHeight, l128.w.config.tooltip.followCursor) {
                          var u55 = l128.getElGrid().getBoundingClientRect();
                          o181 = l128.e.clientY + n156.globals.translateY - u55.top;
                      }
                      d81 < 0 && (o181 = c92), l128.marker.enlargeCurrentPoint(i364, s236.paths, r205, o181);
                  }
                  return {
                      x: r205,
                      y: o181
                  };
              }
          },
          {
              key: "handleBarTooltip",
              value: function(t643) {
                  var e490, i365, a300 = t643.e, s237 = t643.opt, r206 = this.w, o182 = this.ttCtx, n157 = o182.getElTooltip(), l129 = 0, h109 = 0, c93 = 0, d82 = this.getBarTooltipXY({
                      e: a300,
                      opt: s237
                  });
                  e490 = d82.i;
                  var g68 = d82.barHeight, u56 = d82.j;
                  r206.globals.capturedSeriesIndex = e490, r206.globals.capturedDataPointIndex = u56, r206.globals.isBarHorizontal && o182.tooltipUtil.hasBars() || !r206.config.tooltip.shared ? (h109 = d82.x, c93 = d82.y, i365 = Array.isArray(r206.config.stroke.width) ? r206.config.stroke.width[e490] : r206.config.stroke.width, l129 = h109) : r206.globals.comboCharts || r206.config.tooltip.shared || (l129 /= 2), isNaN(c93) ? c93 = r206.globals.svgHeight - o182.tooltipRect.ttHeight : c93 < 0 && (c93 = 0);
                  var p = parseInt(s237.paths.parentNode.getAttribute("data:realIndex"), 10), f40 = r206.globals.isMultipleYAxis ? r206.config.yaxis[p] && r206.config.yaxis[p].reversed : r206.config.yaxis[0].reversed;
                  if (h109 + o182.tooltipRect.ttWidth > r206.globals.gridWidth && !f40 ? h109 -= o182.tooltipRect.ttWidth : h109 < 0 && (h109 = 0), o182.w.config.tooltip.followCursor) {
                      var x33 = o182.getElGrid().getBoundingClientRect();
                      c93 = o182.e.clientY - x33.top;
                  }
                  null === o182.tooltip && (o182.tooltip = r206.globals.dom.baseEl.querySelector(".apexcharts-tooltip")), r206.config.tooltip.shared || (r206.globals.comboBarCount > 0 ? o182.tooltipPosition.moveXCrosshairs(l129 + i365 / 2) : o182.tooltipPosition.moveXCrosshairs(l129)), !o182.fixedTooltip && (!r206.config.tooltip.shared || r206.globals.isBarHorizontal && o182.tooltipUtil.hasBars()) && (f40 && (h109 -= o182.tooltipRect.ttWidth) < 0 && (h109 = 0), !f40 || r206.globals.isBarHorizontal && o182.tooltipUtil.hasBars() || (c93 = c93 + g68 - 2 * (r206.globals.series[e490][u56] < 0 ? g68 : 0)), o182.tooltipRect.ttHeight + c93 > r206.globals.gridHeight ? c93 = r206.globals.gridHeight - o182.tooltipRect.ttHeight + r206.globals.translateY : (c93 = c93 + r206.globals.translateY - o182.tooltipRect.ttHeight / 2) < 0 && (c93 = 0), n157.style.left = h109 + r206.globals.translateX + "px", n157.style.top = c93 + "px");
              }
          },
          {
              key: "getBarTooltipXY",
              value: function(t644) {
                  var e491 = t644.e, i366 = t644.opt, a301 = this.w, s238 = null, r207 = this.ttCtx, o183 = 0, n158 = 0, l130 = 0, h110 = 0, c94 = 0, d83 = e491.target.classList;
                  if (d83.contains("apexcharts-bar-area") || d83.contains("apexcharts-candlestick-area") || d83.contains("apexcharts-boxPlot-area") || d83.contains("apexcharts-rangebar-area")) {
                      var g69 = e491.target, u57 = g69.getBoundingClientRect(), p34 = i366.elGrid.getBoundingClientRect(), f41 = u57.height;
                      c94 = u57.height;
                      var x34 = u57.width, b17 = parseInt(g69.getAttribute("cx"), 10), v33 = parseInt(g69.getAttribute("cy"), 10);
                      h110 = parseFloat(g69.getAttribute("barWidth"));
                      var m28 = "touchmove" === e491.type ? e491.touches[0].clientX : e491.clientX;
                      s238 = parseInt(g69.getAttribute("j"), 10), o183 = parseInt(g69.parentNode.getAttribute("rel"), 10) - 1;
                      var y22 = g69.getAttribute("data-range-y1"), w18 = g69.getAttribute("data-range-y2");
                      a301.globals.comboCharts && (o183 = parseInt(g69.parentNode.getAttribute("data:realIndex"), 10)), r207.tooltipLabels.drawSeriesTexts({
                          ttItems: i366.ttItems,
                          i: o183,
                          j: s238,
                          y1: y22 ? parseInt(y22, 10) : null,
                          y2: w18 ? parseInt(w18, 10) : null,
                          shared: !r207.showOnIntersect && a301.config.tooltip.shared,
                          e: e491
                      }), a301.config.tooltip.followCursor ? a301.globals.isBarHorizontal ? (n158 = m28 - p34.left + 15, l130 = v33 - r207.dataPointsDividedHeight + f41 / 2 - r207.tooltipRect.ttHeight / 2) : (n158 = a301.globals.isXNumeric ? b17 - x34 / 2 : b17 - r207.dataPointsDividedWidth + x34 / 2, l130 = e491.clientY - p34.top - r207.tooltipRect.ttHeight / 2 - 15) : a301.globals.isBarHorizontal ? ((n158 = b17) < r207.xyRatios.baseLineInvertedY && (n158 = b17 - r207.tooltipRect.ttWidth), l130 = v33 - r207.dataPointsDividedHeight + f41 / 2 - r207.tooltipRect.ttHeight / 2) : (n158 = a301.globals.isXNumeric ? b17 - x34 / 2 : b17 - r207.dataPointsDividedWidth + x34 / 2, l130 = v33);
                  }
                  return {
                      x: n158,
                      y: l130,
                      barHeight: c94,
                      barWidth: h110,
                      i: o183,
                      j: s238
                  };
              }
          }
      ]), t639;
  }(), xt = function() {
      function t645(e492) {
          a(this, t645), this.w = e492.w, this.ttCtx = e492;
      }
      return r(t645, [
          {
              key: "drawXaxisTooltip",
              value: function() {
                  var t646 = this.w, e493 = this.ttCtx, i367 = "bottom" === t646.config.xaxis.position;
                  e493.xaxisOffY = i367 ? t646.globals.gridHeight + 1 : -t646.globals.xAxisHeight - t646.config.xaxis.axisTicks.height + 3;
                  var a302 = i367 ? "apexcharts-xaxistooltip apexcharts-xaxistooltip-bottom" : "apexcharts-xaxistooltip apexcharts-xaxistooltip-top", s239 = t646.globals.dom.elWrap;
                  e493.isXAxisTooltipEnabled && null === t646.globals.dom.baseEl.querySelector(".apexcharts-xaxistooltip") && (e493.xaxisTooltip = document.createElement("div"), e493.xaxisTooltip.setAttribute("class", a302 + " apexcharts-theme-" + t646.config.tooltip.theme), s239.appendChild(e493.xaxisTooltip), e493.xaxisTooltipText = document.createElement("div"), e493.xaxisTooltipText.classList.add("apexcharts-xaxistooltip-text"), e493.xaxisTooltipText.style.fontFamily = t646.config.xaxis.tooltip.style.fontFamily || t646.config.chart.fontFamily, e493.xaxisTooltipText.style.fontSize = t646.config.xaxis.tooltip.style.fontSize, e493.xaxisTooltip.appendChild(e493.xaxisTooltipText));
              }
          },
          {
              key: "drawYaxisTooltip",
              value: function() {
                  for(var t647 = this.w, e494 = this.ttCtx, i368 = function(i369) {
                      var a304 = t647.config.yaxis[i369].opposite || t647.config.yaxis[i369].crosshairs.opposite;
                      e494.yaxisOffX = a304 ? t647.globals.gridWidth + 1 : 1;
                      var s240 = "apexcharts-yaxistooltip apexcharts-yaxistooltip-".concat(i369, a304 ? " apexcharts-yaxistooltip-right" : " apexcharts-yaxistooltip-left");
                      t647.globals.yAxisSameScaleIndices.map(function(e495, a305) {
                          e495.map(function(e, a306) {
                              a306 === i369 && (s240 += t647.config.yaxis[a306].show ? " " : " apexcharts-yaxistooltip-hidden");
                          });
                      });
                      var r208 = t647.globals.dom.elWrap;
                      null === t647.globals.dom.baseEl.querySelector(".apexcharts-yaxistooltip apexcharts-yaxistooltip-".concat(i369)) && (e494.yaxisTooltip = document.createElement("div"), e494.yaxisTooltip.setAttribute("class", s240 + " apexcharts-theme-" + t647.config.tooltip.theme), r208.appendChild(e494.yaxisTooltip), 0 === i369 && (e494.yaxisTooltipText = []), e494.yaxisTooltipText[i369] = document.createElement("div"), e494.yaxisTooltipText[i369].classList.add("apexcharts-yaxistooltip-text"), e494.yaxisTooltip.appendChild(e494.yaxisTooltipText[i369]));
                  }, a303 = 0; a303 < t647.config.yaxis.length; a303++)i368(a303);
              }
          },
          {
              key: "setXCrosshairWidth",
              value: function() {
                  var t648 = this.w, e496 = this.ttCtx, i370 = e496.getElXCrosshairs();
                  if (e496.xcrosshairsWidth = parseInt(t648.config.xaxis.crosshairs.width, 10), t648.globals.comboCharts) {
                      var a307 = t648.globals.dom.baseEl.querySelector(".apexcharts-bar-area");
                      if (null !== a307 && "barWidth" === t648.config.xaxis.crosshairs.width) {
                          var s241 = parseFloat(a307.getAttribute("barWidth"));
                          e496.xcrosshairsWidth = s241;
                      } else if ("tickWidth" === t648.config.xaxis.crosshairs.width) {
                          var r209 = t648.globals.labels.length;
                          e496.xcrosshairsWidth = t648.globals.gridWidth / r209;
                      }
                  } else if ("tickWidth" === t648.config.xaxis.crosshairs.width) {
                      var o184 = t648.globals.labels.length;
                      e496.xcrosshairsWidth = t648.globals.gridWidth / o184;
                  } else if ("barWidth" === t648.config.xaxis.crosshairs.width) {
                      var n159 = t648.globals.dom.baseEl.querySelector(".apexcharts-bar-area");
                      if (null !== n159) {
                          var l131 = parseFloat(n159.getAttribute("barWidth"));
                          e496.xcrosshairsWidth = l131;
                      } else e496.xcrosshairsWidth = 1;
                  }
                  t648.globals.isBarHorizontal && (e496.xcrosshairsWidth = 0), null !== i370 && e496.xcrosshairsWidth > 0 && i370.setAttribute("width", e496.xcrosshairsWidth);
              }
          },
          {
              key: "handleYCrosshair",
              value: function() {
                  var t649 = this.w, e497 = this.ttCtx;
                  e497.ycrosshairs = t649.globals.dom.baseEl.querySelector(".apexcharts-ycrosshairs"), e497.ycrosshairsHidden = t649.globals.dom.baseEl.querySelector(".apexcharts-ycrosshairs-hidden");
              }
          },
          {
              key: "drawYaxisTooltipText",
              value: function(t650, e498, i371) {
                  var a308 = this.ttCtx, s242 = this.w, r210 = s242.globals.yLabelFormatters[t650];
                  if (a308.yaxisTooltips[t650]) {
                      var o185 = a308.getElGrid().getBoundingClientRect(), n160 = (e498 - o185.top) * i371.yRatio[t650], l132 = s242.globals.maxYArr[t650] - s242.globals.minYArr[t650], h111 = s242.globals.minYArr[t650] + (l132 - n160);
                      a308.tooltipPosition.moveYCrosshairs(e498 - o185.top), a308.yaxisTooltipText[t650].innerHTML = r210(h111), a308.tooltipPosition.moveYAxisTooltip(t650);
                  }
              }
          }
      ]), t645;
  }(), bt = function() {
      function t651(e499) {
          a(this, t651), this.ctx = e499, this.w = e499.w;
          var i372 = this.w;
          this.tConfig = i372.config.tooltip, this.tooltipUtil = new dt(this), this.tooltipLabels = new gt(this), this.tooltipPosition = new ut(this), this.marker = new pt(this), this.intersect = new ft(this), this.axesTooltip = new xt(this), this.showOnIntersect = this.tConfig.intersect, this.showTooltipTitle = this.tConfig.x.show, this.fixedTooltip = this.tConfig.fixed.enabled, this.xaxisTooltip = null, this.yaxisTTEls = null, this.isBarShared = !i372.globals.isBarHorizontal && this.tConfig.shared, this.lastHoverTime = Date.now();
      }
      return r(t651, [
          {
              key: "getElTooltip",
              value: function(t652) {
                  return t652 || (t652 = this), t652.w.globals.dom.baseEl ? t652.w.globals.dom.baseEl.querySelector(".apexcharts-tooltip") : null;
              }
          },
          {
              key: "getElXCrosshairs",
              value: function() {
                  return this.w.globals.dom.baseEl.querySelector(".apexcharts-xcrosshairs");
              }
          },
          {
              key: "getElGrid",
              value: function() {
                  return this.w.globals.dom.baseEl.querySelector(".apexcharts-grid");
              }
          },
          {
              key: "drawTooltip",
              value: function(t653) {
                  var e500 = this.w;
                  this.xyRatios = t653, this.isXAxisTooltipEnabled = e500.config.xaxis.tooltip.enabled && e500.globals.axisCharts, this.yaxisTooltips = e500.config.yaxis.map(function(t654, i) {
                      return !!(t654.show && t654.tooltip.enabled && e500.globals.axisCharts);
                  }), this.allTooltipSeriesGroups = [], e500.globals.axisCharts || (this.showTooltipTitle = !1);
                  var i373 = document.createElement("div");
                  if (i373.classList.add("apexcharts-tooltip"), i373.classList.add("apexcharts-theme-".concat(this.tConfig.theme)), e500.globals.dom.elWrap.appendChild(i373), e500.globals.axisCharts) {
                      this.axesTooltip.drawXaxisTooltip(), this.axesTooltip.drawYaxisTooltip(), this.axesTooltip.setXCrosshairWidth(), this.axesTooltip.handleYCrosshair();
                      var a309 = new G(this.ctx);
                      this.xAxisTicksPositions = a309.getXAxisTicksPositions();
                  }
                  if (!e500.globals.comboCharts && !this.tConfig.intersect && "rangeBar" !== e500.config.chart.type || this.tConfig.shared || (this.showOnIntersect = !0), 0 !== e500.config.markers.size && 0 !== e500.globals.markers.largestSize || this.marker.drawDynamicPoints(this), e500.globals.collapsedSeries.length !== e500.globals.series.length) {
                      this.dataPointsDividedHeight = e500.globals.gridHeight / e500.globals.dataPoints, this.dataPointsDividedWidth = e500.globals.gridWidth / e500.globals.dataPoints, this.showTooltipTitle && (this.tooltipTitle = document.createElement("div"), this.tooltipTitle.classList.add("apexcharts-tooltip-title"), this.tooltipTitle.style.fontFamily = this.tConfig.style.fontFamily || e500.config.chart.fontFamily, this.tooltipTitle.style.fontSize = this.tConfig.style.fontSize, i373.appendChild(this.tooltipTitle));
                      var s243 = e500.globals.series.length;
                      (e500.globals.xyCharts || e500.globals.comboCharts) && this.tConfig.shared && (s243 = this.showOnIntersect ? 1 : e500.globals.series.length), this.legendLabels = e500.globals.dom.baseEl.querySelectorAll(".apexcharts-legend-text"), this.ttItems = this.createTTElements(s243), this.addSVGEvents();
                  }
              }
          },
          {
              key: "createTTElements",
              value: function(t655) {
                  for(var e501 = this, i374 = this.w, a310 = [], s244 = this.getElTooltip(), r211 = function(r212) {
                      var o187 = document.createElement("div");
                      o187.classList.add("apexcharts-tooltip-series-group"), o187.style.order = i374.config.tooltip.inverseOrder ? t655 - r212 : r212 + 1, e501.tConfig.shared && e501.tConfig.enabledOnSeries && Array.isArray(e501.tConfig.enabledOnSeries) && e501.tConfig.enabledOnSeries.indexOf(r212) < 0 && o187.classList.add("apexcharts-tooltip-series-group-hidden");
                      var n161 = document.createElement("span");
                      n161.classList.add("apexcharts-tooltip-marker"), n161.style.backgroundColor = i374.globals.colors[r212], o187.appendChild(n161);
                      var l133 = document.createElement("div");
                      l133.classList.add("apexcharts-tooltip-text"), l133.style.fontFamily = e501.tConfig.style.fontFamily || i374.config.chart.fontFamily, l133.style.fontSize = e501.tConfig.style.fontSize, [
                          "y",
                          "goals",
                          "z"
                      ].forEach(function(t656) {
                          var e502 = document.createElement("div");
                          e502.classList.add("apexcharts-tooltip-".concat(t656, "-group"));
                          var i375 = document.createElement("span");
                          i375.classList.add("apexcharts-tooltip-text-".concat(t656, "-label")), e502.appendChild(i375);
                          var a311 = document.createElement("span");
                          a311.classList.add("apexcharts-tooltip-text-".concat(t656, "-value")), e502.appendChild(a311), l133.appendChild(e502);
                      }), o187.appendChild(l133), s244.appendChild(o187), a310.push(o187);
                  }, o186 = 0; o186 < t655; o186++)r211(o186);
                  return a310;
              }
          },
          {
              key: "addSVGEvents",
              value: function() {
                  var t657 = this.w, e503 = t657.config.chart.type, i376 = this.getElTooltip(), a312 = !("bar" !== e503 && "candlestick" !== e503 && "boxPlot" !== e503 && "rangeBar" !== e503), s245 = "area" === e503 || "line" === e503 || "scatter" === e503 || "bubble" === e503 || "radar" === e503, r213 = t657.globals.dom.Paper.node, o188 = this.getElGrid();
                  o188 && (this.seriesBound = o188.getBoundingClientRect());
                  var n162, l134 = [], h112 = [], c95 = {
                      hoverArea: r213,
                      elGrid: o188,
                      tooltipEl: i376,
                      tooltipY: l134,
                      tooltipX: h112,
                      ttItems: this.ttItems
                  };
                  if (t657.globals.axisCharts && (s245 ? n162 = t657.globals.dom.baseEl.querySelectorAll(".apexcharts-series[data\\:longestSeries='true'] .apexcharts-marker") : a312 ? n162 = t657.globals.dom.baseEl.querySelectorAll(".apexcharts-series .apexcharts-bar-area, .apexcharts-series .apexcharts-candlestick-area, .apexcharts-series .apexcharts-boxPlot-area, .apexcharts-series .apexcharts-rangebar-area") : "heatmap" !== e503 && "treemap" !== e503 || (n162 = t657.globals.dom.baseEl.querySelectorAll(".apexcharts-series .apexcharts-heatmap, .apexcharts-series .apexcharts-treemap")), n162 && n162.length)) for(var d84 = 0; d84 < n162.length; d84++)l134.push(n162[d84].getAttribute("cy")), h112.push(n162[d84].getAttribute("cx"));
                  if (t657.globals.xyCharts && !this.showOnIntersect || t657.globals.comboCharts && !this.showOnIntersect || a312 && this.tooltipUtil.hasBars() && this.tConfig.shared) this.addPathsEventListeners([
                      r213
                  ], c95);
                  else if (a312 && !t657.globals.comboCharts || s245 && this.showOnIntersect) this.addDatapointEventsListeners(c95);
                  else if (!t657.globals.axisCharts || "heatmap" === e503 || "treemap" === e503) {
                      var g70 = t657.globals.dom.baseEl.querySelectorAll(".apexcharts-series");
                      this.addPathsEventListeners(g70, c95);
                  }
                  if (this.showOnIntersect) {
                      var u58 = t657.globals.dom.baseEl.querySelectorAll(".apexcharts-line-series .apexcharts-marker, .apexcharts-area-series .apexcharts-marker");
                      u58.length > 0 && this.addPathsEventListeners(u58, c95), this.tooltipUtil.hasBars() && !this.tConfig.shared && this.addDatapointEventsListeners(c95);
                  }
              }
          },
          {
              key: "drawFixedTooltipRect",
              value: function() {
                  var t658 = this.w, e504 = this.getElTooltip(), i377 = e504.getBoundingClientRect(), a313 = i377.width + 10, s246 = i377.height + 10, r214 = this.tConfig.fixed.offsetX, o189 = this.tConfig.fixed.offsetY, n163 = this.tConfig.fixed.position.toLowerCase();
                  return n163.indexOf("right") > -1 && (r214 = r214 + t658.globals.svgWidth - a313 + 10), n163.indexOf("bottom") > -1 && (o189 = o189 + t658.globals.svgHeight - s246 - 10), e504.style.left = r214 + "px", e504.style.top = o189 + "px", {
                      x: r214,
                      y: o189,
                      ttWidth: a313,
                      ttHeight: s246
                  };
              }
          },
          {
              key: "addDatapointEventsListeners",
              value: function(t659) {
                  var e505 = this.w.globals.dom.baseEl.querySelectorAll(".apexcharts-series-markers .apexcharts-marker, .apexcharts-bar-area, .apexcharts-candlestick-area, .apexcharts-boxPlot-area, .apexcharts-rangebar-area");
                  this.addPathsEventListeners(e505, t659);
              }
          },
          {
              key: "addPathsEventListeners",
              value: function(t660, e506) {
                  for(var i378 = this, a314 = function(a) {
                      var s248 = {
                          paths: t660[a],
                          tooltipEl: e506.tooltipEl,
                          tooltipY: e506.tooltipY,
                          tooltipX: e506.tooltipX,
                          elGrid: e506.elGrid,
                          hoverArea: e506.hoverArea,
                          ttItems: e506.ttItems
                      };
                      [
                          "mousemove",
                          "mouseup",
                          "touchmove",
                          "mouseout",
                          "touchend"
                      ].map(function(e507) {
                          return t660[a].addEventListener(e507, i378.onSeriesHover.bind(i378, s248), {
                              capture: !1,
                              passive: !0
                          });
                      });
                  }, s247 = 0; s247 < t660.length; s247++)a314(s247);
              }
          },
          {
              key: "onSeriesHover",
              value: function(t661, e508) {
                  var i379 = this, a315 = Date.now() - this.lastHoverTime;
                  a315 >= 100 ? this.seriesHover(t661, e508) : (clearTimeout(this.seriesHoverTimeout), this.seriesHoverTimeout = setTimeout(function() {
                      i379.seriesHover(t661, e508);
                  }, 100 - a315));
              }
          },
          {
              key: "seriesHover",
              value: function(t662, e509) {
                  var i380 = this;
                  this.lastHoverTime = Date.now();
                  var a316 = [], s249 = this.w;
                  s249.config.chart.group && (a316 = this.ctx.getGroupedCharts()), s249.globals.axisCharts && (s249.globals.minX === -1 / 0 && s249.globals.maxX === 1 / 0 || 0 === s249.globals.dataPoints) || (a316.length ? a316.forEach(function(a317) {
                      var s250 = i380.getElTooltip(a317), r215 = {
                          paths: t662.paths,
                          tooltipEl: s250,
                          tooltipY: t662.tooltipY,
                          tooltipX: t662.tooltipX,
                          elGrid: t662.elGrid,
                          hoverArea: t662.hoverArea,
                          ttItems: a317.w.globals.tooltip.ttItems
                      };
                      a317.w.globals.minX === i380.w.globals.minX && a317.w.globals.maxX === i380.w.globals.maxX && a317.w.globals.tooltip.seriesHoverByContext({
                          chartCtx: a317,
                          ttCtx: a317.w.globals.tooltip,
                          opt: r215,
                          e: e509
                      });
                  }) : this.seriesHoverByContext({
                      chartCtx: this.ctx,
                      ttCtx: this.w.globals.tooltip,
                      opt: t662,
                      e: e509
                  }));
              }
          },
          {
              key: "seriesHoverByContext",
              value: function(t663) {
                  var e510 = t663.chartCtx, i381 = t663.ttCtx, a318 = t663.opt, s251 = t663.e, r216 = e510.w, o190 = this.getElTooltip();
                  if (o190) {
                      if (i381.tooltipRect = {
                          x: 0,
                          y: 0,
                          ttWidth: o190.getBoundingClientRect().width,
                          ttHeight: o190.getBoundingClientRect().height
                      }, i381.e = s251, i381.tooltipUtil.hasBars() && !r216.globals.comboCharts && !i381.isBarShared) {
                          if (this.tConfig.onDatasetHover.highlightDataSeries) new z(e510).toggleSeriesOnHover(s251, s251.target.parentNode);
                      }
                      i381.fixedTooltip && i381.drawFixedTooltipRect(), r216.globals.axisCharts ? i381.axisChartsTooltips({
                          e: s251,
                          opt: a318,
                          tooltipRect: i381.tooltipRect
                      }) : i381.nonAxisChartsTooltips({
                          e: s251,
                          opt: a318,
                          tooltipRect: i381.tooltipRect
                      });
                  }
              }
          },
          {
              key: "axisChartsTooltips",
              value: function(t664) {
                  var e511, i382, a319 = t664.e, s252 = t664.opt, r217 = this.w, o191 = s252.elGrid.getBoundingClientRect(), n164 = "touchmove" === a319.type ? a319.touches[0].clientX : a319.clientX, l135 = "touchmove" === a319.type ? a319.touches[0].clientY : a319.clientY;
                  if (this.clientY = l135, this.clientX = n164, r217.globals.capturedSeriesIndex = -1, r217.globals.capturedDataPointIndex = -1, l135 < o191.top || l135 > o191.top + o191.height) this.handleMouseOut(s252);
                  else {
                      if (Array.isArray(this.tConfig.enabledOnSeries) && !r217.config.tooltip.shared) {
                          var h113 = parseInt(s252.paths.getAttribute("index"), 10);
                          if (this.tConfig.enabledOnSeries.indexOf(h113) < 0) return void this.handleMouseOut(s252);
                      }
                      var c96 = this.getElTooltip(), d85 = this.getElXCrosshairs(), g71 = r217.globals.xyCharts || "bar" === r217.config.chart.type && !r217.globals.isBarHorizontal && this.tooltipUtil.hasBars() && this.tConfig.shared || r217.globals.comboCharts && this.tooltipUtil.hasBars();
                      if ("mousemove" === a319.type || "touchmove" === a319.type || "mouseup" === a319.type) {
                          if (r217.globals.collapsedSeries.length + r217.globals.ancillaryCollapsedSeries.length === r217.globals.series.length) return;
                          null !== d85 && d85.classList.add("apexcharts-active");
                          var u59 = this.yaxisTooltips.filter(function(t665) {
                              return !0 === t665;
                          });
                          if (null !== this.ycrosshairs && u59.length && this.ycrosshairs.classList.add("apexcharts-active"), g71 && !this.showOnIntersect) this.handleStickyTooltip(a319, n164, l135, s252);
                          else if ("heatmap" === r217.config.chart.type || "treemap" === r217.config.chart.type) {
                              var p35 = this.intersect.handleHeatTreeTooltip({
                                  e: a319,
                                  opt: s252,
                                  x: e511,
                                  y: i382,
                                  type: r217.config.chart.type
                              });
                              e511 = p35.x, i382 = p35.y, c96.style.left = e511 + "px", c96.style.top = i382 + "px";
                          } else this.tooltipUtil.hasBars() && this.intersect.handleBarTooltip({
                              e: a319,
                              opt: s252
                          }), this.tooltipUtil.hasMarkers() && this.intersect.handleMarkerTooltip({
                              e: a319,
                              opt: s252,
                              x: e511,
                              y: i382
                          });
                          if (this.yaxisTooltips.length) for(var f42 = 0; f42 < r217.config.yaxis.length; f42++)this.axesTooltip.drawYaxisTooltipText(f42, l135, this.xyRatios);
                          s252.tooltipEl.classList.add("apexcharts-active");
                      } else "mouseout" !== a319.type && "touchend" !== a319.type || this.handleMouseOut(s252);
                  }
              }
          },
          {
              key: "nonAxisChartsTooltips",
              value: function(t666) {
                  var e512 = t666.e, i383 = t666.opt, a320 = t666.tooltipRect, s253 = this.w, r218 = i383.paths.getAttribute("rel"), o192 = this.getElTooltip(), n165 = s253.globals.dom.elWrap.getBoundingClientRect();
                  if ("mousemove" === e512.type || "touchmove" === e512.type) {
                      o192.classList.add("apexcharts-active"), this.tooltipLabels.drawSeriesTexts({
                          ttItems: i383.ttItems,
                          i: parseInt(r218, 10) - 1,
                          shared: !1
                      });
                      var l136 = s253.globals.clientX - n165.left - a320.ttWidth / 2, h114 = s253.globals.clientY - n165.top - a320.ttHeight - 10;
                      if (o192.style.left = l136 + "px", o192.style.top = h114 + "px", s253.config.legend.tooltipHoverFormatter) {
                          var c97 = r218 - 1, d86 = (0, s253.config.legend.tooltipHoverFormatter)(this.legendLabels[c97].getAttribute("data:default-text"), {
                              seriesIndex: c97,
                              dataPointIndex: c97,
                              w: s253
                          });
                          this.legendLabels[c97].innerHTML = d86;
                      }
                  } else "mouseout" !== e512.type && "touchend" !== e512.type || (o192.classList.remove("apexcharts-active"), s253.config.legend.tooltipHoverFormatter && this.legendLabels.forEach(function(t667) {
                      var e513 = t667.getAttribute("data:default-text");
                      t667.innerHTML = decodeURIComponent(e513);
                  }));
              }
          },
          {
              key: "handleStickyTooltip",
              value: function(t668, e514, i384, a321) {
                  var s254 = this.w, r219 = this.tooltipUtil.getNearestValues({
                      context: this,
                      hoverArea: a321.hoverArea,
                      elGrid: a321.elGrid,
                      clientX: e514,
                      clientY: i384
                  }), o193 = r219.j, n166 = r219.capturedSeries, l137 = a321.elGrid.getBoundingClientRect();
                  r219.hoverX < 0 || r219.hoverX > l137.width ? this.handleMouseOut(a321) : null !== n166 ? this.handleStickyCapturedSeries(t668, n166, a321, o193) : (this.tooltipUtil.isXoverlap(o193) || s254.globals.isBarHorizontal) && this.create(t668, this, 0, o193, a321.ttItems);
              }
          },
          {
              key: "handleStickyCapturedSeries",
              value: function(t669, e515, i385, a322) {
                  var s255 = this.w;
                  if (!this.tConfig.shared && null === s255.globals.series[e515][a322]) return void this.handleMouseOut(i385);
                  void 0 !== s255.globals.series[e515][a322] ? this.tConfig.shared && this.tooltipUtil.isXoverlap(a322) && this.tooltipUtil.isInitialSeriesSameLen() ? this.create(t669, this, e515, a322, i385.ttItems) : this.create(t669, this, e515, a322, i385.ttItems, !1) : this.tooltipUtil.isXoverlap(a322) && this.create(t669, this, 0, a322, i385.ttItems);
              }
          },
          {
              key: "deactivateHoverFilter",
              value: function() {
                  for(var t670 = this.w, e516 = new b(this.ctx), i386 = t670.globals.dom.Paper.select(".apexcharts-bar-area"), a323 = 0; a323 < i386.length; a323++)e516.pathMouseLeave(i386[a323]);
              }
          },
          {
              key: "handleMouseOut",
              value: function(t671) {
                  var e517 = this.w, i387 = this.getElXCrosshairs();
                  if (t671.tooltipEl.classList.remove("apexcharts-active"), this.deactivateHoverFilter(), "bubble" !== e517.config.chart.type && this.marker.resetPointsSize(), null !== i387 && i387.classList.remove("apexcharts-active"), null !== this.ycrosshairs && this.ycrosshairs.classList.remove("apexcharts-active"), this.isXAxisTooltipEnabled && this.xaxisTooltip.classList.remove("apexcharts-active"), this.yaxisTooltips.length) {
                      null === this.yaxisTTEls && (this.yaxisTTEls = e517.globals.dom.baseEl.querySelectorAll(".apexcharts-yaxistooltip"));
                      for(var a324 = 0; a324 < this.yaxisTTEls.length; a324++)this.yaxisTTEls[a324].classList.remove("apexcharts-active");
                  }
                  e517.config.legend.tooltipHoverFormatter && this.legendLabels.forEach(function(t672) {
                      var e518 = t672.getAttribute("data:default-text");
                      t672.innerHTML = decodeURIComponent(e518);
                  });
              }
          },
          {
              key: "markerClick",
              value: function(t673, e519, i388) {
                  var a325 = this.w;
                  "function" == typeof a325.config.chart.events.markerClick && a325.config.chart.events.markerClick(t673, this.ctx, {
                      seriesIndex: e519,
                      dataPointIndex: i388,
                      w: a325
                  }), this.ctx.events.fireEvent("markerClick", [
                      t673,
                      this.ctx,
                      {
                          seriesIndex: e519,
                          dataPointIndex: i388,
                          w: a325
                      }
                  ]);
              }
          },
          {
              key: "create",
              value: function(t674, e520, i389, a326, s256) {
                  var r220 = arguments.length > 5 && void 0 !== arguments[5] ? arguments[5] : null, o194 = this.w, n167 = e520;
                  "mouseup" === t674.type && this.markerClick(t674, i389, a326), null === r220 && (r220 = this.tConfig.shared);
                  var l138 = this.tooltipUtil.hasMarkers(), h115 = this.tooltipUtil.getElBars();
                  if (o194.config.legend.tooltipHoverFormatter) {
                      var c98 = o194.config.legend.tooltipHoverFormatter, d87 = Array.from(this.legendLabels);
                      d87.forEach(function(t675) {
                          var e521 = t675.getAttribute("data:default-text");
                          t675.innerHTML = decodeURIComponent(e521);
                      });
                      for(var g72 = 0; g72 < d87.length; g72++){
                          var u60 = d87[g72], p36 = parseInt(u60.getAttribute("i"), 10), f43 = decodeURIComponent(u60.getAttribute("data:default-text")), x35 = c98(f43, {
                              seriesIndex: r220 ? p36 : i389,
                              dataPointIndex: a326,
                              w: o194
                          });
                          if (r220) u60.innerHTML = o194.globals.collapsedSeriesIndices.indexOf(p36) < 0 ? x35 : f43;
                          else if (u60.innerHTML = p36 === i389 ? x35 : f43, i389 === p36) break;
                      }
                  }
                  if (r220) {
                      if (n167.tooltipLabels.drawSeriesTexts({
                          ttItems: s256,
                          i: i389,
                          j: a326,
                          shared: !this.showOnIntersect && this.tConfig.shared
                      }), l138 && (o194.globals.markers.largestSize > 0 ? n167.marker.enlargePoints(a326) : n167.tooltipPosition.moveDynamicPointsOnHover(a326)), this.tooltipUtil.hasBars() && (this.barSeriesHeight = this.tooltipUtil.getBarsHeight(h115), this.barSeriesHeight > 0)) {
                          var v34 = new b(this.ctx), m29 = o194.globals.dom.Paper.select(".apexcharts-bar-area[j='".concat(a326, "']"));
                          this.deactivateHoverFilter(), this.tooltipPosition.moveStickyTooltipOverBars(a326);
                          for(var y23 = 0; y23 < m29.length; y23++)v34.pathMouseEnter(m29[y23]);
                      }
                  } else n167.tooltipLabels.drawSeriesTexts({
                      shared: !1,
                      ttItems: s256,
                      i: i389,
                      j: a326
                  }), this.tooltipUtil.hasBars() && n167.tooltipPosition.moveStickyTooltipOverBars(a326), l138 && n167.tooltipPosition.moveMarkers(i389, a326);
              }
          }
      ]), t651;
  }(), vt = function(t676) {
      n(s257, E);
      var i390 = d(s257);
      function s257() {
          return a(this, s257), i390.apply(this, arguments);
      }
      return r(s257, [
          {
              key: "draw",
              value: function(t677, i391) {
                  var a327 = this, s258 = this.w;
                  this.graphics = new b(this.ctx), this.bar = new E(this.ctx, this.xyRatios);
                  var r221 = new y(this.ctx, s258);
                  t677 = r221.getLogSeries(t677), this.yRatio = r221.getLogYRatios(this.yRatio), this.barHelpers.initVariables(t677), "100%" === s258.config.chart.stackType && (t677 = s258.globals.seriesPercent.slice()), this.series = t677, this.totalItems = 0, this.prevY = [], this.prevX = [], this.prevYF = [], this.prevXF = [], this.prevYVal = [], this.prevXVal = [], this.xArrj = [], this.xArrjF = [], this.xArrjVal = [], this.yArrj = [], this.yArrjF = [], this.yArrjVal = [];
                  for(var o195 = 0; o195 < t677.length; o195++)t677[o195].length > 0 && (this.totalItems += t677[o195].length);
                  for(var n168 = this.graphics.group({
                      class: "apexcharts-bar-series apexcharts-plot-series"
                  }), l139 = 0, h116 = 0, c99 = function(r222, o196) {
                      var c100 = void 0, d89 = void 0, g74 = void 0, u61 = void 0, f44 = [], x36 = [], b18 = s258.globals.comboCharts ? i391[r222] : r222;
                      a327.yRatio.length > 1 && (a327.yaxisIndex = b18), a327.isReversed = s258.config.yaxis[a327.yaxisIndex] && s258.config.yaxis[a327.yaxisIndex].reversed;
                      var v35 = a327.graphics.group({
                          class: "apexcharts-series",
                          seriesName: p.escapeString(s258.globals.seriesNames[b18]),
                          rel: r222 + 1,
                          "data:realIndex": b18
                      });
                      a327.ctx.series.addCollapsedClassToSeries(v35, b18);
                      var m30 = a327.graphics.group({
                          class: "apexcharts-datalabels",
                          "data:realIndex": b18
                      }), y24 = 0, w19 = 0, k17 = a327.initialPositions(l139, h116, c100, d89, g74, u61);
                      h116 = k17.y, y24 = k17.barHeight, d89 = k17.yDivision, u61 = k17.zeroW, l139 = k17.x, w19 = k17.barWidth, c100 = k17.xDivision, g74 = k17.zeroH, a327.yArrj = [], a327.yArrjF = [], a327.yArrjVal = [], a327.xArrj = [], a327.xArrjF = [], a327.xArrjVal = [], 1 === a327.prevY.length && a327.prevY[0].every(function(t678) {
                          return isNaN(t678);
                      }) && (a327.prevY[0] = a327.prevY[0].map(function(t) {
                          return g74;
                      }), a327.prevYF[0] = a327.prevYF[0].map(function(t) {
                          return 0;
                      }));
                      for(var A13 = 0; A13 < s258.globals.dataPoints; A13++){
                          var S12 = a327.barHelpers.getStrokeWidth(r222, A13, b18), C9 = {
                              indexes: {
                                  i: r222,
                                  j: A13,
                                  realIndex: b18,
                                  bc: o196
                              },
                              strokeWidth: S12,
                              x: l139,
                              y: h116,
                              elSeries: v35
                          }, L8 = null;
                          a327.isHorizontal ? (L8 = a327.drawStackedBarPaths(e(e({
                          }, C9), {
                          }, {
                              zeroW: u61,
                              barHeight: y24,
                              yDivision: d89
                          })), w19 = a327.series[r222][A13] / a327.invertedYRatio) : (L8 = a327.drawStackedColumnPaths(e(e({
                          }, C9), {
                          }, {
                              xDivision: c100,
                              barWidth: w19,
                              zeroH: g74
                          })), y24 = a327.series[r222][A13] / a327.yRatio[a327.yaxisIndex]), h116 = L8.y, l139 = L8.x, f44.push(l139), x36.push(h116);
                          var P8 = a327.barHelpers.getPathFillColor(t677, r222, A13, b18);
                          v35 = a327.renderSeries({
                              realIndex: b18,
                              pathFill: P8,
                              j: A13,
                              i: r222,
                              pathFrom: L8.pathFrom,
                              pathTo: L8.pathTo,
                              strokeWidth: S12,
                              elSeries: v35,
                              x: l139,
                              y: h116,
                              series: t677,
                              barHeight: y24,
                              barWidth: w19,
                              elDataLabelsWrap: m30,
                              type: "bar",
                              visibleSeries: 0
                          });
                      }
                      s258.globals.seriesXvalues[b18] = f44, s258.globals.seriesYvalues[b18] = x36, a327.prevY.push(a327.yArrj), a327.prevYF.push(a327.yArrjF), a327.prevYVal.push(a327.yArrjVal), a327.prevX.push(a327.xArrj), a327.prevXF.push(a327.xArrjF), a327.prevXVal.push(a327.xArrjVal), n168.add(v35);
                  }, d88 = 0, g73 = 0; d88 < t677.length; d88++, g73++)c99(d88, g73);
                  return n168;
              }
          },
          {
              key: "initialPositions",
              value: function(t679, e522, i392, a328, s259, r223) {
                  var o197, n169, l140 = this.w;
                  return this.isHorizontal ? (o197 = (o197 = a328 = l140.globals.gridHeight / l140.globals.dataPoints) * parseInt(l140.config.plotOptions.bar.barHeight, 10) / 100, r223 = this.baseLineInvertedY + l140.globals.padHorizontal + (this.isReversed ? l140.globals.gridWidth : 0) - (this.isReversed ? 2 * this.baseLineInvertedY : 0), e522 = (a328 - o197) / 2) : (n169 = i392 = l140.globals.gridWidth / l140.globals.dataPoints, n169 = l140.globals.isXNumeric && l140.globals.dataPoints > 1 ? (i392 = l140.globals.minXDiff / this.xRatio) * parseInt(this.barOptions.columnWidth, 10) / 100 : n169 * parseInt(l140.config.plotOptions.bar.columnWidth, 10) / 100, s259 = this.baseLineY[this.yaxisIndex] + (this.isReversed ? l140.globals.gridHeight : 0) - (this.isReversed ? 2 * this.baseLineY[this.yaxisIndex] : 0), t679 = l140.globals.padHorizontal + (i392 - n169) / 2), {
                      x: t679,
                      y: e522,
                      yDivision: a328,
                      xDivision: i392,
                      barHeight: o197,
                      barWidth: n169,
                      zeroH: s259,
                      zeroW: r223
                  };
              }
          },
          {
              key: "drawStackedBarPaths",
              value: function(t680) {
                  for(var e523, i393 = t680.indexes, a329 = t680.barHeight, s260 = t680.strokeWidth, r224 = t680.zeroW, o198 = t680.x, n170 = t680.y, l141 = t680.yDivision, h117 = t680.elSeries, c101 = this.w, d90 = n170, g75 = i393.i, u62 = i393.j, p37 = 0, f45 = 0; f45 < this.prevXF.length; f45++)p37 += this.prevXF[f45][u62];
                  if (g75 > 0) {
                      var x37 = r224;
                      this.prevXVal[g75 - 1][u62] < 0 ? x37 = this.series[g75][u62] >= 0 ? this.prevX[g75 - 1][u62] + p37 - 2 * (this.isReversed ? p37 : 0) : this.prevX[g75 - 1][u62] : this.prevXVal[g75 - 1][u62] >= 0 && (x37 = this.series[g75][u62] >= 0 ? this.prevX[g75 - 1][u62] : this.prevX[g75 - 1][u62] - p37 + 2 * (this.isReversed ? p37 : 0)), e523 = x37;
                  } else e523 = r224;
                  o198 = null === this.series[g75][u62] ? e523 : e523 + this.series[g75][u62] / this.invertedYRatio - 2 * (this.isReversed ? this.series[g75][u62] / this.invertedYRatio : 0);
                  var b19 = this.barHelpers.getBarpaths({
                      barYPosition: d90,
                      barHeight: a329,
                      x1: e523,
                      x2: o198,
                      strokeWidth: s260,
                      series: this.series,
                      realIndex: i393.realIndex,
                      i: g75,
                      j: u62,
                      w: c101
                  });
                  return this.barHelpers.barBackground({
                      j: u62,
                      i: g75,
                      y1: d90,
                      y2: a329,
                      elSeries: h117
                  }), n170 += l141, {
                      pathTo: b19.pathTo,
                      pathFrom: b19.pathFrom,
                      x: o198,
                      y: n170
                  };
              }
          },
          {
              key: "drawStackedColumnPaths",
              value: function(t681) {
                  var e524 = t681.indexes, i394 = t681.x, a330 = t681.y, s261 = t681.xDivision, r225 = t681.barWidth, o199 = t681.zeroH;
                  t681.strokeWidth;
                  var n171 = t681.elSeries, l142 = this.w, h118 = e524.i, c102 = e524.j, d91 = e524.bc;
                  if (l142.globals.isXNumeric) {
                      var g76 = l142.globals.seriesX[h118][c102];
                      g76 || (g76 = 0), i394 = (g76 - l142.globals.minX) / this.xRatio - r225 / 2;
                  }
                  for(var u63, p38 = i394, f46 = 0, x38 = 0; x38 < this.prevYF.length; x38++)f46 += isNaN(this.prevYF[x38][c102]) ? 0 : this.prevYF[x38][c102];
                  if (h118 > 0 && !l142.globals.isXNumeric || h118 > 0 && l142.globals.isXNumeric && l142.globals.seriesX[h118 - 1][c102] === l142.globals.seriesX[h118][c102]) {
                      var b20, v36, m31 = Math.min(this.yRatio.length + 1, h118 + 1);
                      if (void 0 !== this.prevY[h118 - 1]) {
                          for(var y25 = 1; y25 < m31; y25++)if (!isNaN(this.prevY[h118 - y25][c102])) {
                              v36 = this.prevY[h118 - y25][c102];
                              break;
                          }
                      }
                      for(var w20 = 1; w20 < m31; w20++){
                          if (this.prevYVal[h118 - w20][c102] < 0) {
                              b20 = this.series[h118][c102] >= 0 ? v36 - f46 + 2 * (this.isReversed ? f46 : 0) : v36;
                              break;
                          }
                          if (this.prevYVal[h118 - w20][c102] >= 0) {
                              b20 = this.series[h118][c102] >= 0 ? v36 : v36 + f46 - 2 * (this.isReversed ? f46 : 0);
                              break;
                          }
                      }
                      void 0 === b20 && (b20 = l142.globals.gridHeight), u63 = this.prevYF[0].every(function(t682) {
                          return 0 === t682;
                      }) && this.prevYF.slice(1, h118).every(function(t683) {
                          return t683.every(function(t684) {
                              return isNaN(t684);
                          });
                      }) ? l142.globals.gridHeight - o199 : b20;
                  } else u63 = l142.globals.gridHeight - o199;
                  a330 = u63 - this.series[h118][c102] / this.yRatio[this.yaxisIndex] + 2 * (this.isReversed ? this.series[h118][c102] / this.yRatio[this.yaxisIndex] : 0);
                  var k18 = this.barHelpers.getColumnPaths({
                      barXPosition: p38,
                      barWidth: r225,
                      y1: u63,
                      y2: a330,
                      yRatio: this.yRatio[this.yaxisIndex],
                      strokeWidth: this.strokeWidth,
                      series: this.series,
                      realIndex: e524.realIndex,
                      i: h118,
                      j: c102,
                      w: l142
                  });
                  return this.barHelpers.barBackground({
                      bc: d91,
                      j: c102,
                      i: h118,
                      x1: p38,
                      x2: r225,
                      elSeries: n171
                  }), i394 += s261, {
                      pathTo: k18.pathTo,
                      pathFrom: k18.pathFrom,
                      x: l142.globals.isXNumeric ? i394 - s261 : i394,
                      y: a330
                  };
              }
          }
      ]), s257;
  }(), mt = function(t685) {
      n(s262, E);
      var i395 = d(s262);
      function s262() {
          return a(this, s262), i395.apply(this, arguments);
      }
      return r(s262, [
          {
              key: "draw",
              value: function(t686, i396) {
                  var a331 = this, s263 = this.w, r226 = new b(this.ctx), o200 = new L(this.ctx);
                  this.candlestickOptions = this.w.config.plotOptions.candlestick, this.boxOptions = this.w.config.plotOptions.boxPlot, this.isHorizontal = s263.config.plotOptions.bar.horizontal;
                  var n172 = new y(this.ctx, s263);
                  t686 = n172.getLogSeries(t686), this.series = t686, this.yRatio = n172.getLogYRatios(this.yRatio), this.barHelpers.initVariables(t686);
                  for(var l143 = r226.group({
                      class: "apexcharts-".concat(s263.config.chart.type, "-series apexcharts-plot-series")
                  }), h119 = function(n173) {
                      a331.isBoxPlot = "boxPlot" === s263.config.chart.type || "boxPlot" === s263.config.series[n173].type;
                      var h120, c104, d92, g77, u64 = void 0, f47 = void 0, x39 = [], b21 = [], v37 = s263.globals.comboCharts ? i396[n173] : n173, m32 = r226.group({
                          class: "apexcharts-series",
                          seriesName: p.escapeString(s263.globals.seriesNames[v37]),
                          rel: n173 + 1,
                          "data:realIndex": v37
                      });
                      a331.ctx.series.addCollapsedClassToSeries(m32, v37), t686[n173].length > 0 && (a331.visibleI = a331.visibleI + 1);
                      var y26, w21;
                      a331.yRatio.length > 1 && (a331.yaxisIndex = v37);
                      var k19 = a331.barHelpers.initialPositions();
                      f47 = k19.y, y26 = k19.barHeight, c104 = k19.yDivision, g77 = k19.zeroW, u64 = k19.x, w21 = k19.barWidth, h120 = k19.xDivision, d92 = k19.zeroH, b21.push(u64 + w21 / 2);
                      for(var A14 = r226.group({
                          class: "apexcharts-datalabels",
                          "data:realIndex": v37
                      }), S13 = function(i397) {
                          var r227 = a331.barHelpers.getStrokeWidth(n173, i397, v37), l144 = null, p39 = {
                              indexes: {
                                  i: n173,
                                  j: i397,
                                  realIndex: v37
                              },
                              x: u64,
                              y: f47,
                              strokeWidth: r227,
                              elSeries: m32
                          };
                          l144 = a331.isHorizontal ? a331.drawHorizontalBoxPaths(e(e({
                          }, p39), {
                          }, {
                              yDivision: c104,
                              barHeight: y26,
                              zeroW: g77
                          })) : a331.drawVerticalBoxPaths(e(e({
                          }, p39), {
                          }, {
                              xDivision: h120,
                              barWidth: w21,
                              zeroH: d92
                          })), f47 = l144.y, u64 = l144.x, i397 > 0 && b21.push(u64 + w21 / 2), x39.push(f47), l144.pathTo.forEach(function(e525, h) {
                              var c105 = !a331.isBoxPlot && a331.candlestickOptions.wick.useFillColor ? l144.color[h] : s263.globals.stroke.colors[n173], d93 = o200.fillPath({
                                  seriesNumber: v37,
                                  dataPointIndex: i397,
                                  color: l144.color[h],
                                  value: t686[n173][i397]
                              });
                              a331.renderSeries({
                                  realIndex: v37,
                                  pathFill: d93,
                                  lineFill: c105,
                                  j: i397,
                                  i: n173,
                                  pathFrom: l144.pathFrom,
                                  pathTo: e525,
                                  strokeWidth: r227,
                                  elSeries: m32,
                                  x: u64,
                                  y: f47,
                                  series: t686,
                                  barHeight: y26,
                                  barWidth: w21,
                                  elDataLabelsWrap: A14,
                                  visibleSeries: a331.visibleI,
                                  type: s263.config.chart.type
                              });
                          });
                      }, C10 = 0; C10 < s263.globals.dataPoints; C10++)S13(C10);
                      s263.globals.seriesXvalues[v37] = b21, s263.globals.seriesYvalues[v37] = x39, l143.add(m32);
                  }, c103 = 0; c103 < t686.length; c103++)h119(c103);
                  return l143;
              }
          },
          {
              key: "drawVerticalBoxPaths",
              value: function(t687) {
                  var e526 = t687.indexes, i398 = t687.x;
                  t687.y;
                  var a332 = t687.xDivision, s264 = t687.barWidth, r228 = t687.zeroH, o201 = t687.strokeWidth, n174 = this.w, l145 = new b(this.ctx), h = e526.i, c106 = e526.j, d94 = !0, g78 = n174.config.plotOptions.candlestick.colors.upward, u65 = n174.config.plotOptions.candlestick.colors.downward, p40 = "";
                  this.isBoxPlot && (p40 = [
                      this.boxOptions.colors.lower,
                      this.boxOptions.colors.upper
                  ]);
                  var f48 = this.yRatio[this.yaxisIndex], x40 = e526.realIndex, v38 = this.getOHLCValue(x40, c106), m33 = r228, y27 = r228;
                  v38.o > v38.c && (d94 = !1);
                  var w22 = Math.min(v38.o, v38.c), k20 = Math.max(v38.o, v38.c), A15 = v38.m;
                  n174.globals.isXNumeric && (i398 = (n174.globals.seriesX[x40][c106] - n174.globals.minX) / this.xRatio - s264 / 2);
                  var S14 = i398 + s264 * this.visibleI;
                  void 0 === this.series[h][c106] || null === this.series[h][c106] ? (w22 = r228, k20 = r228) : (w22 = r228 - w22 / f48, k20 = r228 - k20 / f48, m33 = r228 - v38.h / f48, y27 = r228 - v38.l / f48, A15 = r228 - v38.m / f48);
                  var C11 = l145.move(S14, r228), L9 = l145.move(S14 + s264 / 2, w22);
                  return n174.globals.previousPaths.length > 0 && (L9 = this.getPreviousPath(x40, c106, !0)), C11 = this.isBoxPlot ? [
                      l145.move(S14, w22) + l145.line(S14 + s264 / 2, w22) + l145.line(S14 + s264 / 2, m33) + l145.line(S14 + s264 / 4, m33) + l145.line(S14 + s264 - s264 / 4, m33) + l145.line(S14 + s264 / 2, m33) + l145.line(S14 + s264 / 2, w22) + l145.line(S14 + s264, w22) + l145.line(S14 + s264, A15) + l145.line(S14, A15) + l145.line(S14, w22 + o201 / 2),
                      l145.move(S14, A15) + l145.line(S14 + s264, A15) + l145.line(S14 + s264, k20) + l145.line(S14 + s264 / 2, k20) + l145.line(S14 + s264 / 2, y27) + l145.line(S14 + s264 - s264 / 4, y27) + l145.line(S14 + s264 / 4, y27) + l145.line(S14 + s264 / 2, y27) + l145.line(S14 + s264 / 2, k20) + l145.line(S14, k20) + l145.line(S14, A15) + "z"
                  ] : [
                      l145.move(S14, k20) + l145.line(S14 + s264 / 2, k20) + l145.line(S14 + s264 / 2, m33) + l145.line(S14 + s264 / 2, k20) + l145.line(S14 + s264, k20) + l145.line(S14 + s264, w22) + l145.line(S14 + s264 / 2, w22) + l145.line(S14 + s264 / 2, y27) + l145.line(S14 + s264 / 2, w22) + l145.line(S14, w22) + l145.line(S14, k20 - o201 / 2)
                  ], L9 += l145.move(S14, w22), n174.globals.isXNumeric || (i398 += a332), {
                      pathTo: C11,
                      pathFrom: L9,
                      x: i398,
                      y: k20,
                      barXPosition: S14,
                      color: this.isBoxPlot ? p40 : d94 ? [
                          g78
                      ] : [
                          u65
                      ]
                  };
              }
          },
          {
              key: "drawHorizontalBoxPaths",
              value: function(t688) {
                  var e527 = t688.indexes;
                  t688.x;
                  var i399 = t688.y, a333 = t688.yDivision, s265 = t688.barHeight, r229 = t688.zeroW, o202 = t688.strokeWidth, n175 = this.w, l146 = new b(this.ctx), h = e527.i, c107 = e527.j, d95 = this.boxOptions.colors.lower;
                  this.isBoxPlot && (d95 = [
                      this.boxOptions.colors.lower,
                      this.boxOptions.colors.upper
                  ]);
                  var g79 = this.invertedYRatio, u66 = e527.realIndex, p41 = this.getOHLCValue(u66, c107), f49 = r229, x41 = r229, v39 = Math.min(p41.o, p41.c), m34 = Math.max(p41.o, p41.c), y28 = p41.m;
                  n175.globals.isXNumeric && (i399 = (n175.globals.seriesX[u66][c107] - n175.globals.minX) / this.invertedXRatio - s265 / 2);
                  var w23 = i399 + s265 * this.visibleI;
                  void 0 === this.series[h][c107] || null === this.series[h][c107] ? (v39 = r229, m34 = r229) : (v39 = r229 + v39 / g79, m34 = r229 + m34 / g79, f49 = r229 + p41.h / g79, x41 = r229 + p41.l / g79, y28 = r229 + p41.m / g79);
                  var k21 = l146.move(r229, w23), A16 = l146.move(v39, w23 + s265 / 2);
                  return n175.globals.previousPaths.length > 0 && (A16 = this.getPreviousPath(u66, c107, !0)), k21 = [
                      l146.move(v39, w23) + l146.line(v39, w23 + s265 / 2) + l146.line(f49, w23 + s265 / 2) + l146.line(f49, w23 + s265 / 2 - s265 / 4) + l146.line(f49, w23 + s265 / 2 + s265 / 4) + l146.line(f49, w23 + s265 / 2) + l146.line(v39, w23 + s265 / 2) + l146.line(v39, w23 + s265) + l146.line(y28, w23 + s265) + l146.line(y28, w23) + l146.line(v39 + o202 / 2, w23),
                      l146.move(y28, w23) + l146.line(y28, w23 + s265) + l146.line(m34, w23 + s265) + l146.line(m34, w23 + s265 / 2) + l146.line(x41, w23 + s265 / 2) + l146.line(x41, w23 + s265 - s265 / 4) + l146.line(x41, w23 + s265 / 4) + l146.line(x41, w23 + s265 / 2) + l146.line(m34, w23 + s265 / 2) + l146.line(m34, w23) + l146.line(y28, w23) + "z"
                  ], A16 += l146.move(v39, w23), n175.globals.isXNumeric || (i399 += a333), {
                      pathTo: k21,
                      pathFrom: A16,
                      x: m34,
                      y: i399,
                      barYPosition: w23,
                      color: d95
                  };
              }
          },
          {
              key: "getOHLCValue",
              value: function(t, e) {
                  var i400 = this.w;
                  return {
                      o: this.isBoxPlot ? i400.globals.seriesCandleH[t][e] : i400.globals.seriesCandleO[t][e],
                      h: this.isBoxPlot ? i400.globals.seriesCandleO[t][e] : i400.globals.seriesCandleH[t][e],
                      m: i400.globals.seriesCandleM[t][e],
                      l: this.isBoxPlot ? i400.globals.seriesCandleC[t][e] : i400.globals.seriesCandleL[t][e],
                      c: this.isBoxPlot ? i400.globals.seriesCandleL[t][e] : i400.globals.seriesCandleC[t][e]
                  };
              }
          }
      ]), s262;
  }(), yt = function() {
      function t689(e528) {
          a(this, t689), this.ctx = e528, this.w = e528.w;
      }
      return r(t689, [
          {
              key: "checkColorRange",
              value: function() {
                  var t690 = this.w, e529 = !1, i401 = t690.config.plotOptions[t690.config.chart.type];
                  return i401.colorScale.ranges.length > 0 && i401.colorScale.ranges.map(function(t691, i) {
                      t691.from <= 0 && (e529 = !0);
                  }), e529;
              }
          },
          {
              key: "getShadeColor",
              value: function(t692, e530, i402, a334) {
                  var s266 = this.w, r230 = 1, o203 = s266.config.plotOptions[t692].shadeIntensity, n176 = this.determineColor(t692, e530, i402);
                  s266.globals.hasNegs || a334 ? r230 = s266.config.plotOptions[t692].reverseNegativeShade ? n176.percent < 0 ? n176.percent / 100 * (1.25 * o203) : (1 - n176.percent / 100) * (1.25 * o203) : n176.percent <= 0 ? 1 - (1 + n176.percent / 100) * o203 : (1 - n176.percent / 100) * o203 : (r230 = 1 - n176.percent / 100, "treemap" === t692 && (r230 = (1 - n176.percent / 100) * (1.25 * o203)));
                  var l147 = n176.color, h121 = new p;
                  return s266.config.plotOptions[t692].enableShades && (l147 = "dark" === this.w.config.theme.mode ? p.hexToRgba(h121.shadeColor(-1 * r230, n176.color), s266.config.fill.opacity) : p.hexToRgba(h121.shadeColor(r230, n176.color), s266.config.fill.opacity)), {
                      color: l147,
                      colorProps: n176
                  };
              }
          },
          {
              key: "determineColor",
              value: function(t693, e531, i403) {
                  var a335 = this.w, s267 = a335.globals.series[e531][i403], r231 = a335.config.plotOptions[t693], o204 = r231.colorScale.inverse ? i403 : e531;
                  r231.distributed && "treemap" === a335.config.chart.type && (o204 = i403);
                  var n177 = a335.globals.colors[o204], l148 = null, h122 = Math.min.apply(Math, g(a335.globals.series[e531])), c108 = Math.max.apply(Math, g(a335.globals.series[e531]));
                  r231.distributed || "heatmap" !== t693 || (h122 = a335.globals.minY, c108 = a335.globals.maxY), void 0 !== r231.colorScale.min && (h122 = r231.colorScale.min < a335.globals.minY ? r231.colorScale.min : a335.globals.minY, c108 = r231.colorScale.max > a335.globals.maxY ? r231.colorScale.max : a335.globals.maxY);
                  var d96 = Math.abs(c108) + Math.abs(h122), u67 = 100 * s267 / (0 === d96 ? d96 - 0.000001 : d96);
                  r231.colorScale.ranges.length > 0 && r231.colorScale.ranges.map(function(t694, e) {
                      if (s267 >= t694.from && s267 <= t694.to) {
                          n177 = t694.color, l148 = t694.foreColor ? t694.foreColor : null, h122 = t694.from, c108 = t694.to;
                          var i404 = Math.abs(c108) + Math.abs(h122);
                          u67 = 100 * s267 / (0 === i404 ? i404 - 0.000001 : i404);
                      }
                  });
                  return {
                      color: n177,
                      foreColor: l148,
                      percent: u67
                  };
              }
          },
          {
              key: "calculateDataLabels",
              value: function(t695) {
                  var e532 = t695.text, i405 = t695.x, a336 = t695.y, s268 = t695.i, r232 = t695.j, o205 = t695.colorProps, n178 = t695.fontSize, l149 = this.w.config.dataLabels, h123 = new b(this.ctx), c109 = new M(this.ctx), d97 = null;
                  if (l149.enabled) {
                      d97 = h123.group({
                          class: "apexcharts-data-labels"
                      });
                      var g80 = l149.offsetX, u68 = l149.offsetY, p42 = i405 + g80, f50 = a336 + parseFloat(l149.style.fontSize) / 3 + u68;
                      c109.plotDataLabelsText({
                          x: p42,
                          y: f50,
                          text: e532,
                          i: s268,
                          j: r232,
                          color: o205.foreColor,
                          parent: d97,
                          fontSize: n178,
                          dataLabelsConfig: l149
                      });
                  }
                  return d97;
              }
          },
          {
              key: "addListeners",
              value: function(t696) {
                  var e533 = new b(this.ctx);
                  t696.node.addEventListener("mouseenter", e533.pathMouseEnter.bind(this, t696)), t696.node.addEventListener("mouseleave", e533.pathMouseLeave.bind(this, t696)), t696.node.addEventListener("mousedown", e533.pathMouseDown.bind(this, t696));
              }
          }
      ]), t689;
  }(), wt = function() {
      function t697(e534, i406) {
          a(this, t697), this.ctx = e534, this.w = e534.w, this.xRatio = i406.xRatio, this.yRatio = i406.yRatio, this.dynamicAnim = this.w.config.chart.animations.dynamicAnimation, this.helpers = new yt(e534), this.rectRadius = this.w.config.plotOptions.heatmap.radius, this.strokeWidth = this.w.config.stroke.show ? this.w.config.stroke.width : 0;
      }
      return r(t697, [
          {
              key: "draw",
              value: function(t698) {
                  var e535 = this.w, i407 = new b(this.ctx), a337 = i407.group({
                      class: "apexcharts-heatmap"
                  });
                  a337.attr("clip-path", "url(#gridRectMask".concat(e535.globals.cuid, ")"));
                  var s269 = e535.globals.gridWidth / e535.globals.dataPoints, r233 = e535.globals.gridHeight / e535.globals.series.length, o206 = 0, n179 = !1;
                  this.negRange = this.helpers.checkColorRange();
                  var l150 = t698.slice();
                  e535.config.yaxis[0].reversed && (n179 = !0, l150.reverse());
                  for(var h124 = n179 ? 0 : l150.length - 1; n179 ? h124 < l150.length : h124 >= 0; n179 ? h124++ : h124--){
                      var c110 = i407.group({
                          class: "apexcharts-series apexcharts-heatmap-series",
                          seriesName: p.escapeString(e535.globals.seriesNames[h124]),
                          rel: h124 + 1,
                          "data:realIndex": h124
                      });
                      if (this.ctx.series.addCollapsedClassToSeries(c110, h124), e535.config.chart.dropShadow.enabled) {
                          var d98 = e535.config.chart.dropShadow;
                          new x(this.ctx).dropShadow(c110, d98, h124);
                      }
                      for(var g81 = 0, u69 = e535.config.plotOptions.heatmap.shadeIntensity, f51 = 0; f51 < l150[h124].length; f51++){
                          var v40 = this.helpers.getShadeColor(e535.config.chart.type, h124, f51, this.negRange), m35 = v40.color, y29 = v40.colorProps;
                          if ("image" === e535.config.fill.type) m35 = new L(this.ctx).fillPath({
                              seriesNumber: h124,
                              dataPointIndex: f51,
                              opacity: e535.globals.hasNegs ? y29.percent < 0 ? 1 - (1 + y29.percent / 100) : u69 + y29.percent / 100 : y29.percent / 100,
                              patternID: p.randomId(),
                              width: e535.config.fill.image.width ? e535.config.fill.image.width : s269,
                              height: e535.config.fill.image.height ? e535.config.fill.image.height : r233
                          });
                          var w24 = this.rectRadius, k22 = i407.drawRect(g81, o206, s269, r233, w24);
                          if (k22.attr({
                              cx: g81,
                              cy: o206
                          }), k22.node.classList.add("apexcharts-heatmap-rect"), c110.add(k22), k22.attr({
                              fill: m35,
                              i: h124,
                              index: h124,
                              j: f51,
                              val: l150[h124][f51],
                              "stroke-width": this.strokeWidth,
                              stroke: e535.config.plotOptions.heatmap.useFillColorAsStroke ? m35 : e535.globals.stroke.colors[0],
                              color: m35
                          }), this.helpers.addListeners(k22), e535.config.chart.animations.enabled && !e535.globals.dataChanged) {
                              var A17 = 1;
                              e535.globals.resized || (A17 = e535.config.chart.animations.speed), this.animateHeatMap(k22, g81, o206, s269, r233, A17);
                          }
                          if (e535.globals.dataChanged) {
                              var S15 = 1;
                              if (this.dynamicAnim.enabled && e535.globals.shouldAnimate) {
                                  S15 = this.dynamicAnim.speed;
                                  var C12 = e535.globals.previousPaths[h124] && e535.globals.previousPaths[h124][f51] && e535.globals.previousPaths[h124][f51].color;
                                  C12 || (C12 = "rgba(255, 255, 255, 0)"), this.animateHeatColor(k22, p.isColorHex(C12) ? C12 : p.rgb2hex(C12), p.isColorHex(m35) ? m35 : p.rgb2hex(m35), S15);
                              }
                          }
                          var P9 = (0, e535.config.dataLabels.formatter)(e535.globals.series[h124][f51], {
                              value: e535.globals.series[h124][f51],
                              seriesIndex: h124,
                              dataPointIndex: f51,
                              w: e535
                          }), T9 = this.helpers.calculateDataLabels({
                              text: P9,
                              x: g81 + s269 / 2,
                              y: o206 + r233 / 2,
                              i: h124,
                              j: f51,
                              colorProps: y29,
                              series: l150
                          });
                          null !== T9 && c110.add(T9), g81 += s269;
                      }
                      o206 += r233, a337.add(c110);
                  }
                  var M9 = e535.globals.yAxisScale[0].result.slice();
                  e535.config.yaxis[0].reversed ? M9.unshift("") : M9.push(""), e535.globals.yAxisScale[0].result = M9;
                  var I5 = e535.globals.gridHeight / e535.globals.series.length;
                  return e535.config.yaxis[0].labels.offsetY = -I5 / 2, a337;
              }
          },
          {
              key: "animateHeatMap",
              value: function(t699, e536, i408, a338, s270, r234) {
                  var o207 = new f(this.ctx);
                  o207.animateRect(t699, {
                      x: e536 + a338 / 2,
                      y: i408 + s270 / 2,
                      width: 0,
                      height: 0
                  }, {
                      x: e536,
                      y: i408,
                      width: a338,
                      height: s270
                  }, r234, function() {
                      o207.animationCompleted(t699);
                  });
              }
          },
          {
              key: "animateHeatColor",
              value: function(t700, e537, i409, a339) {
                  t700.attr({
                      fill: e537
                  }).animate(a339).attr({
                      fill: i409
                  });
              }
          }
      ]), t697;
  }(), kt = function() {
      function t701(e538) {
          a(this, t701), this.ctx = e538, this.w = e538.w;
      }
      return r(t701, [
          {
              key: "drawYAxisTexts",
              value: function(t702, e539, i410, a340) {
                  var s271 = this.w, r235 = s271.config.yaxis[0], o208 = s271.globals.yLabelFormatters[0];
                  return new b(this.ctx).drawText({
                      x: t702 + r235.labels.offsetX,
                      y: e539 + r235.labels.offsetY,
                      text: o208(a340, i410),
                      textAnchor: "middle",
                      fontSize: r235.labels.style.fontSize,
                      fontFamily: r235.labels.style.fontFamily,
                      foreColor: Array.isArray(r235.labels.style.colors) ? r235.labels.style.colors[i410] : r235.labels.style.colors
                  });
              }
          }
      ]), t701;
  }(), At = function() {
      function t703(e540) {
          a(this, t703), this.ctx = e540, this.w = e540.w;
          var i411 = this.w;
          this.chartType = this.w.config.chart.type, this.initialAnim = this.w.config.chart.animations.enabled, this.dynamicAnim = this.initialAnim && this.w.config.chart.animations.dynamicAnimation.enabled, this.animBeginArr = [
              0
          ], this.animDur = 0, this.donutDataLabels = this.w.config.plotOptions.pie.donut.labels, this.lineColorArr = void 0 !== i411.globals.stroke.colors ? i411.globals.stroke.colors : i411.globals.colors, this.defaultSize = Math.min(i411.globals.gridWidth, i411.globals.gridHeight), this.centerY = this.defaultSize / 2, this.centerX = i411.globals.gridWidth / 2, "radialBar" === i411.config.chart.type ? this.fullAngle = 360 : this.fullAngle = Math.abs(i411.config.plotOptions.pie.endAngle - i411.config.plotOptions.pie.startAngle), this.initialAngle = i411.config.plotOptions.pie.startAngle % this.fullAngle, i411.globals.radialSize = this.defaultSize / 2.05 - i411.config.stroke.width - (i411.config.chart.sparkline.enabled ? 0 : i411.config.chart.dropShadow.blur), this.donutSize = i411.globals.radialSize * parseInt(i411.config.plotOptions.pie.donut.size, 10) / 100, this.maxY = 0, this.sliceLabels = [], this.sliceSizes = [], this.prevSectorAngleArr = [];
      }
      return r(t703, [
          {
              key: "draw",
              value: function(t704) {
                  var e541 = this, i412 = this.w, a341 = new b(this.ctx);
                  if (this.ret = a341.group({
                      class: "apexcharts-pie"
                  }), i412.globals.noData) return this.ret;
                  for(var s272 = 0, r236 = 0; r236 < t704.length; r236++)s272 += p.negToZero(t704[r236]);
                  var o209 = [], n180 = a341.group();
                  0 === s272 && (s272 = 0.00001), t704.forEach(function(t705) {
                      e541.maxY = Math.max(e541.maxY, t705);
                  }), i412.config.yaxis[0].max && (this.maxY = i412.config.yaxis[0].max), "back" === i412.config.grid.position && "polarArea" === this.chartType && this.drawPolarElements(this.ret);
                  for(var l151 = 0; l151 < t704.length; l151++){
                      var h125 = this.fullAngle * p.negToZero(t704[l151]) / s272;
                      o209.push(h125), "polarArea" === this.chartType ? (o209[l151] = this.fullAngle / t704.length, this.sliceSizes.push(i412.globals.radialSize * t704[l151] / this.maxY)) : this.sliceSizes.push(i412.globals.radialSize);
                  }
                  if (i412.globals.dataChanged) {
                      for(var c111, d99 = 0, g82 = 0; g82 < i412.globals.previousPaths.length; g82++)d99 += p.negToZero(i412.globals.previousPaths[g82]);
                      for(var u70 = 0; u70 < i412.globals.previousPaths.length; u70++)c111 = this.fullAngle * p.negToZero(i412.globals.previousPaths[u70]) / d99, this.prevSectorAngleArr.push(c111);
                  }
                  this.donutSize < 0 && (this.donutSize = 0);
                  var f52 = i412.config.plotOptions.pie.customScale, x42 = i412.globals.gridWidth / 2, v41 = i412.globals.gridHeight / 2, m36 = x42 - i412.globals.gridWidth / 2 * f52, y30 = v41 - i412.globals.gridHeight / 2 * f52;
                  if ("donut" === this.chartType) {
                      var w25 = a341.drawCircle(this.donutSize);
                      w25.attr({
                          cx: this.centerX,
                          cy: this.centerY,
                          fill: i412.config.plotOptions.pie.donut.background ? i412.config.plotOptions.pie.donut.background : "transparent"
                      }), n180.add(w25);
                  }
                  var k23 = this.drawArcs(o209, t704);
                  if (this.sliceLabels.forEach(function(t706) {
                      k23.add(t706);
                  }), n180.attr({
                      transform: "translate(".concat(m36, ", ").concat(y30, ") scale(").concat(f52, ")")
                  }), n180.add(k23), this.ret.add(n180), this.donutDataLabels.show) {
                      var A18 = this.renderInnerDataLabels(this.donutDataLabels, {
                          hollowSize: this.donutSize,
                          centerX: this.centerX,
                          centerY: this.centerY,
                          opacity: this.donutDataLabels.show,
                          translateX: m36,
                          translateY: y30
                      });
                      this.ret.add(A18);
                  }
                  return "front" === i412.config.grid.position && "polarArea" === this.chartType && this.drawPolarElements(this.ret), this.ret;
              }
          },
          {
              key: "drawArcs",
              value: function(t707, e542) {
                  var i413 = this.w, a342 = new x(this.ctx), s273 = new b(this.ctx), r237 = new L(this.ctx), o210 = s273.group({
                      class: "apexcharts-slices"
                  }), n181 = this.initialAngle, l152 = this.initialAngle, h126 = this.initialAngle, c112 = this.initialAngle;
                  this.strokeWidth = i413.config.stroke.show ? i413.config.stroke.width : 0;
                  for(var d100 = 0; d100 < t707.length; d100++){
                      var g83 = s273.group({
                          class: "apexcharts-series apexcharts-pie-series",
                          seriesName: p.escapeString(i413.globals.seriesNames[d100]),
                          rel: d100 + 1,
                          "data:realIndex": d100
                      });
                      o210.add(g83), l152 = c112, h126 = (n181 = h126) + t707[d100], c112 = l152 + this.prevSectorAngleArr[d100];
                      var u71 = h126 < n181 ? this.fullAngle + h126 - n181 : h126 - n181, f53 = r237.fillPath({
                          seriesNumber: d100,
                          size: this.sliceSizes[d100],
                          value: e542[d100]
                      }), v42 = this.getChangedPath(l152, c112), m37 = s273.drawPath({
                          d: v42,
                          stroke: Array.isArray(this.lineColorArr) ? this.lineColorArr[d100] : this.lineColorArr,
                          strokeWidth: 0,
                          fill: f53,
                          fillOpacity: i413.config.fill.opacity,
                          classes: "apexcharts-pie-area apexcharts-".concat(this.chartType.toLowerCase(), "-slice-").concat(d100)
                      });
                      if (m37.attr({
                          index: 0,
                          j: d100
                      }), a342.setSelectionFilter(m37, 0, d100), i413.config.chart.dropShadow.enabled) {
                          var y31 = i413.config.chart.dropShadow;
                          a342.dropShadow(m37, y31, d100);
                      }
                      this.addListeners(m37, this.donutDataLabels), b.setAttrs(m37.node, {
                          "data:angle": u71,
                          "data:startAngle": n181,
                          "data:strokeWidth": this.strokeWidth,
                          "data:value": e542[d100]
                      });
                      var w26 = {
                          x: 0,
                          y: 0
                      };
                      "pie" === this.chartType || "polarArea" === this.chartType ? w26 = p.polarToCartesian(this.centerX, this.centerY, i413.globals.radialSize / 1.25 + i413.config.plotOptions.pie.dataLabels.offset, (n181 + u71 / 2) % this.fullAngle) : "donut" === this.chartType && (w26 = p.polarToCartesian(this.centerX, this.centerY, (i413.globals.radialSize + this.donutSize) / 2 + i413.config.plotOptions.pie.dataLabels.offset, (n181 + u71 / 2) % this.fullAngle)), g83.add(m37);
                      var k24 = 0;
                      if (!this.initialAnim || i413.globals.resized || i413.globals.dataChanged ? this.animBeginArr.push(0) : (0 === (k24 = u71 / this.fullAngle * i413.config.chart.animations.speed) && (k24 = 1), this.animDur = k24 + this.animDur, this.animBeginArr.push(this.animDur)), this.dynamicAnim && i413.globals.dataChanged ? this.animatePaths(m37, {
                          size: this.sliceSizes[d100],
                          endAngle: h126,
                          startAngle: n181,
                          prevStartAngle: l152,
                          prevEndAngle: c112,
                          animateStartingPos: !0,
                          i: d100,
                          animBeginArr: this.animBeginArr,
                          shouldSetPrevPaths: !0,
                          dur: i413.config.chart.animations.dynamicAnimation.speed
                      }) : this.animatePaths(m37, {
                          size: this.sliceSizes[d100],
                          endAngle: h126,
                          startAngle: n181,
                          i: d100,
                          totalItems: t707.length - 1,
                          animBeginArr: this.animBeginArr,
                          dur: k24
                      }), i413.config.plotOptions.pie.expandOnClick && "polarArea" !== this.chartType && m37.click(this.pieClicked.bind(this, d100)), void 0 !== i413.globals.selectedDataPoints[0] && i413.globals.selectedDataPoints[0].indexOf(d100) > -1 && this.pieClicked(d100), i413.config.dataLabels.enabled) {
                          var A19 = w26.x, S16 = w26.y, C13 = 100 * u71 / this.fullAngle + "%";
                          if (0 !== u71 && i413.config.plotOptions.pie.dataLabels.minAngleToShowLabel < t707[d100]) {
                              var P10 = i413.config.dataLabels.formatter;
                              void 0 !== P10 && (C13 = P10(i413.globals.seriesPercent[d100][0], {
                                  seriesIndex: d100,
                                  w: i413
                              }));
                              var T10 = i413.globals.dataLabels.style.colors[d100], M10 = s273.group({
                                  class: "apexcharts-datalabels"
                              }), I6 = s273.drawText({
                                  x: A19,
                                  y: S16,
                                  text: C13,
                                  textAnchor: "middle",
                                  fontSize: i413.config.dataLabels.style.fontSize,
                                  fontFamily: i413.config.dataLabels.style.fontFamily,
                                  fontWeight: i413.config.dataLabels.style.fontWeight,
                                  foreColor: T10
                              });
                              if (M10.add(I6), i413.config.dataLabels.dropShadow.enabled) {
                                  var z4 = i413.config.dataLabels.dropShadow;
                                  a342.dropShadow(I6, z4);
                              }
                              I6.node.classList.add("apexcharts-pie-label"), i413.config.chart.animations.animate && !1 === i413.globals.resized && (I6.node.classList.add("apexcharts-pie-label-delay"), I6.node.style.animationDelay = i413.config.chart.animations.speed / 940 + "s"), this.sliceLabels.push(M10);
                          }
                      }
                  }
                  return o210;
              }
          },
          {
              key: "addListeners",
              value: function(t708, e543) {
                  var i414 = new b(this.ctx);
                  t708.node.addEventListener("mouseenter", i414.pathMouseEnter.bind(this, t708)), t708.node.addEventListener("mouseleave", i414.pathMouseLeave.bind(this, t708)), t708.node.addEventListener("mouseleave", this.revertDataLabelsInner.bind(this, t708.node, e543)), t708.node.addEventListener("mousedown", i414.pathMouseDown.bind(this, t708)), this.donutDataLabels.total.showAlways || (t708.node.addEventListener("mouseenter", this.printDataLabelsInner.bind(this, t708.node, e543)), t708.node.addEventListener("mousedown", this.printDataLabelsInner.bind(this, t708.node, e543)));
              }
          },
          {
              key: "animatePaths",
              value: function(t709, e544) {
                  var i415 = this.w, a343 = e544.endAngle < e544.startAngle ? this.fullAngle + e544.endAngle - e544.startAngle : e544.endAngle - e544.startAngle, s274 = a343, r238 = e544.startAngle, o211 = e544.startAngle;
                  void 0 !== e544.prevStartAngle && void 0 !== e544.prevEndAngle && (r238 = e544.prevEndAngle, s274 = e544.prevEndAngle < e544.prevStartAngle ? this.fullAngle + e544.prevEndAngle - e544.prevStartAngle : e544.prevEndAngle - e544.prevStartAngle), e544.i === i415.config.series.length - 1 && (a343 + o211 > this.fullAngle ? e544.endAngle = e544.endAngle - (a343 + o211) : a343 + o211 < this.fullAngle && (e544.endAngle = e544.endAngle + (this.fullAngle - (a343 + o211)))), a343 === this.fullAngle && (a343 = this.fullAngle - 0.01), this.animateArc(t709, r238, o211, a343, s274, e544);
              }
          },
          {
              key: "animateArc",
              value: function(t710, e545, i416, a344, s275, r239) {
                  var o212, n182 = this, l153 = this.w, h127 = new f(this.ctx), c113 = r239.size;
                  (isNaN(e545) || isNaN(s275)) && (e545 = i416, s275 = a344, r239.dur = 0);
                  var d101 = a344, g84 = i416, u72 = e545 < i416 ? this.fullAngle + e545 - i416 : e545 - i416;
                  l153.globals.dataChanged && r239.shouldSetPrevPaths && r239.prevEndAngle && (o212 = n182.getPiePath({
                      me: n182,
                      startAngle: r239.prevStartAngle,
                      angle: r239.prevEndAngle < r239.prevStartAngle ? this.fullAngle + r239.prevEndAngle - r239.prevStartAngle : r239.prevEndAngle - r239.prevStartAngle,
                      size: c113
                  }), t710.attr({
                      d: o212
                  })), 0 !== r239.dur ? t710.animate(r239.dur, l153.globals.easing, r239.animBeginArr[r239.i]).afterAll(function() {
                      "pie" !== n182.chartType && "donut" !== n182.chartType && "polarArea" !== n182.chartType || this.animate(l153.config.chart.animations.dynamicAnimation.speed).attr({
                          "stroke-width": n182.strokeWidth
                      }), r239.i === l153.config.series.length - 1 && h127.animationCompleted(t710);
                  }).during(function(l154) {
                      d101 = u72 + (a344 - u72) * l154, r239.animateStartingPos && (d101 = s275 + (a344 - s275) * l154, g84 = e545 - s275 + (i416 - (e545 - s275)) * l154), o212 = n182.getPiePath({
                          me: n182,
                          startAngle: g84,
                          angle: d101,
                          size: c113
                      }), t710.node.setAttribute("data:pathOrig", o212), t710.attr({
                          d: o212
                      });
                  }) : (o212 = n182.getPiePath({
                      me: n182,
                      startAngle: g84,
                      angle: a344,
                      size: c113
                  }), r239.isTrack || (l153.globals.animationEnded = !0), t710.node.setAttribute("data:pathOrig", o212), t710.attr({
                      d: o212,
                      "stroke-width": n182.strokeWidth
                  }));
              }
          },
          {
              key: "pieClicked",
              value: function(t711) {
                  var e546, i417 = this.w, a345 = this, s276 = a345.sliceSizes[t711] + (i417.config.plotOptions.pie.expandOnClick ? 4 : 0), r240 = i417.globals.dom.Paper.select(".apexcharts-".concat(a345.chartType.toLowerCase(), "-slice-").concat(t711)).members[0];
                  if ("true" !== r240.attr("data:pieClicked")) {
                      var o213 = i417.globals.dom.baseEl.getElementsByClassName("apexcharts-pie-area");
                      Array.prototype.forEach.call(o213, function(t712) {
                          t712.setAttribute("data:pieClicked", "false");
                          var e547 = t712.getAttribute("data:pathOrig");
                          t712.setAttribute("d", e547);
                      }), r240.attr("data:pieClicked", "true");
                      var n183 = parseInt(r240.attr("data:startAngle"), 10), l155 = parseInt(r240.attr("data:angle"), 10);
                      e546 = a345.getPiePath({
                          me: a345,
                          startAngle: n183,
                          angle: l155,
                          size: s276
                      }), 360 !== l155 && r240.plot(e546);
                  } else {
                      r240.attr({
                          "data:pieClicked": "false"
                      }), this.revertDataLabelsInner(r240.node, this.donutDataLabels);
                      var h128 = r240.attr("data:pathOrig");
                      r240.attr({
                          d: h128
                      });
                  }
              }
          },
          {
              key: "getChangedPath",
              value: function(t713, e548) {
                  var i418 = "";
                  return this.dynamicAnim && this.w.globals.dataChanged && (i418 = this.getPiePath({
                      me: this,
                      startAngle: t713,
                      angle: e548 - t713,
                      size: this.size
                  })), i418;
              }
          },
          {
              key: "getPiePath",
              value: function(t714) {
                  var e549 = t714.me, i419 = t714.startAngle, a346 = t714.angle, s277 = t714.size, r241 = i419, o214 = Math.PI * (r241 - 90) / 180, n184 = a346 + i419;
                  Math.ceil(n184) >= this.fullAngle + this.w.config.plotOptions.pie.startAngle % this.fullAngle && (n184 = this.fullAngle + this.w.config.plotOptions.pie.startAngle % this.fullAngle - 0.01), Math.ceil(n184) > this.fullAngle && (n184 -= this.fullAngle);
                  var l156 = Math.PI * (n184 - 90) / 180, h129 = e549.centerX + s277 * Math.cos(o214), c114 = e549.centerY + s277 * Math.sin(o214), d102 = e549.centerX + s277 * Math.cos(l156), g85 = e549.centerY + s277 * Math.sin(l156), u73 = p.polarToCartesian(e549.centerX, e549.centerY, e549.donutSize, n184), f54 = p.polarToCartesian(e549.centerX, e549.centerY, e549.donutSize, r241), x43 = a346 > 180 ? 1 : 0, b22 = [
                      "M",
                      h129,
                      c114,
                      "A",
                      s277,
                      s277,
                      0,
                      x43,
                      1,
                      d102,
                      g85
                  ];
                  return "donut" === e549.chartType ? [].concat(b22, [
                      "L",
                      u73.x,
                      u73.y,
                      "A",
                      e549.donutSize,
                      e549.donutSize,
                      0,
                      x43,
                      0,
                      f54.x,
                      f54.y,
                      "L",
                      h129,
                      c114,
                      "z"
                  ]).join(" ") : "pie" === e549.chartType || "polarArea" === e549.chartType ? [].concat(b22, [
                      "L",
                      e549.centerX,
                      e549.centerY,
                      "L",
                      h129,
                      c114
                  ]).join(" ") : [].concat(b22).join(" ");
              }
          },
          {
              key: "drawPolarElements",
              value: function(t715) {
                  var e550 = this.w, i420 = new j(this.ctx), a347 = new b(this.ctx), s278 = new kt(this.ctx), r242 = a347.group(), o215 = a347.group(), n185 = i420.niceScale(0, Math.ceil(this.maxY), e550.config.yaxis[0].tickAmount, 0, !0), l157 = n185.result.reverse(), h130 = n185.result.length;
                  this.maxY = n185.niceMax;
                  for(var c115 = e550.globals.radialSize, d103 = c115 / (h130 - 1), g86 = 0; g86 < h130 - 1; g86++){
                      var u74 = a347.drawCircle(c115);
                      if (u74.attr({
                          cx: this.centerX,
                          cy: this.centerY,
                          fill: "none",
                          "stroke-width": e550.config.plotOptions.polarArea.rings.strokeWidth,
                          stroke: e550.config.plotOptions.polarArea.rings.strokeColor
                      }), e550.config.yaxis[0].show) {
                          var p43 = s278.drawYAxisTexts(this.centerX, this.centerY - c115 + parseInt(e550.config.yaxis[0].labels.style.fontSize, 10) / 2, g86, l157[g86]);
                          o215.add(p43);
                      }
                      r242.add(u74), c115 -= d103;
                  }
                  this.drawSpokes(t715), t715.add(r242), t715.add(o215);
              }
          },
          {
              key: "renderInnerDataLabels",
              value: function(t716, e551) {
                  var i421 = this.w, a348 = new b(this.ctx), s279 = a348.group({
                      class: "apexcharts-datalabels-group",
                      transform: "translate(".concat(e551.translateX ? e551.translateX : 0, ", ").concat(e551.translateY ? e551.translateY : 0, ") scale(").concat(i421.config.plotOptions.pie.customScale, ")")
                  }), r243 = t716.total.show;
                  s279.node.style.opacity = e551.opacity;
                  var o216, n186, l158 = e551.centerX, h131 = e551.centerY;
                  o216 = void 0 === t716.name.color ? i421.globals.colors[0] : t716.name.color;
                  var c116 = t716.name.fontSize, d104 = t716.name.fontFamily, g87 = t716.name.fontWeight;
                  n186 = void 0 === t716.value.color ? i421.config.chart.foreColor : t716.value.color;
                  var u75 = t716.value.formatter, p44 = "", f55 = "";
                  if (r243 ? (o216 = t716.total.color, c116 = t716.total.fontSize, d104 = t716.total.fontFamily, g87 = t716.total.fontWeight, f55 = t716.total.label, p44 = t716.total.formatter(i421)) : 1 === i421.globals.series.length && (p44 = u75(i421.globals.series[0], i421), f55 = i421.globals.seriesNames[0]), f55 && (f55 = t716.name.formatter(f55, t716.total.show, i421)), t716.name.show) {
                      var x44 = a348.drawText({
                          x: l158,
                          y: h131 + parseFloat(t716.name.offsetY),
                          text: f55,
                          textAnchor: "middle",
                          foreColor: o216,
                          fontSize: c116,
                          fontWeight: g87,
                          fontFamily: d104
                      });
                      x44.node.classList.add("apexcharts-datalabel-label"), s279.add(x44);
                  }
                  if (t716.value.show) {
                      var v43 = t716.name.show ? parseFloat(t716.value.offsetY) + 16 : t716.value.offsetY, m38 = a348.drawText({
                          x: l158,
                          y: h131 + v43,
                          text: p44,
                          textAnchor: "middle",
                          foreColor: n186,
                          fontWeight: t716.value.fontWeight,
                          fontSize: t716.value.fontSize,
                          fontFamily: t716.value.fontFamily
                      });
                      m38.node.classList.add("apexcharts-datalabel-value"), s279.add(m38);
                  }
                  return s279;
              }
          },
          {
              key: "printInnerLabels",
              value: function(t717, e552, i422, a349) {
                  var s280, r244 = this.w;
                  a349 ? s280 = void 0 === t717.name.color ? r244.globals.colors[parseInt(a349.parentNode.getAttribute("rel"), 10) - 1] : t717.name.color : r244.globals.series.length > 1 && t717.total.show && (s280 = t717.total.color);
                  var o217 = r244.globals.dom.baseEl.querySelector(".apexcharts-datalabel-label"), n187 = r244.globals.dom.baseEl.querySelector(".apexcharts-datalabel-value");
                  i422 = (0, t717.value.formatter)(i422, r244), a349 || "function" != typeof t717.total.formatter || (i422 = t717.total.formatter(r244));
                  var l159 = e552 === t717.total.label;
                  e552 = t717.name.formatter(e552, l159, r244), null !== o217 && (o217.textContent = e552), null !== n187 && (n187.textContent = i422), null !== o217 && (o217.style.fill = s280);
              }
          },
          {
              key: "printDataLabelsInner",
              value: function(t718, e553) {
                  var i423 = this.w, a350 = t718.getAttribute("data:value"), s281 = i423.globals.seriesNames[parseInt(t718.parentNode.getAttribute("rel"), 10) - 1];
                  i423.globals.series.length > 1 && this.printInnerLabels(e553, s281, a350, t718);
                  var r245 = i423.globals.dom.baseEl.querySelector(".apexcharts-datalabels-group");
                  null !== r245 && (r245.style.opacity = 1);
              }
          },
          {
              key: "drawSpokes",
              value: function(t719) {
                  var e554 = this, i424 = this.w, a351 = new b(this.ctx), s282 = i424.config.plotOptions.polarArea.spokes;
                  if (0 !== s282.strokeWidth) {
                      for(var r246 = [], o218 = 360 / i424.globals.series.length, n188 = 0; n188 < i424.globals.series.length; n188++)r246.push(p.polarToCartesian(this.centerX, this.centerY, i424.globals.radialSize, i424.config.plotOptions.pie.startAngle + o218 * n188));
                      r246.forEach(function(i425, r) {
                          var o219 = a351.drawLine(i425.x, i425.y, e554.centerX, e554.centerY, Array.isArray(s282.connectorColors) ? s282.connectorColors[r] : s282.connectorColors);
                          t719.add(o219);
                      });
                  }
              }
          },
          {
              key: "revertDataLabelsInner",
              value: function(t720, e555, i426) {
                  var a352 = this, s283 = this.w, r247 = s283.globals.dom.baseEl.querySelector(".apexcharts-datalabels-group"), o220 = !1, n189 = s283.globals.dom.baseEl.getElementsByClassName("apexcharts-pie-area"), l160 = function(t721) {
                      var i427 = t721.makeSliceOut, s284 = t721.printLabel;
                      Array.prototype.forEach.call(n189, function(t722) {
                          "true" === t722.getAttribute("data:pieClicked") && (i427 && (o220 = !0), s284 && a352.printDataLabelsInner(t722, e555));
                      });
                  };
                  if (l160({
                      makeSliceOut: !0,
                      printLabel: !1
                  }), e555.total.show && s283.globals.series.length > 1) o220 && !e555.total.showAlways ? l160({
                      makeSliceOut: !1,
                      printLabel: !0
                  }) : this.printInnerLabels(e555, e555.total.label, e555.total.formatter(s283));
                  else if (l160({
                      makeSliceOut: !1,
                      printLabel: !0
                  }), !o220) {
                      if (s283.globals.selectedDataPoints.length && s283.globals.series.length > 1) {
                          if (s283.globals.selectedDataPoints[0].length > 0) {
                              var h132 = s283.globals.selectedDataPoints[0], c117 = s283.globals.dom.baseEl.querySelector(".apexcharts-".concat(this.chartType.toLowerCase(), "-slice-").concat(h132));
                              this.printDataLabelsInner(c117, e555);
                          } else r247 && s283.globals.selectedDataPoints.length && 0 === s283.globals.selectedDataPoints[0].length && (r247.style.opacity = 0);
                      } else r247 && s283.globals.series.length > 1 && (r247.style.opacity = 0);
                  }
              }
          }
      ]), t703;
  }(), St = function() {
      function t723(e556) {
          a(this, t723), this.ctx = e556, this.w = e556.w, this.chartType = this.w.config.chart.type, this.initialAnim = this.w.config.chart.animations.enabled, this.dynamicAnim = this.initialAnim && this.w.config.chart.animations.dynamicAnimation.enabled, this.animDur = 0;
          var i428 = this.w;
          this.graphics = new b(this.ctx), this.lineColorArr = void 0 !== i428.globals.stroke.colors ? i428.globals.stroke.colors : i428.globals.colors, this.defaultSize = i428.globals.svgHeight < i428.globals.svgWidth ? i428.globals.gridHeight + 1.5 * i428.globals.goldenPadding : i428.globals.gridWidth, this.isLog = i428.config.yaxis[0].logarithmic, this.coreUtils = new y(this.ctx), this.maxValue = this.isLog ? this.coreUtils.getLogVal(i428.globals.maxY, 0) : i428.globals.maxY, this.minValue = this.isLog ? this.coreUtils.getLogVal(this.w.globals.minY, 0) : i428.globals.minY, this.polygons = i428.config.plotOptions.radar.polygons, this.strokeWidth = i428.config.stroke.show ? i428.config.stroke.width : 0, this.size = this.defaultSize / 2.1 - this.strokeWidth - i428.config.chart.dropShadow.blur, i428.config.xaxis.labels.show && (this.size = this.size - i428.globals.xAxisLabelsWidth / 1.75), void 0 !== i428.config.plotOptions.radar.size && (this.size = i428.config.plotOptions.radar.size), this.dataRadiusOfPercent = [], this.dataRadius = [], this.angleArr = [], this.yaxisLabelsTextsPos = [];
      }
      return r(t723, [
          {
              key: "draw",
              value: function(t724) {
                  var i429 = this, a353 = this.w, s285 = new L(this.ctx), r248 = [], o221 = new M(this.ctx);
                  t724.length && (this.dataPointsLen = t724[a353.globals.maxValsInArrayIndex].length), this.disAngle = 2 * Math.PI / this.dataPointsLen;
                  var n190 = a353.globals.gridWidth / 2, l161 = a353.globals.gridHeight / 2, h133 = n190 + a353.config.plotOptions.radar.offsetX, c118 = l161 + a353.config.plotOptions.radar.offsetY, d105 = this.graphics.group({
                      class: "apexcharts-radar-series apexcharts-plot-series",
                      transform: "translate(".concat(h133 || 0, ", ").concat(c118 || 0, ")")
                  }), g88 = [], u76 = null, f56 = null;
                  if (this.yaxisLabels = this.graphics.group({
                      class: "apexcharts-yaxis"
                  }), t724.forEach(function(t725, n191) {
                      var l162 = t725.length === a353.globals.dataPoints, h134 = i429.graphics.group().attr({
                          class: "apexcharts-series",
                          "data:longestSeries": l162,
                          seriesName: p.escapeString(a353.globals.seriesNames[n191]),
                          rel: n191 + 1,
                          "data:realIndex": n191
                      });
                      i429.dataRadiusOfPercent[n191] = [], i429.dataRadius[n191] = [], i429.angleArr[n191] = [], t725.forEach(function(t726, e557) {
                          var a354 = Math.abs(i429.maxValue - i429.minValue);
                          t726 += Math.abs(i429.minValue), i429.isLog && (t726 = i429.coreUtils.getLogVal(t726, 0)), i429.dataRadiusOfPercent[n191][e557] = t726 / a354, i429.dataRadius[n191][e557] = i429.dataRadiusOfPercent[n191][e557] * i429.size, i429.angleArr[n191][e557] = e557 * i429.disAngle;
                      }), g88 = i429.getDataPointsPos(i429.dataRadius[n191], i429.angleArr[n191]);
                      var c119 = i429.createPaths(g88, {
                          x: 0,
                          y: 0
                      });
                      u76 = i429.graphics.group({
                          class: "apexcharts-series-markers-wrap apexcharts-element-hidden"
                      }), f56 = i429.graphics.group({
                          class: "apexcharts-datalabels",
                          "data:realIndex": n191
                      }), a353.globals.delayedElements.push({
                          el: u76.node,
                          index: n191
                      });
                      var d106 = {
                          i: n191,
                          realIndex: n191,
                          animationDelay: n191,
                          initialSpeed: a353.config.chart.animations.speed,
                          dataChangeSpeed: a353.config.chart.animations.dynamicAnimation.speed,
                          className: "apexcharts-radar",
                          shouldClipToGrid: !1,
                          bindEventsOnPaths: !1,
                          stroke: a353.globals.stroke.colors[n191],
                          strokeLineCap: a353.config.stroke.lineCap
                      }, b24 = null;
                      a353.globals.previousPaths.length > 0 && (b24 = i429.getPreviousPath(n191));
                      for(var v44 = 0; v44 < c119.linePathsTo.length; v44++){
                          var m39 = i429.graphics.renderPaths(e(e({
                          }, d106), {
                          }, {
                              pathFrom: null === b24 ? c119.linePathsFrom[v44] : b24,
                              pathTo: c119.linePathsTo[v44],
                              strokeWidth: Array.isArray(i429.strokeWidth) ? i429.strokeWidth[n191] : i429.strokeWidth,
                              fill: "none",
                              drawShadow: !1
                          }));
                          h134.add(m39);
                          var y32 = s285.fillPath({
                              seriesNumber: n191
                          }), w27 = i429.graphics.renderPaths(e(e({
                          }, d106), {
                          }, {
                              pathFrom: null === b24 ? c119.areaPathsFrom[v44] : b24,
                              pathTo: c119.areaPathsTo[v44],
                              strokeWidth: 0,
                              fill: y32,
                              drawShadow: !1
                          }));
                          if (a353.config.chart.dropShadow.enabled) {
                              var k25 = new x(i429.ctx), A20 = a353.config.chart.dropShadow;
                              k25.dropShadow(w27, Object.assign({
                              }, A20, {
                                  noUserSpaceOnUse: !0
                              }), n191);
                          }
                          h134.add(w27);
                      }
                      t725.forEach(function(t, s286) {
                          var r249 = new P(i429.ctx).getMarkerConfig({
                              cssClass: "apexcharts-marker",
                              seriesIndex: n191,
                              dataPointIndex: s286
                          }), l163 = i429.graphics.drawMarker(g88[s286].x, g88[s286].y, r249);
                          l163.attr("rel", s286), l163.attr("j", s286), l163.attr("index", n191), l163.node.setAttribute("default-marker-size", r249.pSize);
                          var c120 = i429.graphics.group({
                              class: "apexcharts-series-markers"
                          });
                          c120 && c120.add(l163), u76.add(c120), h134.add(u76);
                          var d107 = a353.config.dataLabels;
                          if (d107.enabled) {
                              var p45 = d107.formatter(a353.globals.series[n191][s286], {
                                  seriesIndex: n191,
                                  dataPointIndex: s286,
                                  w: a353
                              });
                              o221.plotDataLabelsText({
                                  x: g88[s286].x,
                                  y: g88[s286].y,
                                  text: p45,
                                  textAnchor: "middle",
                                  i: n191,
                                  j: n191,
                                  parent: f56,
                                  offsetCorrection: !1,
                                  dataLabelsConfig: e({
                                  }, d107)
                              });
                          }
                          h134.add(f56);
                      }), r248.push(h134);
                  }), this.drawPolygons({
                      parent: d105
                  }), a353.config.xaxis.labels.show) {
                      var b23 = this.drawXAxisTexts();
                      d105.add(b23);
                  }
                  return r248.forEach(function(t727) {
                      d105.add(t727);
                  }), d105.add(this.yaxisLabels), d105;
              }
          },
          {
              key: "drawPolygons",
              value: function(t728) {
                  for(var e558 = this, i430 = this.w, a355 = t728.parent, s287 = new kt(this.ctx), r250 = i430.globals.yAxisScale[0].result.reverse(), o222 = r250.length, n192 = [], l164 = this.size / (o222 - 1), h135 = 0; h135 < o222; h135++)n192[h135] = l164 * h135;
                  n192.reverse();
                  var c121 = [], d108 = [];
                  n192.forEach(function(t729, i431) {
                      var a356 = p.getPolygonPos(t729, e558.dataPointsLen), s288 = "";
                      a356.forEach(function(t730, a357) {
                          if (0 === i431) {
                              var r251 = e558.graphics.drawLine(t730.x, t730.y, 0, 0, Array.isArray(e558.polygons.connectorColors) ? e558.polygons.connectorColors[a357] : e558.polygons.connectorColors);
                              d108.push(r251);
                          }
                          0 === a357 && e558.yaxisLabelsTextsPos.push({
                              x: t730.x,
                              y: t730.y
                          }), s288 += t730.x + "," + t730.y + " ";
                      }), c121.push(s288);
                  }), c121.forEach(function(t731, s) {
                      var r252 = e558.polygons.strokeColors, o223 = e558.polygons.strokeWidth, n193 = e558.graphics.drawPolygon(t731, Array.isArray(r252) ? r252[s] : r252, Array.isArray(o223) ? o223[s] : o223, i430.globals.radarPolygons.fill.colors[s]);
                      a355.add(n193);
                  }), d108.forEach(function(t732) {
                      a355.add(t732);
                  }), i430.config.yaxis[0].show && this.yaxisLabelsTextsPos.forEach(function(t733, i432) {
                      var a358 = s287.drawYAxisTexts(t733.x, t733.y, i432, r250[i432]);
                      e558.yaxisLabels.add(a358);
                  });
              }
          },
          {
              key: "drawXAxisTexts",
              value: function() {
                  var t734 = this, i433 = this.w, a359 = i433.config.xaxis.labels, s289 = this.graphics.group({
                      class: "apexcharts-xaxis"
                  }), r253 = p.getPolygonPos(this.size, this.dataPointsLen);
                  return i433.globals.labels.forEach(function(o224, n194) {
                      var l165 = i433.config.xaxis.labels.formatter, h136 = new M(t734.ctx);
                      if (r253[n194]) {
                          var c122 = t734.getTextPos(r253[n194], t734.size), d109 = l165(o224, {
                              seriesIndex: -1,
                              dataPointIndex: n194,
                              w: i433
                          });
                          h136.plotDataLabelsText({
                              x: c122.newX,
                              y: c122.newY,
                              text: d109,
                              textAnchor: c122.textAnchor,
                              i: n194,
                              j: n194,
                              parent: s289,
                              color: Array.isArray(a359.style.colors) && a359.style.colors[n194] ? a359.style.colors[n194] : "#a8a8a8",
                              dataLabelsConfig: e({
                                  textAnchor: c122.textAnchor,
                                  dropShadow: {
                                      enabled: !1
                                  }
                              }, a359),
                              offsetCorrection: !1
                          });
                      }
                  }), s289;
              }
          },
          {
              key: "createPaths",
              value: function(t735, e559) {
                  var i434 = this, a360 = [], s290 = [], r254 = [], o225 = [];
                  if (t735.length) {
                      s290 = [
                          this.graphics.move(e559.x, e559.y)
                      ], o225 = [
                          this.graphics.move(e559.x, e559.y)
                      ];
                      var n195 = this.graphics.move(t735[0].x, t735[0].y), l166 = this.graphics.move(t735[0].x, t735[0].y);
                      t735.forEach(function(e560, a361) {
                          n195 += i434.graphics.line(e560.x, e560.y), l166 += i434.graphics.line(e560.x, e560.y), a361 === t735.length - 1 && (n195 += "Z", l166 += "Z");
                      }), a360.push(n195), r254.push(l166);
                  }
                  return {
                      linePathsFrom: s290,
                      linePathsTo: a360,
                      areaPathsFrom: o225,
                      areaPathsTo: r254
                  };
              }
          },
          {
              key: "getTextPos",
              value: function(t736, e561) {
                  var i435 = "middle", a362 = t736.x, s291 = t736.y;
                  return Math.abs(t736.x) >= 10 ? t736.x > 0 ? (i435 = "start", a362 += 10) : t736.x < 0 && (i435 = "end", a362 -= 10) : i435 = "middle", Math.abs(t736.y) >= e561 - 10 && (t736.y < 0 ? s291 -= 10 : t736.y > 0 && (s291 += 10)), {
                      textAnchor: i435,
                      newX: a362,
                      newY: s291
                  };
              }
          },
          {
              key: "getPreviousPath",
              value: function(t737) {
                  for(var e562 = this.w, i436 = null, a363 = 0; a363 < e562.globals.previousPaths.length; a363++){
                      var s292 = e562.globals.previousPaths[a363];
                      s292.paths.length > 0 && parseInt(s292.realIndex, 10) === parseInt(t737, 10) && void 0 !== e562.globals.previousPaths[a363].paths[0] && (i436 = e562.globals.previousPaths[a363].paths[0].d);
                  }
                  return i436;
              }
          },
          {
              key: "getDataPointsPos",
              value: function(t738, e563) {
                  var i437 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : this.dataPointsLen;
                  t738 = t738 || [], e563 = e563 || [];
                  for(var a364 = [], s293 = 0; s293 < i437; s293++){
                      var r255 = {
                      };
                      r255.x = t738[s293] * Math.sin(e563[s293]), r255.y = -t738[s293] * Math.cos(e563[s293]), a364.push(r255);
                  }
                  return a364;
              }
          }
      ]), t723;
  }(), Ct = function(t739) {
      n(i438, At);
      var e564 = d(i438);
      function i438(t740) {
          var s294;
          a(this, i438), (s294 = e564.call(this, t740)).ctx = t740, s294.w = t740.w, s294.animBeginArr = [
              0
          ], s294.animDur = 0;
          var r256 = s294.w;
          return s294.startAngle = r256.config.plotOptions.radialBar.startAngle, s294.endAngle = r256.config.plotOptions.radialBar.endAngle, s294.totalAngle = Math.abs(r256.config.plotOptions.radialBar.endAngle - r256.config.plotOptions.radialBar.startAngle), s294.trackStartAngle = r256.config.plotOptions.radialBar.track.startAngle, s294.trackEndAngle = r256.config.plotOptions.radialBar.track.endAngle, s294.donutDataLabels = s294.w.config.plotOptions.radialBar.dataLabels, s294.radialDataLabels = s294.donutDataLabels, s294.trackStartAngle || (s294.trackStartAngle = s294.startAngle), s294.trackEndAngle || (s294.trackEndAngle = s294.endAngle), 360 === s294.endAngle && (s294.endAngle = 359.99), s294.margin = parseInt(r256.config.plotOptions.radialBar.track.margin, 10), s294;
      }
      return r(i438, [
          {
              key: "draw",
              value: function(t741) {
                  var e565 = this.w, i439 = new b(this.ctx), a365 = i439.group({
                      class: "apexcharts-radialbar"
                  });
                  if (e565.globals.noData) return a365;
                  var s295 = i439.group(), r257 = this.defaultSize / 2, o226 = e565.globals.gridWidth / 2, n196 = this.defaultSize / 2.05;
                  e565.config.chart.sparkline.enabled || (n196 = n196 - e565.config.stroke.width - e565.config.chart.dropShadow.blur);
                  var l167 = e565.globals.fill.colors;
                  if (e565.config.plotOptions.radialBar.track.show) {
                      var h137 = this.drawTracks({
                          size: n196,
                          centerX: o226,
                          centerY: r257,
                          colorArr: l167,
                          series: t741
                      });
                      s295.add(h137);
                  }
                  var c123 = this.drawArcs({
                      size: n196,
                      centerX: o226,
                      centerY: r257,
                      colorArr: l167,
                      series: t741
                  }), d110 = 360;
                  e565.config.plotOptions.radialBar.startAngle < 0 && (d110 = this.totalAngle);
                  var g89 = (360 - d110) / 360;
                  if (e565.globals.radialSize = n196 - n196 * g89, this.radialDataLabels.value.show) {
                      var u77 = Math.max(this.radialDataLabels.value.offsetY, this.radialDataLabels.name.offsetY);
                      e565.globals.radialSize += u77 * g89;
                  }
                  return s295.add(c123.g), "front" === e565.config.plotOptions.radialBar.hollow.position && (c123.g.add(c123.elHollow), c123.dataLabels && c123.g.add(c123.dataLabels)), a365.add(s295), a365;
              }
          },
          {
              key: "drawTracks",
              value: function(t742) {
                  var e566 = this.w, i440 = new b(this.ctx), a366 = i440.group({
                      class: "apexcharts-tracks"
                  }), s296 = new x(this.ctx), r258 = new L(this.ctx), o227 = this.getStrokeWidth(t742);
                  t742.size = t742.size - o227 / 2;
                  for(var n197 = 0; n197 < t742.series.length; n197++){
                      var l168 = i440.group({
                          class: "apexcharts-radialbar-track apexcharts-track"
                      });
                      a366.add(l168), l168.attr({
                          rel: n197 + 1
                      }), t742.size = t742.size - o227 - this.margin;
                      var h138 = e566.config.plotOptions.radialBar.track, c124 = r258.fillPath({
                          seriesNumber: 0,
                          size: t742.size,
                          fillColors: Array.isArray(h138.background) ? h138.background[n197] : h138.background,
                          solid: !0
                      }), d111 = this.trackStartAngle, g90 = this.trackEndAngle;
                      Math.abs(g90) + Math.abs(d111) >= 360 && (g90 = 360 - Math.abs(this.startAngle) - 0.1);
                      var u78 = i440.drawPath({
                          d: "",
                          stroke: c124,
                          strokeWidth: o227 * parseInt(h138.strokeWidth, 10) / 100,
                          fill: "none",
                          strokeOpacity: h138.opacity,
                          classes: "apexcharts-radialbar-area"
                      });
                      if (h138.dropShadow.enabled) {
                          var p46 = h138.dropShadow;
                          s296.dropShadow(u78, p46);
                      }
                      l168.add(u78), u78.attr("id", "apexcharts-radialbarTrack-" + n197), this.animatePaths(u78, {
                          centerX: t742.centerX,
                          centerY: t742.centerY,
                          endAngle: g90,
                          startAngle: d111,
                          size: t742.size,
                          i: n197,
                          totalItems: 2,
                          animBeginArr: 0,
                          dur: 0,
                          isTrack: !0,
                          easing: e566.globals.easing
                      });
                  }
                  return a366;
              }
          },
          {
              key: "drawArcs",
              value: function(t743) {
                  var e567 = this.w, i441 = new b(this.ctx), a367 = new L(this.ctx), s297 = new x(this.ctx), r259 = i441.group(), o228 = this.getStrokeWidth(t743);
                  t743.size = t743.size - o228 / 2;
                  var n198 = e567.config.plotOptions.radialBar.hollow.background, l169 = t743.size - o228 * t743.series.length - this.margin * t743.series.length - o228 * parseInt(e567.config.plotOptions.radialBar.track.strokeWidth, 10) / 100 / 2, h139 = l169 - e567.config.plotOptions.radialBar.hollow.margin;
                  void 0 !== e567.config.plotOptions.radialBar.hollow.image && (n198 = this.drawHollowImage(t743, r259, l169, n198));
                  var c125 = this.drawHollow({
                      size: h139,
                      centerX: t743.centerX,
                      centerY: t743.centerY,
                      fill: n198 || "transparent"
                  });
                  if (e567.config.plotOptions.radialBar.hollow.dropShadow.enabled) {
                      var d112 = e567.config.plotOptions.radialBar.hollow.dropShadow;
                      s297.dropShadow(c125, d112);
                  }
                  var g91 = 1;
                  !this.radialDataLabels.total.show && e567.globals.series.length > 1 && (g91 = 0);
                  var u79 = null;
                  this.radialDataLabels.show && (u79 = this.renderInnerDataLabels(this.radialDataLabels, {
                      hollowSize: l169,
                      centerX: t743.centerX,
                      centerY: t743.centerY,
                      opacity: g91
                  })), "back" === e567.config.plotOptions.radialBar.hollow.position && (r259.add(c125), u79 && r259.add(u79));
                  var f57 = !1;
                  e567.config.plotOptions.radialBar.inverseOrder && (f57 = !0);
                  for(var v45 = f57 ? t743.series.length - 1 : 0; f57 ? v45 >= 0 : v45 < t743.series.length; f57 ? v45-- : v45++){
                      var m40 = i441.group({
                          class: "apexcharts-series apexcharts-radial-series",
                          seriesName: p.escapeString(e567.globals.seriesNames[v45])
                      });
                      r259.add(m40), m40.attr({
                          rel: v45 + 1,
                          "data:realIndex": v45
                      }), this.ctx.series.addCollapsedClassToSeries(m40, v45), t743.size = t743.size - o228 - this.margin;
                      var y33 = a367.fillPath({
                          seriesNumber: v45,
                          size: t743.size,
                          value: t743.series[v45]
                      }), w28 = this.startAngle, k26 = void 0, A21 = p.negToZero(t743.series[v45] > 100 ? 100 : t743.series[v45]) / 100, S17 = Math.round(this.totalAngle * A21) + this.startAngle, C14 = void 0;
                      e567.globals.dataChanged && (k26 = this.startAngle, C14 = Math.round(this.totalAngle * p.negToZero(e567.globals.previousPaths[v45]) / 100) + k26), Math.abs(S17) + Math.abs(w28) >= 360 && (S17 -= 0.01), Math.abs(C14) + Math.abs(k26) >= 360 && (C14 -= 0.01);
                      var P11 = S17 - w28, T11 = Array.isArray(e567.config.stroke.dashArray) ? e567.config.stroke.dashArray[v45] : e567.config.stroke.dashArray, M11 = i441.drawPath({
                          d: "",
                          stroke: y33,
                          strokeWidth: o228,
                          fill: "none",
                          fillOpacity: e567.config.fill.opacity,
                          classes: "apexcharts-radialbar-area apexcharts-radialbar-slice-" + v45,
                          strokeDashArray: T11
                      });
                      if (b.setAttrs(M11.node, {
                          "data:angle": P11,
                          "data:value": t743.series[v45]
                      }), e567.config.chart.dropShadow.enabled) {
                          var I7 = e567.config.chart.dropShadow;
                          s297.dropShadow(M11, I7, v45);
                      }
                      s297.setSelectionFilter(M11, 0, v45), this.addListeners(M11, this.radialDataLabels), m40.add(M11), M11.attr({
                          index: 0,
                          j: v45
                      });
                      var z5 = 0;
                      !this.initialAnim || e567.globals.resized || e567.globals.dataChanged || (z5 = (S17 - w28) / 360 * e567.config.chart.animations.speed, this.animDur = z5 / (1.2 * t743.series.length) + this.animDur, this.animBeginArr.push(this.animDur)), e567.globals.dataChanged && (z5 = (S17 - w28) / 360 * e567.config.chart.animations.dynamicAnimation.speed, this.animDur = z5 / (1.2 * t743.series.length) + this.animDur, this.animBeginArr.push(this.animDur)), this.animatePaths(M11, {
                          centerX: t743.centerX,
                          centerY: t743.centerY,
                          endAngle: S17,
                          startAngle: w28,
                          prevEndAngle: C14,
                          prevStartAngle: k26,
                          size: t743.size,
                          i: v45,
                          totalItems: 2,
                          animBeginArr: this.animBeginArr,
                          dur: z5,
                          shouldSetPrevPaths: !0,
                          easing: e567.globals.easing
                      });
                  }
                  return {
                      g: r259,
                      elHollow: c125,
                      dataLabels: u79
                  };
              }
          },
          {
              key: "drawHollow",
              value: function(t744) {
                  var e568 = new b(this.ctx).drawCircle(2 * t744.size);
                  return e568.attr({
                      class: "apexcharts-radialbar-hollow",
                      cx: t744.centerX,
                      cy: t744.centerY,
                      r: t744.size,
                      fill: t744.fill
                  }), e568;
              }
          },
          {
              key: "drawHollowImage",
              value: function(t745, e569, i442, a368) {
                  var s298 = this.w, r260 = new L(this.ctx), o229 = p.randomId(), n199 = s298.config.plotOptions.radialBar.hollow.image;
                  if (s298.config.plotOptions.radialBar.hollow.imageClipped) r260.clippedImgArea({
                      width: i442,
                      height: i442,
                      image: n199,
                      patternID: "pattern".concat(s298.globals.cuid).concat(o229)
                  }), a368 = "url(#pattern".concat(s298.globals.cuid).concat(o229, ")");
                  else {
                      var l170 = s298.config.plotOptions.radialBar.hollow.imageWidth, h140 = s298.config.plotOptions.radialBar.hollow.imageHeight;
                      if (void 0 === l170 && void 0 === h140) {
                          var c126 = s298.globals.dom.Paper.image(n199).loaded(function(e570) {
                              this.move(t745.centerX - e570.width / 2 + s298.config.plotOptions.radialBar.hollow.imageOffsetX, t745.centerY - e570.height / 2 + s298.config.plotOptions.radialBar.hollow.imageOffsetY);
                          });
                          e569.add(c126);
                      } else {
                          var d113 = s298.globals.dom.Paper.image(n199).loaded(function(e) {
                              this.move(t745.centerX - l170 / 2 + s298.config.plotOptions.radialBar.hollow.imageOffsetX, t745.centerY - h140 / 2 + s298.config.plotOptions.radialBar.hollow.imageOffsetY), this.size(l170, h140);
                          });
                          e569.add(d113);
                      }
                  }
                  return a368;
              }
          },
          {
              key: "getStrokeWidth",
              value: function(t746) {
                  var e571 = this.w;
                  return t746.size * (100 - parseInt(e571.config.plotOptions.radialBar.hollow.size, 10)) / 100 / (t746.series.length + 1) - this.margin;
              }
          }
      ]), i438;
  }(), Lt = function() {
      function t747(e572) {
          a(this, t747), this.w = e572.w, this.lineCtx = e572;
      }
      return r(t747, [
          {
              key: "sameValueSeriesFix",
              value: function(t748, e573) {
                  var i443 = this.w;
                  if ("line" === i443.config.chart.type && ("gradient" === i443.config.fill.type || "gradient" === i443.config.fill.type[t748]) && new y(this.lineCtx.ctx, i443).seriesHaveSameValues(t748)) {
                      var a369 = e573[t748].slice();
                      a369[a369.length - 1] = a369[a369.length - 1] + 0.000001, e573[t748] = a369;
                  }
                  return e573;
              }
          },
          {
              key: "calculatePoints",
              value: function(t749) {
                  var e574 = t749.series, i = t749.realIndex, a370 = t749.x, s299 = t749.y, r = t749.i, o230 = t749.j, n200 = t749.prevY, l171 = this.w, h141 = [], c127 = [];
                  if (0 === o230) {
                      var d114 = this.lineCtx.categoryAxisCorrection + l171.config.markers.offsetX;
                      l171.globals.isXNumeric && (d114 = (l171.globals.seriesX[i][0] - l171.globals.minX) / this.lineCtx.xRatio + l171.config.markers.offsetX), h141.push(d114), c127.push(p.isNumber(e574[r][0]) ? n200 + l171.config.markers.offsetY : null), h141.push(a370 + l171.config.markers.offsetX), c127.push(p.isNumber(e574[r][o230 + 1]) ? s299 + l171.config.markers.offsetY : null);
                  } else h141.push(a370 + l171.config.markers.offsetX), c127.push(p.isNumber(e574[r][o230 + 1]) ? s299 + l171.config.markers.offsetY : null);
                  return {
                      x: h141,
                      y: c127
                  };
              }
          },
          {
              key: "checkPreviousPaths",
              value: function(t750) {
                  for(var e575 = t750.pathFromLine, i444 = t750.pathFromArea, a371 = t750.realIndex, s300 = this.w, r261 = 0; r261 < s300.globals.previousPaths.length; r261++){
                      var o231 = s300.globals.previousPaths[r261];
                      ("line" === o231.type || "area" === o231.type) && o231.paths.length > 0 && parseInt(o231.realIndex, 10) === parseInt(a371, 10) && ("line" === o231.type ? (this.lineCtx.appendPathFrom = !1, e575 = s300.globals.previousPaths[r261].paths[0].d) : "area" === o231.type && (this.lineCtx.appendPathFrom = !1, i444 = s300.globals.previousPaths[r261].paths[0].d, s300.config.stroke.show && s300.globals.previousPaths[r261].paths[1] && (e575 = s300.globals.previousPaths[r261].paths[1].d)));
                  }
                  return {
                      pathFromLine: e575,
                      pathFromArea: i444
                  };
              }
          },
          {
              key: "determineFirstPrevY",
              value: function(t751) {
                  var e576 = t751.i, i445 = t751.series, a372 = t751.prevY, s301 = t751.lineYPosition, r262 = this.w;
                  if (void 0 !== i445[e576][0]) a372 = (s301 = r262.config.chart.stacked && e576 > 0 ? this.lineCtx.prevSeriesY[e576 - 1][0] : this.lineCtx.zeroY) - i445[e576][0] / this.lineCtx.yRatio[this.lineCtx.yaxisIndex] + 2 * (this.lineCtx.isReversed ? i445[e576][0] / this.lineCtx.yRatio[this.lineCtx.yaxisIndex] : 0);
                  else if (r262.config.chart.stacked && e576 > 0 && void 0 === i445[e576][0]) {
                      for(var o232 = e576 - 1; o232 >= 0; o232--)if (null !== i445[o232][0] && void 0 !== i445[o232][0]) {
                          a372 = s301 = this.lineCtx.prevSeriesY[o232][0];
                          break;
                      }
                  }
                  return {
                      prevY: a372,
                      lineYPosition: s301
                  };
              }
          }
      ]), t747;
  }(), Pt = function() {
      function t752(e577, i446, s302) {
          a(this, t752), this.ctx = e577, this.w = e577.w, this.xyRatios = i446, this.pointsChart = !("bubble" !== this.w.config.chart.type && "scatter" !== this.w.config.chart.type) || s302, this.scatter = new T(this.ctx), this.noNegatives = this.w.globals.minX === Number.MAX_VALUE, this.lineHelpers = new Lt(this), this.markers = new P(this.ctx), this.prevSeriesY = [], this.categoryAxisCorrection = 0, this.yaxisIndex = 0;
      }
      return r(t752, [
          {
              key: "draw",
              value: function(t753, e578, i447) {
                  var a373 = this.w, s303 = new b(this.ctx), r263 = a373.globals.comboCharts ? e578 : a373.config.chart.type, o233 = s303.group({
                      class: "apexcharts-".concat(r263, "-series apexcharts-plot-series")
                  }), n201 = new y(this.ctx, a373);
                  this.yRatio = this.xyRatios.yRatio, this.zRatio = this.xyRatios.zRatio, this.xRatio = this.xyRatios.xRatio, this.baseLineY = this.xyRatios.baseLineY, t753 = n201.getLogSeries(t753), this.yRatio = n201.getLogYRatios(this.yRatio);
                  for(var l172 = [], h142 = 0; h142 < t753.length; h142++){
                      t753 = this.lineHelpers.sameValueSeriesFix(h142, t753);
                      var c128 = a373.globals.comboCharts ? i447[h142] : h142;
                      this._initSerieVariables(t753, h142, c128);
                      var d115 = [], g92 = [], u80 = a373.globals.padHorizontal + this.categoryAxisCorrection;
                      this.ctx.series.addCollapsedClassToSeries(this.elSeries, c128), a373.globals.isXNumeric && a373.globals.seriesX.length > 0 && (u80 = (a373.globals.seriesX[c128][0] - a373.globals.minX) / this.xRatio), g92.push(u80);
                      var p47, f58 = u80, x45 = f58, v46 = this.zeroY;
                      v46 = this.lineHelpers.determineFirstPrevY({
                          i: h142,
                          series: t753,
                          prevY: v46,
                          lineYPosition: 0
                      }).prevY, d115.push(v46), p47 = v46;
                      var m41 = this._calculatePathsFrom({
                          series: t753,
                          i: h142,
                          realIndex: c128,
                          prevX: x45,
                          prevY: v46
                      }), w29 = this._iterateOverDataPoints({
                          series: t753,
                          realIndex: c128,
                          i: h142,
                          x: u80,
                          y: 1,
                          pX: f58,
                          pY: p47,
                          pathsFrom: m41,
                          linePaths: [],
                          areaPaths: [],
                          seriesIndex: i447,
                          lineYPosition: 0,
                          xArrj: g92,
                          yArrj: d115
                      });
                      this._handlePaths({
                          type: r263,
                          realIndex: c128,
                          i: h142,
                          paths: w29
                      }), this.elSeries.add(this.elPointsMain), this.elSeries.add(this.elDataLabelsWrap), l172.push(this.elSeries);
                  }
                  if (a373.config.chart.stacked) for(var k27 = l172.length; k27 > 0; k27--)o233.add(l172[k27 - 1]);
                  else for(var A22 = 0; A22 < l172.length; A22++)o233.add(l172[A22]);
                  return o233;
              }
          },
          {
              key: "_initSerieVariables",
              value: function(t754, e579, i448) {
                  var a374 = this.w, s304 = new b(this.ctx);
                  this.xDivision = a374.globals.gridWidth / (a374.globals.dataPoints - ("on" === a374.config.xaxis.tickPlacement ? 1 : 0)), this.strokeWidth = Array.isArray(a374.config.stroke.width) ? a374.config.stroke.width[i448] : a374.config.stroke.width, this.yRatio.length > 1 && (this.yaxisIndex = i448), this.isReversed = a374.config.yaxis[this.yaxisIndex] && a374.config.yaxis[this.yaxisIndex].reversed, this.zeroY = a374.globals.gridHeight - this.baseLineY[this.yaxisIndex] - (this.isReversed ? a374.globals.gridHeight : 0) + (this.isReversed ? 2 * this.baseLineY[this.yaxisIndex] : 0), this.areaBottomY = this.zeroY, (this.zeroY > a374.globals.gridHeight || "end" === a374.config.plotOptions.area.fillTo) && (this.areaBottomY = a374.globals.gridHeight), this.categoryAxisCorrection = this.xDivision / 2, this.elSeries = s304.group({
                      class: "apexcharts-series",
                      seriesName: p.escapeString(a374.globals.seriesNames[i448])
                  }), this.elPointsMain = s304.group({
                      class: "apexcharts-series-markers-wrap",
                      "data:realIndex": i448
                  }), this.elDataLabelsWrap = s304.group({
                      class: "apexcharts-datalabels",
                      "data:realIndex": i448
                  });
                  var r264 = t754[e579].length === a374.globals.dataPoints;
                  this.elSeries.attr({
                      "data:longestSeries": r264,
                      rel: e579 + 1,
                      "data:realIndex": i448
                  }), this.appendPathFrom = !0;
              }
          },
          {
              key: "_calculatePathsFrom",
              value: function(t755) {
                  var e580, i449, a375, s305, r265 = t755.series, o = t755.i, n202 = t755.realIndex, l173 = t755.prevX, h143 = t755.prevY, c129 = this.w, d116 = new b(this.ctx);
                  if (null === r265[o][0]) {
                      for(var g93 = 0; g93 < r265[o].length; g93++)if (null !== r265[o][g93]) {
                          l173 = this.xDivision * g93, h143 = this.zeroY - r265[o][g93] / this.yRatio[this.yaxisIndex], e580 = d116.move(l173, h143), i449 = d116.move(l173, this.areaBottomY);
                          break;
                      }
                  } else e580 = d116.move(l173, h143), i449 = d116.move(l173, this.areaBottomY) + d116.line(l173, h143);
                  if (a375 = d116.move(-1, this.zeroY) + d116.line(-1, this.zeroY), s305 = d116.move(-1, this.zeroY) + d116.line(-1, this.zeroY), c129.globals.previousPaths.length > 0) {
                      var u81 = this.lineHelpers.checkPreviousPaths({
                          pathFromLine: a375,
                          pathFromArea: s305,
                          realIndex: n202
                      });
                      a375 = u81.pathFromLine, s305 = u81.pathFromArea;
                  }
                  return {
                      prevX: l173,
                      prevY: h143,
                      linePath: e580,
                      areaPath: i449,
                      pathFromLine: a375,
                      pathFromArea: s305
                  };
              }
          },
          {
              key: "_handlePaths",
              value: function(t756) {
                  var i450 = t756.type, a376 = t756.realIndex, s306 = t756.i, r266 = t756.paths, o234 = this.w, n203 = new b(this.ctx), l174 = new L(this.ctx);
                  this.prevSeriesY.push(r266.yArrj), o234.globals.seriesXvalues[a376] = r266.xArrj, o234.globals.seriesYvalues[a376] = r266.yArrj;
                  var h144 = o234.config.forecastDataPoints;
                  if (h144.count > 0) {
                      var c130 = o234.globals.seriesXvalues[a376][o234.globals.seriesXvalues[a376].length - h144.count - 1], d117 = n203.drawRect(c130, 0, o234.globals.gridWidth, o234.globals.gridHeight, 0);
                      o234.globals.dom.elForecastMask.appendChild(d117.node);
                      var g94 = n203.drawRect(0, 0, c130, o234.globals.gridHeight, 0);
                      o234.globals.dom.elNonForecastMask.appendChild(g94.node);
                  }
                  this.pointsChart || o234.globals.delayedElements.push({
                      el: this.elPointsMain.node,
                      index: a376
                  });
                  var u82 = {
                      i: s306,
                      realIndex: a376,
                      animationDelay: s306,
                      initialSpeed: o234.config.chart.animations.speed,
                      dataChangeSpeed: o234.config.chart.animations.dynamicAnimation.speed,
                      className: "apexcharts-".concat(i450)
                  };
                  if ("area" === i450) for(var p48 = l174.fillPath({
                      seriesNumber: a376
                  }), f59 = 0; f59 < r266.areaPaths.length; f59++){
                      var x46 = n203.renderPaths(e(e({
                      }, u82), {
                      }, {
                          pathFrom: r266.pathFromArea,
                          pathTo: r266.areaPaths[f59],
                          stroke: "none",
                          strokeWidth: 0,
                          strokeLineCap: null,
                          fill: p48
                      }));
                      this.elSeries.add(x46);
                  }
                  if (o234.config.stroke.show && !this.pointsChart) {
                      var v47 = null;
                      v47 = "line" === i450 ? l174.fillPath({
                          seriesNumber: a376,
                          i: s306
                      }) : o234.globals.stroke.colors[a376];
                      for(var m42 = 0; m42 < r266.linePaths.length; m42++){
                          var y34 = e(e({
                          }, u82), {
                          }, {
                              pathFrom: r266.pathFromLine,
                              pathTo: r266.linePaths[m42],
                              stroke: v47,
                              strokeWidth: this.strokeWidth,
                              strokeLineCap: o234.config.stroke.lineCap,
                              fill: "none"
                          }), w30 = n203.renderPaths(y34);
                          if (this.elSeries.add(w30), h144.count > 0) {
                              var k28 = n203.renderPaths(y34);
                              k28.node.setAttribute("stroke-dasharray", h144.dashArray), h144.strokeWidth && k28.node.setAttribute("stroke-width", h144.strokeWidth), this.elSeries.add(k28), k28.attr("clip-path", "url(#forecastMask".concat(o234.globals.cuid, ")")), w30.attr("clip-path", "url(#nonForecastMask".concat(o234.globals.cuid, ")"));
                          }
                      }
                  }
              }
          },
          {
              key: "_iterateOverDataPoints",
              value: function(t757) {
                  for(var e581 = t757.series, i451 = t757.realIndex, a377 = t757.i, s307 = t757.x, r267 = t757.y, o235 = t757.pX, n204 = t757.pY, l175 = t757.pathsFrom, h145 = t757.linePaths, c131 = t757.areaPaths, d118 = t757.seriesIndex, g95 = t757.lineYPosition, u83 = t757.xArrj, f60 = t757.yArrj, x47 = this.w, v48 = new b(this.ctx), m43 = this.yRatio, y35 = l175.prevY, w31 = l175.linePath, k29 = l175.areaPath, A23 = l175.pathFromLine, S18 = l175.pathFromArea, C15 = p.isNumber(x47.globals.minYArr[i451]) ? x47.globals.minYArr[i451] : x47.globals.minY, L10 = x47.globals.dataPoints > 1 ? x47.globals.dataPoints - 1 : x47.globals.dataPoints, P12 = 0; P12 < L10; P12++){
                      var T12 = void 0 === e581[a377][P12 + 1] || null === e581[a377][P12 + 1];
                      if (x47.globals.isXNumeric) {
                          var M12 = x47.globals.seriesX[i451][P12 + 1];
                          void 0 === x47.globals.seriesX[i451][P12 + 1] && (M12 = x47.globals.seriesX[i451][L10 - 1]), s307 = (M12 - x47.globals.minX) / this.xRatio;
                      } else s307 += this.xDivision;
                      if (x47.config.chart.stacked) {
                          if (a377 > 0 && x47.globals.collapsedSeries.length < x47.config.series.length - 1) g95 = this.prevSeriesY[(function(t) {
                              for(var e = t, i = 0; i < x47.globals.series.length; i++)if (x47.globals.collapsedSeriesIndices.indexOf(t) > -1) {
                                  e--;
                                  break;
                              }
                              return e >= 0 ? e : 0;
                          })(a377 - 1)][P12 + 1];
                          else g95 = this.zeroY;
                      } else g95 = this.zeroY;
                      r267 = T12 ? g95 - C15 / m43[this.yaxisIndex] + 2 * (this.isReversed ? C15 / m43[this.yaxisIndex] : 0) : g95 - e581[a377][P12 + 1] / m43[this.yaxisIndex] + 2 * (this.isReversed ? e581[a377][P12 + 1] / m43[this.yaxisIndex] : 0), u83.push(s307), f60.push(r267);
                      var I8 = this.lineHelpers.calculatePoints({
                          series: e581,
                          x: s307,
                          y: r267,
                          realIndex: i451,
                          i: a377,
                          j: P12,
                          prevY: y35
                      }), z6 = this._createPaths({
                          series: e581,
                          i: a377,
                          realIndex: i451,
                          j: P12,
                          x: s307,
                          y: r267,
                          pX: o235,
                          pY: n204,
                          linePath: w31,
                          areaPath: k29,
                          linePaths: h145,
                          areaPaths: c131,
                          seriesIndex: d118
                      });
                      c131 = z6.areaPaths, h145 = z6.linePaths, o235 = z6.pX, n204 = z6.pY, k29 = z6.areaPath, w31 = z6.linePath, this.appendPathFrom && (A23 += v48.line(s307, this.zeroY), S18 += v48.line(s307, this.zeroY)), this.handleNullDataPoints(e581, I8, a377, P12, i451), this._handleMarkersAndLabels({
                          pointsPos: I8,
                          series: e581,
                          x: s307,
                          y: r267,
                          prevY: y35,
                          i: a377,
                          j: P12,
                          realIndex: i451
                      });
                  }
                  return {
                      yArrj: f60,
                      xArrj: u83,
                      pathFromArea: S18,
                      areaPaths: c131,
                      pathFromLine: A23,
                      linePaths: h145
                  };
              }
          },
          {
              key: "_handleMarkersAndLabels",
              value: function(t758) {
                  var e582 = t758.pointsPos;
                  t758.series, t758.x, t758.y, t758.prevY;
                  var i = t758.i, a378 = t758.j, s308 = t758.realIndex, r268 = this.w, o236 = new M(this.ctx);
                  if (this.pointsChart) this.scatter.draw(this.elSeries, a378, {
                      realIndex: s308,
                      pointsPos: e582,
                      zRatio: this.zRatio,
                      elParent: this.elPointsMain
                  });
                  else {
                      r268.globals.series[i].length > 1 && this.elPointsMain.node.classList.add("apexcharts-element-hidden");
                      var n205 = this.markers.plotChartMarkers(e582, s308, a378 + 1);
                      null !== n205 && this.elPointsMain.add(n205);
                  }
                  var l176 = o236.drawDataLabel(e582, s308, a378 + 1, null);
                  null !== l176 && this.elDataLabelsWrap.add(l176);
              }
          },
          {
              key: "_createPaths",
              value: function(t759) {
                  var e583 = t759.series, i = t759.i, a = t759.realIndex, s309 = t759.j, r269 = t759.x, o237 = t759.y, n206 = t759.pX, l177 = t759.pY, h146 = t759.linePath, c132 = t759.areaPath, d119 = t759.linePaths, g96 = t759.areaPaths, u84 = t759.seriesIndex, p49 = this.w, f61 = new b(this.ctx), x48 = p49.config.stroke.curve, v49 = this.areaBottomY;
                  if (Array.isArray(p49.config.stroke.curve) && (x48 = Array.isArray(u84) ? p49.config.stroke.curve[u84[i]] : p49.config.stroke.curve[i]), "smooth" === x48) {
                      var m44 = 0.35 * (r269 - n206);
                      p49.globals.hasNullValues ? (null !== e583[i][s309] && (null !== e583[i][s309 + 1] ? (h146 = f61.move(n206, l177) + f61.curve(n206 + m44, l177, r269 - m44, o237, r269 + 1, o237), c132 = f61.move(n206 + 1, l177) + f61.curve(n206 + m44, l177, r269 - m44, o237, r269 + 1, o237) + f61.line(r269, v49) + f61.line(n206, v49) + "z") : (h146 = f61.move(n206, l177), c132 = f61.move(n206, l177) + "z")), d119.push(h146), g96.push(c132)) : (h146 += f61.curve(n206 + m44, l177, r269 - m44, o237, r269, o237), c132 += f61.curve(n206 + m44, l177, r269 - m44, o237, r269, o237)), n206 = r269, l177 = o237, s309 === e583[i].length - 2 && (c132 = c132 + f61.curve(n206, l177, r269, o237, r269, v49) + f61.move(r269, o237) + "z", p49.globals.hasNullValues || (d119.push(h146), g96.push(c132)));
                  } else {
                      if (null === e583[i][s309 + 1]) {
                          h146 += f61.move(r269, o237);
                          var y36 = p49.globals.isXNumeric ? (p49.globals.seriesX[a][s309] - p49.globals.minX) / this.xRatio : r269 - this.xDivision;
                          c132 = c132 + f61.line(y36, v49) + f61.move(r269, o237) + "z";
                      }
                      null === e583[i][s309] && (h146 += f61.move(r269, o237), c132 += f61.move(r269, v49)), "stepline" === x48 ? (h146 = h146 + f61.line(r269, null, "H") + f61.line(null, o237, "V"), c132 = c132 + f61.line(r269, null, "H") + f61.line(null, o237, "V")) : "straight" === x48 && (h146 += f61.line(r269, o237), c132 += f61.line(r269, o237)), s309 === e583[i].length - 2 && (c132 = c132 + f61.line(r269, v49) + f61.move(r269, o237) + "z", d119.push(h146), g96.push(c132));
                  }
                  return {
                      linePaths: d119,
                      areaPaths: g96,
                      pX: n206,
                      pY: l177,
                      linePath: h146,
                      areaPath: c132
                  };
              }
          },
          {
              key: "handleNullDataPoints",
              value: function(t760, e584, i, a379, s310) {
                  var r270 = this.w;
                  if (null === t760[i][a379] && r270.config.markers.showNullDataPoints || 1 === t760[i].length) {
                      var o238 = this.markers.plotChartMarkers(e584, s310, a379 + 1, this.strokeWidth - r270.config.markers.strokeWidth / 2, !0);
                      null !== o238 && this.elPointsMain.add(o238);
                  }
              }
          }
      ]), t752;
  }();
  window.TreemapSquared = {
  }, window.TreemapSquared.generate = (function() {
      function t761(e586, i453, a381, s312) {
          this.xoffset = e586, this.yoffset = i453, this.height = s312, this.width = a381, this.shortestEdge = function() {
              return Math.min(this.height, this.width);
          }, this.getCoordinates = function(t762) {
              var e587, i454 = [], a382 = this.xoffset, s313 = this.yoffset, o240 = r271(t762) / this.height, n207 = r271(t762) / this.width;
              if (this.width >= this.height) for(e587 = 0; e587 < t762.length; e587++)i454.push([
                  a382,
                  s313,
                  a382 + o240,
                  s313 + t762[e587] / o240
              ]), s313 += t762[e587] / o240;
              else for(e587 = 0; e587 < t762.length; e587++)i454.push([
                  a382,
                  s313,
                  a382 + t762[e587] / n207,
                  s313 + n207
              ]), a382 += t762[e587] / n207;
              return i454;
          }, this.cutArea = function(e588) {
              var i455;
              if (this.width >= this.height) {
                  var a383 = e588 / this.height, s314 = this.width - a383;
                  i455 = new t761(this.xoffset + a383, this.yoffset, s314, this.height);
              } else {
                  var r272 = e588 / this.width, o241 = this.height - r272;
                  i455 = new t761(this.xoffset, this.yoffset + r272, this.width, o241);
              }
              return i455;
          };
      }
      function e585(e589, a384, s315, o242, n208) {
          return o242 = void 0 === o242 ? 0 : o242, n208 = void 0 === n208 ? 0 : n208, (function(t763) {
              var e590, i456, a385 = [];
              for(e590 = 0; e590 < t763.length; e590++)for(i456 = 0; i456 < t763[e590].length; i456++)a385.push(t763[e590][i456]);
              return a385;
          })(i452(function(t764, e591) {
              var i457, a386 = [], s316 = e591 / r271(t764);
              for(i457 = 0; i457 < t764.length; i457++)a386[i457] = t764[i457] * s316;
              return a386;
          }(e589, a384 * s315), [], new t761(o242, n208, a384, s315), []));
      }
      function i452(t765, e592, s317, o243) {
          var n209, l178, h147;
          if (0 !== t765.length) return n209 = s317.shortestEdge(), (function(t766, e593, i458) {
              var s318;
              if (0 === t766.length) return !0;
              (s318 = t766.slice()).push(e593);
              var r273 = a380(t766, i458), o244 = a380(s318, i458);
              return r273 >= o244;
          })(e592, l178 = t765[0], n209) ? (e592.push(l178), i452(t765.slice(1), e592, s317, o243)) : (h147 = s317.cutArea(r271(e592), o243), o243.push(s317.getCoordinates(e592)), i452(t765, [], h147, o243)), o243;
          o243.push(s317.getCoordinates(e592));
      }
      function a380(t767, e594) {
          var i459 = Math.min.apply(Math, t767), a387 = Math.max.apply(Math, t767), s319 = r271(t767);
          return Math.max(Math.pow(e594, 2) * a387 / Math.pow(s319, 2), Math.pow(s319, 2) / (Math.pow(e594, 2) * i459));
      }
      function s311(t768) {
          return t768 && t768.constructor === Array;
      }
      function r271(t769) {
          var e595, i460 = 0;
          for(e595 = 0; e595 < t769.length; e595++)i460 += t769[e595];
          return i460;
      }
      function o239(t770) {
          var e596, i461 = 0;
          if (s311(t770[0])) for(e596 = 0; e596 < t770.length; e596++)i461 += o239(t770[e596]);
          else i461 = r271(t770);
          return i461;
      }
      return function t771(i462, a388, r274, n210, l179) {
          n210 = void 0 === n210 ? 0 : n210, l179 = void 0 === l179 ? 0 : l179;
          var h148, c133, d120 = [], g97 = [];
          if (s311(i462[0])) {
              for(c133 = 0; c133 < i462.length; c133++)d120[c133] = o239(i462[c133]);
              for(h148 = e585(d120, a388, r274, n210, l179), c133 = 0; c133 < i462.length; c133++)g97.push(t771(i462[c133], h148[c133][2] - h148[c133][0], h148[c133][3] - h148[c133][1], h148[c133][0], h148[c133][1]));
          } else g97 = e585(i462, a388, r274, n210, l179);
          return g97;
      };
  })();
  var Tt, Mt, It = function() {
      function t772(e597, i) {
          a(this, t772), this.ctx = e597, this.w = e597.w, this.strokeWidth = this.w.config.stroke.width, this.helpers = new yt(e597), this.dynamicAnim = this.w.config.chart.animations.dynamicAnimation, this.labels = [];
      }
      return r(t772, [
          {
              key: "draw",
              value: function(t773) {
                  var e598 = this, i463 = this.w, a389 = new b(this.ctx), s320 = new L(this.ctx), r275 = a389.group({
                      class: "apexcharts-treemap"
                  });
                  if (i463.globals.noData) return r275;
                  var o245 = [];
                  return t773.forEach(function(t774) {
                      var e599 = t774.map(function(t775) {
                          return Math.abs(t775);
                      });
                      o245.push(e599);
                  }), this.negRange = this.helpers.checkColorRange(), i463.config.series.forEach(function(t776, i) {
                      t776.data.forEach(function(t777) {
                          Array.isArray(e598.labels[i]) || (e598.labels[i] = []), e598.labels[i].push(t777.x);
                      });
                  }), window.TreemapSquared.generate(o245, i463.globals.gridWidth, i463.globals.gridHeight).forEach(function(o246, n211) {
                      var l180 = a389.group({
                          class: "apexcharts-series apexcharts-treemap-series",
                          seriesName: p.escapeString(i463.globals.seriesNames[n211]),
                          rel: n211 + 1,
                          "data:realIndex": n211
                      });
                      if (i463.config.chart.dropShadow.enabled) {
                          var h149 = i463.config.chart.dropShadow;
                          new x(e598.ctx).dropShadow(r275, h149, n211);
                      }
                      var c134 = a389.group({
                          class: "apexcharts-data-labels"
                      });
                      o246.forEach(function(r276, o247) {
                          var h150 = r276[0], c135 = r276[1], d121 = r276[2], g98 = r276[3], u85 = a389.drawRect(h150, c135, d121 - h150, g98 - c135, 0, "#fff", 1, e598.strokeWidth, i463.config.plotOptions.treemap.useFillColorAsStroke ? f62 : i463.globals.stroke.colors[n211]);
                          u85.attr({
                              cx: h150,
                              cy: c135,
                              index: n211,
                              i: n211,
                              j: o247,
                              width: d121 - h150,
                              height: g98 - c135
                          });
                          var p50 = e598.helpers.getShadeColor(i463.config.chart.type, n211, o247, e598.negRange), f62 = p50.color;
                          void 0 !== i463.config.series[n211].data[o247] && i463.config.series[n211].data[o247].fillColor && (f62 = i463.config.series[n211].data[o247].fillColor);
                          var x49 = s320.fillPath({
                              color: f62,
                              seriesNumber: n211,
                              dataPointIndex: o247
                          });
                          u85.node.classList.add("apexcharts-treemap-rect"), u85.attr({
                              fill: x49
                          }), e598.helpers.addListeners(u85);
                          var b25 = {
                              x: h150 + (d121 - h150) / 2,
                              y: c135 + (g98 - c135) / 2,
                              width: 0,
                              height: 0
                          }, v50 = {
                              x: h150,
                              y: c135,
                              width: d121 - h150,
                              height: g98 - c135
                          };
                          if (i463.config.chart.animations.enabled && !i463.globals.dataChanged) {
                              var m45 = 1;
                              i463.globals.resized || (m45 = i463.config.chart.animations.speed), e598.animateTreemap(u85, b25, v50, m45);
                          }
                          if (i463.globals.dataChanged) {
                              var y37 = 1;
                              e598.dynamicAnim.enabled && i463.globals.shouldAnimate && (y37 = e598.dynamicAnim.speed, i463.globals.previousPaths[n211] && i463.globals.previousPaths[n211][o247] && i463.globals.previousPaths[n211][o247].rect && (b25 = i463.globals.previousPaths[n211][o247].rect), e598.animateTreemap(u85, b25, v50, y37));
                          }
                          var w32 = e598.getFontSize(r276), k30 = i463.config.dataLabels.formatter(e598.labels[n211][o247], {
                              value: i463.globals.series[n211][o247],
                              seriesIndex: n211,
                              dataPointIndex: o247,
                              w: i463
                          }), A24 = e598.helpers.calculateDataLabels({
                              text: k30,
                              x: (h150 + d121) / 2,
                              y: (c135 + g98) / 2 + e598.strokeWidth / 2 + w32 / 3,
                              i: n211,
                              j: o247,
                              colorProps: p50,
                              fontSize: w32,
                              series: t773
                          });
                          i463.config.dataLabels.enabled && A24 && e598.rotateToFitLabel(A24, k30, h150, c135, d121, g98), l180.add(u85), null !== A24 && l180.add(A24);
                      }), l180.add(c134), r275.add(l180);
                  }), r275;
              }
          },
          {
              key: "getFontSize",
              value: function(t778) {
                  var e600 = this.w;
                  var i464, a390, s321, r277, o248 = function t779(e601) {
                      var i465, a391 = 0;
                      if (Array.isArray(e601[0])) for(i465 = 0; i465 < e601.length; i465++)a391 += t779(e601[i465]);
                      else for(i465 = 0; i465 < e601.length; i465++)a391 += e601[i465].length;
                      return a391;
                  }(this.labels) / function t780(e602) {
                      var i466, a392 = 0;
                      if (Array.isArray(e602[0])) for(i466 = 0; i466 < e602.length; i466++)a392 += t780(e602[i466]);
                      else for(i466 = 0; i466 < e602.length; i466++)a392 += 1;
                      return a392;
                  }(this.labels);
                  return i464 = t778[2] - t778[0], a390 = t778[3] - t778[1], s321 = i464 * a390, r277 = Math.pow(s321, 0.5), Math.min(r277 / o248, parseInt(e600.config.dataLabels.style.fontSize, 10));
              }
          },
          {
              key: "rotateToFitLabel",
              value: function(t781, e603, i467, a393, s322, r278) {
                  var o249 = new b(this.ctx), n212 = o249.getTextRects(e603);
                  if (n212.width + 5 > s322 - i467 && n212.width <= r278 - a393) {
                      var l181 = o249.rotateAroundCenter(t781.node);
                      t781.node.setAttribute("transform", "rotate(-90 ".concat(l181.x, " ").concat(l181.y, ")"));
                  }
              }
          },
          {
              key: "animateTreemap",
              value: function(t782, e604, i468, a394) {
                  var s323 = new f(this.ctx);
                  s323.animateRect(t782, {
                      x: e604.x,
                      y: e604.y,
                      width: e604.width,
                      height: e604.height
                  }, {
                      x: i468.x,
                      y: i468.y,
                      width: i468.width,
                      height: i468.height
                  }, a394, function() {
                      s323.animationCompleted(t782);
                  });
              }
          }
      ]), t772;
  }(), zt = function() {
      function t783(e605) {
          a(this, t783), this.ctx = e605, this.w = e605.w, this.timeScaleArray = [], this.utc = this.w.config.xaxis.labels.datetimeUTC;
      }
      return r(t783, [
          {
              key: "calculateTimeScaleTicks",
              value: function(t784, i469) {
                  var a395 = this, s324 = this.w;
                  if (s324.globals.allSeriesCollapsed) return s324.globals.labels = [], s324.globals.timescaleLabels = [], [];
                  var r279 = new Y(this.ctx), o250 = (i469 - t784) / 86400000;
                  this.determineInterval(o250), s324.globals.disableZoomIn = !1, s324.globals.disableZoomOut = !1, o250 < 0.00011574074074074075 ? s324.globals.disableZoomIn = !0 : o250 > 50000 && (s324.globals.disableZoomOut = !0);
                  var n213 = r279.getTimeUnitsfromTimestamp(t784, i469, this.utc), l182 = s324.globals.gridWidth / o250, h151 = l182 / 24, c136 = h151 / 60, d122 = c136 / 60, g99 = Math.floor(24 * o250), u86 = Math.floor(1440 * o250), p51 = Math.floor(86400 * o250), f63 = Math.floor(o250), x50 = Math.floor(o250 / 30), b26 = Math.floor(o250 / 365), v51 = {
                      minMillisecond: n213.minMillisecond,
                      minSecond: n213.minSecond,
                      minMinute: n213.minMinute,
                      minHour: n213.minHour,
                      minDate: n213.minDate,
                      minMonth: n213.minMonth,
                      minYear: n213.minYear
                  }, m46 = {
                      firstVal: v51,
                      currentMillisecond: v51.minMillisecond,
                      currentSecond: v51.minSecond,
                      currentMinute: v51.minMinute,
                      currentHour: v51.minHour,
                      currentMonthDate: v51.minDate,
                      currentDate: v51.minDate,
                      currentMonth: v51.minMonth,
                      currentYear: v51.minYear,
                      daysWidthOnXAxis: l182,
                      hoursWidthOnXAxis: h151,
                      minutesWidthOnXAxis: c136,
                      secondsWidthOnXAxis: d122,
                      numberOfSeconds: p51,
                      numberOfMinutes: u86,
                      numberOfHours: g99,
                      numberOfDays: f63,
                      numberOfMonths: x50,
                      numberOfYears: b26
                  };
                  switch(this.tickInterval){
                      case "years":
                          this.generateYearScale(m46);
                          break;
                      case "months":
                      case "half_year":
                          this.generateMonthScale(m46);
                          break;
                      case "months_days":
                      case "months_fortnight":
                      case "days":
                      case "week_days":
                          this.generateDayScale(m46);
                          break;
                      case "hours":
                          this.generateHourScale(m46);
                          break;
                      case "minutes_fives":
                      case "minutes":
                          this.generateMinuteScale(m46);
                          break;
                      case "seconds_tens":
                      case "seconds_fives":
                      case "seconds":
                          this.generateSecondScale(m46);
                  }
                  var y38 = this.timeScaleArray.map(function(t785) {
                      var i470 = {
                          position: t785.position,
                          unit: t785.unit,
                          year: t785.year,
                          day: t785.day ? t785.day : 1,
                          hour: t785.hour ? t785.hour : 0,
                          month: t785.month + 1
                      };
                      return "month" === t785.unit ? e(e({
                      }, i470), {
                      }, {
                          day: 1,
                          value: t785.value + 1
                      }) : "day" === t785.unit || "hour" === t785.unit ? e(e({
                      }, i470), {
                      }, {
                          value: t785.value
                      }) : "minute" === t785.unit ? e(e({
                      }, i470), {
                      }, {
                          value: t785.value,
                          minute: t785.value
                      }) : "second" === t785.unit ? e(e({
                      }, i470), {
                      }, {
                          value: t785.value,
                          minute: t785.minute,
                          second: t785.second
                      }) : t785;
                  });
                  return y38.filter(function(t786) {
                      var e606 = 1, i471 = Math.ceil(s324.globals.gridWidth / 120), r280 = t786.value;
                      void 0 !== s324.config.xaxis.tickAmount && (i471 = s324.config.xaxis.tickAmount), y38.length > i471 && (e606 = Math.floor(y38.length / i471));
                      var o251 = !1, n214 = !1;
                      switch(a395.tickInterval){
                          case "years":
                              "year" === t786.unit && (o251 = !0);
                              break;
                          case "half_year":
                              e606 = 7, "year" === t786.unit && (o251 = !0);
                              break;
                          case "months":
                              e606 = 1, "year" === t786.unit && (o251 = !0);
                              break;
                          case "months_fortnight":
                              e606 = 15, "year" !== t786.unit && "month" !== t786.unit || (o251 = !0), 30 === r280 && (n214 = !0);
                              break;
                          case "months_days":
                              e606 = 10, "month" === t786.unit && (o251 = !0), 30 === r280 && (n214 = !0);
                              break;
                          case "week_days":
                              e606 = 8, "month" === t786.unit && (o251 = !0);
                              break;
                          case "days":
                              e606 = 1, "month" === t786.unit && (o251 = !0);
                              break;
                          case "hours":
                              "day" === t786.unit && (o251 = !0);
                              break;
                          case "minutes_fives":
                              r280 % 5 != 0 && (n214 = !0);
                              break;
                          case "seconds_tens":
                              r280 % 10 != 0 && (n214 = !0);
                              break;
                          case "seconds_fives":
                              r280 % 5 != 0 && (n214 = !0);
                      }
                      if ("hours" === a395.tickInterval || "minutes_fives" === a395.tickInterval || "seconds_tens" === a395.tickInterval || "seconds_fives" === a395.tickInterval) {
                          if (!n214) return !0;
                      } else if ((r280 % e606 == 0 || o251) && !n214) return !0;
                  });
              }
          },
          {
              key: "recalcDimensionsBasedOnFormat",
              value: function(t787, e) {
                  var i472 = this.w, a396 = this.formatDates(t787), s325 = this.removeOverlappingTS(a396);
                  i472.globals.timescaleLabels = s325.slice(), new ot(this.ctx).plotCoords();
              }
          },
          {
              key: "determineInterval",
              value: function(t788) {
                  var e607 = 24 * t788, i473 = 60 * e607;
                  switch(!0){
                      case t788 / 365 > 5:
                          this.tickInterval = "years";
                          break;
                      case t788 > 800:
                          this.tickInterval = "half_year";
                          break;
                      case t788 > 180:
                          this.tickInterval = "months";
                          break;
                      case t788 > 90:
                          this.tickInterval = "months_fortnight";
                          break;
                      case t788 > 60:
                          this.tickInterval = "months_days";
                          break;
                      case t788 > 30:
                          this.tickInterval = "week_days";
                          break;
                      case t788 > 2:
                          this.tickInterval = "days";
                          break;
                      case e607 > 2.4:
                          this.tickInterval = "hours";
                          break;
                      case i473 > 15:
                          this.tickInterval = "minutes_fives";
                          break;
                      case i473 > 5:
                          this.tickInterval = "minutes";
                          break;
                      case i473 > 1:
                          this.tickInterval = "seconds_tens";
                          break;
                      case 60 * i473 > 20:
                          this.tickInterval = "seconds_fives";
                          break;
                      default:
                          this.tickInterval = "seconds";
                  }
              }
          },
          {
              key: "generateYearScale",
              value: function(t789) {
                  var e608 = t789.firstVal, i474 = t789.currentMonth, a397 = t789.currentYear, s326 = t789.daysWidthOnXAxis, r281 = t789.numberOfYears, o252 = e608.minYear, n215 = 0, l183 = new Y(this.ctx), h152 = "year";
                  if (e608.minDate > 1 || e608.minMonth > 0) {
                      var c137 = l183.determineRemainingDaysOfYear(e608.minYear, e608.minMonth, e608.minDate);
                      n215 = (l183.determineDaysOfYear(e608.minYear) - c137 + 1) * s326, o252 = e608.minYear + 1, this.timeScaleArray.push({
                          position: n215,
                          value: o252,
                          unit: h152,
                          year: o252,
                          month: p.monthMod(i474 + 1)
                      });
                  } else 1 === e608.minDate && 0 === e608.minMonth && this.timeScaleArray.push({
                      position: n215,
                      value: o252,
                      unit: h152,
                      year: a397,
                      month: p.monthMod(i474 + 1)
                  });
                  for(var d123 = o252, g100 = n215, u87 = 0; u87 < r281; u87++)d123++, g100 = l183.determineDaysOfYear(d123 - 1) * s326 + g100, this.timeScaleArray.push({
                      position: g100,
                      value: d123,
                      unit: h152,
                      year: d123,
                      month: 1
                  });
              }
          },
          {
              key: "generateMonthScale",
              value: function(t790) {
                  var e609 = t790.firstVal, i475 = t790.currentMonthDate, a398 = t790.currentMonth, s327 = t790.currentYear, r282 = t790.daysWidthOnXAxis, o253 = t790.numberOfMonths, n216 = a398, l184 = 0, h153 = new Y(this.ctx), c138 = "month", d124 = 0;
                  if (e609.minDate > 1) {
                      l184 = (h153.determineDaysOfMonths(a398 + 1, e609.minYear) - i475 + 1) * r282, n216 = p.monthMod(a398 + 1);
                      var g101 = s327 + d124, u88 = p.monthMod(n216), f64 = n216;
                      0 === n216 && (c138 = "year", f64 = g101, u88 = 1, g101 += d124 += 1), this.timeScaleArray.push({
                          position: l184,
                          value: f64,
                          unit: c138,
                          year: g101,
                          month: u88
                      });
                  } else this.timeScaleArray.push({
                      position: l184,
                      value: n216,
                      unit: c138,
                      year: s327,
                      month: p.monthMod(a398)
                  });
                  for(var x51 = n216 + 1, b27 = l184, v52 = 0, m47 = 1; v52 < o253; v52++, m47++){
                      0 === (x51 = p.monthMod(x51)) ? (c138 = "year", d124 += 1) : c138 = "month";
                      var y39 = this._getYear(s327, x51, d124);
                      b27 = h153.determineDaysOfMonths(x51, y39) * r282 + b27;
                      var w33 = 0 === x51 ? y39 : x51;
                      this.timeScaleArray.push({
                          position: b27,
                          value: w33,
                          unit: c138,
                          year: y39,
                          month: 0 === x51 ? 1 : x51
                      }), x51++;
                  }
              }
          },
          {
              key: "generateDayScale",
              value: function(t791) {
                  var e610 = t791.firstVal, i476 = t791.currentMonth, a399 = t791.currentYear, s328 = t791.hoursWidthOnXAxis, r283 = t791.numberOfDays, o254 = new Y(this.ctx), n217 = "day", l185 = e610.minDate + 1, h154 = l185, c139 = function(t792, e611, i477) {
                      return t792 > o254.determineDaysOfMonths(e611 + 1, i477) ? (h154 = 1, n217 = "month", g102 = e611 += 1, e611) : e611;
                  }, d125 = (24 - e610.minHour) * s328, g102 = l185, u89 = c139(h154, i476, a399);
                  0 === e610.minHour && 1 === e610.minDate ? (d125 = 0, g102 = p.monthMod(e610.minMonth), n217 = "month", h154 = e610.minDate, r283++) : 1 !== e610.minDate && 0 === e610.minHour && 0 === e610.minMinute && (d125 = 0, l185 = e610.minDate, g102 = l185, u89 = c139(h154 = l185, i476, a399)), this.timeScaleArray.push({
                      position: d125,
                      value: g102,
                      unit: n217,
                      year: this._getYear(a399, u89, 0),
                      month: p.monthMod(u89),
                      day: h154
                  });
                  for(var f65 = d125, x52 = 0; x52 < r283; x52++){
                      n217 = "day", u89 = c139(h154 += 1, u89, this._getYear(a399, u89, 0));
                      var b28 = this._getYear(a399, u89, 0);
                      f65 = 24 * s328 + f65;
                      var v53 = 1 === h154 ? p.monthMod(u89) : h154;
                      this.timeScaleArray.push({
                          position: f65,
                          value: v53,
                          unit: n217,
                          year: b28,
                          month: p.monthMod(u89),
                          day: v53
                      });
                  }
              }
          },
          {
              key: "generateHourScale",
              value: function(t793) {
                  var e612 = t793.firstVal, i478 = t793.currentDate, a400 = t793.currentMonth, s329 = t793.currentYear, r284 = t793.minutesWidthOnXAxis, o255 = t793.numberOfHours, n218 = new Y(this.ctx), l186 = "hour", h155 = function(t794, e613) {
                      return t794 > n218.determineDaysOfMonths(e613 + 1, s329) && (x53 = 1, e613 += 1), {
                          month: e613,
                          date: x53
                      };
                  }, c140 = function(t795, e614) {
                      return t795 > n218.determineDaysOfMonths(e614 + 1, s329) ? e614 += 1 : e614;
                  }, d126 = 60 - (e612.minMinute + e612.minSecond / 60), g103 = d126 * r284, u90 = e612.minHour + 1, f66 = u90 + 1;
                  60 === d126 && (g103 = 0, f66 = (u90 = e612.minHour) + 1);
                  var x53 = i478, b29 = c140(x53, a400);
                  this.timeScaleArray.push({
                      position: g103,
                      value: u90,
                      unit: l186,
                      day: x53,
                      hour: f66,
                      year: s329,
                      month: p.monthMod(b29)
                  });
                  for(var v54 = g103, m48 = 0; m48 < o255; m48++){
                      if (l186 = "hour", f66 >= 24) f66 = 0, l186 = "day", b29 = h155(x53 += 1, b29).month, b29 = c140(x53, b29);
                      var y40 = this._getYear(s329, b29, 0);
                      v54 = 0 === f66 && 0 === m48 ? d126 * r284 : 60 * r284 + v54;
                      var w34 = 0 === f66 ? x53 : f66;
                      this.timeScaleArray.push({
                          position: v54,
                          value: w34,
                          unit: l186,
                          hour: f66,
                          day: x53,
                          year: y40,
                          month: p.monthMod(b29)
                      }), f66++;
                  }
              }
          },
          {
              key: "generateMinuteScale",
              value: function(t796) {
                  for(var e615 = t796.currentMillisecond, i479 = t796.currentSecond, a401 = t796.currentMinute, s330 = t796.currentHour, r285 = t796.currentDate, o256 = t796.currentMonth, n219 = t796.currentYear, l187 = t796.minutesWidthOnXAxis, h156 = t796.secondsWidthOnXAxis, c141 = t796.numberOfMinutes, d127 = a401 + 1, g104 = r285, u91 = o256, f67 = n219, x54 = s330, b30 = (60 - i479 - e615 / 1000) * h156, v55 = 0; v55 < c141; v55++)d127 >= 60 && (d127 = 0, 24 === (x54 += 1) && (x54 = 0)), this.timeScaleArray.push({
                      position: b30,
                      value: d127,
                      unit: "minute",
                      hour: x54,
                      minute: d127,
                      day: g104,
                      year: this._getYear(f67, u91, 0),
                      month: p.monthMod(u91)
                  }), b30 += l187, d127++;
              }
          },
          {
              key: "generateSecondScale",
              value: function(t797) {
                  for(var e616 = t797.currentMillisecond, i480 = t797.currentSecond, a402 = t797.currentMinute, s331 = t797.currentHour, r286 = t797.currentDate, o257 = t797.currentMonth, n220 = t797.currentYear, l188 = t797.secondsWidthOnXAxis, h157 = t797.numberOfSeconds, c142 = i480 + 1, d128 = a402, g105 = r286, u92 = o257, f68 = n220, x55 = s331, b31 = (1000 - e616) / 1000 * l188, v56 = 0; v56 < h157; v56++)c142 >= 60 && (c142 = 0, ++d128 >= 60 && (d128 = 0, 24 === ++x55 && (x55 = 0))), this.timeScaleArray.push({
                      position: b31,
                      value: c142,
                      unit: "second",
                      hour: x55,
                      minute: d128,
                      second: c142,
                      day: g105,
                      year: this._getYear(f68, u92, 0),
                      month: p.monthMod(u92)
                  }), b31 += l188, c142++;
              }
          },
          {
              key: "createRawDateString",
              value: function(t798, e617) {
                  var i481 = t798.year;
                  return 0 === t798.month && (t798.month = 1), i481 += "-" + ("0" + t798.month.toString()).slice(-2), "day" === t798.unit ? i481 += "day" === t798.unit ? "-" + ("0" + e617).slice(-2) : "-01" : i481 += "-" + ("0" + (t798.day ? t798.day : "1")).slice(-2), "hour" === t798.unit ? i481 += "hour" === t798.unit ? "T" + ("0" + e617).slice(-2) : "T00" : i481 += "T" + ("0" + (t798.hour ? t798.hour : "0")).slice(-2), "minute" === t798.unit ? i481 += ":" + ("0" + e617).slice(-2) : i481 += ":" + (t798.minute ? ("0" + t798.minute).slice(-2) : "00"), "second" === t798.unit ? i481 += ":" + ("0" + e617).slice(-2) : i481 += ":00", this.utc && (i481 += ".000Z"), i481;
              }
          },
          {
              key: "formatDates",
              value: function(t799) {
                  var e618 = this, i482 = this.w;
                  return t799.map(function(t800) {
                      var a403 = t800.value.toString(), s332 = new Y(e618.ctx), r287 = e618.createRawDateString(t800, a403), o258 = s332.getDate(s332.parseDate(r287));
                      if (e618.utc || (o258 = s332.getDate(s332.parseDateWithTimezone(r287))), void 0 === i482.config.xaxis.labels.format) {
                          var n221 = "dd MMM", l189 = i482.config.xaxis.labels.datetimeFormatter;
                          "year" === t800.unit && (n221 = l189.year), "month" === t800.unit && (n221 = l189.month), "day" === t800.unit && (n221 = l189.day), "hour" === t800.unit && (n221 = l189.hour), "minute" === t800.unit && (n221 = l189.minute), "second" === t800.unit && (n221 = l189.second), a403 = s332.formatDate(o258, n221);
                      } else a403 = s332.formatDate(o258, i482.config.xaxis.labels.format);
                      return {
                          dateString: r287,
                          position: t800.position,
                          value: a403,
                          unit: t800.unit,
                          year: t800.year,
                          month: t800.month
                      };
                  });
              }
          },
          {
              key: "removeOverlappingTS",
              value: function(t801) {
                  var e619, i483 = this, a404 = new b(this.ctx), s333 = !1;
                  t801.length > 0 && t801[0].value && t801.every(function(e620) {
                      return e620.value.length === t801[0].value.length;
                  }) && (s333 = !0, e619 = a404.getTextRects(t801[0].value).width);
                  var r288 = 0, o259 = t801.map(function(o260, n222) {
                      if (n222 > 0 && i483.w.config.xaxis.labels.hideOverlappingLabels) {
                          var l190 = s333 ? e619 : a404.getTextRects(t801[r288].value).width, h158 = t801[r288].position;
                          return o260.position > h158 + l190 + 10 ? (r288 = n222, o260) : null;
                      }
                      return o260;
                  });
                  return o259 = o259.filter(function(t802) {
                      return null !== t802;
                  });
              }
          },
          {
              key: "_getYear",
              value: function(t803, e621, i484) {
                  return t803 + Math.floor(e621 / 12) + i484;
              }
          }
      ]), t783;
  }(), Xt = function() {
      function t804(e622, i485) {
          a(this, t804), this.ctx = i485, this.w = i485.w, this.el = e622;
      }
      return r(t804, [
          {
              key: "setupElements",
              value: function() {
                  var t805 = this.w.globals, e623 = this.w.config, i486 = e623.chart.type;
                  t805.axisCharts = [
                      "line",
                      "area",
                      "bar",
                      "rangeBar",
                      "candlestick",
                      "boxPlot",
                      "scatter",
                      "bubble",
                      "radar",
                      "heatmap",
                      "treemap"
                  ].indexOf(i486) > -1, t805.xyCharts = [
                      "line",
                      "area",
                      "bar",
                      "rangeBar",
                      "candlestick",
                      "boxPlot",
                      "scatter",
                      "bubble"
                  ].indexOf(i486) > -1, t805.isBarHorizontal = ("bar" === e623.chart.type || "rangeBar" === e623.chart.type || "boxPlot" === e623.chart.type) && e623.plotOptions.bar.horizontal, t805.chartClass = ".apexcharts" + t805.chartID, t805.dom.baseEl = this.el, t805.dom.elWrap = document.createElement("div"), b.setAttrs(t805.dom.elWrap, {
                      id: t805.chartClass.substring(1),
                      class: "apexcharts-canvas " + t805.chartClass.substring(1)
                  }), this.el.appendChild(t805.dom.elWrap), t805.dom.Paper = new window.SVG.Doc(t805.dom.elWrap), t805.dom.Paper.attr({
                      class: "apexcharts-svg",
                      "xmlns:data": "ApexChartsNS",
                      transform: "translate(".concat(e623.chart.offsetX, ", ").concat(e623.chart.offsetY, ")")
                  }), t805.dom.Paper.node.style.background = e623.chart.background, this.setSVGDimensions(), t805.dom.elGraphical = t805.dom.Paper.group().attr({
                      class: "apexcharts-inner apexcharts-graphical"
                  }), t805.dom.elAnnotations = t805.dom.Paper.group().attr({
                      class: "apexcharts-annotations"
                  }), t805.dom.elDefs = t805.dom.Paper.defs(), t805.dom.elLegendWrap = document.createElement("div"), t805.dom.elLegendWrap.classList.add("apexcharts-legend"), t805.dom.elWrap.appendChild(t805.dom.elLegendWrap), t805.dom.Paper.add(t805.dom.elGraphical), t805.dom.elGraphical.add(t805.dom.elDefs);
              }
          },
          {
              key: "plotChartType",
              value: function(t806, e624) {
                  var i487 = this.w, a405 = i487.config, s334 = i487.globals, r289 = {
                      series: [],
                      i: []
                  }, o261 = {
                      series: [],
                      i: []
                  }, n223 = {
                      series: [],
                      i: []
                  }, l191 = {
                      series: [],
                      i: []
                  }, h159 = {
                      series: [],
                      i: []
                  }, c143 = {
                      series: [],
                      i: []
                  }, d129 = {
                      series: [],
                      i: []
                  };
                  s334.series.map(function(e625, g107) {
                      var u94 = 0;
                      void 0 !== t806[g107].type ? ("column" === t806[g107].type || "bar" === t806[g107].type ? (s334.series.length > 1 && a405.plotOptions.bar.horizontal && console.warn("Horizontal bars are not supported in a mixed/combo chart. Please turn off `plotOptions.bar.horizontal`"), h159.series.push(e625), h159.i.push(g107), u94++, i487.globals.columnSeries = h159.series) : "area" === t806[g107].type ? (o261.series.push(e625), o261.i.push(g107), u94++) : "line" === t806[g107].type ? (r289.series.push(e625), r289.i.push(g107), u94++) : "scatter" === t806[g107].type ? (n223.series.push(e625), n223.i.push(g107)) : "bubble" === t806[g107].type ? (l191.series.push(e625), l191.i.push(g107), u94++) : "candlestick" === t806[g107].type ? (c143.series.push(e625), c143.i.push(g107), u94++) : "boxPlot" === t806[g107].type ? (d129.series.push(e625), d129.i.push(g107), u94++) : console.warn("You have specified an unrecognized chart type. Available types for this property are line/area/column/bar/scatter/bubble"), u94 > 1 && (s334.comboCharts = !0)) : (r289.series.push(e625), r289.i.push(g107));
                  });
                  var g106 = new Pt(this.ctx, e624), u93 = new mt(this.ctx, e624);
                  this.ctx.pie = new At(this.ctx);
                  var p52 = new Ct(this.ctx);
                  this.ctx.rangeBar = new F(this.ctx, e624);
                  var f69 = new St(this.ctx), x56 = [];
                  if (s334.comboCharts) {
                      if (o261.series.length > 0 && x56.push(g106.draw(o261.series, "area", o261.i)), h159.series.length > 0) {
                          if (i487.config.chart.stacked) {
                              var b32 = new vt(this.ctx, e624);
                              x56.push(b32.draw(h159.series, h159.i));
                          } else this.ctx.bar = new E(this.ctx, e624), x56.push(this.ctx.bar.draw(h159.series, h159.i));
                      }
                      if (r289.series.length > 0 && x56.push(g106.draw(r289.series, "line", r289.i)), c143.series.length > 0 && x56.push(u93.draw(c143.series, c143.i)), d129.series.length > 0 && x56.push(u93.draw(d129.series, d129.i)), n223.series.length > 0) {
                          var v57 = new Pt(this.ctx, e624, !0);
                          x56.push(v57.draw(n223.series, "scatter", n223.i));
                      }
                      if (l191.series.length > 0) {
                          var m49 = new Pt(this.ctx, e624, !0);
                          x56.push(m49.draw(l191.series, "bubble", l191.i));
                      }
                  } else switch(a405.chart.type){
                      case "line":
                          x56 = g106.draw(s334.series, "line");
                          break;
                      case "area":
                          x56 = g106.draw(s334.series, "area");
                          break;
                      case "bar":
                          if (a405.chart.stacked) x56 = new vt(this.ctx, e624).draw(s334.series);
                          else this.ctx.bar = new E(this.ctx, e624), x56 = this.ctx.bar.draw(s334.series);
                          break;
                      case "candlestick":
                          x56 = new mt(this.ctx, e624).draw(s334.series);
                          break;
                      case "boxPlot":
                          x56 = new mt(this.ctx, e624).draw(s334.series);
                          break;
                      case "rangeBar":
                          x56 = this.ctx.rangeBar.draw(s334.series);
                          break;
                      case "heatmap":
                          x56 = new wt(this.ctx, e624).draw(s334.series);
                          break;
                      case "treemap":
                          x56 = new It(this.ctx, e624).draw(s334.series);
                          break;
                      case "pie":
                      case "donut":
                      case "polarArea":
                          x56 = this.ctx.pie.draw(s334.series);
                          break;
                      case "radialBar":
                          x56 = p52.draw(s334.series);
                          break;
                      case "radar":
                          x56 = f69.draw(s334.series);
                          break;
                      default:
                          x56 = g106.draw(s334.series);
                  }
                  return x56;
              }
          },
          {
              key: "setSVGDimensions",
              value: function() {
                  var t807 = this.w.globals, e626 = this.w.config;
                  t807.svgWidth = e626.chart.width, t807.svgHeight = e626.chart.height;
                  var i488 = p.getDimensions(this.el), a406 = e626.chart.width.toString().split(/[0-9]+/g).pop();
                  "%" === a406 ? p.isNumber(i488[0]) && (0 === i488[0].width && (i488 = p.getDimensions(this.el.parentNode)), t807.svgWidth = i488[0] * parseInt(e626.chart.width, 10) / 100) : "px" !== a406 && "" !== a406 || (t807.svgWidth = parseInt(e626.chart.width, 10));
                  var s335 = e626.chart.height.toString().split(/[0-9]+/g).pop();
                  if ("auto" !== t807.svgHeight && "" !== t807.svgHeight) {
                      if ("%" === s335) {
                          var r290 = p.getDimensions(this.el.parentNode);
                          t807.svgHeight = r290[1] * parseInt(e626.chart.height, 10) / 100;
                      } else t807.svgHeight = parseInt(e626.chart.height, 10);
                  } else t807.axisCharts ? t807.svgHeight = t807.svgWidth / 1.61 : t807.svgHeight = t807.svgWidth / 1.2;
                  if (t807.svgWidth < 0 && (t807.svgWidth = 0), t807.svgHeight < 0 && (t807.svgHeight = 0), b.setAttrs(t807.dom.Paper.node, {
                      width: t807.svgWidth,
                      height: t807.svgHeight
                  }), "%" !== s335) {
                      var o262 = e626.chart.sparkline.enabled ? 0 : t807.axisCharts ? e626.chart.parentHeightOffset : 0;
                      t807.dom.Paper.node.parentNode.parentNode.style.minHeight = t807.svgHeight + o262 + "px";
                  }
                  t807.dom.elWrap.style.width = t807.svgWidth + "px", t807.dom.elWrap.style.height = t807.svgHeight + "px";
              }
          },
          {
              key: "shiftGraphPosition",
              value: function() {
                  var t808 = this.w.globals, e627 = t808.translateY, i489 = {
                      transform: "translate(" + t808.translateX + ", " + e627 + ")"
                  };
                  b.setAttrs(t808.dom.elGraphical.node, i489);
              }
          },
          {
              key: "resizeNonAxisCharts",
              value: function() {
                  var t809 = this.w, e628 = t809.globals, i490 = 0, a407 = t809.config.chart.sparkline.enabled ? 1 : 15;
                  a407 += t809.config.grid.padding.bottom, "top" !== t809.config.legend.position && "bottom" !== t809.config.legend.position || !t809.config.legend.show || t809.config.legend.floating || (i490 = new lt(this.ctx).legendHelpers.getLegendBBox().clwh + 10);
                  var s336 = t809.globals.dom.baseEl.querySelector(".apexcharts-radialbar, .apexcharts-pie"), r291 = 2.05 * t809.globals.radialSize;
                  if (s336 && !t809.config.chart.sparkline.enabled && 0 !== t809.config.plotOptions.radialBar.startAngle) {
                      var o263 = p.getBoundingClientRect(s336);
                      r291 = o263.bottom;
                      var n224 = o263.bottom - o263.top;
                      r291 = Math.max(2.05 * t809.globals.radialSize, n224);
                  }
                  var l192 = r291 + e628.translateY + i490 + a407;
                  e628.dom.elLegendForeign && e628.dom.elLegendForeign.setAttribute("height", l192), e628.dom.elWrap.style.height = l192 + "px", b.setAttrs(e628.dom.Paper.node, {
                      height: l192
                  }), e628.dom.Paper.node.parentNode.parentNode.style.minHeight = l192 + "px";
              }
          },
          {
              key: "coreCalculations",
              value: function() {
                  new U(this.ctx).init();
              }
          },
          {
              key: "resetGlobals",
              value: function() {
                  var t810 = this, e629 = function() {
                      return t810.w.config.series.map(function(t) {
                          return [];
                      });
                  }, i491 = new D, a408 = this.w.globals;
                  i491.initGlobalVars(a408), a408.seriesXvalues = e629(), a408.seriesYvalues = e629();
              }
          },
          {
              key: "isMultipleY",
              value: function() {
                  if (this.w.config.yaxis.constructor === Array && this.w.config.yaxis.length > 1) return this.w.globals.isMultipleYAxis = !0, !0;
              }
          },
          {
              key: "xySettings",
              value: function() {
                  var t811 = null, e630 = this.w;
                  if (e630.globals.axisCharts) {
                      if ("back" === e630.config.xaxis.crosshairs.position) new Q(this.ctx).drawXCrosshairs();
                      if ("back" === e630.config.yaxis[0].crosshairs.position) new Q(this.ctx).drawYCrosshairs();
                      if ("datetime" === e630.config.xaxis.type && void 0 === e630.config.xaxis.labels.formatter) {
                          this.ctx.timeScale = new zt(this.ctx);
                          var i492 = [];
                          isFinite(e630.globals.minX) && isFinite(e630.globals.maxX) && !e630.globals.isBarHorizontal ? i492 = this.ctx.timeScale.calculateTimeScaleTicks(e630.globals.minX, e630.globals.maxX) : e630.globals.isBarHorizontal && (i492 = this.ctx.timeScale.calculateTimeScaleTicks(e630.globals.minY, e630.globals.maxY)), this.ctx.timeScale.recalcDimensionsBasedOnFormat(i492);
                      }
                      t811 = new y(this.ctx).getCalculatedRatios();
                  }
                  return t811;
              }
          },
          {
              key: "updateSourceChart",
              value: function(t812) {
                  this.ctx.w.globals.selection = void 0, this.ctx.updateHelpers._updateOptions({
                      chart: {
                          selection: {
                              xaxis: {
                                  min: t812.w.globals.minX,
                                  max: t812.w.globals.maxX
                              }
                          }
                      }
                  }, !1, !1);
              }
          },
          {
              key: "setupBrushHandler",
              value: function() {
                  var t813 = this, i493 = this.w;
                  if (i493.config.chart.brush.enabled && "function" != typeof i493.config.chart.events.selection) {
                      var a409 = i493.config.chart.brush.targets || [
                          i493.config.chart.brush.target
                      ];
                      a409.forEach(function(e631) {
                          var i494 = ApexCharts.getChartByID(e631);
                          i494.w.globals.brushSource = t813.ctx, "function" != typeof i494.w.config.chart.events.zoomed && (i494.w.config.chart.events.zoomed = function() {
                              t813.updateSourceChart(i494);
                          }), "function" != typeof i494.w.config.chart.events.scrolled && (i494.w.config.chart.events.scrolled = function() {
                              t813.updateSourceChart(i494);
                          });
                      }), i493.config.chart.events.selection = function(t814, s337) {
                          a409.forEach(function(t815) {
                              var a410 = ApexCharts.getChartByID(t815), r292 = p.clone(i493.config.yaxis);
                              if (i493.config.chart.brush.autoScaleYaxis && 1 === a410.w.globals.series.length) {
                                  var o264 = new j(a410);
                                  r292 = o264.autoScaleY(a410, r292, s337);
                              }
                              var n225 = a410.w.config.yaxis.reduce(function(t816, i, s) {
                                  return [].concat(g(t816), [
                                      e(e({
                                      }, a410.w.config.yaxis[s]), {
                                      }, {
                                          min: r292[0].min,
                                          max: r292[0].max
                                      })
                                  ]);
                              }, []);
                              a410.ctx.updateHelpers._updateOptions({
                                  xaxis: {
                                      min: s337.xaxis.min,
                                      max: s337.xaxis.max
                                  },
                                  yaxis: n225
                              }, !1, !1, !1, !1);
                          });
                      };
                  }
              }
          }
      ]), t804;
  }(), Et = function() {
      function t817(e632) {
          a(this, t817), this.ctx = e632, this.w = e632.w;
      }
      return r(t817, [
          {
              key: "_updateOptions",
              value: function(t818) {
                  var e633 = this, a411 = arguments.length > 1 && void 0 !== arguments[1] && arguments[1], s338 = !(arguments.length > 2 && void 0 !== arguments[2]) || arguments[2], r293 = !(arguments.length > 3 && void 0 !== arguments[3]) || arguments[3], o265 = arguments.length > 4 && void 0 !== arguments[4] && arguments[4];
                  return new Promise(function(n226) {
                      var l193 = [
                          e633.ctx
                      ];
                      r293 && (l193 = e633.ctx.getSyncedCharts()), e633.ctx.w.globals.isExecCalled && (l193 = [
                          e633.ctx
                      ], e633.ctx.w.globals.isExecCalled = !1), l193.forEach(function(r294, h160) {
                          var c144 = r294.w;
                          return c144.globals.shouldAnimate = s338, a411 || (c144.globals.resized = !0, c144.globals.dataChanged = !0, s338 && r294.series.getPreviousPaths()), t818 && "object" === i(t818) && (r294.config = new H(t818), t818 = y.extendArrayProps(r294.config, t818, c144), r294.w.globals.chartID !== e633.ctx.w.globals.chartID && delete t818.series, c144.config = p.extend(c144.config, t818), o265 && (c144.globals.lastXAxis = t818.xaxis ? p.clone(t818.xaxis) : [], c144.globals.lastYAxis = t818.yaxis ? p.clone(t818.yaxis) : [], c144.globals.initialConfig = p.extend({
                          }, c144.config), c144.globals.initialSeries = p.clone(c144.config.series))), r294.update(t818).then(function() {
                              h160 === l193.length - 1 && n226(r294);
                          });
                      });
                  });
              }
          },
          {
              key: "_updateSeries",
              value: function(t819, e634) {
                  var i495 = this, a412 = arguments.length > 2 && void 0 !== arguments[2] && arguments[2];
                  return new Promise(function(s339) {
                      var r295, o266 = i495.w;
                      return o266.globals.shouldAnimate = e634, o266.globals.dataChanged = !0, e634 && i495.ctx.series.getPreviousPaths(), o266.globals.axisCharts ? (0 === (r295 = t819.map(function(t820, e635) {
                          return i495._extendSeries(t820, e635);
                      })).length && (r295 = [
                          {
                              data: []
                          }
                      ]), o266.config.series = r295) : o266.config.series = t819.slice(), a412 && (o266.globals.initialSeries = p.clone(o266.config.series)), i495.ctx.update().then(function() {
                          s339(i495.ctx);
                      });
                  });
              }
          },
          {
              key: "_extendSeries",
              value: function(t821, i) {
                  var a413 = this.w, s340 = a413.config.series[i];
                  return e(e({
                  }, a413.config.series[i]), {
                  }, {
                      name: t821.name ? t821.name : s340 && s340.name,
                      color: t821.color ? t821.color : s340 && s340.color,
                      type: t821.type ? t821.type : s340 && s340.type,
                      data: t821.data ? t821.data : s340 && s340.data
                  });
              }
          },
          {
              key: "toggleDataPointSelection",
              value: function(t822, e636) {
                  var i496 = this.w, a414 = null, s341 = ".apexcharts-series[data\\:realIndex='".concat(t822, "']");
                  return i496.globals.axisCharts ? a414 = i496.globals.dom.Paper.select("".concat(s341, " path[j='").concat(e636, "'], ").concat(s341, " circle[j='").concat(e636, "'], ").concat(s341, " rect[j='").concat(e636, "']")).members[0] : void 0 === e636 && (a414 = i496.globals.dom.Paper.select("".concat(s341, " path[j='").concat(t822, "']")).members[0], "pie" !== i496.config.chart.type && "polarArea" !== i496.config.chart.type && "donut" !== i496.config.chart.type || this.ctx.pie.pieClicked(t822)), a414 ? (new b(this.ctx).pathMouseDown(a414, null), a414.node ? a414.node : null) : (console.warn("toggleDataPointSelection: Element not found"), null);
              }
          },
          {
              key: "forceXAxisUpdate",
              value: function(t823) {
                  var e637 = this.w;
                  if ([
                      "min",
                      "max"
                  ].forEach(function(i) {
                      void 0 !== t823.xaxis[i] && (e637.config.xaxis[i] = t823.xaxis[i], e637.globals.lastXAxis[i] = t823.xaxis[i]);
                  }), t823.xaxis.categories && t823.xaxis.categories.length && (e637.config.xaxis.categories = t823.xaxis.categories), e637.config.xaxis.convertedCatToNumeric) {
                      var i497 = new R(t823);
                      t823 = i497.convertCatToNumericXaxis(t823, this.ctx);
                  }
                  return t823;
              }
          },
          {
              key: "forceYAxisUpdate",
              value: function(t824) {
                  var e638 = this.w;
                  return e638.config.chart.stacked && "100%" === e638.config.chart.stackType && (Array.isArray(t824.yaxis) ? t824.yaxis.forEach(function(e, i) {
                      t824.yaxis[i].min = 0, t824.yaxis[i].max = 100;
                  }) : (t824.yaxis.min = 0, t824.yaxis.max = 100)), t824;
              }
          },
          {
              key: "revertDefaultAxisMinMax",
              value: function(t825) {
                  var e639 = this, i498 = this.w, a415 = i498.globals.lastXAxis, s342 = i498.globals.lastYAxis;
                  t825 && t825.xaxis && (a415 = t825.xaxis), t825 && t825.yaxis && (s342 = t825.yaxis), i498.config.xaxis.min = a415.min, i498.config.xaxis.max = a415.max;
                  var r296 = function(t) {
                      void 0 !== s342[t] && (i498.config.yaxis[t].min = s342[t].min, i498.config.yaxis[t].max = s342[t].max);
                  };
                  i498.config.yaxis.map(function(t826, a416) {
                      i498.globals.zoomed || void 0 !== s342[a416] ? r296(a416) : void 0 !== e639.ctx.opts.yaxis[a416] && (t826.min = e639.ctx.opts.yaxis[a416].min, t826.max = e639.ctx.opts.yaxis[a416].max);
                  });
              }
          }
      ]), t817;
  }();
  Tt = "undefined" != typeof window ? window : void 0, Mt = function(t827, e640) {
      var a417 = (void 0 !== this ? this : t827).SVG = function(t828) {
          if (a417.supported) return t828 = new a417.Doc(t828), a417.parser.draw || a417.prepare(), t828;
      };
      if (a417.ns = "http://www.w3.org/2000/svg", a417.xmlns = "http://www.w3.org/2000/xmlns/", a417.xlink = "http://www.w3.org/1999/xlink", a417.svgjs = "http://svgjs.dev", a417.supported = !0, !a417.supported) return !1;
      a417.did = 1000, a417.eid = function(t829) {
          return "Svgjs" + d130(t829) + a417.did++;
      }, a417.create = function(t830) {
          var i499 = e640.createElementNS(this.ns, t830);
          return i499.setAttribute("id", this.eid(t830)), i499;
      }, a417.extend = function() {
          var t831, e641;
          e641 = (t831 = [].slice.call(arguments)).pop();
          for(var i500 = t831.length - 1; i500 >= 0; i500--)if (t831[i500]) for(var s in e641)t831[i500].prototype[s] = e641[s];
          a417.Set && a417.Set.inherit && a417.Set.inherit();
      }, a417.invent = function(t832) {
          var e642 = "function" == typeof t832.create ? t832.create : function() {
              this.constructor.call(this, a417.create(t832.create));
          };
          return t832.inherit && (e642.prototype = new t832.inherit), t832.extend && a417.extend(e642, t832.extend), t832.construct && a417.extend(t832.parent || a417.Container, t832.construct), e642;
      }, a417.adopt = function(e643) {
          var i501;
          return e643 ? e643.instance ? e643.instance : ((i501 = "svg" == e643.nodeName ? e643.parentNode instanceof t827.SVGElement ? new a417.Nested : new a417.Doc : "linearGradient" == e643.nodeName ? new a417.Gradient("linear") : "radialGradient" == e643.nodeName ? new a417.Gradient("radial") : a417[d130(e643.nodeName)] ? new a417[d130(e643.nodeName)] : new a417.Element(e643)).type = e643.nodeName, i501.node = e643, e643.instance = i501, i501 instanceof a417.Doc && i501.namespace().defs(), i501.setData(JSON.parse(e643.getAttribute("svgjs:data")) || {
          }), i501) : null;
      }, a417.prepare = function() {
          var t833 = e640.getElementsByTagName("body")[0], i502 = (t833 ? new a417.Doc(t833) : a417.adopt(e640.documentElement).nested()).size(2, 0);
          a417.parser = {
              body: t833 || e640.documentElement,
              draw: i502.style("opacity:0;position:absolute;left:-100%;top:-100%;overflow:hidden").node,
              poly: i502.polyline().node,
              path: i502.path().node,
              native: a417.create("svg")
          };
      }, a417.parser = {
          native: a417.create("svg")
      }, e640.addEventListener("DOMContentLoaded", function() {
          a417.parser.draw || a417.prepare();
      }, !1), a417.regex = {
          numberAndUnit: /^([+-]?(\d+(\.\d*)?|\.\d+)(e[+-]?\d+)?)([a-z%]*)$/i,
          hex: /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i,
          rgb: /rgb\((\d+),(\d+),(\d+)\)/,
          reference: /#([a-z0-9\-_]+)/i,
          transforms: /\)\s*,?\s*/,
          whitespace: /\s/g,
          isHex: /^#[a-f0-9]{3,6}$/i,
          isRgb: /^rgb\(/,
          isCss: /[^:]+:[^;]+;?/,
          isBlank: /^(\s+)?$/,
          isNumber: /^[+-]?(\d+(\.\d*)?|\.\d+)(e[+-]?\d+)?$/i,
          isPercent: /^-?[\d\.]+%$/,
          isImage: /\.(jpg|jpeg|png|gif|svg)(\?[^=]+.*)?/i,
          delimiter: /[\s,]+/,
          hyphen: /([^e])\-/gi,
          pathLetters: /[MLHVCSQTAZ]/gi,
          isPathLetter: /[MLHVCSQTAZ]/i,
          numbersWithDots: /((\d?\.\d+(?:e[+-]?\d+)?)((?:\.\d+(?:e[+-]?\d+)?)+))+/gi,
          dots: /\./g
      }, a417.utils = {
          map: function(t834, e644) {
              for(var i503 = t834.length, a418 = [], s344 = 0; s344 < i503; s344++)a418.push(e644(t834[s344]));
              return a418;
          },
          filter: function(t835, e645) {
              for(var i504 = t835.length, a419 = [], s345 = 0; s345 < i504; s345++)e645(t835[s345]) && a419.push(t835[s345]);
              return a419;
          },
          filterSVGElements: function(e646) {
              return this.filter(e646, function(e647) {
                  return e647 instanceof t827.SVGElement;
              });
          }
      }, a417.defaults = {
          attrs: {
              "fill-opacity": 1,
              "stroke-opacity": 1,
              "stroke-width": 0,
              "stroke-linejoin": "miter",
              "stroke-linecap": "butt",
              fill: "#000000",
              stroke: "#000000",
              opacity: 1,
              x: 0,
              y: 0,
              cx: 0,
              cy: 0,
              width: 0,
              height: 0,
              r: 0,
              rx: 0,
              ry: 0,
              offset: 0,
              "stop-opacity": 1,
              "stop-color": "#000000",
              "font-size": 16,
              "font-family": "Helvetica, Arial, sans-serif",
              "text-anchor": "start"
          }
      }, a417.Color = function(t836) {
          var e648, s346;
          this.r = 0, this.g = 0, this.b = 0, t836 && ("string" == typeof t836 ? a417.regex.isRgb.test(t836) ? (e648 = a417.regex.rgb.exec(t836.replace(a417.regex.whitespace, "")), this.r = parseInt(e648[1]), this.g = parseInt(e648[2]), this.b = parseInt(e648[3])) : a417.regex.isHex.test(t836) && (e648 = a417.regex.hex.exec(4 == (s346 = t836).length ? [
              "#",
              s346.substring(1, 2),
              s346.substring(1, 2),
              s346.substring(2, 3),
              s346.substring(2, 3),
              s346.substring(3, 4),
              s346.substring(3, 4)
          ].join("") : s346), this.r = parseInt(e648[1], 16), this.g = parseInt(e648[2], 16), this.b = parseInt(e648[3], 16)) : "object" === i(t836) && (this.r = t836.r, this.g = t836.g, this.b = t836.b));
      }, a417.extend(a417.Color, {
          toString: function() {
              return this.toHex();
          },
          toHex: function() {
              return "#" + g108(this.r) + g108(this.g) + g108(this.b);
          },
          toRgb: function() {
              return "rgb(" + [
                  this.r,
                  this.g,
                  this.b
              ].join() + ")";
          },
          brightness: function() {
              return this.r / 255 * 0.3 + this.g / 255 * 0.59 + this.b / 255 * 0.11;
          },
          morph: function(t837) {
              return this.destination = new a417.Color(t837), this;
          },
          at: function(t838) {
              return this.destination ? (t838 = t838 < 0 ? 0 : t838 > 1 ? 1 : t838, new a417.Color({
                  r: ~~(this.r + (this.destination.r - this.r) * t838),
                  g: ~~(this.g + (this.destination.g - this.g) * t838),
                  b: ~~(this.b + (this.destination.b - this.b) * t838)
              })) : this;
          }
      }), a417.Color.test = function(t839) {
          return t839 += "", a417.regex.isHex.test(t839) || a417.regex.isRgb.test(t839);
      }, a417.Color.isRgb = function(t840) {
          return t840 && "number" == typeof t840.r && "number" == typeof t840.g && "number" == typeof t840.b;
      }, a417.Color.isColor = function(t841) {
          return a417.Color.isRgb(t841) || a417.Color.test(t841);
      }, a417.Array = function(t842, e649) {
          0 == (t842 = (t842 || []).valueOf()).length && e649 && (t842 = e649.valueOf()), this.value = this.parse(t842);
      }, a417.extend(a417.Array, {
          toString: function() {
              return this.value.join(" ");
          },
          valueOf: function() {
              return this.value;
          },
          parse: function(t843) {
              return t843 = t843.valueOf(), Array.isArray(t843) ? t843 : this.split(t843);
          }
      }), a417.PointArray = function(t844, e650) {
          a417.Array.call(this, t844, e650 || [
              [
                  0,
                  0
              ]
          ]);
      }, a417.PointArray.prototype = new a417.Array, a417.PointArray.prototype.constructor = a417.PointArray;
      for(var s343 = {
          M: function(t845, e651, i505) {
              return e651.x = i505.x = t845[0], e651.y = i505.y = t845[1], [
                  "M",
                  e651.x,
                  e651.y
              ];
          },
          L: function(t846, e652) {
              return e652.x = t846[0], e652.y = t846[1], [
                  "L",
                  t846[0],
                  t846[1]
              ];
          },
          H: function(t847, e653) {
              return e653.x = t847[0], [
                  "H",
                  t847[0]
              ];
          },
          V: function(t848, e654) {
              return e654.y = t848[0], [
                  "V",
                  t848[0]
              ];
          },
          C: function(t849, e655) {
              return e655.x = t849[4], e655.y = t849[5], [
                  "C",
                  t849[0],
                  t849[1],
                  t849[2],
                  t849[3],
                  t849[4],
                  t849[5]
              ];
          },
          Q: function(t850, e656) {
              return e656.x = t850[2], e656.y = t850[3], [
                  "Q",
                  t850[0],
                  t850[1],
                  t850[2],
                  t850[3]
              ];
          },
          Z: function(t, e657, i506) {
              return e657.x = i506.x, e657.y = i506.y, [
                  "Z"
              ];
          }
      }, r297 = "mlhvqtcsaz".split(""), o267 = 0, n227 = r297.length; o267 < n227; ++o267)s343[r297[o267]] = (function(t851) {
          return function(e658, i507, a420) {
              if ("H" == t851) e658[0] = e658[0] + i507.x;
              else if ("V" == t851) e658[0] = e658[0] + i507.y;
              else if ("A" == t851) e658[5] = e658[5] + i507.x, e658[6] = e658[6] + i507.y;
              else for(var r298 = 0, o268 = e658.length; r298 < o268; ++r298)e658[r298] = e658[r298] + (r298 % 2 ? i507.y : i507.x);
              if (s343 && "function" == typeof s343[t851]) return s343[t851](e658, i507, a420);
          };
      })(r297[o267].toUpperCase());
      a417.PathArray = function(t852, e659) {
          a417.Array.call(this, t852, e659 || [
              [
                  "M",
                  0,
                  0
              ]
          ]);
      }, a417.PathArray.prototype = new a417.Array, a417.PathArray.prototype.constructor = a417.PathArray, a417.extend(a417.PathArray, {
          toString: function() {
              return (function(t853) {
                  for(var e660 = 0, i508 = t853.length, a421 = ""; e660 < i508; e660++)a421 += t853[e660][0], null != t853[e660][1] && (a421 += t853[e660][1], null != t853[e660][2] && (a421 += " ", a421 += t853[e660][2], null != t853[e660][3] && (a421 += " ", a421 += t853[e660][3], a421 += " ", a421 += t853[e660][4], null != t853[e660][5] && (a421 += " ", a421 += t853[e660][5], a421 += " ", a421 += t853[e660][6], null != t853[e660][7] && (a421 += " ", a421 += t853[e660][7])))));
                  return a421 + " ";
              })(this.value);
          },
          move: function(t, e) {
              var i509 = this.bbox();
              return i509.x, i509.y, this;
          },
          at: function(t854) {
              if (!this.destination) return this;
              for(var e661 = this.value, i510 = this.destination.value, s347 = [], r299 = new a417.PathArray, o269 = 0, n228 = e661.length; o269 < n228; o269++){
                  s347[o269] = [
                      e661[o269][0]
                  ];
                  for(var l195 = 1, h162 = e661[o269].length; l195 < h162; l195++)s347[o269][l195] = e661[o269][l195] + (i510[o269][l195] - e661[o269][l195]) * t854;
                  "A" === s347[o269][0] && (s347[o269][4] = +(0 != s347[o269][4]), s347[o269][5] = +(0 != s347[o269][5]));
              }
              return r299.value = s347, r299;
          },
          parse: function(t855) {
              if (t855 instanceof a417.PathArray) return t855.valueOf();
              var e662, i511 = {
                  M: 2,
                  L: 2,
                  H: 1,
                  V: 1,
                  C: 6,
                  S: 4,
                  Q: 4,
                  T: 2,
                  A: 7,
                  Z: 0
              };
              t855 = "string" == typeof t855 ? t855.replace(a417.regex.numbersWithDots, h161).replace(a417.regex.pathLetters, " $& ").replace(a417.regex.hyphen, "$1 -").trim().split(a417.regex.delimiter) : t855.reduce(function(t856, e663) {
                  return [].concat.call(t856, e663);
              }, []);
              var r300 = [], o270 = new a417.Point, n229 = new a417.Point, l196 = 0, c146 = t855.length;
              do a417.regex.isPathLetter.test(t855[l196]) ? (e662 = t855[l196], ++l196) : "M" == e662 ? e662 = "L" : "m" == e662 && (e662 = "l"), r300.push(s343[e662].call(null, t855.slice(l196, l196 += i511[e662.toUpperCase()]).map(parseFloat), o270, n229));
              while (c146 > l196)
              return r300;
          },
          bbox: function() {
              return a417.parser.draw || a417.prepare(), a417.parser.path.setAttribute("d", this.toString()), a417.parser.path.getBBox();
          }
      }), a417.Number = a417.invent({
          create: function(t857, e664) {
              this.value = 0, this.unit = e664 || "", "number" == typeof t857 ? this.value = isNaN(t857) ? 0 : isFinite(t857) ? t857 : t857 < 0 ? -340000000000000000000000000000000000000 : 340000000000000000000000000000000000000 : "string" == typeof t857 ? (e664 = t857.match(a417.regex.numberAndUnit)) && (this.value = parseFloat(e664[1]), "%" == e664[5] ? this.value /= 100 : "s" == e664[5] && (this.value *= 1000), this.unit = e664[5]) : t857 instanceof a417.Number && (this.value = t857.valueOf(), this.unit = t857.unit);
          },
          extend: {
              toString: function() {
                  return ("%" == this.unit ? ~~(100000000 * this.value) / 1000000 : "s" == this.unit ? this.value / 1000 : this.value) + this.unit;
              },
              toJSON: function() {
                  return this.toString();
              },
              valueOf: function() {
                  return this.value;
              },
              plus: function(t858) {
                  return t858 = new a417.Number(t858), new a417.Number(this + t858, this.unit || t858.unit);
              },
              minus: function(t859) {
                  return t859 = new a417.Number(t859), new a417.Number(this - t859, this.unit || t859.unit);
              },
              times: function(t860) {
                  return t860 = new a417.Number(t860), new a417.Number(this * t860, this.unit || t860.unit);
              },
              divide: function(t861) {
                  return t861 = new a417.Number(t861), new a417.Number(this / t861, this.unit || t861.unit);
              },
              to: function(t862) {
                  var e665 = new a417.Number(this);
                  return "string" == typeof t862 && (e665.unit = t862), e665;
              },
              morph: function(t863) {
                  return this.destination = new a417.Number(t863), t863.relative && (this.destination.value += this.value), this;
              },
              at: function(t864) {
                  return this.destination ? new a417.Number(this.destination).minus(this).times(t864).plus(this) : this;
              }
          }
      }), a417.Element = a417.invent({
          create: function(t865) {
              this._stroke = a417.defaults.attrs.stroke, this._event = null, this.dom = {
              }, (this.node = t865) && (this.type = t865.nodeName, this.node.instance = this, this._stroke = t865.getAttribute("stroke") || this._stroke);
          },
          extend: {
              x: function(t866) {
                  return this.attr("x", t866);
              },
              y: function(t867) {
                  return this.attr("y", t867);
              },
              cx: function(t868) {
                  return null == t868 ? this.x() + this.width() / 2 : this.x(t868 - this.width() / 2);
              },
              cy: function(t869) {
                  return null == t869 ? this.y() + this.height() / 2 : this.y(t869 - this.height() / 2);
              },
              move: function(t870, e666) {
                  return this.x(t870).y(e666);
              },
              center: function(t871, e667) {
                  return this.cx(t871).cy(e667);
              },
              width: function(t872) {
                  return this.attr("width", t872);
              },
              height: function(t873) {
                  return this.attr("height", t873);
              },
              size: function(t874, e668) {
                  var i512 = u95(this, t874, e668);
                  return this.width(new a417.Number(i512.width)).height(new a417.Number(i512.height));
              },
              clone: function(t875) {
                  this.writeDataToDom();
                  var e669 = x57(this.node.cloneNode(!0));
                  return t875 ? t875.add(e669) : this.after(e669), e669;
              },
              remove: function() {
                  return this.parent() && this.parent().removeElement(this), this;
              },
              replace: function(t876) {
                  return this.after(t876).remove(), t876;
              },
              addTo: function(t877) {
                  return t877.put(this);
              },
              putIn: function(t878) {
                  return t878.add(this);
              },
              id: function(t879) {
                  return this.attr("id", t879);
              },
              show: function() {
                  return this.style("display", "");
              },
              hide: function() {
                  return this.style("display", "none");
              },
              visible: function() {
                  return "none" != this.style("display");
              },
              toString: function() {
                  return this.attr("id");
              },
              classes: function() {
                  var t880 = this.attr("class");
                  return null == t880 ? [] : t880.trim().split(a417.regex.delimiter);
              },
              hasClass: function(t881) {
                  return -1 != this.classes().indexOf(t881);
              },
              addClass: function(t882) {
                  if (!this.hasClass(t882)) {
                      var e670 = this.classes();
                      e670.push(t882), this.attr("class", e670.join(" "));
                  }
                  return this;
              },
              removeClass: function(t883) {
                  return this.hasClass(t883) && this.attr("class", this.classes().filter(function(e671) {
                      return e671 != t883;
                  }).join(" ")), this;
              },
              toggleClass: function(t884) {
                  return this.hasClass(t884) ? this.removeClass(t884) : this.addClass(t884);
              },
              reference: function(t885) {
                  return a417.get(this.attr(t885));
              },
              parent: function(e672) {
                  var i513 = this;
                  if (!i513.node.parentNode) return null;
                  if (i513 = a417.adopt(i513.node.parentNode), !e672) return i513;
                  for(; i513 && i513.node instanceof t827.SVGElement;){
                      if ("string" == typeof e672 ? i513.matches(e672) : i513 instanceof e672) return i513;
                      if (!i513.node.parentNode || "#document" == i513.node.parentNode.nodeName) return null;
                      i513 = a417.adopt(i513.node.parentNode);
                  }
              },
              doc: function() {
                  return this instanceof a417.Doc ? this : this.parent(a417.Doc);
              },
              parents: function(t886) {
                  var e673 = [], i514 = this;
                  do {
                      if (!(i514 = i514.parent(t886)) || !i514.node) break;
                      e673.push(i514);
                  }while (i514.parent)
                  return e673;
              },
              matches: function(t887) {
                  return (function(t888, e674) {
                      return (t888.matches || t888.matchesSelector || t888.msMatchesSelector || t888.mozMatchesSelector || t888.webkitMatchesSelector || t888.oMatchesSelector).call(t888, e674);
                  })(this.node, t887);
              },
              native: function() {
                  return this.node;
              },
              svg: function(t889) {
                  var i515 = e640.createElement("svg");
                  if (!(t889 && this instanceof a417.Parent)) return i515.appendChild(t889 = e640.createElement("svg")), this.writeDataToDom(), t889.appendChild(this.node.cloneNode(!0)), i515.innerHTML.replace(/^<svg>/, "").replace(/<\/svg>$/, "");
                  i515.innerHTML = "<svg>" + t889.replace(/\n/, "").replace(/<([\w:-]+)([^<]+?)\/>/g, "<$1$2></$1>") + "</svg>";
                  for(var s348 = 0, r301 = i515.firstChild.childNodes.length; s348 < r301; s348++)this.node.appendChild(i515.firstChild.firstChild);
                  return this;
              },
              writeDataToDom: function() {
                  return (this.each || this.lines) && (this.each ? this : this.lines()).each(function() {
                      this.writeDataToDom();
                  }), this.node.removeAttribute("svgjs:data"), Object.keys(this.dom).length && this.node.setAttribute("svgjs:data", JSON.stringify(this.dom)), this;
              },
              setData: function(t890) {
                  return this.dom = t890, this;
              },
              is: function(t891) {
                  return (function(t892, e675) {
                      return t892 instanceof e675;
                  })(this, t891);
              }
          }
      }), a417.easing = {
          "-": function(t893) {
              return t893;
          },
          "<>": function(t894) {
              return -Math.cos(t894 * Math.PI) / 2 + 0.5;
          },
          ">": function(t895) {
              return Math.sin(t895 * Math.PI / 2);
          },
          "<": function(t896) {
              return 1 - Math.cos(t896 * Math.PI / 2);
          }
      }, a417.morph = function(t897) {
          return function(e676, i516) {
              return new a417.MorphObj(e676, i516).at(t897);
          };
      }, a417.Situation = a417.invent({
          create: function(t898) {
              this.init = !1, this.reversed = !1, this.reversing = !1, this.duration = new a417.Number(t898.duration).valueOf(), this.delay = new a417.Number(t898.delay).valueOf(), this.start = +new Date + this.delay, this.finish = this.start + this.duration, this.ease = t898.ease, this.loop = 0, this.loops = !1, this.animations = {
              }, this.attrs = {
              }, this.styles = {
              }, this.transforms = [], this.once = {
              };
          }
      }), a417.FX = a417.invent({
          create: function(t899) {
              this._target = t899, this.situations = [], this.active = !1, this.situation = null, this.paused = !1, this.lastPos = 0, this.pos = 0, this.absPos = 0, this._speed = 1;
          },
          extend: {
              animate: function(t900, e677, s349) {
                  "object" === i(t900) && (e677 = t900.ease, s349 = t900.delay, t900 = t900.duration);
                  var r302 = new a417.Situation({
                      duration: t900 || 1000,
                      delay: s349 || 0,
                      ease: a417.easing[e677 || "-"] || e677
                  });
                  return this.queue(r302), this;
              },
              target: function(t901) {
                  return t901 && t901 instanceof a417.Element ? (this._target = t901, this) : this._target;
              },
              timeToAbsPos: function(t902) {
                  return (t902 - this.situation.start) / (this.situation.duration / this._speed);
              },
              absPosToTime: function(t903) {
                  return this.situation.duration / this._speed * t903 + this.situation.start;
              },
              startAnimFrame: function() {
                  this.stopAnimFrame(), this.animationFrame = t827.requestAnimationFrame((function() {
                      this.step();
                  }).bind(this));
              },
              stopAnimFrame: function() {
                  t827.cancelAnimationFrame(this.animationFrame);
              },
              start: function() {
                  return !this.active && this.situation && (this.active = !0, this.startCurrent()), this;
              },
              startCurrent: function() {
                  return this.situation.start = +new Date + this.situation.delay / this._speed, this.situation.finish = this.situation.start + this.situation.duration / this._speed, this.initAnimations().step();
              },
              queue: function(t904) {
                  return ("function" == typeof t904 || t904 instanceof a417.Situation) && this.situations.push(t904), this.situation || (this.situation = this.situations.shift()), this;
              },
              dequeue: function() {
                  return this.stop(), this.situation = this.situations.shift(), this.situation && (this.situation instanceof a417.Situation ? this.start() : this.situation.call(this)), this;
              },
              initAnimations: function() {
                  var t905, e678 = this.situation;
                  if (e678.init) return this;
                  for(var i517 in e678.animations){
                      t905 = this.target()[i517](), Array.isArray(t905) || (t905 = [
                          t905
                      ]), Array.isArray(e678.animations[i517]) || (e678.animations[i517] = [
                          e678.animations[i517]
                      ]);
                      for(var s350 = t905.length; s350--;)e678.animations[i517][s350] instanceof a417.Number && (t905[s350] = new a417.Number(t905[s350])), e678.animations[i517][s350] = t905[s350].morph(e678.animations[i517][s350]);
                  }
                  for(var i517 in e678.attrs)e678.attrs[i517] = new a417.MorphObj(this.target().attr(i517), e678.attrs[i517]);
                  for(var i517 in e678.styles)e678.styles[i517] = new a417.MorphObj(this.target().style(i517), e678.styles[i517]);
                  return e678.initialTransformation = this.target().matrixify(), e678.init = !0, this;
              },
              clearQueue: function() {
                  return this.situations = [], this;
              },
              clearCurrent: function() {
                  return this.situation = null, this;
              },
              stop: function(t906, e679) {
                  var i518 = this.active;
                  return this.active = !1, e679 && this.clearQueue(), t906 && this.situation && (!i518 && this.startCurrent(), this.atEnd()), this.stopAnimFrame(), this.clearCurrent();
              },
              after: function(t907) {
                  var e680 = this.last();
                  return this.target().on("finished.fx", function i519(a422) {
                      a422.detail.situation == e680 && (t907.call(this, e680), this.off("finished.fx", i519));
                  }), this._callStart();
              },
              during: function(t908) {
                  var e681 = this.last(), i520 = function(i521) {
                      i521.detail.situation == e681 && t908.call(this, i521.detail.pos, a417.morph(i521.detail.pos), i521.detail.eased, e681);
                  };
                  return this.target().off("during.fx", i520).on("during.fx", i520), this.after(function() {
                      this.off("during.fx", i520);
                  }), this._callStart();
              },
              afterAll: function(t909) {
                  var e682 = function e683(i) {
                      t909.call(this), this.off("allfinished.fx", e683);
                  };
                  return this.target().off("allfinished.fx", e682).on("allfinished.fx", e682), this._callStart();
              },
              last: function() {
                  return this.situations.length ? this.situations[this.situations.length - 1] : this.situation;
              },
              add: function(t, e684, i) {
                  return this.last()[i || "animations"][t] = e684, this._callStart();
              },
              step: function(t910) {
                  var e685, i522, a423;
                  t910 || (this.absPos = this.timeToAbsPos(+new Date)), !1 !== this.situation.loops ? (e685 = Math.max(this.absPos, 0), i522 = Math.floor(e685), !0 === this.situation.loops || i522 < this.situation.loops ? (this.pos = e685 - i522, a423 = this.situation.loop, this.situation.loop = i522) : (this.absPos = this.situation.loops, this.pos = 1, a423 = this.situation.loop - 1, this.situation.loop = this.situation.loops), this.situation.reversing && (this.situation.reversed = this.situation.reversed != Boolean((this.situation.loop - a423) % 2))) : (this.absPos = Math.min(this.absPos, 1), this.pos = this.absPos), this.pos < 0 && (this.pos = 0), this.situation.reversed && (this.pos = 1 - this.pos);
                  var s351 = this.situation.ease(this.pos);
                  for(var r303 in this.situation.once)r303 > this.lastPos && r303 <= s351 && (this.situation.once[r303].call(this.target(), this.pos, s351), delete this.situation.once[r303]);
                  return this.active && this.target().fire("during", {
                      pos: this.pos,
                      eased: s351,
                      fx: this,
                      situation: this.situation
                  }), this.situation ? (this.eachAt(), 1 == this.pos && !this.situation.reversed || this.situation.reversed && 0 == this.pos ? (this.stopAnimFrame(), this.target().fire("finished", {
                      fx: this,
                      situation: this.situation
                  }), this.situations.length || (this.target().fire("allfinished"), this.situations.length || (this.target().off(".fx"), this.active = !1)), this.active ? this.dequeue() : this.clearCurrent()) : !this.paused && this.active && this.startAnimFrame(), this.lastPos = s351, this) : this;
              },
              eachAt: function() {
                  var t911, e686 = this, i523 = this.target(), s352 = this.situation;
                  for(var r304 in s352.animations)t911 = [].concat(s352.animations[r304]).map(function(t912) {
                      return "string" != typeof t912 && t912.at ? t912.at(s352.ease(e686.pos), e686.pos) : t912;
                  }), i523[r304].apply(i523, t911);
                  for(var r304 in s352.attrs)t911 = [
                      r304
                  ].concat(s352.attrs[r304]).map(function(t913) {
                      return "string" != typeof t913 && t913.at ? t913.at(s352.ease(e686.pos), e686.pos) : t913;
                  }), i523.attr.apply(i523, t911);
                  for(var r304 in s352.styles)t911 = [
                      r304
                  ].concat(s352.styles[r304]).map(function(t914) {
                      return "string" != typeof t914 && t914.at ? t914.at(s352.ease(e686.pos), e686.pos) : t914;
                  }), i523.style.apply(i523, t911);
                  if (s352.transforms.length) {
                      t911 = s352.initialTransformation, r304 = 0;
                      for(var o271 = s352.transforms.length; r304 < o271; r304++){
                          var n230 = s352.transforms[r304];
                          n230 instanceof a417.Matrix ? t911 = n230.relative ? t911.multiply((new a417.Matrix).morph(n230).at(s352.ease(this.pos))) : t911.morph(n230).at(s352.ease(this.pos)) : (n230.relative || n230.undo(t911.extract()), t911 = t911.multiply(n230.at(s352.ease(this.pos))));
                      }
                      i523.matrix(t911);
                  }
                  return this;
              },
              once: function(t915, e687, i524) {
                  var a424 = this.last();
                  return i524 || (t915 = a424.ease(t915)), a424.once[t915] = e687, this;
              },
              _callStart: function() {
                  return setTimeout((function() {
                      this.start();
                  }).bind(this), 0), this;
              }
          },
          parent: a417.Element,
          construct: {
              animate: function(t916, e688, i525) {
                  return (this.fx || (this.fx = new a417.FX(this))).animate(t916, e688, i525);
              },
              delay: function(t917) {
                  return (this.fx || (this.fx = new a417.FX(this))).delay(t917);
              },
              stop: function(t918, e689) {
                  return this.fx && this.fx.stop(t918, e689), this;
              },
              finish: function() {
                  return this.fx && this.fx.finish(), this;
              }
          }
      }), a417.MorphObj = a417.invent({
          create: function(t919, e690) {
              return a417.Color.isColor(e690) ? new a417.Color(t919).morph(e690) : a417.regex.delimiter.test(t919) ? a417.regex.pathLetters.test(t919) ? new a417.PathArray(t919).morph(e690) : new a417.Array(t919).morph(e690) : a417.regex.numberAndUnit.test(e690) ? new a417.Number(t919).morph(e690) : (this.value = t919, void (this.destination = e690));
          },
          extend: {
              at: function(t, e691) {
                  return e691 < 1 ? this.value : this.destination;
              },
              valueOf: function() {
                  return this.value;
              }
          }
      }), a417.extend(a417.FX, {
          attr: function(t920, e692, a) {
              if ("object" === i(t920)) for(var s353 in t920)this.attr(s353, t920[s353]);
              else this.add(t920, e692, "attrs");
              return this;
          },
          plot: function(t921, e693, i526, a425) {
              return 4 == arguments.length ? this.plot([
                  t921,
                  e693,
                  i526,
                  a425
              ]) : this.add("plot", new (this.target()).morphArray(t921));
          }
      }), a417.Box = a417.invent({
          create: function(t922, e694, s354, r305) {
              if (!("object" !== i(t922) || t922 instanceof a417.Element)) return a417.Box.call(this, null != t922.left ? t922.left : t922.x, null != t922.top ? t922.top : t922.y, t922.width, t922.height);
              4 == arguments.length && (this.x = t922, this.y = e694, this.width = s354, this.height = r305), b33(this);
          }
      }), a417.BBox = a417.invent({
          create: function(t923) {
              if (a417.Box.apply(this, [].slice.call(arguments)), t923 instanceof a417.Element) {
                  var i527;
                  try {
                      if (!e640.documentElement.contains) {
                          for(var s355 = t923.node; s355.parentNode;)s355 = s355.parentNode;
                          if (s355 != e640) throw new Error("Element not in the dom");
                      }
                      i527 = t923.node.getBBox();
                  } catch (e) {
                      if (t923 instanceof a417.Shape) {
                          a417.parser.draw || a417.prepare();
                          var r306 = t923.clone(a417.parser.draw.instance).show();
                          r306 && r306.node && "function" == typeof r306.node.getBBox && (i527 = r306.node.getBBox()), r306 && "function" == typeof r306.remove && r306.remove();
                      } else i527 = {
                          x: t923.node.clientLeft,
                          y: t923.node.clientTop,
                          width: t923.node.clientWidth,
                          height: t923.node.clientHeight
                      };
                  }
                  a417.Box.call(this, i527);
              }
          },
          inherit: a417.Box,
          parent: a417.Element,
          construct: {
              bbox: function() {
                  return new a417.BBox(this);
              }
          }
      }), a417.BBox.prototype.constructor = a417.BBox, a417.Matrix = a417.invent({
          create: function(t924) {
              var e695 = f70([
                  1,
                  0,
                  0,
                  1,
                  0,
                  0
              ]);
              t924 = null === t924 ? e695 : t924 instanceof a417.Element ? t924.matrixify() : "string" == typeof t924 ? f70(t924.split(a417.regex.delimiter).map(parseFloat)) : 6 == arguments.length ? f70([].slice.call(arguments)) : Array.isArray(t924) ? f70(t924) : t924 && "object" === i(t924) ? t924 : e695;
              for(var s356 = m50.length - 1; s356 >= 0; --s356)this[m50[s356]] = null != t924[m50[s356]] ? t924[m50[s356]] : e695[m50[s356]];
          },
          extend: {
              extract: function() {
                  var t925 = p53(this, 0, 1);
                  p53(this, 1, 0);
                  var e696 = 180 / Math.PI * Math.atan2(t925.y, t925.x) - 90;
                  return {
                      x: this.e,
                      y: this.f,
                      transformedX: (this.e * Math.cos(e696 * Math.PI / 180) + this.f * Math.sin(e696 * Math.PI / 180)) / Math.sqrt(this.a * this.a + this.b * this.b),
                      transformedY: (this.f * Math.cos(e696 * Math.PI / 180) + this.e * Math.sin(-e696 * Math.PI / 180)) / Math.sqrt(this.c * this.c + this.d * this.d),
                      rotation: e696,
                      a: this.a,
                      b: this.b,
                      c: this.c,
                      d: this.d,
                      e: this.e,
                      f: this.f,
                      matrix: new a417.Matrix(this)
                  };
              },
              clone: function() {
                  return new a417.Matrix(this);
              },
              morph: function(t926) {
                  return this.destination = new a417.Matrix(t926), this;
              },
              multiply: function(t927) {
                  return new a417.Matrix(this.native().multiply((function(t928) {
                      return t928 instanceof a417.Matrix || (t928 = new a417.Matrix(t928)), t928;
                  })(t927).native()));
              },
              inverse: function() {
                  return new a417.Matrix(this.native().inverse());
              },
              translate: function(t929, e697) {
                  return new a417.Matrix(this.native().translate(t929 || 0, e697 || 0));
              },
              native: function() {
                  for(var t930 = a417.parser.native.createSVGMatrix(), e698 = m50.length - 1; e698 >= 0; e698--)t930[m50[e698]] = this[m50[e698]];
                  return t930;
              },
              toString: function() {
                  return "matrix(" + v58(this.a) + "," + v58(this.b) + "," + v58(this.c) + "," + v58(this.d) + "," + v58(this.e) + "," + v58(this.f) + ")";
              }
          },
          parent: a417.Element,
          construct: {
              ctm: function() {
                  return new a417.Matrix(this.node.getCTM());
              },
              screenCTM: function() {
                  if (this instanceof a417.Nested) {
                      var t931 = this.rect(1, 1), e699 = t931.node.getScreenCTM();
                      return t931.remove(), new a417.Matrix(e699);
                  }
                  return new a417.Matrix(this.node.getScreenCTM());
              }
          }
      }), a417.Point = a417.invent({
          create: function(t932, e700) {
              var a426;
              a426 = Array.isArray(t932) ? {
                  x: t932[0],
                  y: t932[1]
              } : "object" === i(t932) ? {
                  x: t932.x,
                  y: t932.y
              } : null != t932 ? {
                  x: t932,
                  y: null != e700 ? e700 : t932
              } : {
                  x: 0,
                  y: 0
              }, this.x = a426.x, this.y = a426.y;
          },
          extend: {
              clone: function() {
                  return new a417.Point(this);
              },
              morph: function(t933, e701) {
                  return this.destination = new a417.Point(t933, e701), this;
              }
          }
      }), a417.extend(a417.Element, {
          point: function(t934, e702) {
              return new a417.Point(t934, e702).transform(this.screenCTM().inverse());
          }
      }), a417.extend(a417.Element, {
          attr: function(t935, e703, s357) {
              if (null == t935) {
                  for(t935 = {
                  }, s357 = (e703 = this.node.attributes).length - 1; s357 >= 0; s357--)t935[e703[s357].nodeName] = a417.regex.isNumber.test(e703[s357].nodeValue) ? parseFloat(e703[s357].nodeValue) : e703[s357].nodeValue;
                  return t935;
              }
              if ("object" === i(t935)) for(var r307 in t935)this.attr(r307, t935[r307]);
              else if (null === e703) this.node.removeAttribute(t935);
              else {
                  if (null == e703) return null == (e703 = this.node.getAttribute(t935)) ? a417.defaults.attrs[t935] : a417.regex.isNumber.test(e703) ? parseFloat(e703) : e703;
                  "stroke-width" == t935 ? this.attr("stroke", parseFloat(e703) > 0 ? this._stroke : null) : "stroke" == t935 && (this._stroke = e703), "fill" != t935 && "stroke" != t935 || (a417.regex.isImage.test(e703) && (e703 = this.doc().defs().image(e703, 0, 0)), e703 instanceof a417.Image && (e703 = this.doc().defs().pattern(0, 0, function() {
                      this.add(e703);
                  }))), "number" == typeof e703 ? e703 = new a417.Number(e703) : a417.Color.isColor(e703) ? e703 = new a417.Color(e703) : Array.isArray(e703) && (e703 = new a417.Array(e703)), "leading" == t935 ? this.leading && this.leading(e703) : "string" == typeof s357 ? this.node.setAttributeNS(s357, t935, e703.toString()) : this.node.setAttribute(t935, e703.toString()), !this.rebuild || "font-size" != t935 && "x" != t935 || this.rebuild(t935, e703);
              }
              return this;
          }
      }), a417.extend(a417.Element, {
          transform: function(t936, e704) {
              var s358;
              return "object" !== i(t936) ? (s358 = new a417.Matrix(this).extract(), "string" == typeof t936 ? s358[t936] : s358) : (s358 = new a417.Matrix(this), e704 = !!e704 || !!t936.relative, null != t936.a && (s358 = e704 ? s358.multiply(new a417.Matrix(t936)) : new a417.Matrix(t936)), this.attr("transform", s358));
          }
      }), a417.extend(a417.Element, {
          untransform: function() {
              return this.attr("transform", null);
          },
          matrixify: function() {
              return (this.attr("transform") || "").split(a417.regex.transforms).slice(0, -1).map(function(t937) {
                  var e705 = t937.trim().split("(");
                  return [
                      e705[0],
                      e705[1].split(a417.regex.delimiter).map(function(t938) {
                          return parseFloat(t938);
                      })
                  ];
              }).reduce(function(t939, e706) {
                  return "matrix" == e706[0] ? t939.multiply(f70(e706[1])) : t939[e706[0]].apply(t939, e706[1]);
              }, new a417.Matrix);
          },
          toParent: function(t940) {
              if (this == t940) return this;
              var e707 = this.screenCTM(), i528 = t940.screenCTM().inverse();
              return this.addTo(t940).untransform().transform(i528.multiply(e707)), this;
          },
          toDoc: function() {
              return this.toParent(this.doc());
          }
      }), a417.Transformation = a417.invent({
          create: function(t941, e708) {
              if (arguments.length > 1 && "boolean" != typeof e708) return this.constructor.call(this, [].slice.call(arguments));
              if (Array.isArray(t941)) for(var a427 = 0, s359 = this.arguments.length; a427 < s359; ++a427)this[this.arguments[a427]] = t941[a427];
              else if (t941 && "object" === i(t941)) for(a427 = 0, s359 = this.arguments.length; a427 < s359; ++a427)this[this.arguments[a427]] = t941[this.arguments[a427]];
              this.inversed = !1, !0 === e708 && (this.inversed = !0);
          }
      }), a417.Translate = a417.invent({
          parent: a417.Matrix,
          inherit: a417.Transformation,
          create: function(t, e) {
              this.constructor.apply(this, [].slice.call(arguments));
          },
          extend: {
              arguments: [
                  "transformedX",
                  "transformedY"
              ],
              method: "translate"
          }
      }), a417.extend(a417.Element, {
          style: function(t942, e709) {
              if (0 == arguments.length) return this.node.style.cssText || "";
              if (arguments.length < 2) {
                  if ("object" === i(t942)) for(var s360 in t942)this.style(s360, t942[s360]);
                  else {
                      if (!a417.regex.isCss.test(t942)) return this.node.style[c145(t942)];
                      for(t942 = t942.split(/\s*;\s*/).filter(function(t943) {
                          return !!t943;
                      }).map(function(t944) {
                          return t944.split(/\s*:\s*/);
                      }); e709 = t942.pop();)this.style(e709[0], e709[1]);
                  }
              } else this.node.style[c145(t942)] = null === e709 || a417.regex.isBlank.test(e709) ? "" : e709;
              return this;
          }
      }), a417.Parent = a417.invent({
          create: function(t945) {
              this.constructor.call(this, t945);
          },
          inherit: a417.Element,
          extend: {
              children: function() {
                  return a417.utils.map(a417.utils.filterSVGElements(this.node.childNodes), function(t946) {
                      return a417.adopt(t946);
                  });
              },
              add: function(t947, e710) {
                  return null == e710 ? this.node.appendChild(t947.node) : t947.node != this.node.childNodes[e710] && this.node.insertBefore(t947.node, this.node.childNodes[e710]), this;
              },
              put: function(t948, e711) {
                  return this.add(t948, e711), t948;
              },
              has: function(t949) {
                  return this.index(t949) >= 0;
              },
              index: function(t950) {
                  return [].slice.call(this.node.childNodes).indexOf(t950.node);
              },
              get: function(t) {
                  return a417.adopt(this.node.childNodes[t]);
              },
              first: function() {
                  return this.get(0);
              },
              last: function() {
                  return this.get(this.node.childNodes.length - 1);
              },
              each: function(t951, e712) {
                  for(var i529 = this.children(), s361 = 0, r308 = i529.length; s361 < r308; s361++)i529[s361] instanceof a417.Element && t951.apply(i529[s361], [
                      s361,
                      i529
                  ]), e712 && i529[s361] instanceof a417.Container && i529[s361].each(t951, e712);
                  return this;
              },
              removeElement: function(t952) {
                  return this.node.removeChild(t952.node), this;
              },
              clear: function() {
                  for(; this.node.hasChildNodes();)this.node.removeChild(this.node.lastChild);
                  return delete this._defs, this;
              },
              defs: function() {
                  return this.doc().defs();
              }
          }
      }), a417.extend(a417.Parent, {
          ungroup: function(t953, e713) {
              return 0 === e713 || this instanceof a417.Defs || this.node == a417.parser.draw || (t953 = t953 || (this instanceof a417.Doc ? this : this.parent(a417.Parent)), e713 = e713 || 1 / 0, this.each(function() {
                  return this instanceof a417.Defs ? this : this instanceof a417.Parent ? this.ungroup(t953, e713 - 1) : this.toParent(t953);
              }), this.node.firstChild || this.remove()), this;
          },
          flatten: function(t954, e714) {
              return this.ungroup(t954, e714);
          }
      }), a417.Container = a417.invent({
          create: function(t955) {
              this.constructor.call(this, t955);
          },
          inherit: a417.Parent
      }), a417.ViewBox = a417.invent({
          parent: a417.Container,
          construct: {
          }
      }), [
          "click",
          "dblclick",
          "mousedown",
          "mouseup",
          "mouseover",
          "mouseout",
          "mousemove",
          "touchstart",
          "touchmove",
          "touchleave",
          "touchend",
          "touchcancel"
      ].forEach(function(t956) {
          a417.Element.prototype[t956] = function(e715) {
              return a417.on(this.node, t956, e715), this;
          };
      }), a417.listeners = [], a417.handlerMap = [], a417.listenerId = 0, a417.on = function(t957, e716, i530, s362, r309) {
          var o272 = i530.bind(s362 || t957.instance || t957), n = (a417.handlerMap.indexOf(t957) + 1 || a417.handlerMap.push(t957)) - 1, l197 = e716.split(".")[0], h = e716.split(".")[1] || "*";
          a417.listeners[n] = a417.listeners[n] || {
          }, a417.listeners[n][l197] = a417.listeners[n][l197] || {
          }, a417.listeners[n][l197][h] = a417.listeners[n][l197][h] || {
          }, i530._svgjsListenerId || (i530._svgjsListenerId = ++a417.listenerId), a417.listeners[n][l197][h][i530._svgjsListenerId] = o272, t957.addEventListener(l197, o272, r309 || {
              passive: !0
          });
      }, a417.off = function(t958, e717, i531) {
          var s363 = a417.handlerMap.indexOf(t958), r310 = e717 && e717.split(".")[0], o273 = e717 && e717.split(".")[1], n231 = "";
          if (-1 != s363) {
              if (i531) {
                  if ("function" == typeof i531 && (i531 = i531._svgjsListenerId), !i531) return;
                  a417.listeners[s363][r310] && a417.listeners[s363][r310][o273 || "*"] && (t958.removeEventListener(r310, a417.listeners[s363][r310][o273 || "*"][i531], !1), delete a417.listeners[s363][r310][o273 || "*"][i531]);
              } else if (o273 && r310) {
                  if (a417.listeners[s363][r310] && a417.listeners[s363][r310][o273]) {
                      for(var l198 in a417.listeners[s363][r310][o273])a417.off(t958, [
                          r310,
                          o273
                      ].join("."), l198);
                      delete a417.listeners[s363][r310][o273];
                  }
              } else if (o273) for(var h163 in a417.listeners[s363])for(var n231 in a417.listeners[s363][h163])o273 === n231 && a417.off(t958, [
                  h163,
                  o273
              ].join("."));
              else if (r310) {
                  if (a417.listeners[s363][r310]) {
                      for(var n231 in a417.listeners[s363][r310])a417.off(t958, [
                          r310,
                          n231
                      ].join("."));
                      delete a417.listeners[s363][r310];
                  }
              } else {
                  for(var h163 in a417.listeners[s363])a417.off(t958, h163);
                  delete a417.listeners[s363], delete a417.handlerMap[s363];
              }
          }
      }, a417.extend(a417.Element, {
          on: function(t959, e718, i532, s364) {
              return a417.on(this.node, t959, e718, i532, s364), this;
          },
          off: function(t960, e719) {
              return a417.off(this.node, t960, e719), this;
          },
          fire: function(e720, i533) {
              return e720 instanceof t827.Event ? this.node.dispatchEvent(e720) : this.node.dispatchEvent(e720 = new a417.CustomEvent(e720, {
                  detail: i533,
                  cancelable: !0
              })), this._event = e720, this;
          },
          event: function() {
              return this._event;
          }
      }), a417.Defs = a417.invent({
          create: "defs",
          inherit: a417.Container
      }), a417.G = a417.invent({
          create: "g",
          inherit: a417.Container,
          extend: {
              x: function(t961) {
                  return null == t961 ? this.transform("x") : this.transform({
                      x: t961 - this.x()
                  }, !0);
              }
          },
          construct: {
              group: function() {
                  return this.put(new a417.G);
              }
          }
      }), a417.Doc = a417.invent({
          create: function(t962) {
              t962 && ("svg" == (t962 = "string" == typeof t962 ? e640.getElementById(t962) : t962).nodeName ? this.constructor.call(this, t962) : (this.constructor.call(this, a417.create("svg")), t962.appendChild(this.node), this.size("100%", "100%")), this.namespace().defs());
          },
          inherit: a417.Container,
          extend: {
              namespace: function() {
                  return this.attr({
                      xmlns: a417.ns,
                      version: "1.1"
                  }).attr("xmlns:xlink", a417.xlink, a417.xmlns).attr("xmlns:svgjs", a417.svgjs, a417.xmlns);
              },
              defs: function() {
                  var t963;
                  return this._defs || ((t963 = this.node.getElementsByTagName("defs")[0]) ? this._defs = a417.adopt(t963) : this._defs = new a417.Defs, this.node.appendChild(this._defs.node)), this._defs;
              },
              parent: function() {
                  return this.node.parentNode && "#document" != this.node.parentNode.nodeName ? this.node.parentNode : null;
              },
              remove: function() {
                  return this.parent() && this.parent().removeChild(this.node), this;
              },
              clear: function() {
                  for(; this.node.hasChildNodes();)this.node.removeChild(this.node.lastChild);
                  return delete this._defs, a417.parser.draw && !a417.parser.draw.parentNode && this.node.appendChild(a417.parser.draw), this;
              },
              clone: function(t964) {
                  this.writeDataToDom();
                  var e721 = this.node, i534 = x57(e721.cloneNode(!0));
                  return t964 ? (t964.node || t964).appendChild(i534.node) : e721.parentNode.insertBefore(i534.node, e721.nextSibling), i534;
              }
          }
      }), a417.extend(a417.Element, {
      }), a417.Gradient = a417.invent({
          create: function(t965) {
              this.constructor.call(this, a417.create(t965 + "Gradient")), this.type = t965;
          },
          inherit: a417.Container,
          extend: {
              at: function(t966, e722, i535) {
                  return this.put(new a417.Stop).update(t966, e722, i535);
              },
              update: function(t967) {
                  return this.clear(), "function" == typeof t967 && t967.call(this, this), this;
              },
              fill: function() {
                  return "url(#" + this.id() + ")";
              },
              toString: function() {
                  return this.fill();
              },
              attr: function(t968, e723, i536) {
                  return "transform" == t968 && (t968 = "gradientTransform"), a417.Container.prototype.attr.call(this, t968, e723, i536);
              }
          },
          construct: {
              gradient: function(t969, e724) {
                  return this.defs().gradient(t969, e724);
              }
          }
      }), a417.extend(a417.Gradient, a417.FX, {
          from: function(t970, e725) {
              return "radial" == (this._target || this).type ? this.attr({
                  fx: new a417.Number(t970),
                  fy: new a417.Number(e725)
              }) : this.attr({
                  x1: new a417.Number(t970),
                  y1: new a417.Number(e725)
              });
          },
          to: function(t971, e726) {
              return "radial" == (this._target || this).type ? this.attr({
                  cx: new a417.Number(t971),
                  cy: new a417.Number(e726)
              }) : this.attr({
                  x2: new a417.Number(t971),
                  y2: new a417.Number(e726)
              });
          }
      }), a417.extend(a417.Defs, {
          gradient: function(t972, e727) {
              return this.put(new a417.Gradient(t972)).update(e727);
          }
      }), a417.Stop = a417.invent({
          create: "stop",
          inherit: a417.Element,
          extend: {
              update: function(t973) {
                  return ("number" == typeof t973 || t973 instanceof a417.Number) && (t973 = {
                      offset: arguments[0],
                      color: arguments[1],
                      opacity: arguments[2]
                  }), null != t973.opacity && this.attr("stop-opacity", t973.opacity), null != t973.color && this.attr("stop-color", t973.color), null != t973.offset && this.attr("offset", new a417.Number(t973.offset)), this;
              }
          }
      }), a417.Pattern = a417.invent({
          create: "pattern",
          inherit: a417.Container,
          extend: {
              fill: function() {
                  return "url(#" + this.id() + ")";
              },
              update: function(t974) {
                  return this.clear(), "function" == typeof t974 && t974.call(this, this), this;
              },
              toString: function() {
                  return this.fill();
              },
              attr: function(t975, e728, i537) {
                  return "transform" == t975 && (t975 = "patternTransform"), a417.Container.prototype.attr.call(this, t975, e728, i537);
              }
          },
          construct: {
              pattern: function(t976, e729, i538) {
                  return this.defs().pattern(t976, e729, i538);
              }
          }
      }), a417.extend(a417.Defs, {
          pattern: function(t977, e730, i539) {
              return this.put(new a417.Pattern).update(i539).attr({
                  x: 0,
                  y: 0,
                  width: t977,
                  height: e730,
                  patternUnits: "userSpaceOnUse"
              });
          }
      }), a417.Shape = a417.invent({
          create: function(t978) {
              this.constructor.call(this, t978);
          },
          inherit: a417.Element
      }), a417.Symbol = a417.invent({
          create: "symbol",
          inherit: a417.Container,
          construct: {
              symbol: function() {
                  return this.put(new a417.Symbol);
              }
          }
      }), a417.Use = a417.invent({
          create: "use",
          inherit: a417.Shape,
          extend: {
              element: function(t979, e731) {
                  return this.attr("href", (e731 || "") + "#" + t979, a417.xlink);
              }
          },
          construct: {
              use: function(t980, e732) {
                  return this.put(new a417.Use).element(t980, e732);
              }
          }
      }), a417.Rect = a417.invent({
          create: "rect",
          inherit: a417.Shape,
          construct: {
              rect: function(t981, e733) {
                  return this.put(new a417.Rect).size(t981, e733);
              }
          }
      }), a417.Circle = a417.invent({
          create: "circle",
          inherit: a417.Shape,
          construct: {
              circle: function(t982) {
                  return this.put(new a417.Circle).rx(new a417.Number(t982).divide(2)).move(0, 0);
              }
          }
      }), a417.extend(a417.Circle, a417.FX, {
          rx: function(t983) {
              return this.attr("r", t983);
          },
          ry: function(t984) {
              return this.rx(t984);
          }
      }), a417.Ellipse = a417.invent({
          create: "ellipse",
          inherit: a417.Shape,
          construct: {
              ellipse: function(t985, e734) {
                  return this.put(new a417.Ellipse).size(t985, e734).move(0, 0);
              }
          }
      }), a417.extend(a417.Ellipse, a417.Rect, a417.FX, {
          rx: function(t986) {
              return this.attr("rx", t986);
          },
          ry: function(t987) {
              return this.attr("ry", t987);
          }
      }), a417.extend(a417.Circle, a417.Ellipse, {
          x: function(t988) {
              return null == t988 ? this.cx() - this.rx() : this.cx(t988 + this.rx());
          },
          y: function(t989) {
              return null == t989 ? this.cy() - this.ry() : this.cy(t989 + this.ry());
          },
          cx: function(t990) {
              return null == t990 ? this.attr("cx") : this.attr("cx", t990);
          },
          cy: function(t991) {
              return null == t991 ? this.attr("cy") : this.attr("cy", t991);
          },
          width: function(t992) {
              return null == t992 ? 2 * this.rx() : this.rx(new a417.Number(t992).divide(2));
          },
          height: function(t993) {
              return null == t993 ? 2 * this.ry() : this.ry(new a417.Number(t993).divide(2));
          },
          size: function(t994, e735) {
              var i540 = u95(this, t994, e735);
              return this.rx(new a417.Number(i540.width).divide(2)).ry(new a417.Number(i540.height).divide(2));
          }
      }), a417.Line = a417.invent({
          create: "line",
          inherit: a417.Shape,
          extend: {
              array: function() {
                  return new a417.PointArray([
                      [
                          this.attr("x1"),
                          this.attr("y1")
                      ],
                      [
                          this.attr("x2"),
                          this.attr("y2")
                      ]
                  ]);
              },
              plot: function(t995, e736, i541, s365) {
                  return null == t995 ? this.array() : (t995 = void 0 !== e736 ? {
                      x1: t995,
                      y1: e736,
                      x2: i541,
                      y2: s365
                  } : new a417.PointArray(t995).toLine(), this.attr(t995));
              },
              move: function(t996, e737) {
                  return this.attr(this.array().move(t996, e737).toLine());
              },
              size: function(t997, e738) {
                  var i542 = u95(this, t997, e738);
                  return this.attr(this.array().size(i542.width, i542.height).toLine());
              }
          },
          construct: {
              line: function(t998, e739, i543, s366) {
                  return a417.Line.prototype.plot.apply(this.put(new a417.Line), null != t998 ? [
                      t998,
                      e739,
                      i543,
                      s366
                  ] : [
                      0,
                      0,
                      0,
                      0
                  ]);
              }
          }
      }), a417.Polyline = a417.invent({
          create: "polyline",
          inherit: a417.Shape,
          construct: {
              polyline: function(t999) {
                  return this.put(new a417.Polyline).plot(t999 || new a417.PointArray);
              }
          }
      }), a417.Polygon = a417.invent({
          create: "polygon",
          inherit: a417.Shape,
          construct: {
              polygon: function(t1000) {
                  return this.put(new a417.Polygon).plot(t1000 || new a417.PointArray);
              }
          }
      }), a417.extend(a417.Polyline, a417.Polygon, {
          array: function() {
              return this._array || (this._array = new a417.PointArray(this.attr("points")));
          },
          plot: function(t1001) {
              return null == t1001 ? this.array() : this.clear().attr("points", "string" == typeof t1001 ? t1001 : this._array = new a417.PointArray(t1001));
          },
          clear: function() {
              return delete this._array, this;
          },
          move: function(t1002, e740) {
              return this.attr("points", this.array().move(t1002, e740));
          },
          size: function(t1003, e741) {
              var i544 = u95(this, t1003, e741);
              return this.attr("points", this.array().size(i544.width, i544.height));
          }
      }), a417.extend(a417.Line, a417.Polyline, a417.Polygon, {
          morphArray: a417.PointArray,
          x: function(t1004) {
              return null == t1004 ? this.bbox().x : this.move(t1004, this.bbox().y);
          },
          y: function(t1005) {
              return null == t1005 ? this.bbox().y : this.move(this.bbox().x, t1005);
          },
          width: function(t1006) {
              var e742 = this.bbox();
              return null == t1006 ? e742.width : this.size(t1006, e742.height);
          },
          height: function(t1007) {
              var e743 = this.bbox();
              return null == t1007 ? e743.height : this.size(e743.width, t1007);
          }
      }), a417.Path = a417.invent({
          create: "path",
          inherit: a417.Shape,
          extend: {
              morphArray: a417.PathArray,
              array: function() {
                  return this._array || (this._array = new a417.PathArray(this.attr("d")));
              },
              plot: function(t1008) {
                  return null == t1008 ? this.array() : this.clear().attr("d", "string" == typeof t1008 ? t1008 : this._array = new a417.PathArray(t1008));
              },
              clear: function() {
                  return delete this._array, this;
              }
          },
          construct: {
              path: function(t1009) {
                  return this.put(new a417.Path).plot(t1009 || new a417.PathArray);
              }
          }
      }), a417.Image = a417.invent({
          create: "image",
          inherit: a417.Shape,
          extend: {
              load: function(e744) {
                  if (!e744) return this;
                  var i545 = this, s367 = new t827.Image;
                  return a417.on(s367, "load", function() {
                      a417.off(s367);
                      var t1010 = i545.parent(a417.Pattern);
                      null !== t1010 && (0 == i545.width() && 0 == i545.height() && i545.size(s367.width, s367.height), t1010 && 0 == t1010.width() && 0 == t1010.height() && t1010.size(i545.width(), i545.height()), "function" == typeof i545._loaded && i545._loaded.call(i545, {
                          width: s367.width,
                          height: s367.height,
                          ratio: s367.width / s367.height,
                          url: e744
                      }));
                  }), a417.on(s367, "error", function(t1011) {
                      a417.off(s367), "function" == typeof i545._error && i545._error.call(i545, t1011);
                  }), this.attr("href", s367.src = this.src = e744, a417.xlink);
              },
              loaded: function(t1012) {
                  return this._loaded = t1012, this;
              },
              error: function(t1013) {
                  return this._error = t1013, this;
              }
          },
          construct: {
              image: function(t1014, e745, i546) {
                  return this.put(new a417.Image).load(t1014).size(e745 || 0, i546 || e745 || 0);
              }
          }
      }), a417.Text = a417.invent({
          create: function() {
              this.constructor.call(this, a417.create("text")), this.dom.leading = new a417.Number(1.3), this._rebuild = !0, this._build = !1, this.attr("font-family", a417.defaults.attrs["font-family"]);
          },
          inherit: a417.Shape,
          extend: {
              x: function(t1015) {
                  return null == t1015 ? this.attr("x") : this.attr("x", t1015);
              },
              text: function(t1016) {
                  if (void 0 === t1016) {
                      t1016 = "";
                      for(var e746 = this.node.childNodes, i547 = 0, s368 = e746.length; i547 < s368; ++i547)0 != i547 && 3 != e746[i547].nodeType && 1 == a417.adopt(e746[i547]).dom.newLined && (t1016 += "\n"), t1016 += e746[i547].textContent;
                      return t1016;
                  }
                  if (this.clear().build(!0), "function" == typeof t1016) t1016.call(this, this);
                  else {
                      i547 = 0;
                      for(var r311 = (t1016 = t1016.split("\n")).length; i547 < r311; i547++)this.tspan(t1016[i547]).newLine();
                  }
                  return this.build(!1).rebuild();
              },
              size: function(t1017) {
                  return this.attr("font-size", t1017).rebuild();
              },
              leading: function(t1018) {
                  return null == t1018 ? this.dom.leading : (this.dom.leading = new a417.Number(t1018), this.rebuild());
              },
              lines: function() {
                  var t1019 = (this.textPath && this.textPath() || this).node, e747 = a417.utils.map(a417.utils.filterSVGElements(t1019.childNodes), function(t1020) {
                      return a417.adopt(t1020);
                  });
                  return new a417.Set(e747);
              },
              rebuild: function(t1021) {
                  if ("boolean" == typeof t1021 && (this._rebuild = t1021), this._rebuild) {
                      var e748 = this, i548 = 0, s369 = this.dom.leading * new a417.Number(this.attr("font-size"));
                      this.lines().each(function() {
                          this.dom.newLined && (e748.textPath() || this.attr("x", e748.attr("x")), "\n" == this.text() ? i548 += s369 : (this.attr("dy", s369 + i548), i548 = 0));
                      }), this.fire("rebuild");
                  }
                  return this;
              },
              build: function(t1022) {
                  return this._build = !!t1022, this;
              },
              setData: function(t1023) {
                  return this.dom = t1023, this.dom.leading = new a417.Number(t1023.leading || 1.3), this;
              }
          },
          construct: {
              text: function(t1024) {
                  return this.put(new a417.Text).text(t1024);
              },
              plain: function(t1025) {
                  return this.put(new a417.Text).plain(t1025);
              }
          }
      }), a417.Tspan = a417.invent({
          create: "tspan",
          inherit: a417.Shape,
          extend: {
              text: function(t1026) {
                  return null == t1026 ? this.node.textContent + (this.dom.newLined ? "\n" : "") : ("function" == typeof t1026 ? t1026.call(this, this) : this.plain(t1026), this);
              },
              dx: function(t1027) {
                  return this.attr("dx", t1027);
              },
              dy: function(t1028) {
                  return this.attr("dy", t1028);
              },
              newLine: function() {
                  var t1029 = this.parent(a417.Text);
                  return this.dom.newLined = !0, this.dy(t1029.dom.leading * t1029.attr("font-size")).attr("x", t1029.x());
              }
          }
      }), a417.extend(a417.Text, a417.Tspan, {
          plain: function(t1030) {
              return !1 === this._build && this.clear(), this.node.appendChild(e640.createTextNode(t1030)), this;
          },
          tspan: function(t1031) {
              var e749 = (this.textPath && this.textPath() || this).node, i549 = new a417.Tspan;
              return !1 === this._build && this.clear(), e749.appendChild(i549.node), i549.text(t1031);
          },
          clear: function() {
              for(var t1032 = (this.textPath && this.textPath() || this).node; t1032.hasChildNodes();)t1032.removeChild(t1032.lastChild);
              return this;
          },
          length: function() {
              return this.node.getComputedTextLength();
          }
      }), a417.TextPath = a417.invent({
          create: "textPath",
          inherit: a417.Parent,
          parent: a417.Text,
          construct: {
              morphArray: a417.PathArray,
              array: function() {
                  var t1033 = this.track();
                  return t1033 ? t1033.array() : null;
              },
              plot: function(t1034) {
                  var e750 = this.track(), i550 = null;
                  return e750 && (i550 = e750.plot(t1034)), null == t1034 ? i550 : this;
              },
              track: function() {
                  var t1035 = this.textPath();
                  if (t1035) return t1035.reference("href");
              },
              textPath: function() {
                  if (this.node.firstChild && "textPath" == this.node.firstChild.nodeName) return a417.adopt(this.node.firstChild);
              }
          }
      }), a417.Nested = a417.invent({
          create: function() {
              this.constructor.call(this, a417.create("svg")), this.style("overflow", "visible");
          },
          inherit: a417.Container,
          construct: {
              nested: function() {
                  return this.put(new a417.Nested);
              }
          }
      });
      var l194 = {
          stroke: [
              "color",
              "width",
              "opacity",
              "linecap",
              "linejoin",
              "miterlimit",
              "dasharray",
              "dashoffset"
          ],
          fill: [
              "color",
              "opacity",
              "rule"
          ],
          prefix: function(t1036, e751) {
              return "color" == e751 ? t1036 : t1036 + "-" + e751;
          }
      };
      function h161(t, e, i551, s370) {
          return i551 + s370.replace(a417.regex.dots, " .");
      }
      function c145(t1037) {
          return t1037.toLowerCase().replace(/-(.)/g, function(t, e752) {
              return e752.toUpperCase();
          });
      }
      function d130(t1038) {
          return t1038.charAt(0).toUpperCase() + t1038.slice(1);
      }
      function g108(t1039) {
          var e753 = t1039.toString(16);
          return 1 == e753.length ? "0" + e753 : e753;
      }
      function u95(t1040, e754, i552) {
          if (null == e754 || null == i552) {
              var a428 = t1040.bbox();
              null == e754 ? e754 = a428.width / a428.height * i552 : null == i552 && (i552 = a428.height / a428.width * e754);
          }
          return {
              width: e754,
              height: i552
          };
      }
      function p53(t1041, e755, i553) {
          return {
              x: e755 * t1041.a + i553 * t1041.c + 0,
              y: e755 * t1041.b + i553 * t1041.d + 0
          };
      }
      function f70(t1042) {
          return {
              a: t1042[0],
              b: t1042[1],
              c: t1042[2],
              d: t1042[3],
              e: t1042[4],
              f: t1042[5]
          };
      }
      function x57(e756) {
          for(var i554 = e756.childNodes.length - 1; i554 >= 0; i554--)e756.childNodes[i554] instanceof t827.SVGElement && x57(e756.childNodes[i554]);
          return a417.adopt(e756).id(a417.eid(e756.nodeName));
      }
      function b33(t1043) {
          return null == t1043.x && (t1043.x = 0, t1043.y = 0, t1043.width = 0, t1043.height = 0), t1043.w = t1043.width, t1043.h = t1043.height, t1043.x2 = t1043.x + t1043.width, t1043.y2 = t1043.y + t1043.height, t1043.cx = t1043.x + t1043.width / 2, t1043.cy = t1043.y + t1043.height / 2, t1043;
      }
      function v58(t1044) {
          return Math.abs(t1044) > 0.0000000000000000000000000000000000001 ? t1044 : 0;
      }
      [
          "fill",
          "stroke"
      ].forEach(function(t1045) {
          var e757 = {
          };
          e757[t1045] = function(e758) {
              if (void 0 === e758) return this;
              if ("string" == typeof e758 || a417.Color.isRgb(e758) || e758 && "function" == typeof e758.fill) this.attr(t1045, e758);
              else for(var i555 = l194[t1045].length - 1; i555 >= 0; i555--)null != e758[l194[t1045][i555]] && this.attr(l194.prefix(t1045, l194[t1045][i555]), e758[l194[t1045][i555]]);
              return this;
          }, a417.extend(a417.Element, a417.FX, e757);
      }), a417.extend(a417.Element, a417.FX, {
          translate: function(t1046, e759) {
              return this.transform({
                  x: t1046,
                  y: e759
              });
          },
          matrix: function(t1047) {
              return this.attr("transform", new a417.Matrix(6 == arguments.length ? [].slice.call(arguments) : t1047));
          },
          opacity: function(t1048) {
              return this.attr("opacity", t1048);
          },
          dx: function(t1049) {
              return this.x(new a417.Number(t1049).plus(this instanceof a417.FX ? 0 : this.x()), !0);
          },
          dy: function(t1050) {
              return this.y(new a417.Number(t1050).plus(this instanceof a417.FX ? 0 : this.y()), !0);
          }
      }), a417.extend(a417.Path, {
          length: function() {
              return this.node.getTotalLength();
          },
          pointAt: function(t1051) {
              return this.node.getPointAtLength(t1051);
          }
      }), a417.Set = a417.invent({
          create: function(t1052) {
              Array.isArray(t1052) ? this.members = t1052 : this.clear();
          },
          extend: {
              add: function() {
                  for(var t1053 = [].slice.call(arguments), e760 = 0, i556 = t1053.length; e760 < i556; e760++)this.members.push(t1053[e760]);
                  return this;
              },
              remove: function(t1054) {
                  var e761 = this.index(t1054);
                  return e761 > -1 && this.members.splice(e761, 1), this;
              },
              each: function(t1055) {
                  for(var e762 = 0, i557 = this.members.length; e762 < i557; e762++)t1055.apply(this.members[e762], [
                      e762,
                      this.members
                  ]);
                  return this;
              },
              clear: function() {
                  return this.members = [], this;
              },
              length: function() {
                  return this.members.length;
              },
              has: function(t1056) {
                  return this.index(t1056) >= 0;
              },
              index: function(t1057) {
                  return this.members.indexOf(t1057);
              },
              get: function(t) {
                  return this.members[t];
              },
              first: function() {
                  return this.get(0);
              },
              last: function() {
                  return this.get(this.members.length - 1);
              },
              valueOf: function() {
                  return this.members;
              }
          },
          construct: {
              set: function(t1058) {
                  return new a417.Set(t1058);
              }
          }
      }), a417.FX.Set = a417.invent({
          create: function(t1059) {
              this.set = t1059;
          }
      }), a417.Set.inherit = function() {
          var t1060 = [];
          for(var e763 in a417.Shape.prototype)"function" == typeof a417.Shape.prototype[e763] && "function" != typeof a417.Set.prototype[e763] && t1060.push(e763);
          for(var e763 in t1060.forEach(function(t1061) {
              a417.Set.prototype[t1061] = function() {
                  for(var e764 = 0, i558 = this.members.length; e764 < i558; e764++)this.members[e764] && "function" == typeof this.members[e764][t1061] && this.members[e764][t1061].apply(this.members[e764], arguments);
                  return "animate" == t1061 ? this.fx || (this.fx = new a417.FX.Set(this)) : this;
              };
          }), t1060 = [], a417.FX.prototype)"function" == typeof a417.FX.prototype[e763] && "function" != typeof a417.FX.Set.prototype[e763] && t1060.push(e763);
          t1060.forEach(function(t) {
              a417.FX.Set.prototype[t] = function() {
                  for(var e765 = 0, i559 = this.set.members.length; e765 < i559; e765++)this.set.members[e765].fx[t].apply(this.set.members[e765].fx, arguments);
                  return this;
              };
          });
      }, a417.extend(a417.Element, {
      }), a417.extend(a417.Element, {
          remember: function(t1062, e766) {
              if ("object" === i(arguments[0])) for(var a429 in t1062)this.remember(a429, t1062[a429]);
              else {
                  if (1 == arguments.length) return this.memory()[t1062];
                  this.memory()[t1062] = e766;
              }
              return this;
          },
          forget: function() {
              if (0 == arguments.length) this._memory = {
              };
              else for(var t1063 = arguments.length - 1; t1063 >= 0; t1063--)delete this.memory()[arguments[t1063]];
              return this;
          },
          memory: function() {
              return this._memory || (this._memory = {
              });
          }
      }), a417.get = function(t1064) {
          var i560 = e640.getElementById(function(t1065) {
              var e767 = (t1065 || "").toString().match(a417.regex.reference);
              if (e767) return e767[1];
          }(t1064) || t1064);
          return a417.adopt(i560);
      }, a417.select = function(t1066, i561) {
          return new a417.Set(a417.utils.map((i561 || e640).querySelectorAll(t1066), function(t1067) {
              return a417.adopt(t1067);
          }));
      }, a417.extend(a417.Parent, {
          select: function(t1068) {
              return a417.select(t1068, this.node);
          }
      });
      var m50 = "abcdef".split("");
      if ("function" != typeof t827.CustomEvent) {
          var y41 = function(t1069, i562) {
              i562 = i562 || {
                  bubbles: !1,
                  cancelable: !1,
                  detail: void 0
              };
              var a430 = e640.createEvent("CustomEvent");
              return a430.initCustomEvent(t1069, i562.bubbles, i562.cancelable, i562.detail), a430;
          };
          y41.prototype = t827.Event.prototype, a417.CustomEvent = y41;
      } else a417.CustomEvent = t827.CustomEvent;
      return a417;
  }, "function" == typeof define && define.amd ? define(function() {
      return Mt(Tt, Tt.document);
  }) : "object" === ("undefined" == typeof exports ? "undefined" : i(exports)) && "undefined" != typeof module ? module.exports = Tt.document ? Mt(Tt, Tt.document) : function(t1070) {
      return Mt(t1070, t1070.document);
  } : Tt.SVG = Mt(Tt, Tt.document), /*! svg.filter.js - v2.0.2 - 2016-02-24
  * https://github.com/wout/svg.filter.js
  * Copyright (c) 2016 Wout Fierens; Licensed MIT */ (function() {
      SVG.Filter = SVG.invent({
          create: "filter",
          inherit: SVG.Parent,
          extend: {
              source: "SourceGraphic",
              sourceAlpha: "SourceAlpha",
              background: "BackgroundImage",
              backgroundAlpha: "BackgroundAlpha",
              fill: "FillPaint",
              stroke: "StrokePaint",
              autoSetIn: !0,
              put: function(t1072, e769) {
                  return this.add(t1072, e769), !t1072.attr("in") && this.autoSetIn && t1072.attr("in", this.source), t1072.attr("result") || t1072.attr("result", t1072), t1072;
              },
              blend: function(t1073, e770, i564) {
                  return this.put(new SVG.BlendEffect(t1073, e770, i564));
              },
              colorMatrix: function(t1074, e771) {
                  return this.put(new SVG.ColorMatrixEffect(t1074, e771));
              },
              convolveMatrix: function(t1075) {
                  return this.put(new SVG.ConvolveMatrixEffect(t1075));
              },
              componentTransfer: function(t1076) {
                  return this.put(new SVG.ComponentTransferEffect(t1076));
              },
              composite: function(t1077, e772, i565) {
                  return this.put(new SVG.CompositeEffect(t1077, e772, i565));
              },
              flood: function(t1078, e773) {
                  return this.put(new SVG.FloodEffect(t1078, e773));
              },
              offset: function(t1079, e774) {
                  return this.put(new SVG.OffsetEffect(t1079, e774));
              },
              image: function(t1080) {
                  return this.put(new SVG.ImageEffect(t1080));
              },
              merge: function() {
                  var t1081 = [
                      void 0
                  ];
                  for(var e in arguments)t1081.push(arguments[e]);
                  return this.put(new (SVG.MergeEffect.bind.apply(SVG.MergeEffect, t1081)));
              },
              gaussianBlur: function(t1082, e775) {
                  return this.put(new SVG.GaussianBlurEffect(t1082, e775));
              },
              morphology: function(t1083, e776) {
                  return this.put(new SVG.MorphologyEffect(t1083, e776));
              },
              diffuseLighting: function(t1084, e777, i566) {
                  return this.put(new SVG.DiffuseLightingEffect(t1084, e777, i566));
              },
              displacementMap: function(t1085, e778, i567, a432, s372) {
                  return this.put(new SVG.DisplacementMapEffect(t1085, e778, i567, a432, s372));
              },
              specularLighting: function(t1086, e779, i568, a433) {
                  return this.put(new SVG.SpecularLightingEffect(t1086, e779, i568, a433));
              },
              tile: function() {
                  return this.put(new SVG.TileEffect);
              },
              turbulence: function(t1087, e780, i569, a434, s373) {
                  return this.put(new SVG.TurbulenceEffect(t1087, e780, i569, a434, s373));
              },
              toString: function() {
                  return "url(#" + this.attr("id") + ")";
              }
          }
      }), SVG.extend(SVG.Defs, {
          filter: function(t1088) {
              var e781 = this.put(new SVG.Filter);
              return "function" == typeof t1088 && t1088.call(e781, e781), e781;
          }
      }), SVG.extend(SVG.Container, {
          filter: function(t1089) {
              return this.defs().filter(t1089);
          }
      }), SVG.extend(SVG.Element, SVG.G, SVG.Nested, {
          filter: function(t1090) {
              return this.filterer = t1090 instanceof SVG.Element ? t1090 : this.doc().filter(t1090), this.doc() && this.filterer.doc() !== this.doc() && this.doc().defs().add(this.filterer), this.attr("filter", this.filterer), this.filterer;
          },
          unfilter: function(t1091) {
              return this.filterer && !0 === t1091 && this.filterer.remove(), delete this.filterer, this.attr("filter", null);
          }
      }), SVG.Effect = SVG.invent({
          create: function() {
              this.constructor.call(this);
          },
          inherit: SVG.Element,
          extend: {
              in: function(t1092) {
                  return null == t1092 ? this.parent() && this.parent().select('[result="' + this.attr("in") + '"]').get(0) || this.attr("in") : this.attr("in", t1092);
              },
              result: function(t1093) {
                  return null == t1093 ? this.attr("result") : this.attr("result", t1093);
              },
              toString: function() {
                  return this.result();
              }
          }
      }), SVG.ParentEffect = SVG.invent({
          create: function() {
              this.constructor.call(this);
          },
          inherit: SVG.Parent,
          extend: {
              in: function(t1094) {
                  return null == t1094 ? this.parent() && this.parent().select('[result="' + this.attr("in") + '"]').get(0) || this.attr("in") : this.attr("in", t1094);
              },
              result: function(t1095) {
                  return null == t1095 ? this.attr("result") : this.attr("result", t1095);
              },
              toString: function() {
                  return this.result();
              }
          }
      });
      var t1071 = {
          blend: function(t1096, e782) {
              return this.parent() && this.parent().blend(this, t1096, e782);
          },
          colorMatrix: function(t1097, e783) {
              return this.parent() && this.parent().colorMatrix(t1097, e783).in(this);
          },
          convolveMatrix: function(t1098) {
              return this.parent() && this.parent().convolveMatrix(t1098).in(this);
          },
          componentTransfer: function(t1099) {
              return this.parent() && this.parent().componentTransfer(t1099).in(this);
          },
          composite: function(t1100, e784) {
              return this.parent() && this.parent().composite(this, t1100, e784);
          },
          flood: function(t1101, e785) {
              return this.parent() && this.parent().flood(t1101, e785);
          },
          offset: function(t1102, e786) {
              return this.parent() && this.parent().offset(t1102, e786).in(this);
          },
          image: function(t1103) {
              return this.parent() && this.parent().image(t1103);
          },
          merge: function() {
              return this.parent() && this.parent().merge.apply(this.parent(), [
                  this
              ].concat(arguments));
          },
          gaussianBlur: function(t1104, e787) {
              return this.parent() && this.parent().gaussianBlur(t1104, e787).in(this);
          },
          morphology: function(t1105, e788) {
              return this.parent() && this.parent().morphology(t1105, e788).in(this);
          },
          diffuseLighting: function(t1106, e789, i570) {
              return this.parent() && this.parent().diffuseLighting(t1106, e789, i570).in(this);
          },
          displacementMap: function(t1107, e790, i571, a435) {
              return this.parent() && this.parent().displacementMap(this, t1107, e790, i571, a435);
          },
          specularLighting: function(t1108, e791, i572, a436) {
              return this.parent() && this.parent().specularLighting(t1108, e791, i572, a436).in(this);
          },
          tile: function() {
              return this.parent() && this.parent().tile().in(this);
          },
          turbulence: function(t1109, e792, i573, a437, s374) {
              return this.parent() && this.parent().turbulence(t1109, e792, i573, a437, s374).in(this);
          }
      };
      SVG.extend(SVG.Effect, t1071), SVG.extend(SVG.ParentEffect, t1071), SVG.ChildEffect = SVG.invent({
          create: function() {
              this.constructor.call(this);
          },
          inherit: SVG.Element,
          extend: {
              in: function(t1110) {
                  this.attr("in", t1110);
              }
          }
      });
      var e768 = {
          blend: function(t1111, e793, i574) {
              this.attr({
                  in: t1111,
                  in2: e793,
                  mode: i574 || "normal"
              });
          },
          colorMatrix: function(t1112, e794) {
              "matrix" == t1112 && (e794 = s371(e794)), this.attr({
                  type: t1112,
                  values: void 0 === e794 ? null : e794
              });
          },
          convolveMatrix: function(t1113) {
              t1113 = s371(t1113), this.attr({
                  order: Math.sqrt(t1113.split(" ").length),
                  kernelMatrix: t1113
              });
          },
          composite: function(t1114, e795, i575) {
              this.attr({
                  in: t1114,
                  in2: e795,
                  operator: i575
              });
          },
          flood: function(t1115, e796) {
              this.attr("flood-color", t1115), null != e796 && this.attr("flood-opacity", e796);
          },
          offset: function(t1116, e797) {
              this.attr({
                  dx: t1116,
                  dy: e797
              });
          },
          image: function(t1117) {
              this.attr("href", t1117, SVG.xlink);
          },
          displacementMap: function(t1118, e798, i576, a438, s375) {
              this.attr({
                  in: t1118,
                  in2: e798,
                  scale: i576,
                  xChannelSelector: a438,
                  yChannelSelector: s375
              });
          },
          gaussianBlur: function(t1119, e799) {
              null != t1119 || null != e799 ? this.attr("stdDeviation", r312(Array.prototype.slice.call(arguments))) : this.attr("stdDeviation", "0 0");
          },
          morphology: function(t1120, e800) {
              this.attr({
                  operator: t1120,
                  radius: e800
              });
          },
          tile: function() {
          },
          turbulence: function(t1121, e801, i577, a439, s376) {
              this.attr({
                  numOctaves: e801,
                  seed: i577,
                  stitchTiles: a439,
                  baseFrequency: t1121,
                  type: s376
              });
          }
      }, i563 = {
          merge: function() {
              var t1122;
              if (arguments[0] instanceof SVG.Set) {
                  var e802 = this;
                  arguments[0].each(function(t) {
                      this instanceof SVG.MergeNode ? e802.put(this) : (this instanceof SVG.Effect || this instanceof SVG.ParentEffect) && e802.put(new SVG.MergeNode(this));
                  });
              } else {
                  t1122 = Array.isArray(arguments[0]) ? arguments[0] : arguments;
                  for(var i578 = 0; i578 < t1122.length; i578++)t1122[i578] instanceof SVG.MergeNode ? this.put(t1122[i578]) : this.put(new SVG.MergeNode(t1122[i578]));
              }
          },
          componentTransfer: function(t1123) {
              if (this.rgb = new SVG.Set, [
                  "r",
                  "g",
                  "b",
                  "a"
              ].forEach((function(t) {
                  this[t] = new SVG["Func" + t.toUpperCase()]("identity"), this.rgb.add(this[t]), this.node.appendChild(this[t].node);
              }).bind(this)), t1123) for(var e in t1123.rgb && ([
                  "r",
                  "g",
                  "b"
              ].forEach((function(e) {
                  this[e].attr(t1123.rgb);
              }).bind(this)), delete t1123.rgb), t1123)this[e].attr(t1123[e]);
          },
          diffuseLighting: function(t1124, e803, i579) {
              this.attr({
                  surfaceScale: t1124,
                  diffuseConstant: e803,
                  kernelUnitLength: i579
              });
          },
          specularLighting: function(t1125, e804, i580, a440) {
              this.attr({
                  surfaceScale: t1125,
                  diffuseConstant: e804,
                  specularExponent: i580,
                  kernelUnitLength: a440
              });
          }
      }, a431 = {
          distantLight: function(t1126, e805) {
              this.attr({
                  azimuth: t1126,
                  elevation: e805
              });
          },
          pointLight: function(t1127, e806, i581) {
              this.attr({
                  x: t1127,
                  y: e806,
                  z: i581
              });
          },
          spotLight: function(t1128, e807, i582, a441, s377, r313) {
              this.attr({
                  x: t1128,
                  y: e807,
                  z: i582,
                  pointsAtX: a441,
                  pointsAtY: s377,
                  pointsAtZ: r313
              });
          },
          mergeNode: function(t1129) {
              this.attr("in", t1129);
          }
      };
      function s371(t1130) {
          return Array.isArray(t1130) && (t1130 = new SVG.Array(t1130)), t1130.toString().replace(/^\s+/, "").replace(/\s+$/, "").replace(/\s+/g, " ");
      }
      function r312(t1131) {
          if (!Array.isArray(t1131)) return t1131;
          for(var e808 = 0, i583 = t1131.length, a442 = []; e808 < i583; e808++)a442.push(t1131[e808]);
          return a442.join(" ");
      }
      function o274() {
          var t1132 = function() {
          };
          for(var e in "function" == typeof arguments[arguments.length - 1] && (t1132 = arguments[arguments.length - 1], Array.prototype.splice.call(arguments, arguments.length - 1, 1)), arguments)for(var i584 in arguments[e])t1132(arguments[e][i584], i584, arguments[e]);
      }
      [
          "r",
          "g",
          "b",
          "a"
      ].forEach(function(t1133) {
          a431["Func" + t1133.toUpperCase()] = function(t1134) {
              switch(this.attr("type", t1134), t1134){
                  case "table":
                      this.attr("tableValues", arguments[1]);
                      break;
                  case "linear":
                      this.attr("slope", arguments[1]), this.attr("intercept", arguments[2]);
                      break;
                  case "gamma":
                      this.attr("amplitude", arguments[1]), this.attr("exponent", arguments[2]), this.attr("offset", arguments[2]);
              }
          };
      }), o274(e768, function(t1135, e809) {
          var i585 = e809.charAt(0).toUpperCase() + e809.slice(1);
          SVG[i585 + "Effect"] = SVG.invent({
              create: function() {
                  this.constructor.call(this, SVG.create("fe" + i585)), t1135.apply(this, arguments), this.result(this.attr("id") + "Out");
              },
              inherit: SVG.Effect,
              extend: {
              }
          });
      }), o274(i563, function(t1136, e810) {
          var i586 = e810.charAt(0).toUpperCase() + e810.slice(1);
          SVG[i586 + "Effect"] = SVG.invent({
              create: function() {
                  this.constructor.call(this, SVG.create("fe" + i586)), t1136.apply(this, arguments), this.result(this.attr("id") + "Out");
              },
              inherit: SVG.ParentEffect,
              extend: {
              }
          });
      }), o274(a431, function(t1137, e811) {
          var i587 = e811.charAt(0).toUpperCase() + e811.slice(1);
          SVG[i587] = SVG.invent({
              create: function() {
                  this.constructor.call(this, SVG.create("fe" + i587)), t1137.apply(this, arguments);
              },
              inherit: SVG.ChildEffect,
              extend: {
              }
          });
      }), SVG.extend(SVG.MergeEffect, {
          in: function(t1138) {
              return t1138 instanceof SVG.MergeNode ? this.add(t1138, 0) : this.add(new SVG.MergeNode(t1138), 0), this;
          }
      }), SVG.extend(SVG.CompositeEffect, SVG.BlendEffect, SVG.DisplacementMapEffect, {
          in2: function(t1139) {
              return null == t1139 ? this.parent() && this.parent().select('[result="' + this.attr("in2") + '"]').get(0) || this.attr("in2") : this.attr("in2", t1139);
          }
      }), SVG.filter = {
          sepiatone: [
              0.343,
              0.669,
              0.119,
              0,
              0,
              0.249,
              0.626,
              0.13,
              0,
              0,
              0.172,
              0.334,
              0.111,
              0,
              0,
              0,
              0,
              0,
              1,
              0
          ]
      };
  }).call(void 0), (function() {
      function t1140(t1141, s379, r314, o275, n232, l199, h164) {
          for(var c147 = t1141.slice(s379, r314 || h164), d131 = o275.slice(n232, l199 || h164), g109 = 0, u96 = {
              pos: [
                  0,
                  0
              ],
              start: [
                  0,
                  0
              ]
          }, p54 = {
              pos: [
                  0,
                  0
              ],
              start: [
                  0,
                  0
              ]
          };;){
              if (c147[g109] = e812.call(u96, c147[g109]), d131[g109] = e812.call(p54, d131[g109]), c147[g109][0] != d131[g109][0] || "M" == c147[g109][0] || "A" == c147[g109][0] && (c147[g109][4] != d131[g109][4] || c147[g109][5] != d131[g109][5]) ? (Array.prototype.splice.apply(c147, [
                  g109,
                  1
              ].concat(a443.call(u96, c147[g109]))), Array.prototype.splice.apply(d131, [
                  g109,
                  1
              ].concat(a443.call(p54, d131[g109])))) : (c147[g109] = i588.call(u96, c147[g109]), d131[g109] = i588.call(p54, d131[g109])), ++g109 == c147.length && g109 == d131.length) break;
              g109 == c147.length && c147.push([
                  "C",
                  u96.pos[0],
                  u96.pos[1],
                  u96.pos[0],
                  u96.pos[1],
                  u96.pos[0],
                  u96.pos[1]
              ]), g109 == d131.length && d131.push([
                  "C",
                  p54.pos[0],
                  p54.pos[1],
                  p54.pos[0],
                  p54.pos[1],
                  p54.pos[0],
                  p54.pos[1]
              ]);
          }
          return {
              start: c147,
              dest: d131
          };
      }
      function e812(t1142) {
          switch(t1142[0]){
              case "z":
              case "Z":
                  t1142[0] = "L", t1142[1] = this.start[0], t1142[2] = this.start[1];
                  break;
              case "H":
                  t1142[0] = "L", t1142[2] = this.pos[1];
                  break;
              case "V":
                  t1142[0] = "L", t1142[2] = t1142[1], t1142[1] = this.pos[0];
                  break;
              case "T":
                  t1142[0] = "Q", t1142[3] = t1142[1], t1142[4] = t1142[2], t1142[1] = this.reflection[1], t1142[2] = this.reflection[0];
                  break;
              case "S":
                  t1142[0] = "C", t1142[6] = t1142[4], t1142[5] = t1142[3], t1142[4] = t1142[2], t1142[3] = t1142[1], t1142[2] = this.reflection[1], t1142[1] = this.reflection[0];
          }
          return t1142;
      }
      function i588(t1143) {
          var e = t1143.length;
          return this.pos = [
              t1143[e - 2],
              t1143[e - 1]
          ], -1 != "SCQT".indexOf(t1143[0]) && (this.reflection = [
              2 * this.pos[0] - t1143[e - 4],
              2 * this.pos[1] - t1143[e - 3]
          ]), t1143;
      }
      function a443(t1144) {
          var e813 = [
              t1144
          ];
          switch(t1144[0]){
              case "M":
                  return this.pos = this.start = [
                      t1144[1],
                      t1144[2]
                  ], e813;
              case "L":
                  t1144[5] = t1144[3] = t1144[1], t1144[6] = t1144[4] = t1144[2], t1144[1] = this.pos[0], t1144[2] = this.pos[1];
                  break;
              case "Q":
                  t1144[6] = t1144[4], t1144[5] = t1144[3], t1144[4] = 1 * t1144[4] / 3 + 2 * t1144[2] / 3, t1144[3] = 1 * t1144[3] / 3 + 2 * t1144[1] / 3, t1144[2] = 1 * this.pos[1] / 3 + 2 * t1144[2] / 3, t1144[1] = 1 * this.pos[0] / 3 + 2 * t1144[1] / 3;
                  break;
              case "A":
                  t1144 = (e813 = (function(t1145, e814) {
                      var i589, a444, s380, r315, o276, n233, l200, h165, c148, d132, g110, u97, p55, f71, x58, b34, v59, m51, y42, w35, k31, A25, S19, C16, L11, P13, T13 = Math.abs(e814[1]), M13 = Math.abs(e814[2]), I9 = e814[3] % 360, z7 = e814[4], X4 = e814[5], E3 = e814[6], Y2 = e814[7], F1 = new SVG.Point(t1145), R1 = new SVG.Point(E3, Y2), H1 = [];
                      if (0 === T13 || 0 === M13 || F1.x === R1.x && F1.y === R1.y) return [
                          [
                              "C",
                              F1.x,
                              F1.y,
                              R1.x,
                              R1.y,
                              R1.x,
                              R1.y
                          ]
                      ];
                      i589 = new SVG.Point((F1.x - R1.x) / 2, (F1.y - R1.y) / 2).transform((new SVG.Matrix).rotate(I9)), (a444 = i589.x * i589.x / (T13 * T13) + i589.y * i589.y / (M13 * M13)) > 1 && (T13 *= a444 = Math.sqrt(a444), M13 *= a444);
                      s380 = (new SVG.Matrix).rotate(I9).scale(1 / T13, 1 / M13).rotate(-I9), F1 = F1.transform(s380), R1 = R1.transform(s380), r315 = [
                          R1.x - F1.x,
                          R1.y - F1.y
                      ], n233 = r315[0] * r315[0] + r315[1] * r315[1], o276 = Math.sqrt(n233), r315[0] /= o276, r315[1] /= o276, l200 = n233 < 4 ? Math.sqrt(1 - n233 / 4) : 0, z7 === X4 && (l200 *= -1);
                      h165 = new SVG.Point((R1.x + F1.x) / 2 + l200 * -r315[1], (R1.y + F1.y) / 2 + l200 * r315[0]), c148 = new SVG.Point(F1.x - h165.x, F1.y - h165.y), d132 = new SVG.Point(R1.x - h165.x, R1.y - h165.y), g110 = Math.acos(c148.x / Math.sqrt(c148.x * c148.x + c148.y * c148.y)), c148.y < 0 && (g110 *= -1);
                      u97 = Math.acos(d132.x / Math.sqrt(d132.x * d132.x + d132.y * d132.y)), d132.y < 0 && (u97 *= -1);
                      X4 && g110 > u97 && (u97 += 2 * Math.PI);
                      !X4 && g110 < u97 && (u97 -= 2 * Math.PI);
                      for(f71 = Math.ceil(2 * Math.abs(g110 - u97) / Math.PI), b34 = [], v59 = g110, p55 = (u97 - g110) / f71, x58 = 4 * Math.tan(p55 / 4) / 3, k31 = 0; k31 <= f71; k31++)y42 = Math.cos(v59), m51 = Math.sin(v59), w35 = new SVG.Point(h165.x + y42, h165.y + m51), b34[k31] = [
                          new SVG.Point(w35.x + x58 * m51, w35.y - x58 * y42),
                          w35,
                          new SVG.Point(w35.x - x58 * m51, w35.y + x58 * y42)
                      ], v59 += p55;
                      for(b34[0][0] = b34[0][1].clone(), b34[b34.length - 1][2] = b34[b34.length - 1][1].clone(), s380 = (new SVG.Matrix).rotate(I9).scale(T13, M13).rotate(-I9), k31 = 0, A25 = b34.length; k31 < A25; k31++)b34[k31][0] = b34[k31][0].transform(s380), b34[k31][1] = b34[k31][1].transform(s380), b34[k31][2] = b34[k31][2].transform(s380);
                      for(k31 = 1, A25 = b34.length; k31 < A25; k31++)S19 = (w35 = b34[k31 - 1][2]).x, C16 = w35.y, L11 = (w35 = b34[k31][0]).x, P13 = w35.y, E3 = (w35 = b34[k31][1]).x, Y2 = w35.y, H1.push([
                          "C",
                          S19,
                          C16,
                          L11,
                          P13,
                          E3,
                          Y2
                      ]);
                      return H1;
                  })(this.pos, t1144))[0];
          }
          return t1144[0] = "C", this.pos = [
              t1144[5],
              t1144[6]
          ], this.reflection = [
              2 * t1144[5] - t1144[3],
              2 * t1144[6] - t1144[4]
          ], e813;
      }
      function s378(t1146, e815) {
          if (!1 === e815) return !1;
          for(var i590 = e815, a445 = t1146.length; i590 < a445; ++i590)if ("M" == t1146[i590][0]) return i590;
          return !1;
      }
      SVG.extend(SVG.PathArray, {
          morph: function(e816) {
              for(var i591 = this.value, a446 = this.parse(e816), r316 = 0, o277 = 0, n234 = !1, l201 = !1; !1 !== r316 || !1 !== o277;){
                  var h166;
                  n234 = s378(i591, !1 !== r316 && r316 + 1), l201 = s378(a446, !1 !== o277 && o277 + 1), !1 === r316 && (r316 = 0 == (h166 = new SVG.PathArray(c149.start).bbox()).height || 0 == h166.width ? i591.push(i591[0]) - 1 : i591.push([
                      "M",
                      h166.x + h166.width / 2,
                      h166.y + h166.height / 2
                  ]) - 1), !1 === o277 && (o277 = 0 == (h166 = new SVG.PathArray(c149.dest).bbox()).height || 0 == h166.width ? a446.push(a446[0]) - 1 : a446.push([
                      "M",
                      h166.x + h166.width / 2,
                      h166.y + h166.height / 2
                  ]) - 1);
                  var c149 = t1140(i591, r316, n234, a446, o277, l201);
                  i591 = i591.slice(0, r316).concat(c149.start, !1 === n234 ? [] : i591.slice(n234)), a446 = a446.slice(0, o277).concat(c149.dest, !1 === l201 ? [] : a446.slice(l201)), r316 = !1 !== n234 && r316 + c149.start.length, o277 = !1 !== l201 && o277 + c149.dest.length;
              }
              return this.value = i591, this.destination = new SVG.PathArray, this.destination.value = a446, this;
          }
      });
  })(), /*! svg.draggable.js - v2.2.2 - 2019-01-08
  * https://github.com/svgdotjs/svg.draggable.js
  * Copyright (c) 2019 Wout Fierens; Licensed MIT */ (function() {
      function t1147(t1148) {
          t1148.remember("_draggable", this), this.el = t1148;
      }
      t1147.prototype.init = function(t1149, e817) {
          var i592 = this;
          this.constraint = t1149, this.value = e817, this.el.on("mousedown.drag", function(t1150) {
              i592.start(t1150);
          }), this.el.on("touchstart.drag", function(t1151) {
              i592.start(t1151);
          });
      }, t1147.prototype.transformPoint = function(t1152, e818) {
          var i593 = (t1152 = t1152 || window.event).changedTouches && t1152.changedTouches[0] || t1152;
          return this.p.x = i593.clientX - (e818 || 0), this.p.y = i593.clientY, this.p.matrixTransform(this.m);
      }, t1147.prototype.getBBox = function() {
          var t1153 = this.el.bbox();
          return this.el instanceof SVG.Nested && (t1153 = this.el.rbox()), (this.el instanceof SVG.G || this.el instanceof SVG.Use || this.el instanceof SVG.Nested) && (t1153.x = this.el.x(), t1153.y = this.el.y()), t1153;
      }, t1147.prototype.start = function(t1154) {
          if ("click" != t1154.type && "mousedown" != t1154.type && "mousemove" != t1154.type || 1 == (t1154.which || t1154.buttons)) {
              var e819 = this;
              if (this.el.fire("beforedrag", {
                  event: t1154,
                  handler: this
              }), !this.el.event().defaultPrevented) {
                  t1154.preventDefault(), t1154.stopPropagation(), this.parent = this.parent || this.el.parent(SVG.Nested) || this.el.parent(SVG.Doc), this.p = this.parent.node.createSVGPoint(), this.m = this.el.node.getScreenCTM().inverse();
                  var i594, a447 = this.getBBox();
                  if (this.el instanceof SVG.Text) switch(i594 = this.el.node.getComputedTextLength(), this.el.attr("text-anchor")){
                      case "middle":
                          i594 /= 2;
                          break;
                      case "start":
                          i594 = 0;
                  }
                  this.startPoints = {
                      point: this.transformPoint(t1154, i594),
                      box: a447,
                      transform: this.el.transform()
                  }, SVG.on(window, "mousemove.drag", function(t1155) {
                      e819.drag(t1155);
                  }), SVG.on(window, "touchmove.drag", function(t1156) {
                      e819.drag(t1156);
                  }), SVG.on(window, "mouseup.drag", function(t1157) {
                      e819.end(t1157);
                  }), SVG.on(window, "touchend.drag", function(t1158) {
                      e819.end(t1158);
                  }), this.el.fire("dragstart", {
                      event: t1154,
                      p: this.startPoints.point,
                      m: this.m,
                      handler: this
                  });
              }
          }
      }, t1147.prototype.drag = function(t1159) {
          var e820 = this.getBBox(), i595 = this.transformPoint(t1159), a448 = this.startPoints.box.x + i595.x - this.startPoints.point.x, s381 = this.startPoints.box.y + i595.y - this.startPoints.point.y, r317 = this.constraint, o278 = i595.x - this.startPoints.point.x, n235 = i595.y - this.startPoints.point.y;
          if (this.el.fire("dragmove", {
              event: t1159,
              p: i595,
              m: this.m,
              handler: this
          }), this.el.event().defaultPrevented) return i595;
          if ("function" == typeof r317) {
              var l202 = r317.call(this.el, a448, s381, this.m);
              "boolean" == typeof l202 && (l202 = {
                  x: l202,
                  y: l202
              }), !0 === l202.x ? this.el.x(a448) : !1 !== l202.x && this.el.x(l202.x), !0 === l202.y ? this.el.y(s381) : !1 !== l202.y && this.el.y(l202.y);
          } else "object" == typeof r317 && (null != r317.minX && a448 < r317.minX ? o278 = (a448 = r317.minX) - this.startPoints.box.x : null != r317.maxX && a448 > r317.maxX - e820.width && (o278 = (a448 = r317.maxX - e820.width) - this.startPoints.box.x), null != r317.minY && s381 < r317.minY ? n235 = (s381 = r317.minY) - this.startPoints.box.y : null != r317.maxY && s381 > r317.maxY - e820.height && (n235 = (s381 = r317.maxY - e820.height) - this.startPoints.box.y), null != r317.snapToGrid && (a448 -= a448 % r317.snapToGrid, s381 -= s381 % r317.snapToGrid, o278 -= o278 % r317.snapToGrid, n235 -= n235 % r317.snapToGrid), this.el instanceof SVG.G ? this.el.matrix(this.startPoints.transform).transform({
              x: o278,
              y: n235
          }, !0) : this.el.move(a448, s381));
          return i595;
      }, t1147.prototype.end = function(t1160) {
          var e821 = this.drag(t1160);
          this.el.fire("dragend", {
              event: t1160,
              p: e821,
              m: this.m,
              handler: this
          }), SVG.off(window, "mousemove.drag"), SVG.off(window, "touchmove.drag"), SVG.off(window, "mouseup.drag"), SVG.off(window, "touchend.drag");
      }, SVG.extend(SVG.Element, {
          draggable: function(e822, i596) {
              "function" != typeof e822 && "object" != typeof e822 || (i596 = e822, e822 = !0);
              var a449 = this.remember("_draggable") || new t1147(this);
              return (e822 = void 0 === e822 || e822) ? a449.init(i596 || {
              }, e822) : (this.off("mousedown.drag"), this.off("touchstart.drag")), this;
          }
      });
  }).call(void 0), (function() {
      function t1161(t1162) {
          this.el = t1162, t1162.remember("_selectHandler", this), this.pointSelection = {
              isSelected: !1
          }, this.rectSelection = {
              isSelected: !1
          }, this.pointsList = {
              lt: [
                  0,
                  0
              ],
              rt: [
                  "width",
                  0
              ],
              rb: [
                  "width",
                  "height"
              ],
              lb: [
                  0,
                  "height"
              ],
              t: [
                  "width",
                  0
              ],
              r: [
                  "width",
                  "height"
              ],
              b: [
                  "width",
                  "height"
              ],
              l: [
                  0,
                  "height"
              ]
          }, this.pointCoord = function(t1163, e823, i597) {
              var a450 = "string" != typeof t1163 ? t1163 : e823[t1163];
              return i597 ? a450 / 2 : a450;
          }, this.pointCoords = function(t1164, e824) {
              var i598 = this.pointsList[t1164];
              return {
                  x: this.pointCoord(i598[0], e824, "t" === t1164 || "b" === t1164),
                  y: this.pointCoord(i598[1], e824, "r" === t1164 || "l" === t1164)
              };
          };
      }
      t1161.prototype.init = function(t1165, e825) {
          var i599 = this.el.bbox();
          this.options = {
          };
          var a451 = this.el.selectize.defaults.points;
          for(var s in this.el.selectize.defaults)this.options[s] = this.el.selectize.defaults[s], void 0 !== e825[s] && (this.options[s] = e825[s]);
          var r318 = [
              "points",
              "pointsExclude"
          ];
          for(var s in r318){
              var o279 = this.options[r318[s]];
              "string" == typeof o279 ? o279 = o279.length > 0 ? o279.split(/\s*,\s*/i) : [] : "boolean" == typeof o279 && "points" === r318[s] && (o279 = o279 ? a451 : []), this.options[r318[s]] = o279;
          }
          this.options.points = [
              a451,
              this.options.points
          ].reduce(function(t1166, e826) {
              return t1166.filter(function(t1167) {
                  return e826.indexOf(t1167) > -1;
              });
          }), this.options.points = [
              this.options.points,
              this.options.pointsExclude
          ].reduce(function(t1168, e827) {
              return t1168.filter(function(t1169) {
                  return e827.indexOf(t1169) < 0;
              });
          }), this.parent = this.el.parent(), this.nested = this.nested || this.parent.group(), this.nested.matrix(new SVG.Matrix(this.el).translate(i599.x, i599.y)), this.options.deepSelect && -1 !== [
              "line",
              "polyline",
              "polygon"
          ].indexOf(this.el.type) ? this.selectPoints(t1165) : this.selectRect(t1165), this.observe(), this.cleanup();
      }, t1161.prototype.selectPoints = function(t1170) {
          return this.pointSelection.isSelected = t1170, this.pointSelection.set || (this.pointSelection.set = this.parent.set(), this.drawPoints()), this;
      }, t1161.prototype.getPointArray = function() {
          var t1171 = this.el.bbox();
          return this.el.array().valueOf().map(function(e828) {
              return [
                  e828[0] - t1171.x,
                  e828[1] - t1171.y
              ];
          });
      }, t1161.prototype.drawPoints = function() {
          for(var t1172 = this, e829 = this.getPointArray(), i600 = 0, a452 = e829.length; i600 < a452; ++i600){
              var s382 = function(e830) {
                  return function(i601) {
                      (i601 = i601 || window.event).preventDefault ? i601.preventDefault() : i601.returnValue = !1, i601.stopPropagation();
                      var a453 = i601.pageX || i601.touches[0].pageX, s384 = i601.pageY || i601.touches[0].pageY;
                      t1172.el.fire("point", {
                          x: a453,
                          y: s384,
                          i: e830,
                          event: i601
                      });
                  };
              }(i600), r319 = this.drawPoint(e829[i600][0], e829[i600][1]).addClass(this.options.classPoints).addClass(this.options.classPoints + "_point").on("touchstart", s382).on("mousedown", s382);
              this.pointSelection.set.add(r319);
          }
      }, t1161.prototype.drawPoint = function(t1173, e831) {
          var i602 = this.options.pointType;
          switch(i602){
              case "circle":
                  return this.drawCircle(t1173, e831);
              case "rect":
                  return this.drawRect(t1173, e831);
              default:
                  if ("function" == typeof i602) return i602.call(this, t1173, e831);
                  throw new Error("Unknown " + i602 + " point type!");
          }
      }, t1161.prototype.drawCircle = function(t1174, e832) {
          return this.nested.circle(this.options.pointSize).center(t1174, e832);
      }, t1161.prototype.drawRect = function(t1175, e833) {
          return this.nested.rect(this.options.pointSize, this.options.pointSize).center(t1175, e833);
      }, t1161.prototype.updatePointSelection = function() {
          var t1176 = this.getPointArray();
          this.pointSelection.set.each(function(e) {
              this.cx() === t1176[e][0] && this.cy() === t1176[e][1] || this.center(t1176[e][0], t1176[e][1]);
          });
      }, t1161.prototype.updateRectSelection = function() {
          var t1177 = this, e834 = this.el.bbox();
          if (this.rectSelection.set.get(0).attr({
              width: e834.width,
              height: e834.height
          }), this.options.points.length && this.options.points.map(function(i604, a454) {
              var s385 = t1177.pointCoords(i604, e834);
              t1177.rectSelection.set.get(a454 + 1).center(s385.x, s385.y);
          }), this.options.rotationPoint) {
              var i603 = this.rectSelection.set.length();
              this.rectSelection.set.get(i603 - 1).center(e834.width / 2, 20);
          }
      }, t1161.prototype.selectRect = function(t1178) {
          var e835 = this, i605 = this.el.bbox();
          function a455(t1179) {
              return function(i606) {
                  (i606 = i606 || window.event).preventDefault ? i606.preventDefault() : i606.returnValue = !1, i606.stopPropagation();
                  var a456 = i606.pageX || i606.touches[0].pageX, s387 = i606.pageY || i606.touches[0].pageY;
                  e835.el.fire(t1179, {
                      x: a456,
                      y: s387,
                      event: i606
                  });
              };
          }
          if (this.rectSelection.isSelected = t1178, this.rectSelection.set = this.rectSelection.set || this.parent.set(), this.rectSelection.set.get(0) || this.rectSelection.set.add(this.nested.rect(i605.width, i605.height).addClass(this.options.classRect)), this.options.points.length && this.rectSelection.set.length() < 2) this.options.points.map(function(t1180, s) {
              var r321 = e835.pointCoords(t1180, i605), o280 = e835.drawPoint(r321.x, r321.y).attr("class", e835.options.classPoints + "_" + t1180).on("mousedown", a455(t1180)).on("touchstart", a455(t1180));
              e835.rectSelection.set.add(o280);
          }), this.rectSelection.set.each(function() {
              this.addClass(e835.options.classPoints);
          });
          if (this.options.rotationPoint && (this.options.points && !this.rectSelection.set.get(9) || !this.options.points && !this.rectSelection.set.get(1))) {
              var s386 = function(t1181) {
                  (t1181 = t1181 || window.event).preventDefault ? t1181.preventDefault() : t1181.returnValue = !1, t1181.stopPropagation();
                  var i607 = t1181.pageX || t1181.touches[0].pageX, a457 = t1181.pageY || t1181.touches[0].pageY;
                  e835.el.fire("rot", {
                      x: i607,
                      y: a457,
                      event: t1181
                  });
              }, r320 = this.drawPoint(i605.width / 2, 20).attr("class", this.options.classPoints + "_rot").on("touchstart", s386).on("mousedown", s386);
              this.rectSelection.set.add(r320);
          }
      }, t1161.prototype.handler = function() {
          var t1182 = this.el.bbox();
          this.nested.matrix(new SVG.Matrix(this.el).translate(t1182.x, t1182.y)), this.rectSelection.isSelected && this.updateRectSelection(), this.pointSelection.isSelected && this.updatePointSelection();
      }, t1161.prototype.observe = function() {
          var t1183 = this;
          if (MutationObserver) {
              if (this.rectSelection.isSelected || this.pointSelection.isSelected) this.observerInst = this.observerInst || new MutationObserver(function() {
                  t1183.handler();
              }), this.observerInst.observe(this.el.node, {
                  attributes: !0
              });
              else try {
                  this.observerInst.disconnect(), delete this.observerInst;
              } catch (t) {
              }
          } else this.el.off("DOMAttrModified.select"), (this.rectSelection.isSelected || this.pointSelection.isSelected) && this.el.on("DOMAttrModified.select", function() {
              t1183.handler();
          });
      }, t1161.prototype.cleanup = function() {
          !this.rectSelection.isSelected && this.rectSelection.set && (this.rectSelection.set.each(function() {
              this.remove();
          }), this.rectSelection.set.clear(), delete this.rectSelection.set), !this.pointSelection.isSelected && this.pointSelection.set && (this.pointSelection.set.each(function() {
              this.remove();
          }), this.pointSelection.set.clear(), delete this.pointSelection.set), this.pointSelection.isSelected || this.rectSelection.isSelected || (this.nested.remove(), delete this.nested);
      }, SVG.extend(SVG.Element, {
          selectize: function(e836, i608) {
              return "object" == typeof e836 && (i608 = e836, e836 = !0), (this.remember("_selectHandler") || new t1161(this)).init(void 0 === e836 || e836, i608 || {
              }), this;
          }
      }), SVG.Element.prototype.selectize.defaults = {
          points: [
              "lt",
              "rt",
              "rb",
              "lb",
              "t",
              "r",
              "b",
              "l"
          ],
          pointsExclude: [],
          classRect: "svg_select_boundingRect",
          classPoints: "svg_select_points",
          pointSize: 7,
          rotationPoint: !0,
          deepSelect: !1,
          pointType: "circle"
      };
  })(), (function() {
      (function() {
          function t1184(t1185) {
              t1185.remember("_resizeHandler", this), this.el = t1185, this.parameters = {
              }, this.lastUpdateCall = null, this.p = t1185.doc().node.createSVGPoint();
          }
          t1184.prototype.transformPoint = function(t1186, e837, i609) {
              return this.p.x = t1186 - (this.offset.x - window.pageXOffset), this.p.y = e837 - (this.offset.y - window.pageYOffset), this.p.matrixTransform(i609 || this.m);
          }, t1184.prototype._extractPosition = function(t1187) {
              return {
                  x: null != t1187.clientX ? t1187.clientX : t1187.touches[0].clientX,
                  y: null != t1187.clientY ? t1187.clientY : t1187.touches[0].clientY
              };
          }, t1184.prototype.init = function(t1188) {
              var e838 = this;
              if (this.stop(), "stop" !== t1188) {
                  for(var i in this.options = {
                  }, this.el.resize.defaults)this.options[i] = this.el.resize.defaults[i], void 0 !== t1188[i] && (this.options[i] = t1188[i]);
                  this.el.on("lt.resize", function(t1189) {
                      e838.resize(t1189 || window.event);
                  }), this.el.on("rt.resize", function(t1190) {
                      e838.resize(t1190 || window.event);
                  }), this.el.on("rb.resize", function(t1191) {
                      e838.resize(t1191 || window.event);
                  }), this.el.on("lb.resize", function(t1192) {
                      e838.resize(t1192 || window.event);
                  }), this.el.on("t.resize", function(t1193) {
                      e838.resize(t1193 || window.event);
                  }), this.el.on("r.resize", function(t1194) {
                      e838.resize(t1194 || window.event);
                  }), this.el.on("b.resize", function(t1195) {
                      e838.resize(t1195 || window.event);
                  }), this.el.on("l.resize", function(t1196) {
                      e838.resize(t1196 || window.event);
                  }), this.el.on("rot.resize", function(t1197) {
                      e838.resize(t1197 || window.event);
                  }), this.el.on("point.resize", function(t1198) {
                      e838.resize(t1198 || window.event);
                  }), this.update();
              }
          }, t1184.prototype.stop = function() {
              return this.el.off("lt.resize"), this.el.off("rt.resize"), this.el.off("rb.resize"), this.el.off("lb.resize"), this.el.off("t.resize"), this.el.off("r.resize"), this.el.off("b.resize"), this.el.off("l.resize"), this.el.off("rot.resize"), this.el.off("point.resize"), this;
          }, t1184.prototype.resize = function(t1199) {
              var e839 = this;
              this.m = this.el.node.getScreenCTM().inverse(), this.offset = {
                  x: window.pageXOffset,
                  y: window.pageYOffset
              };
              var i610 = this._extractPosition(t1199.detail.event);
              if (this.parameters = {
                  type: this.el.type,
                  p: this.transformPoint(i610.x, i610.y),
                  x: t1199.detail.x,
                  y: t1199.detail.y,
                  box: this.el.bbox(),
                  rotation: this.el.transform().rotation
              }, "text" === this.el.type && (this.parameters.fontSize = this.el.attr()["font-size"]), void 0 !== t1199.detail.i) {
                  var a458 = this.el.array().valueOf();
                  this.parameters.i = t1199.detail.i, this.parameters.pointCoords = [
                      a458[t1199.detail.i][0],
                      a458[t1199.detail.i][1]
                  ];
              }
              switch(t1199.type){
                  case "lt":
                      this.calc = function(t1200, e840) {
                          var i611 = this.snapToGrid(t1200, e840);
                          if (this.parameters.box.width - i611[0] > 0 && this.parameters.box.height - i611[1] > 0) {
                              if ("text" === this.parameters.type) return this.el.move(this.parameters.box.x + i611[0], this.parameters.box.y), void this.el.attr("font-size", this.parameters.fontSize - i611[0]);
                              i611 = this.checkAspectRatio(i611), this.el.move(this.parameters.box.x + i611[0], this.parameters.box.y + i611[1]).size(this.parameters.box.width - i611[0], this.parameters.box.height - i611[1]);
                          }
                      };
                      break;
                  case "rt":
                      this.calc = function(t1201, e841) {
                          var i612 = this.snapToGrid(t1201, e841, 2);
                          if (this.parameters.box.width + i612[0] > 0 && this.parameters.box.height - i612[1] > 0) {
                              if ("text" === this.parameters.type) return this.el.move(this.parameters.box.x - i612[0], this.parameters.box.y), void this.el.attr("font-size", this.parameters.fontSize + i612[0]);
                              i612 = this.checkAspectRatio(i612, !0), this.el.move(this.parameters.box.x, this.parameters.box.y + i612[1]).size(this.parameters.box.width + i612[0], this.parameters.box.height - i612[1]);
                          }
                      };
                      break;
                  case "rb":
                      this.calc = function(t1202, e842) {
                          var i613 = this.snapToGrid(t1202, e842, 0);
                          if (this.parameters.box.width + i613[0] > 0 && this.parameters.box.height + i613[1] > 0) {
                              if ("text" === this.parameters.type) return this.el.move(this.parameters.box.x - i613[0], this.parameters.box.y), void this.el.attr("font-size", this.parameters.fontSize + i613[0]);
                              i613 = this.checkAspectRatio(i613), this.el.move(this.parameters.box.x, this.parameters.box.y).size(this.parameters.box.width + i613[0], this.parameters.box.height + i613[1]);
                          }
                      };
                      break;
                  case "lb":
                      this.calc = function(t1203, e843) {
                          var i614 = this.snapToGrid(t1203, e843, 1);
                          if (this.parameters.box.width - i614[0] > 0 && this.parameters.box.height + i614[1] > 0) {
                              if ("text" === this.parameters.type) return this.el.move(this.parameters.box.x + i614[0], this.parameters.box.y), void this.el.attr("font-size", this.parameters.fontSize - i614[0]);
                              i614 = this.checkAspectRatio(i614, !0), this.el.move(this.parameters.box.x + i614[0], this.parameters.box.y).size(this.parameters.box.width - i614[0], this.parameters.box.height + i614[1]);
                          }
                      };
                      break;
                  case "t":
                      this.calc = function(t1204, e844) {
                          var i615 = this.snapToGrid(t1204, e844, 2);
                          if (this.parameters.box.height - i615[1] > 0) {
                              if ("text" === this.parameters.type) return;
                              this.el.move(this.parameters.box.x, this.parameters.box.y + i615[1]).height(this.parameters.box.height - i615[1]);
                          }
                      };
                      break;
                  case "r":
                      this.calc = function(t1205, e845) {
                          var i616 = this.snapToGrid(t1205, e845, 0);
                          if (this.parameters.box.width + i616[0] > 0) {
                              if ("text" === this.parameters.type) return;
                              this.el.move(this.parameters.box.x, this.parameters.box.y).width(this.parameters.box.width + i616[0]);
                          }
                      };
                      break;
                  case "b":
                      this.calc = function(t1206, e846) {
                          var i617 = this.snapToGrid(t1206, e846, 0);
                          if (this.parameters.box.height + i617[1] > 0) {
                              if ("text" === this.parameters.type) return;
                              this.el.move(this.parameters.box.x, this.parameters.box.y).height(this.parameters.box.height + i617[1]);
                          }
                      };
                      break;
                  case "l":
                      this.calc = function(t1207, e847) {
                          var i618 = this.snapToGrid(t1207, e847, 1);
                          if (this.parameters.box.width - i618[0] > 0) {
                              if ("text" === this.parameters.type) return;
                              this.el.move(this.parameters.box.x + i618[0], this.parameters.box.y).width(this.parameters.box.width - i618[0]);
                          }
                      };
                      break;
                  case "rot":
                      this.calc = function(t1208, e848) {
                          var i619 = t1208 + this.parameters.p.x, a459 = e848 + this.parameters.p.y, s388 = Math.atan2(this.parameters.p.y - this.parameters.box.y - this.parameters.box.height / 2, this.parameters.p.x - this.parameters.box.x - this.parameters.box.width / 2), r322 = Math.atan2(a459 - this.parameters.box.y - this.parameters.box.height / 2, i619 - this.parameters.box.x - this.parameters.box.width / 2), o281 = this.parameters.rotation + 180 * (r322 - s388) / Math.PI + this.options.snapToAngle / 2;
                          this.el.center(this.parameters.box.cx, this.parameters.box.cy).rotate(o281 - o281 % this.options.snapToAngle, this.parameters.box.cx, this.parameters.box.cy);
                      };
                      break;
                  case "point":
                      this.calc = function(t1209, e849) {
                          var i620 = this.snapToGrid(t1209, e849, this.parameters.pointCoords[0], this.parameters.pointCoords[1]), a460 = this.el.array().valueOf();
                          a460[this.parameters.i][0] = this.parameters.pointCoords[0] + i620[0], a460[this.parameters.i][1] = this.parameters.pointCoords[1] + i620[1], this.el.plot(a460);
                      };
              }
              this.el.fire("resizestart", {
                  dx: this.parameters.x,
                  dy: this.parameters.y,
                  event: t1199
              }), SVG.on(window, "touchmove.resize", function(t1210) {
                  e839.update(t1210 || window.event);
              }), SVG.on(window, "touchend.resize", function() {
                  e839.done();
              }), SVG.on(window, "mousemove.resize", function(t1211) {
                  e839.update(t1211 || window.event);
              }), SVG.on(window, "mouseup.resize", function() {
                  e839.done();
              });
          }, t1184.prototype.update = function(t1212) {
              if (t1212) {
                  var e850 = this._extractPosition(t1212), i621 = this.transformPoint(e850.x, e850.y), a461 = i621.x - this.parameters.p.x, s389 = i621.y - this.parameters.p.y;
                  this.lastUpdateCall = [
                      a461,
                      s389
                  ], this.calc(a461, s389), this.el.fire("resizing", {
                      dx: a461,
                      dy: s389,
                      event: t1212
                  });
              } else this.lastUpdateCall && this.calc(this.lastUpdateCall[0], this.lastUpdateCall[1]);
          }, t1184.prototype.done = function() {
              this.lastUpdateCall = null, SVG.off(window, "mousemove.resize"), SVG.off(window, "mouseup.resize"), SVG.off(window, "touchmove.resize"), SVG.off(window, "touchend.resize"), this.el.fire("resizedone");
          }, t1184.prototype.snapToGrid = function(t1213, e851, i622, a462) {
              var s390;
              return void 0 !== a462 ? s390 = [
                  (i622 + t1213) % this.options.snapToGrid,
                  (a462 + e851) % this.options.snapToGrid
              ] : (i622 = null == i622 ? 3 : i622, s390 = [
                  (this.parameters.box.x + t1213 + (1 & i622 ? 0 : this.parameters.box.width)) % this.options.snapToGrid,
                  (this.parameters.box.y + e851 + (2 & i622 ? 0 : this.parameters.box.height)) % this.options.snapToGrid
              ]), t1213 < 0 && (s390[0] -= this.options.snapToGrid), e851 < 0 && (s390[1] -= this.options.snapToGrid), t1213 -= Math.abs(s390[0]) < this.options.snapToGrid / 2 ? s390[0] : s390[0] - (t1213 < 0 ? -this.options.snapToGrid : this.options.snapToGrid), e851 -= Math.abs(s390[1]) < this.options.snapToGrid / 2 ? s390[1] : s390[1] - (e851 < 0 ? -this.options.snapToGrid : this.options.snapToGrid), this.constraintToBox(t1213, e851, i622, a462);
          }, t1184.prototype.constraintToBox = function(t1214, e852, i623, a463) {
              var s391, r323, o282 = this.options.constraint || {
              };
              return void 0 !== a463 ? (s391 = i623, r323 = a463) : (s391 = this.parameters.box.x + (1 & i623 ? 0 : this.parameters.box.width), r323 = this.parameters.box.y + (2 & i623 ? 0 : this.parameters.box.height)), void 0 !== o282.minX && s391 + t1214 < o282.minX && (t1214 = o282.minX - s391), void 0 !== o282.maxX && s391 + t1214 > o282.maxX && (t1214 = o282.maxX - s391), void 0 !== o282.minY && r323 + e852 < o282.minY && (e852 = o282.minY - r323), void 0 !== o282.maxY && r323 + e852 > o282.maxY && (e852 = o282.maxY - r323), [
                  t1214,
                  e852
              ];
          }, t1184.prototype.checkAspectRatio = function(t1215, e853) {
              if (!this.options.saveAspectRatio) return t1215;
              var i624 = t1215.slice(), a464 = this.parameters.box.width / this.parameters.box.height, s392 = this.parameters.box.width + t1215[0], r324 = this.parameters.box.height - t1215[1], o283 = s392 / r324;
              return o283 < a464 ? (i624[1] = s392 / a464 - this.parameters.box.height, e853 && (i624[1] = -i624[1])) : o283 > a464 && (i624[0] = this.parameters.box.width - r324 * a464, e853 && (i624[0] = -i624[0])), i624;
          }, SVG.extend(SVG.Element, {
              resize: function(e854) {
                  return (this.remember("_resizeHandler") || new t1184(this)).init(e854 || {
                  }), this;
              }
          }), SVG.Element.prototype.resize.defaults = {
              snapToAngle: 0.1,
              snapToGrid: 1,
              constraint: {
              },
              saveAspectRatio: !1
          };
      }).call(this);
  })(), void 0 === window.Apex && (window.Apex = {
  });
  var Yt = function() {
      function t1216(e855) {
          a(this, t1216), this.ctx = e855, this.w = e855.w;
      }
      return r(t1216, [
          {
              key: "initModules",
              value: function() {
                  this.ctx.publicMethods = [
                      "updateOptions",
                      "updateSeries",
                      "appendData",
                      "appendSeries",
                      "toggleSeries",
                      "showSeries",
                      "hideSeries",
                      "setLocale",
                      "resetSeries",
                      "zoomX",
                      "toggleDataPointSelection",
                      "dataURI",
                      "addXaxisAnnotation",
                      "addYaxisAnnotation",
                      "addPointAnnotation",
                      "clearAnnotations",
                      "removeAnnotation",
                      "paper",
                      "destroy"
                  ], this.ctx.eventList = [
                      "click",
                      "mousedown",
                      "mousemove",
                      "mouseleave",
                      "touchstart",
                      "touchmove",
                      "touchleave",
                      "mouseup",
                      "touchend"
                  ], this.ctx.animations = new f(this.ctx), this.ctx.axes = new J(this.ctx), this.ctx.core = new Xt(this.ctx.el, this.ctx), this.ctx.config = new H({
                  }), this.ctx.data = new O(this.ctx), this.ctx.grid = new _(this.ctx), this.ctx.graphics = new b(this.ctx), this.ctx.coreUtils = new y(this.ctx), this.ctx.crosshairs = new Q(this.ctx), this.ctx.events = new Z(this.ctx), this.ctx.exports = new V(this.ctx), this.ctx.localization = new $(this.ctx), this.ctx.options = new S, this.ctx.responsive = new K(this.ctx), this.ctx.series = new z(this.ctx), this.ctx.theme = new tt(this.ctx), this.ctx.formatters = new W(this.ctx), this.ctx.titleSubtitle = new et(this.ctx), this.ctx.legend = new lt(this.ctx), this.ctx.toolbar = new ht(this.ctx), this.ctx.dimensions = new ot(this.ctx), this.ctx.updateHelpers = new Et(this.ctx), this.ctx.zoomPanSelection = new ct(this.ctx), this.ctx.w.globals.tooltip = new bt(this.ctx);
              }
          }
      ]), t1216;
  }(), Ft = function() {
      function t1217(e856) {
          a(this, t1217), this.ctx = e856, this.w = e856.w;
      }
      return r(t1217, [
          {
              key: "clear",
              value: function(t1218) {
                  var e857 = t1218.isUpdating;
                  this.ctx.zoomPanSelection && this.ctx.zoomPanSelection.destroy(), this.ctx.toolbar && this.ctx.toolbar.destroy(), this.ctx.animations = null, this.ctx.axes = null, this.ctx.annotations = null, this.ctx.core = null, this.ctx.data = null, this.ctx.grid = null, this.ctx.series = null, this.ctx.responsive = null, this.ctx.theme = null, this.ctx.formatters = null, this.ctx.titleSubtitle = null, this.ctx.legend = null, this.ctx.dimensions = null, this.ctx.options = null, this.ctx.crosshairs = null, this.ctx.zoomPanSelection = null, this.ctx.updateHelpers = null, this.ctx.toolbar = null, this.ctx.localization = null, this.ctx.w.globals.tooltip = null, this.clearDomElements({
                      isUpdating: e857
                  });
              }
          },
          {
              key: "killSVG",
              value: function(t1219) {
                  t1219.each(function(t, e) {
                      this.removeClass("*"), this.off(), this.stop();
                  }, !0), t1219.ungroup(), t1219.clear();
              }
          },
          {
              key: "clearDomElements",
              value: function(t1220) {
                  var e858 = this, i625 = t1220.isUpdating, a465 = this.w.globals.dom.Paper.node;
                  a465.parentNode && a465.parentNode.parentNode && !i625 && (a465.parentNode.parentNode.style.minHeight = "unset");
                  var s393 = this.w.globals.dom.baseEl;
                  s393 && this.ctx.eventList.forEach(function(t1221) {
                      s393.removeEventListener(t1221, e858.ctx.events.documentEvent);
                  });
                  var r325 = this.w.globals.dom;
                  if (null !== this.ctx.el) for(; this.ctx.el.firstChild;)this.ctx.el.removeChild(this.ctx.el.firstChild);
                  this.killSVG(r325.Paper), r325.Paper.remove(), r325.elWrap = null, r325.elGraphical = null, r325.elAnnotations = null, r325.elLegendWrap = null, r325.baseEl = null, r325.elGridRect = null, r325.elGridRectMask = null, r325.elGridRectMarkerMask = null, r325.elForecastMask = null, r325.elNonForecastMask = null, r325.elDefs = null;
              }
          }
      ]), t1217;
  }(), Rt = new WeakMap;
  var Ht = function() {
      function t1222(e859, i626) {
          a(this, t1222), this.opts = i626, this.ctx = this, this.w = new N(i626).init(), this.el = e859, this.w.globals.cuid = p.randomId(), this.w.globals.chartID = this.w.config.chart.id ? p.escapeString(this.w.config.chart.id) : this.w.globals.cuid, new Yt(this).initModules(), this.create = p.bind(this.create, this), this.windowResizeHandler = this._windowResizeHandler.bind(this), this.parentResizeHandler = this._parentResizeCallback.bind(this);
      }
      return r(t1222, [
          {
              key: "render",
              value: function() {
                  var t1223 = this;
                  return new Promise(function(e860, i627) {
                      if (null !== t1223.el) {
                          void 0 === Apex._chartInstances && (Apex._chartInstances = []), t1223.w.config.chart.id && Apex._chartInstances.push({
                              id: t1223.w.globals.chartID,
                              group: t1223.w.config.chart.group,
                              chart: t1223
                          }), t1223.setLocale(t1223.w.config.chart.defaultLocale);
                          var a466 = t1223.w.config.chart.events.beforeMount;
                          if ("function" == typeof a466 && a466(t1223, t1223.w), t1223.events.fireEvent("beforeMount", [
                              t1223,
                              t1223.w
                          ]), window.addEventListener("resize", t1223.windowResizeHandler), h167 = t1223.el.parentNode, c150 = t1223.parentResizeHandler, d133 = !1, g111 = new ResizeObserver(function(t1224) {
                              d133 && c150.call(h167, t1224), d133 = !0;
                          }), h167.nodeType === Node.DOCUMENT_FRAGMENT_NODE ? Array.from(h167.children).forEach(function(t1225) {
                              return g111.observe(t1225);
                          }) : g111.observe(h167), Rt.set(c150, g111), !t1223.css) {
                              var s394 = t1223.el.getRootNode && t1223.el.getRootNode(), r326 = p.is("ShadowRoot", s394), o284 = t1223.el.ownerDocument, n236 = o284.getElementById("apexcharts-css");
                              !r326 && n236 || (t1223.css = document.createElement("style"), t1223.css.id = "apexcharts-css", t1223.css.textContent = '.apexcharts-canvas {\n  position: relative;\n  user-select: none;\n  /* cannot give overflow: hidden as it will crop tooltips which overflow outside chart area */\n}\n\n\n/* scrollbar is not visible by default for legend, hence forcing the visibility */\n.apexcharts-canvas ::-webkit-scrollbar {\n  -webkit-appearance: none;\n  width: 6px;\n}\n\n.apexcharts-canvas ::-webkit-scrollbar-thumb {\n  border-radius: 4px;\n  background-color: rgba(0, 0, 0, .5);\n  box-shadow: 0 0 1px rgba(255, 255, 255, .5);\n  -webkit-box-shadow: 0 0 1px rgba(255, 255, 255, .5);\n}\n\n\n.apexcharts-inner {\n  position: relative;\n}\n\n.apexcharts-text tspan {\n  font-family: inherit;\n}\n\n.legend-mouseover-inactive {\n  transition: 0.15s ease all;\n  opacity: 0.20;\n}\n\n.apexcharts-series-collapsed {\n  opacity: 0;\n}\n\n.apexcharts-tooltip {\n  border-radius: 5px;\n  box-shadow: 2px 2px 6px -4px #999;\n  cursor: default;\n  font-size: 14px;\n  left: 62px;\n  opacity: 0;\n  pointer-events: none;\n  position: absolute;\n  top: 20px;\n  display: flex;\n  flex-direction: column;\n  overflow: hidden;\n  white-space: nowrap;\n  z-index: 12;\n  transition: 0.15s ease all;\n}\n\n.apexcharts-tooltip.apexcharts-active {\n  opacity: 1;\n  transition: 0.15s ease all;\n}\n\n.apexcharts-tooltip.apexcharts-theme-light {\n  border: 1px solid #e3e3e3;\n  background: rgba(255, 255, 255, 0.96);\n}\n\n.apexcharts-tooltip.apexcharts-theme-dark {\n  color: #fff;\n  background: rgba(30, 30, 30, 0.8);\n}\n\n.apexcharts-tooltip * {\n  font-family: inherit;\n}\n\n\n.apexcharts-tooltip-title {\n  padding: 6px;\n  font-size: 15px;\n  margin-bottom: 4px;\n}\n\n.apexcharts-tooltip.apexcharts-theme-light .apexcharts-tooltip-title {\n  background: #ECEFF1;\n  border-bottom: 1px solid #ddd;\n}\n\n.apexcharts-tooltip.apexcharts-theme-dark .apexcharts-tooltip-title {\n  background: rgba(0, 0, 0, 0.7);\n  border-bottom: 1px solid #333;\n}\n\n.apexcharts-tooltip-text-y-value,\n.apexcharts-tooltip-text-goals-value,\n.apexcharts-tooltip-text-z-value {\n  display: inline-block;\n  font-weight: 600;\n  margin-left: 5px;\n}\n\n.apexcharts-tooltip-title:empty,\n.apexcharts-tooltip-text-y-label:empty,\n.apexcharts-tooltip-text-y-value:empty,\n.apexcharts-tooltip-text-goals-label:empty,\n.apexcharts-tooltip-text-goals-value:empty,\n.apexcharts-tooltip-text-z-value:empty {\n  display: none;\n}\n\n.apexcharts-tooltip-text-y-value,\n.apexcharts-tooltip-text-goals-value,\n.apexcharts-tooltip-text-z-value {\n  font-weight: 600;\n}\n\n.apexcharts-tooltip-text-goals-label, \n.apexcharts-tooltip-text-goals-value {\n  padding: 6px 0 5px;\n}\n\n.apexcharts-tooltip-goals-group, \n.apexcharts-tooltip-text-goals-label, \n.apexcharts-tooltip-text-goals-value {\n  display: flex;\n}\n.apexcharts-tooltip-text-goals-label:not(:empty),\n.apexcharts-tooltip-text-goals-value:not(:empty) {\n  margin-top: -6px;\n}\n\n.apexcharts-tooltip-marker {\n  width: 12px;\n  height: 12px;\n  position: relative;\n  top: 0px;\n  margin-right: 10px;\n  border-radius: 50%;\n}\n\n.apexcharts-tooltip-series-group {\n  padding: 0 10px;\n  display: none;\n  text-align: left;\n  justify-content: left;\n  align-items: center;\n}\n\n.apexcharts-tooltip-series-group.apexcharts-active .apexcharts-tooltip-marker {\n  opacity: 1;\n}\n\n.apexcharts-tooltip-series-group.apexcharts-active,\n.apexcharts-tooltip-series-group:last-child {\n  padding-bottom: 4px;\n}\n\n.apexcharts-tooltip-series-group-hidden {\n  opacity: 0;\n  height: 0;\n  line-height: 0;\n  padding: 0 !important;\n}\n\n.apexcharts-tooltip-y-group {\n  padding: 6px 0 5px;\n}\n\n.apexcharts-tooltip-box, .apexcharts-custom-tooltip {\n  padding: 4px 8px;\n}\n\n.apexcharts-tooltip-boxPlot {\n  display: flex;\n  flex-direction: column-reverse;\n}\n\n.apexcharts-tooltip-box>div {\n  margin: 4px 0;\n}\n\n.apexcharts-tooltip-box span.value {\n  font-weight: bold;\n}\n\n.apexcharts-tooltip-rangebar {\n  padding: 5px 8px;\n}\n\n.apexcharts-tooltip-rangebar .category {\n  font-weight: 600;\n  color: #777;\n}\n\n.apexcharts-tooltip-rangebar .series-name {\n  font-weight: bold;\n  display: block;\n  margin-bottom: 5px;\n}\n\n.apexcharts-xaxistooltip {\n  opacity: 0;\n  padding: 9px 10px;\n  pointer-events: none;\n  color: #373d3f;\n  font-size: 13px;\n  text-align: center;\n  border-radius: 2px;\n  position: absolute;\n  z-index: 10;\n  background: #ECEFF1;\n  border: 1px solid #90A4AE;\n  transition: 0.15s ease all;\n}\n\n.apexcharts-xaxistooltip.apexcharts-theme-dark {\n  background: rgba(0, 0, 0, 0.7);\n  border: 1px solid rgba(0, 0, 0, 0.5);\n  color: #fff;\n}\n\n.apexcharts-xaxistooltip:after,\n.apexcharts-xaxistooltip:before {\n  left: 50%;\n  border: solid transparent;\n  content: " ";\n  height: 0;\n  width: 0;\n  position: absolute;\n  pointer-events: none;\n}\n\n.apexcharts-xaxistooltip:after {\n  border-color: rgba(236, 239, 241, 0);\n  border-width: 6px;\n  margin-left: -6px;\n}\n\n.apexcharts-xaxistooltip:before {\n  border-color: rgba(144, 164, 174, 0);\n  border-width: 7px;\n  margin-left: -7px;\n}\n\n.apexcharts-xaxistooltip-bottom:after,\n.apexcharts-xaxistooltip-bottom:before {\n  bottom: 100%;\n}\n\n.apexcharts-xaxistooltip-top:after,\n.apexcharts-xaxistooltip-top:before {\n  top: 100%;\n}\n\n.apexcharts-xaxistooltip-bottom:after {\n  border-bottom-color: #ECEFF1;\n}\n\n.apexcharts-xaxistooltip-bottom:before {\n  border-bottom-color: #90A4AE;\n}\n\n.apexcharts-xaxistooltip-bottom.apexcharts-theme-dark:after {\n  border-bottom-color: rgba(0, 0, 0, 0.5);\n}\n\n.apexcharts-xaxistooltip-bottom.apexcharts-theme-dark:before {\n  border-bottom-color: rgba(0, 0, 0, 0.5);\n}\n\n.apexcharts-xaxistooltip-top:after {\n  border-top-color: #ECEFF1\n}\n\n.apexcharts-xaxistooltip-top:before {\n  border-top-color: #90A4AE;\n}\n\n.apexcharts-xaxistooltip-top.apexcharts-theme-dark:after {\n  border-top-color: rgba(0, 0, 0, 0.5);\n}\n\n.apexcharts-xaxistooltip-top.apexcharts-theme-dark:before {\n  border-top-color: rgba(0, 0, 0, 0.5);\n}\n\n.apexcharts-xaxistooltip.apexcharts-active {\n  opacity: 1;\n  transition: 0.15s ease all;\n}\n\n.apexcharts-yaxistooltip {\n  opacity: 0;\n  padding: 4px 10px;\n  pointer-events: none;\n  color: #373d3f;\n  font-size: 13px;\n  text-align: center;\n  border-radius: 2px;\n  position: absolute;\n  z-index: 10;\n  background: #ECEFF1;\n  border: 1px solid #90A4AE;\n}\n\n.apexcharts-yaxistooltip.apexcharts-theme-dark {\n  background: rgba(0, 0, 0, 0.7);\n  border: 1px solid rgba(0, 0, 0, 0.5);\n  color: #fff;\n}\n\n.apexcharts-yaxistooltip:after,\n.apexcharts-yaxistooltip:before {\n  top: 50%;\n  border: solid transparent;\n  content: " ";\n  height: 0;\n  width: 0;\n  position: absolute;\n  pointer-events: none;\n}\n\n.apexcharts-yaxistooltip:after {\n  border-color: rgba(236, 239, 241, 0);\n  border-width: 6px;\n  margin-top: -6px;\n}\n\n.apexcharts-yaxistooltip:before {\n  border-color: rgba(144, 164, 174, 0);\n  border-width: 7px;\n  margin-top: -7px;\n}\n\n.apexcharts-yaxistooltip-left:after,\n.apexcharts-yaxistooltip-left:before {\n  left: 100%;\n}\n\n.apexcharts-yaxistooltip-right:after,\n.apexcharts-yaxistooltip-right:before {\n  right: 100%;\n}\n\n.apexcharts-yaxistooltip-left:after {\n  border-left-color: #ECEFF1;\n}\n\n.apexcharts-yaxistooltip-left:before {\n  border-left-color: #90A4AE;\n}\n\n.apexcharts-yaxistooltip-left.apexcharts-theme-dark:after {\n  border-left-color: rgba(0, 0, 0, 0.5);\n}\n\n.apexcharts-yaxistooltip-left.apexcharts-theme-dark:before {\n  border-left-color: rgba(0, 0, 0, 0.5);\n}\n\n.apexcharts-yaxistooltip-right:after {\n  border-right-color: #ECEFF1;\n}\n\n.apexcharts-yaxistooltip-right:before {\n  border-right-color: #90A4AE;\n}\n\n.apexcharts-yaxistooltip-right.apexcharts-theme-dark:after {\n  border-right-color: rgba(0, 0, 0, 0.5);\n}\n\n.apexcharts-yaxistooltip-right.apexcharts-theme-dark:before {\n  border-right-color: rgba(0, 0, 0, 0.5);\n}\n\n.apexcharts-yaxistooltip.apexcharts-active {\n  opacity: 1;\n}\n\n.apexcharts-yaxistooltip-hidden {\n  display: none;\n}\n\n.apexcharts-xcrosshairs,\n.apexcharts-ycrosshairs {\n  pointer-events: none;\n  opacity: 0;\n  transition: 0.15s ease all;\n}\n\n.apexcharts-xcrosshairs.apexcharts-active,\n.apexcharts-ycrosshairs.apexcharts-active {\n  opacity: 1;\n  transition: 0.15s ease all;\n}\n\n.apexcharts-ycrosshairs-hidden {\n  opacity: 0;\n}\n\n.apexcharts-selection-rect {\n  cursor: move;\n}\n\n.svg_select_boundingRect, .svg_select_points_rot {\n  pointer-events: none;\n  opacity: 0;\n  visibility: hidden;\n}\n.apexcharts-selection-rect + g .svg_select_boundingRect,\n.apexcharts-selection-rect + g .svg_select_points_rot {\n  opacity: 0;\n  visibility: hidden;\n}\n\n.apexcharts-selection-rect + g .svg_select_points_l,\n.apexcharts-selection-rect + g .svg_select_points_r {\n  cursor: ew-resize;\n  opacity: 1;\n  visibility: visible;\n}\n\n.svg_select_points {\n  fill: #efefef;\n  stroke: #333;\n  rx: 2;\n}\n\n.apexcharts-svg.apexcharts-zoomable.hovering-zoom {\n  cursor: crosshair\n}\n\n.apexcharts-svg.apexcharts-zoomable.hovering-pan {\n  cursor: move\n}\n\n.apexcharts-zoom-icon,\n.apexcharts-zoomin-icon,\n.apexcharts-zoomout-icon,\n.apexcharts-reset-icon,\n.apexcharts-pan-icon,\n.apexcharts-selection-icon,\n.apexcharts-menu-icon,\n.apexcharts-toolbar-custom-icon {\n  cursor: pointer;\n  width: 20px;\n  height: 20px;\n  line-height: 24px;\n  color: #6E8192;\n  text-align: center;\n}\n\n.apexcharts-zoom-icon svg,\n.apexcharts-zoomin-icon svg,\n.apexcharts-zoomout-icon svg,\n.apexcharts-reset-icon svg,\n.apexcharts-menu-icon svg {\n  fill: #6E8192;\n}\n\n.apexcharts-selection-icon svg {\n  fill: #444;\n  transform: scale(0.76)\n}\n\n.apexcharts-theme-dark .apexcharts-zoom-icon svg,\n.apexcharts-theme-dark .apexcharts-zoomin-icon svg,\n.apexcharts-theme-dark .apexcharts-zoomout-icon svg,\n.apexcharts-theme-dark .apexcharts-reset-icon svg,\n.apexcharts-theme-dark .apexcharts-pan-icon svg,\n.apexcharts-theme-dark .apexcharts-selection-icon svg,\n.apexcharts-theme-dark .apexcharts-menu-icon svg,\n.apexcharts-theme-dark .apexcharts-toolbar-custom-icon svg {\n  fill: #f3f4f5;\n}\n\n.apexcharts-canvas .apexcharts-zoom-icon.apexcharts-selected svg,\n.apexcharts-canvas .apexcharts-selection-icon.apexcharts-selected svg,\n.apexcharts-canvas .apexcharts-reset-zoom-icon.apexcharts-selected svg {\n  fill: #008FFB;\n}\n\n.apexcharts-theme-light .apexcharts-selection-icon:not(.apexcharts-selected):hover svg,\n.apexcharts-theme-light .apexcharts-zoom-icon:not(.apexcharts-selected):hover svg,\n.apexcharts-theme-light .apexcharts-zoomin-icon:hover svg,\n.apexcharts-theme-light .apexcharts-zoomout-icon:hover svg,\n.apexcharts-theme-light .apexcharts-reset-icon:hover svg,\n.apexcharts-theme-light .apexcharts-menu-icon:hover svg {\n  fill: #333;\n}\n\n.apexcharts-selection-icon,\n.apexcharts-menu-icon {\n  position: relative;\n}\n\n.apexcharts-reset-icon {\n  margin-left: 5px;\n}\n\n.apexcharts-zoom-icon,\n.apexcharts-reset-icon,\n.apexcharts-menu-icon {\n  transform: scale(0.85);\n}\n\n.apexcharts-zoomin-icon,\n.apexcharts-zoomout-icon {\n  transform: scale(0.7)\n}\n\n.apexcharts-zoomout-icon {\n  margin-right: 3px;\n}\n\n.apexcharts-pan-icon {\n  transform: scale(0.62);\n  position: relative;\n  left: 1px;\n  top: 0px;\n}\n\n.apexcharts-pan-icon svg {\n  fill: #fff;\n  stroke: #6E8192;\n  stroke-width: 2;\n}\n\n.apexcharts-pan-icon.apexcharts-selected svg {\n  stroke: #008FFB;\n}\n\n.apexcharts-pan-icon:not(.apexcharts-selected):hover svg {\n  stroke: #333;\n}\n\n.apexcharts-toolbar {\n  position: absolute;\n  z-index: 11;\n  max-width: 176px;\n  text-align: right;\n  border-radius: 3px;\n  padding: 0px 6px 2px 6px;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n}\n\n.apexcharts-menu {\n  background: #fff;\n  position: absolute;\n  top: 100%;\n  border: 1px solid #ddd;\n  border-radius: 3px;\n  padding: 3px;\n  right: 10px;\n  opacity: 0;\n  min-width: 110px;\n  transition: 0.15s ease all;\n  pointer-events: none;\n}\n\n.apexcharts-menu.apexcharts-menu-open {\n  opacity: 1;\n  pointer-events: all;\n  transition: 0.15s ease all;\n}\n\n.apexcharts-menu-item {\n  padding: 6px 7px;\n  font-size: 12px;\n  cursor: pointer;\n}\n\n.apexcharts-theme-light .apexcharts-menu-item:hover {\n  background: #eee;\n}\n\n.apexcharts-theme-dark .apexcharts-menu {\n  background: rgba(0, 0, 0, 0.7);\n  color: #fff;\n}\n\n@media screen and (min-width: 768px) {\n  .apexcharts-canvas:hover .apexcharts-toolbar {\n    opacity: 1;\n  }\n}\n\n.apexcharts-datalabel.apexcharts-element-hidden {\n  opacity: 0;\n}\n\n.apexcharts-pie-label,\n.apexcharts-datalabels,\n.apexcharts-datalabel,\n.apexcharts-datalabel-label,\n.apexcharts-datalabel-value {\n  cursor: default;\n  pointer-events: none;\n}\n\n.apexcharts-pie-label-delay {\n  opacity: 0;\n  animation-name: opaque;\n  animation-duration: 0.3s;\n  animation-fill-mode: forwards;\n  animation-timing-function: ease;\n}\n\n.apexcharts-canvas .apexcharts-element-hidden {\n  opacity: 0;\n}\n\n.apexcharts-hide .apexcharts-series-points {\n  opacity: 0;\n}\n\n.apexcharts-gridline,\n.apexcharts-annotation-rect,\n.apexcharts-tooltip .apexcharts-marker,\n.apexcharts-area-series .apexcharts-area,\n.apexcharts-line,\n.apexcharts-zoom-rect,\n.apexcharts-toolbar svg,\n.apexcharts-area-series .apexcharts-series-markers .apexcharts-marker.no-pointer-events,\n.apexcharts-line-series .apexcharts-series-markers .apexcharts-marker.no-pointer-events,\n.apexcharts-radar-series path,\n.apexcharts-radar-series polygon {\n  pointer-events: none;\n}\n\n\n/* markers */\n\n.apexcharts-marker {\n  transition: 0.15s ease all;\n}\n\n@keyframes opaque {\n  0% {\n    opacity: 0;\n  }\n  100% {\n    opacity: 1;\n  }\n}\n\n\n/* Resize generated styles */\n\n@keyframes resizeanim {\n  from {\n    opacity: 0;\n  }\n  to {\n    opacity: 0;\n  }\n}\n\n.resize-triggers {\n  animation: 1ms resizeanim;\n  visibility: hidden;\n  opacity: 0;\n}\n\n.resize-triggers,\n.resize-triggers>div,\n.contract-trigger:before {\n  content: " ";\n  display: block;\n  position: absolute;\n  top: 0;\n  left: 0;\n  height: 100%;\n  width: 100%;\n  overflow: hidden;\n}\n\n.resize-triggers>div {\n  background: #eee;\n  overflow: auto;\n}\n\n.contract-trigger:before {\n  width: 200%;\n  height: 200%;\n}', r326 ? s394.prepend(t1223.css) : o284.head.appendChild(t1223.css));
                          }
                          var l203 = t1223.create(t1223.w.config.series, {
                          });
                          if (!l203) return e860(t1223);
                          t1223.mount(l203).then(function() {
                              "function" == typeof t1223.w.config.chart.events.mounted && t1223.w.config.chart.events.mounted(t1223, t1223.w), t1223.events.fireEvent("mounted", [
                                  t1223,
                                  t1223.w
                              ]), e860(l203);
                          }).catch(function(t1226) {
                              i627(t1226);
                          });
                      } else i627(new Error("Element not found"));
                      var h167, c150, d133, g111;
                  });
              }
          },
          {
              key: "create",
              value: function(t1227, e861) {
                  var i628 = this.w;
                  new Yt(this).initModules();
                  var a467 = this.w.globals;
                  (a467.noData = !1, a467.animationEnded = !1, this.responsive.checkResponsiveConfig(e861), i628.config.xaxis.convertedCatToNumeric) && new R(i628.config).convertCatToNumericXaxis(i628.config, this.ctx);
                  if (null === this.el) return a467.animationEnded = !0, null;
                  if (this.core.setupElements(), "treemap" === i628.config.chart.type && (i628.config.grid.show = !1, i628.config.yaxis[0].show = !1), 0 === a467.svgWidth) return a467.animationEnded = !0, null;
                  var s395 = y.checkComboSeries(t1227);
                  a467.comboCharts = s395.comboCharts, a467.comboBarCount = s395.comboBarCount;
                  var r327 = t1227.every(function(t1228) {
                      return t1228.data && 0 === t1228.data.length;
                  });
                  (0 === t1227.length || r327) && this.series.handleNoData(), this.events.setupEventHandlers(), this.data.parseData(t1227), this.theme.init(), new P(this).setGlobalMarkerSize(), this.formatters.setLabelFormatters(), this.titleSubtitle.draw(), a467.noData && a467.collapsedSeries.length !== a467.series.length && !i628.config.legend.showForSingleSeries || this.legend.init(), this.series.hasAllSeriesEqualX(), a467.axisCharts && (this.core.coreCalculations(), "category" !== i628.config.xaxis.type && this.formatters.setLabelFormatters(), this.ctx.toolbar.minX = i628.globals.minX, this.ctx.toolbar.maxX = i628.globals.maxX), this.formatters.heatmapLabelFormatters(), this.dimensions.plotCoords();
                  var o285 = this.core.xySettings();
                  this.grid.createGridMask();
                  var n237 = this.core.plotChartType(t1227, o285), l204 = new M(this);
                  l204.bringForward(), i628.config.dataLabels.background.enabled && l204.dataLabelsBackground(), this.core.shiftGraphPosition();
                  var h168 = {
                      plot: {
                          left: i628.globals.translateX,
                          top: i628.globals.translateY,
                          width: i628.globals.gridWidth,
                          height: i628.globals.gridHeight
                      }
                  };
                  return {
                      elGraph: n237,
                      xyRatios: o285,
                      elInner: i628.globals.dom.elGraphical,
                      dimensions: h168
                  };
              }
          },
          {
              key: "mount",
              value: function() {
                  var t1229 = this, e862 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null, i629 = this, a468 = i629.w;
                  return new Promise(function(s396, r328) {
                      if (null === i629.el) return r328(new Error("Not enough data to display or target element not found"));
                      (null === e862 || a468.globals.allSeriesCollapsed) && i629.series.handleNoData(), "treemap" !== a468.config.chart.type && i629.axes.drawAxis(a468.config.chart.type, e862.xyRatios), i629.grid = new _(i629);
                      var o286 = i629.grid.drawGrid();
                      i629.annotations = new C(i629), i629.annotations.drawImageAnnos(), i629.annotations.drawTextAnnos(), "back" === a468.config.grid.position && o286 && a468.globals.dom.elGraphical.add(o286.el);
                      var n238 = new G(t1229.ctx), l205 = new q(t1229.ctx);
                      if (null !== o286 && (n238.xAxisLabelCorrections(o286.xAxisTickWidth), l205.setYAxisTextAlignments(), a468.config.yaxis.map(function(t1230, e863) {
                          -1 === a468.globals.ignoreYAxisIndexes.indexOf(e863) && l205.yAxisTitleRotate(e863, t1230.opposite);
                      })), "back" === a468.config.annotations.position && (a468.globals.dom.Paper.add(a468.globals.dom.elAnnotations), i629.annotations.drawAxesAnnotations()), Array.isArray(e862.elGraph)) for(var h169 = 0; h169 < e862.elGraph.length; h169++)a468.globals.dom.elGraphical.add(e862.elGraph[h169]);
                      else a468.globals.dom.elGraphical.add(e862.elGraph);
                      if ("front" === a468.config.grid.position && o286 && a468.globals.dom.elGraphical.add(o286.el), "front" === a468.config.xaxis.crosshairs.position && i629.crosshairs.drawXCrosshairs(), "front" === a468.config.yaxis[0].crosshairs.position && i629.crosshairs.drawYCrosshairs(), "front" === a468.config.annotations.position && (a468.globals.dom.Paper.add(a468.globals.dom.elAnnotations), i629.annotations.drawAxesAnnotations()), !a468.globals.noData) {
                          if (a468.config.tooltip.enabled && !a468.globals.noData && i629.w.globals.tooltip.drawTooltip(e862.xyRatios), a468.globals.axisCharts && (a468.globals.isXNumeric || a468.config.xaxis.convertedCatToNumeric || a468.globals.isRangeBar)) (a468.config.chart.zoom.enabled || a468.config.chart.selection && a468.config.chart.selection.enabled || a468.config.chart.pan && a468.config.chart.pan.enabled) && i629.zoomPanSelection.init({
                              xyRatios: e862.xyRatios
                          });
                          else {
                              var c151 = a468.config.chart.toolbar.tools;
                              [
                                  "zoom",
                                  "zoomin",
                                  "zoomout",
                                  "selection",
                                  "pan",
                                  "reset"
                              ].forEach(function(t) {
                                  c151[t] = !1;
                              });
                          }
                          a468.config.chart.toolbar.show && !a468.globals.allSeriesCollapsed && i629.toolbar.createToolbar();
                      }
                      a468.globals.memory.methodsToExec.length > 0 && a468.globals.memory.methodsToExec.forEach(function(t1231) {
                          t1231.method(t1231.params, !1, t1231.context);
                      }), a468.globals.axisCharts || a468.globals.noData || i629.core.resizeNonAxisCharts(), s396(i629);
                  });
              }
          },
          {
              key: "destroy",
              value: function() {
                  var t1232, e864;
                  window.removeEventListener("resize", this.windowResizeHandler), this.el.parentNode, t1232 = this.parentResizeHandler, (e864 = Rt.get(t1232)) && (e864.disconnect(), Rt.delete(t1232));
                  var i630 = this.w.config.chart.id;
                  i630 && Apex._chartInstances.forEach(function(t1233, e865) {
                      t1233.id === p.escapeString(i630) && Apex._chartInstances.splice(e865, 1);
                  }), new Ft(this.ctx).clear({
                      isUpdating: !1
                  });
              }
          },
          {
              key: "updateOptions",
              value: function(t1234) {
                  var e866 = this, i631 = arguments.length > 1 && void 0 !== arguments[1] && arguments[1], a469 = !(arguments.length > 2 && void 0 !== arguments[2]) || arguments[2], s397 = !(arguments.length > 3 && void 0 !== arguments[3]) || arguments[3], r329 = !(arguments.length > 4 && void 0 !== arguments[4]) || arguments[4], o287 = this.w;
                  return o287.globals.selection = void 0, t1234.series && (this.series.resetSeries(!1, !0, !1), t1234.series.length && t1234.series[0].data && (t1234.series = t1234.series.map(function(t1235, i632) {
                      return e866.updateHelpers._extendSeries(t1235, i632);
                  })), this.updateHelpers.revertDefaultAxisMinMax()), t1234.xaxis && (t1234 = this.updateHelpers.forceXAxisUpdate(t1234)), t1234.yaxis && (t1234 = this.updateHelpers.forceYAxisUpdate(t1234)), o287.globals.collapsedSeriesIndices.length > 0 && this.series.clearPreviousPaths(), t1234.theme && (t1234 = this.theme.updateThemeOptions(t1234)), this.updateHelpers._updateOptions(t1234, i631, a469, s397, r329);
              }
          },
          {
              key: "updateSeries",
              value: function() {
                  var t1236 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : [], e867 = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1], i633 = !(arguments.length > 2 && void 0 !== arguments[2]) || arguments[2];
                  return this.series.resetSeries(!1), this.updateHelpers.revertDefaultAxisMinMax(), this.updateHelpers._updateSeries(t1236, e867, i633);
              }
          },
          {
              key: "appendSeries",
              value: function(t1237) {
                  var e868 = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1], i634 = !(arguments.length > 2 && void 0 !== arguments[2]) || arguments[2], a470 = this.w.config.series.slice();
                  return a470.push(t1237), this.series.resetSeries(!1), this.updateHelpers.revertDefaultAxisMinMax(), this.updateHelpers._updateSeries(a470, e868, i634);
              }
          },
          {
              key: "appendData",
              value: function(t1238) {
                  var e869 = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1], i635 = this;
                  i635.w.globals.dataChanged = !0, i635.series.getPreviousPaths();
                  for(var a471 = i635.w.config.series.slice(), s398 = 0; s398 < a471.length; s398++)if (null !== t1238[s398] && void 0 !== t1238[s398]) for(var r330 = 0; r330 < t1238[s398].data.length; r330++)a471[s398].data.push(t1238[s398].data[r330]);
                  return i635.w.config.series = a471, e869 && (i635.w.globals.initialSeries = p.clone(i635.w.config.series)), this.update();
              }
          },
          {
              key: "update",
              value: function(t1239) {
                  var e870 = this;
                  return new Promise(function(i636, a472) {
                      new Ft(e870.ctx).clear({
                          isUpdating: !0
                      });
                      var s399 = e870.create(e870.w.config.series, t1239);
                      if (!s399) return i636(e870);
                      e870.mount(s399).then(function() {
                          "function" == typeof e870.w.config.chart.events.updated && e870.w.config.chart.events.updated(e870, e870.w), e870.events.fireEvent("updated", [
                              e870,
                              e870.w
                          ]), e870.w.globals.isDirty = !0, i636(e870);
                      }).catch(function(t1240) {
                          a472(t1240);
                      });
                  });
              }
          },
          {
              key: "getSyncedCharts",
              value: function() {
                  var t1241 = this.getGroupedCharts(), e871 = [
                      this
                  ];
                  return t1241.length && (e871 = [], t1241.forEach(function(t1242) {
                      e871.push(t1242);
                  })), e871;
              }
          },
          {
              key: "getGroupedCharts",
              value: function() {
                  var t1243 = this;
                  return Apex._chartInstances.filter(function(t1244) {
                      if (t1244.group) return !0;
                  }).map(function(e872) {
                      return t1243.w.config.chart.group === e872.group ? e872.chart : t1243;
                  });
              }
          },
          {
              key: "toggleSeries",
              value: function(t1245) {
                  return this.series.toggleSeries(t1245);
              }
          },
          {
              key: "highlightSeriesOnLegendHover",
              value: function(t1246, e873) {
                  return this.series.toggleSeriesOnHover(t1246, e873);
              }
          },
          {
              key: "showSeries",
              value: function(t1247) {
                  this.series.showSeries(t1247);
              }
          },
          {
              key: "hideSeries",
              value: function(t1248) {
                  this.series.hideSeries(t1248);
              }
          },
          {
              key: "resetSeries",
              value: function() {
                  var t1249 = !(arguments.length > 0 && void 0 !== arguments[0]) || arguments[0], e874 = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1];
                  this.series.resetSeries(t1249, e874);
              }
          },
          {
              key: "addEventListener",
              value: function(t1250, e875) {
                  this.events.addEventListener(t1250, e875);
              }
          },
          {
              key: "removeEventListener",
              value: function(t1251, e876) {
                  this.events.removeEventListener(t1251, e876);
              }
          },
          {
              key: "addXaxisAnnotation",
              value: function(t1252) {
                  var e877 = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1], i637 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : void 0, a473 = this;
                  i637 && (a473 = i637), a473.annotations.addXaxisAnnotationExternal(t1252, e877, a473);
              }
          },
          {
              key: "addYaxisAnnotation",
              value: function(t1253) {
                  var e878 = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1], i638 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : void 0, a474 = this;
                  i638 && (a474 = i638), a474.annotations.addYaxisAnnotationExternal(t1253, e878, a474);
              }
          },
          {
              key: "addPointAnnotation",
              value: function(t1254) {
                  var e879 = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1], i639 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : void 0, a475 = this;
                  i639 && (a475 = i639), a475.annotations.addPointAnnotationExternal(t1254, e879, a475);
              }
          },
          {
              key: "clearAnnotations",
              value: function() {
                  var t1255 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : void 0, e880 = this;
                  t1255 && (e880 = t1255), e880.annotations.clearAnnotations(e880);
              }
          },
          {
              key: "removeAnnotation",
              value: function(t1256) {
                  var e881 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : void 0, i640 = this;
                  e881 && (i640 = e881), i640.annotations.removeAnnotation(i640, t1256);
              }
          },
          {
              key: "getChartArea",
              value: function() {
                  return this.w.globals.dom.baseEl.querySelector(".apexcharts-inner");
              }
          },
          {
              key: "getSeriesTotalXRange",
              value: function(t1257, e882) {
                  return this.coreUtils.getSeriesTotalsXRange(t1257, e882);
              }
          },
          {
              key: "getHighestValueInSeries",
              value: function() {
                  var t1258 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 0, e883 = new U(this.ctx);
                  return e883.getMinYMaxY(t1258).highestY;
              }
          },
          {
              key: "getLowestValueInSeries",
              value: function() {
                  var t1259 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 0, e884 = new U(this.ctx);
                  return e884.getMinYMaxY(t1259).lowestY;
              }
          },
          {
              key: "getSeriesTotal",
              value: function() {
                  return this.w.globals.seriesTotals;
              }
          },
          {
              key: "toggleDataPointSelection",
              value: function(t1260, e885) {
                  return this.updateHelpers.toggleDataPointSelection(t1260, e885);
              }
          },
          {
              key: "zoomX",
              value: function(t1261, e886) {
                  this.ctx.toolbar.zoomUpdateOptions(t1261, e886);
              }
          },
          {
              key: "setLocale",
              value: function(t1262) {
                  this.localization.setCurrentLocaleValues(t1262);
              }
          },
          {
              key: "dataURI",
              value: function(t1263) {
                  return new V(this.ctx).dataURI(t1263);
              }
          },
          {
              key: "paper",
              value: function() {
                  return this.w.globals.dom.Paper;
              }
          },
          {
              key: "_parentResizeCallback",
              value: function() {
                  this.w.globals.animationEnded && this.w.config.chart.redrawOnParentResize && this._windowResize();
              }
          },
          {
              key: "_windowResize",
              value: function() {
                  var t1264 = this;
                  clearTimeout(this.w.globals.resizeTimer), this.w.globals.resizeTimer = window.setTimeout(function() {
                      t1264.w.globals.resized = !0, t1264.w.globals.dataChanged = !1, t1264.ctx.update();
                  }, 150);
              }
          },
          {
              key: "_windowResizeHandler",
              value: function() {
                  var t1265 = this.w.config.chart.redrawOnWindowResize;
                  "function" == typeof t1265 && (t1265 = t1265()), t1265 && this._windowResize();
              }
          }
      ], [
          {
              key: "getChartByID",
              value: function(t1266) {
                  var e887 = p.escapeString(t1266), i641 = Apex._chartInstances.filter(function(t1267) {
                      return t1267.id === e887;
                  })[0];
                  return i641 && i641.chart;
              }
          },
          {
              key: "initOnLoad",
              value: function() {
                  for(var e888 = document.querySelectorAll("[data-apexcharts]"), i642 = 0; i642 < e888.length; i642++)new t1222(e888[i642], JSON.parse(e888[i642].getAttribute("data-options"))).render();
              }
          },
          {
              key: "exec",
              value: function(t1268, e889) {
                  var i643 = this.getChartByID(t1268);
                  if (i643) {
                      i643.w.globals.isExecCalled = !0;
                      var a476 = null;
                      if (-1 !== i643.publicMethods.indexOf(e889)) {
                          for(var s400 = arguments.length, r331 = new Array(s400 > 2 ? s400 - 2 : 0), o288 = 2; o288 < s400; o288++)r331[o288 - 2] = arguments[o288];
                          a476 = i643[e889].apply(i643, r331);
                      }
                      return a476;
                  }
              }
          },
          {
              key: "merge",
              value: function(t1269, e890) {
                  return p.extend(t1269, e890);
              }
          }
      ]), t1222;
  }();
  module.exports = Ht;
  
  },{}],"kqb2N":[function(require,module,exports) {
  //
  // Get computed styles
  //
  'use strict';
  function themeStyles() {
      // API
      this.style = function(property) {
          var style = getComputedStyle(document.body);
          var propertyValye = style.getPropertyValue(property);
          if (propertyValye) return propertyValye.trim();
          else return 'undefined';
      };
      this.colors = function() {
          var colors = {
              gray: {
                  50: this.style('--x-gray-50'),
                  100: this.style('--x-gray-100'),
                  200: this.style('--x-gray-200'),
                  300: this.style('--x-gray-300'),
                  400: this.style('--x-gray-400'),
                  500: this.style('--x-gray-500'),
                  600: this.style('--x-gray-600'),
                  700: this.style('--x-gray-700'),
                  800: this.style('--x-gray-800'),
                  900: this.style('--x-gray-900')
              },
              theme: {
                  'primary': this.style('--x-primary'),
                  'secondary': this.style('--x-secondary'),
                  'tertiary': this.style('--x-tertiary'),
                  'info': this.style('--x-info'),
                  'success': this.style('--x-success'),
                  'danger': this.style('--x-danger'),
                  'warning': this.style('--x-warning'),
                  'dark': this.style('--x-dark')
              },
              transparent: 'transparent'
          };
          return colors;
      };
      this.fonts = function() {
          var fonts = {
              base: this.style('--x-font-sans-serif'),
              code: this.style('--x-font-monospace'),
              serif: this.style('--x-font-serif')
          };
          return fonts;
      };
  }
  module.exports = themeStyles;
  
  },{}],"eBeiv":[function(require,module,exports) {
  //
  // Apex bar chart
  //
  'use strict';
  var apexCharts = require('apexcharts');
  var themeStyles = require('../theme-styles');
  function apexBarChart() {
      this.init = function(chartEl) {
          var styles = new themeStyles();
          var colorPalette = [
              styles.colors().theme.primary,
              styles.colors().theme.tertiary,
              styles.colors().theme.warning
          ];
          function init($this) {
              var options = {
                  chart: {
                      type: 'line',
                      stacked: false,
                      zoom: {
                          enabled: false
                      },
                      toolbar: {
                          show: false
                      },
                      shadow: {
                          enabled: false
                      },
                      offsetX: 0,
                      animations: {
                          enabled: true,
                          easing: 'easeinout',
                          speed: 800,
                          animateGradually: {
                              enabled: true,
                              delay: 150
                          },
                          dynamicAnimation: {
                              enabled: true,
                              speed: 350
                          }
                      },
                      fontFamily: styles.fonts().base
                  },
                  colors: colorPalette,
                  plotOptions: {
                      bar: {
                          columnWidth: '26%',
                          borderRadius: 5
                      }
                  },
                  stroke: {
                      colors: [
                          'transparent'
                      ],
                      width: 4,
                      curve: 'smooth'
                  },
                  series: [
                      {
                          name: 'Delivered',
                          type: 'bar',
                          data: [
                              10,
                              17,
                              12,
                              8,
                              10,
                              10,
                              20
                          ]
                      },
                      {
                          name: 'Rejected',
                          type: 'bar',
                          data: [
                              20,
                              10,
                              14,
                              20,
                              10,
                              14,
                              15
                          ]
                      },
                      {
                          name: 'Rejected',
                          type: 'bar',
                          data: [
                              15,
                              8,
                              16,
                              15,
                              15,
                              18,
                              10
                          ]
                      }
                  ],
                  markers: {
                      size: 0
                  },
                  xaxis: {
                      axisBorder: {
                          show: false
                      },
                      axisTicks: {
                          show: false
                      },
                      categories: [
                          'Mon',
                          'Tue',
                          'Wed',
                          'Thu',
                          'Fri',
                          'Sat',
                          'Sun'
                      ],
                      labels: {
                          style: {
                              colors: '#999',
                              fontSize: '13px',
                              cssClass: 'apexcharts-xaxis-label'
                          }
                      }
                  },
                  yaxis: {
                      axisBorder: {
                          show: false
                      },
                      axisTicks: {
                          show: false
                      },
                      labels: {
                          style: {
                              colors: [
                                  '#999'
                              ],
                              fontSize: '13px',
                              cssClass: 'apexcharts-xaxis-label'
                          }
                      }
                  },
                  legend: {
                      show: false
                  },
                  grid: {
                      borderColor: '#e3ebf6',
                      strokeDashArray: 3
                  },
                  dataLabels: {
                      enabled: false
                  },
                  tooltip: {
                      shared: true,
                      intersect: false,
                      y: {
                          formatter: function(y) {
                              if (typeof y !== "undefined") return y.toFixed(0) + " orders";
                              return y;
                          }
                      }
                  }
              };
              // Get data from data attributes
              var height = $this.dataset.height;
              // Inject dynamic properties
              options.colors = colorPalette;
              options.chart.height = height ? height : 350;
              // Create chart
              new apexCharts($this, options).render();
          }
          if (chartEl) init(chartEl);
      };
  }
  module.exports = apexBarChart;
  
  },{"apexcharts":"Hm9hE","../theme-styles":"kqb2N"}],"6kPXv":[function(require,module,exports) {
  //
  // Apex bar chart
  //
  'use strict';
  var apexCharts = require('apexcharts');
  var themeStyles = require('../theme-styles');
  function apexUsersChart() {
      this.init = function(chartEl) {
          var styles = new themeStyles();
          var colorPalette = [
              styles.colors().theme.primary,
              styles.colors().theme.secondary
          ];
          function init($this) {
              var options = {
                  chart: {
                      type: 'line',
                      stacked: false,
                      zoom: {
                          enabled: false
                      },
                      toolbar: {
                          show: false
                      },
                      shadow: {
                          enabled: false
                      },
                      offsetX: 0,
                      animations: {
                          enabled: true,
                          easing: 'easeinout',
                          speed: 800,
                          animateGradually: {
                              enabled: true,
                              delay: 150
                          },
                          dynamicAnimation: {
                              enabled: true,
                              speed: 350
                          }
                      },
                      fontFamily: styles.fonts().base
                  },
                  colors: colorPalette,
                  plotOptions: {
                      bar: {
                          columnWidth: '22px',
                          borderRadius: 5
                      }
                  },
                  stroke: {
                      colors: [
                          'transparent'
                      ],
                      width: 4,
                      curve: 'smooth'
                  },
                  series: [
                      {
                          name: 'Registered',
                          type: 'bar',
                          data: [
                              10,
                              17,
                              12,
                              8,
                              10,
                              10,
                              20,
                              10,
                              17,
                              12,
                              8,
                              10
                          ]
                      },
                      {
                          name: 'Subscribed',
                          type: 'bar',
                          data: [
                              20,
                              10,
                              14,
                              20,
                              10,
                              14,
                              15,
                              20,
                              10,
                              14,
                              20,
                              10
                          ]
                      }
                  ],
                  markers: {
                      size: 0
                  },
                  xaxis: {
                      axisBorder: {
                          show: false
                      },
                      axisTicks: {
                          show: false
                      },
                      categories: [
                          'Jan',
                          'Feb',
                          'Mar',
                          'Apr',
                          'May',
                          'Jun',
                          'Jul',
                          'Aug',
                          'Sep',
                          'Oct',
                          'Nov',
                          'Dec'
                      ],
                      labels: {
                          style: {
                              colors: '#999',
                              fontSize: '13px',
                              cssClass: 'apexcharts-xaxis-label'
                          }
                      }
                  },
                  yaxis: {
                      axisBorder: {
                          show: false
                      },
                      axisTicks: {
                          show: false
                      },
                      labels: {
                          style: {
                              colors: [
                                  '#999'
                              ],
                              fontSize: '13px',
                              cssClass: 'apexcharts-xaxis-label'
                          }
                      }
                  },
                  legend: {
                      show: false
                  },
                  grid: {
                      borderColor: '#e3ebf6',
                      strokeDashArray: 3
                  },
                  dataLabels: {
                      enabled: false
                  },
                  tooltip: {
                      shared: true,
                      intersect: false,
                      y: {
                          formatter: function(y) {
                              if (typeof y !== "undefined") return y.toFixed(0) + " orders";
                              return y;
                          }
                      }
                  },
                  responsive: [
                      {
                          breakpoint: 1300,
                          options: {
                              plotOptions: {
                                  bar: {
                                      columnWidth: '30px',
                                      borderRadius: 4
                                  }
                              }
                          }
                      }
                  ]
              };
              // Get data from data attributes
              var height = $this.dataset.height;
              // Inject dynamic properties
              options.colors = colorPalette;
              options.chart.height = height ? height : 350;
              // Create chart
              new apexCharts($this, options).render();
          }
          if (chartEl) init(chartEl);
      };
  }
  module.exports = apexUsersChart;
  
  },{"apexcharts":"Hm9hE","../theme-styles":"kqb2N"}],"beBa7":[function(require,module,exports) {
  //
  // Apex spark chart
  //
  'use strict';
  var apexCharts = require('apexcharts');
  var themeStyles = require('../theme-styles');
  function apexSparkChart() {
      this.init = function(chartEl1) {
          var styles = new themeStyles();
          function init(chartEl) {
              // Options
              var options = {
                  chart: {
                      width: '100%',
                      sparkline: {
                          enabled: true
                      }
                  },
                  series: [],
                  labels: [],
                  plotOptions: {
                      bar: {
                          columnWidth: '40%',
                          endingShape: 'rounded'
                      }
                  },
                  stroke: {
                      curve: "smooth"
                  },
                  markers: {
                      size: 0
                  },
                  colors: [],
                  tooltip: {
                      fixed: {
                          enabled: false
                      },
                      x: {
                          show: false
                      },
                      y: {
                          title: {
                              formatter: function(e) {
                                  return "";
                              }
                          }
                      },
                      marker: {
                          show: !1
                      }
                  }
              };
              // Get data from data attributes
              var dataset = chartEl.dataset.dataset, labels = chartEl.dataset.labels, color = chartEl.dataset.color, height = chartEl.dataset.height, type = chartEl.dataset.type, stroke = chartEl.dataset.stroke;
              // Inject synamic properties
              options.series = [
                  {
                      data: dataset.split(',')
                  }
              ];
              if (labels) options.labels = [
                  labels
              ];
              options.colors = [
                  styles.colors().theme[color]
              ];
              options.chart.height = height ? height : 35;
              options.chart.type = type ? type : 'line';
              options.stroke.width = stroke ? stroke : 2;
              // Create chart
              setTimeout(function() {
                  new apexCharts(chartEl, options).render();
              }, 300);
          }
          if (chartEl1) init(chartEl1);
      };
  }
  module.exports = apexSparkChart;
  
  },{"apexcharts":"Hm9hE","../theme-styles":"kqb2N"}],"dvEkG":[function(require,module,exports) {
  var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  var _flatpickr = require("flatpickr");
  var _flatpickrDefault = parcelHelpers.interopDefault(_flatpickr);
  //
  // Datepicker
  // using the Flatpickr plugin
  //
  'use strict';
  module.exports = function datepicker() {
      this.init = function(el) {
          var options = {
              enableTime: false,
              allowInput: true,
              wrap: true,
              dateFormat: 'M d, Y',
              position: 'right'
          };
          _flatpickrDefault.default(el, options);
      };
      this.range = function(el) {
          var options = {
              enableTime: false,
              allowInput: true,
              wrap: true,
              dateFormat: 'M d, Y',
              mode: 'range',
              defaultDate: [
                  "Jan 23, 2022",
                  "Jan 30, 2022"
              ]
          };
          _flatpickrDefault.default(el, options);
      };
  };
  
  },{"flatpickr":"4MQGV","@parcel/transformer-js/src/esmodule-helpers.js":"6jXwo"}],"4MQGV":[function(require,module,exports) {
  var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  var _options = require("./types/options");
  var _default = require("./l10n/default");
  var _defaultDefault = parcelHelpers.interopDefault(_default);
  var _utils = require("./utils");
  var _dom = require("./utils/dom");
  var _dates = require("./utils/dates");
  var _formatting = require("./utils/formatting");
  var _polyfills = require("./utils/polyfills");
  const DEBOUNCED_CHANGE_MS = 300;
  function FlatpickrInstance(element1, instanceConfig) {
      const self = {
          config: Object.assign(Object.assign({
          }, _options.defaults), flatpickr.defaultConfig),
          l10n: _defaultDefault.default
      };
      self.parseDate = _dates.createDateParser({
          config: self.config,
          l10n: self.l10n
      });
      self._handlers = [];
      self.pluginElements = [];
      self.loadedPlugins = [];
      self._bind = bind;
      self._setHoursFromDate = setHoursFromDate;
      self._positionCalendar = positionCalendar;
      self.changeMonth = changeMonth;
      self.changeYear = changeYear;
      self.clear = clear;
      self.close = close;
      self._createElement = _dom.createElement;
      self.destroy = destroy;
      self.isEnabled = isEnabled;
      self.jumpToDate = jumpToDate;
      self.open = open;
      self.redraw = redraw;
      self.set = set;
      self.setDate = setDate;
      self.toggle = toggle;
      function setupHelperFunctions() {
          self.utils = {
              getDaysInMonth (month = self.currentMonth, yr = self.currentYear) {
                  if (month === 1 && (yr % 4 === 0 && yr % 100 !== 0 || yr % 400 === 0)) return 29;
                  return self.l10n.daysInMonth[month];
              }
          };
      }
      function init() {
          self.element = self.input = element1;
          self.isOpen = false;
          parseConfig();
          setupLocale();
          setupInputs();
          setupDates();
          setupHelperFunctions();
          if (!self.isMobile) build();
          bindEvents();
          if (self.selectedDates.length || self.config.noCalendar) {
              if (self.config.enableTime) setHoursFromDate(self.config.noCalendar ? self.latestSelectedDateObj : undefined);
              updateValue(false);
          }
          setCalendarWidth();
          const isSafari = /^((?!chrome|android).)*safari/i.test(navigator.userAgent);
          if (!self.isMobile && isSafari) positionCalendar();
          triggerEvent("onReady");
      }
      function bindToInstance(fn) {
          return fn.bind(self);
      }
      function setCalendarWidth() {
          const config = self.config;
          if (config.weekNumbers === false && config.showMonths === 1) return;
          else if (config.noCalendar !== true) window.requestAnimationFrame(function() {
              if (self.calendarContainer !== undefined) {
                  self.calendarContainer.style.visibility = "hidden";
                  self.calendarContainer.style.display = "block";
              }
              if (self.daysContainer !== undefined) {
                  const daysWidth = (self.days.offsetWidth + 1) * config.showMonths;
                  self.daysContainer.style.width = daysWidth + "px";
                  self.calendarContainer.style.width = daysWidth + (self.weekWrapper !== undefined ? self.weekWrapper.offsetWidth : 0) + "px";
                  self.calendarContainer.style.removeProperty("visibility");
                  self.calendarContainer.style.removeProperty("display");
              }
          });
      }
      function updateTime(e) {
          if (self.selectedDates.length === 0) {
              const defaultDate = self.config.minDate === undefined || _dates.compareDates(new Date(), self.config.minDate) >= 0 ? new Date() : new Date(self.config.minDate.getTime());
              const defaults = _dates.getDefaultHours(self.config);
              defaultDate.setHours(defaults.hours, defaults.minutes, defaults.seconds, defaultDate.getMilliseconds());
              self.selectedDates = [
                  defaultDate
              ];
              self.latestSelectedDateObj = defaultDate;
          }
          if (e !== undefined && e.type !== "blur") timeWrapper(e);
          const prevValue = self._input.value;
          setHoursFromInputs();
          updateValue();
          if (self._input.value !== prevValue) self._debouncedChange();
      }
      function ampm2military(hour, amPM) {
          return hour % 12 + 12 * _utils.int(amPM === self.l10n.amPM[1]);
      }
      function military2ampm(hour) {
          switch(hour % 24){
              case 0:
              case 12:
                  return 12;
              default:
                  return hour % 12;
          }
      }
      function setHoursFromInputs() {
          if (self.hourElement === undefined || self.minuteElement === undefined) return;
          let hours = (parseInt(self.hourElement.value.slice(-2), 10) || 0) % 24, minutes = (parseInt(self.minuteElement.value, 10) || 0) % 60, seconds = self.secondElement !== undefined ? (parseInt(self.secondElement.value, 10) || 0) % 60 : 0;
          if (self.amPM !== undefined) hours = ampm2military(hours, self.amPM.textContent);
          const limitMinHours = self.config.minTime !== undefined || self.config.minDate && self.minDateHasTime && self.latestSelectedDateObj && _dates.compareDates(self.latestSelectedDateObj, self.config.minDate, true) === 0;
          const limitMaxHours = self.config.maxTime !== undefined || self.config.maxDate && self.maxDateHasTime && self.latestSelectedDateObj && _dates.compareDates(self.latestSelectedDateObj, self.config.maxDate, true) === 0;
          if (limitMaxHours) {
              const maxTime = self.config.maxTime !== undefined ? self.config.maxTime : self.config.maxDate;
              hours = Math.min(hours, maxTime.getHours());
              if (hours === maxTime.getHours()) minutes = Math.min(minutes, maxTime.getMinutes());
              if (minutes === maxTime.getMinutes()) seconds = Math.min(seconds, maxTime.getSeconds());
          }
          if (limitMinHours) {
              const minTime = self.config.minTime !== undefined ? self.config.minTime : self.config.minDate;
              hours = Math.max(hours, minTime.getHours());
              if (hours === minTime.getHours() && minutes < minTime.getMinutes()) minutes = minTime.getMinutes();
              if (minutes === minTime.getMinutes()) seconds = Math.max(seconds, minTime.getSeconds());
          }
          setHours(hours, minutes, seconds);
      }
      function setHoursFromDate(dateObj) {
          const date = dateObj || self.latestSelectedDateObj;
          if (date) setHours(date.getHours(), date.getMinutes(), date.getSeconds());
      }
      function setHours(hours, minutes, seconds) {
          if (self.latestSelectedDateObj !== undefined) self.latestSelectedDateObj.setHours(hours % 24, minutes, seconds || 0, 0);
          if (!self.hourElement || !self.minuteElement || self.isMobile) return;
          self.hourElement.value = _utils.pad(!self.config.time_24hr ? (12 + hours) % 12 + 12 * _utils.int(hours % 12 === 0) : hours);
          self.minuteElement.value = _utils.pad(minutes);
          if (self.amPM !== undefined) self.amPM.textContent = self.l10n.amPM[_utils.int(hours >= 12)];
          if (self.secondElement !== undefined) self.secondElement.value = _utils.pad(seconds);
      }
      function onYearInput(event) {
          const eventTarget = _dom.getEventTarget(event);
          const year = parseInt(eventTarget.value) + (event.delta || 0);
          if (year / 1000 > 1 || event.key === "Enter" && !/[^\d]/.test(year.toString())) changeYear(year);
      }
      function bind(element, event, handler, options) {
          if (event instanceof Array) return event.forEach((ev)=>bind(element, ev, handler, options)
          );
          if (element instanceof Array) return element.forEach((el)=>bind(el, event, handler, options)
          );
          element.addEventListener(event, handler, options);
          self._handlers.push({
              remove: ()=>element.removeEventListener(event, handler)
          });
      }
      function triggerChange1() {
          triggerEvent("onChange");
      }
      function bindEvents() {
          if (self.config.wrap) [
              "open",
              "close",
              "toggle",
              "clear"
          ].forEach((evt)=>{
              Array.prototype.forEach.call(self.element.querySelectorAll(`[data-${evt}]`), (el)=>bind(el, "click", self[evt])
              );
          });
          if (self.isMobile) {
              setupMobile();
              return;
          }
          const debouncedResize = _utils.debounce(onResize, 50);
          self._debouncedChange = _utils.debounce(triggerChange1, DEBOUNCED_CHANGE_MS);
          if (self.daysContainer && !/iPhone|iPad|iPod/i.test(navigator.userAgent)) bind(self.daysContainer, "mouseover", (e)=>{
              if (self.config.mode === "range") onMouseOver(_dom.getEventTarget(e));
          });
          bind(window.document.body, "keydown", onKeyDown);
          if (!self.config.inline && !self.config.static) bind(window, "resize", debouncedResize);
          if (window.ontouchstart !== undefined) bind(window.document, "touchstart", documentClick);
          else bind(window.document, "mousedown", documentClick);
          bind(window.document, "focus", documentClick, {
              capture: true
          });
          if (self.config.clickOpens === true) {
              bind(self._input, "focus", self.open);
              bind(self._input, "click", self.open);
          }
          if (self.daysContainer !== undefined) {
              bind(self.monthNav, "click", onMonthNavClick);
              bind(self.monthNav, [
                  "keyup",
                  "increment"
              ], onYearInput);
              bind(self.daysContainer, "click", selectDate);
          }
          if (self.timeContainer !== undefined && self.minuteElement !== undefined && self.hourElement !== undefined) {
              const selText = (e)=>_dom.getEventTarget(e).select()
              ;
              bind(self.timeContainer, [
                  "increment"
              ], updateTime);
              bind(self.timeContainer, "blur", updateTime, {
                  capture: true
              });
              bind(self.timeContainer, "click", timeIncrement);
              bind([
                  self.hourElement,
                  self.minuteElement
              ], [
                  "focus",
                  "click"
              ], selText);
              if (self.secondElement !== undefined) bind(self.secondElement, "focus", ()=>self.secondElement && self.secondElement.select()
              );
              if (self.amPM !== undefined) bind(self.amPM, "click", (e)=>{
                  updateTime(e);
                  triggerChange1();
              });
          }
          if (self.config.allowInput) bind(self._input, "blur", onBlur);
      }
      function jumpToDate(jumpDate, triggerChange) {
          const jumpTo = jumpDate !== undefined ? self.parseDate(jumpDate) : self.latestSelectedDateObj || (self.config.minDate && self.config.minDate > self.now ? self.config.minDate : self.config.maxDate && self.config.maxDate < self.now ? self.config.maxDate : self.now);
          const oldYear = self.currentYear;
          const oldMonth = self.currentMonth;
          try {
              if (jumpTo !== undefined) {
                  self.currentYear = jumpTo.getFullYear();
                  self.currentMonth = jumpTo.getMonth();
              }
          } catch (e) {
              e.message = "Invalid date supplied: " + jumpTo;
              self.config.errorHandler(e);
          }
          if (triggerChange && self.currentYear !== oldYear) {
              triggerEvent("onYearChange");
              buildMonthSwitch();
          }
          if (triggerChange && (self.currentYear !== oldYear || self.currentMonth !== oldMonth)) triggerEvent("onMonthChange");
          self.redraw();
      }
      function timeIncrement(e) {
          const eventTarget = _dom.getEventTarget(e);
          if (~eventTarget.className.indexOf("arrow")) incrementNumInput(e, eventTarget.classList.contains("arrowUp") ? 1 : -1);
      }
      function incrementNumInput(e, delta, inputElem) {
          const target = e && _dom.getEventTarget(e);
          const input = inputElem || target && target.parentNode && target.parentNode.firstChild;
          const event = createEvent("increment");
          event.delta = delta;
          input && input.dispatchEvent(event);
      }
      function build() {
          const fragment = window.document.createDocumentFragment();
          self.calendarContainer = _dom.createElement("div", "flatpickr-calendar");
          self.calendarContainer.tabIndex = -1;
          if (!self.config.noCalendar) {
              fragment.appendChild(buildMonthNav());
              self.innerContainer = _dom.createElement("div", "flatpickr-innerContainer");
              if (self.config.weekNumbers) {
                  const { weekWrapper , weekNumbers  } = buildWeeks();
                  self.innerContainer.appendChild(weekWrapper);
                  self.weekNumbers = weekNumbers;
                  self.weekWrapper = weekWrapper;
              }
              self.rContainer = _dom.createElement("div", "flatpickr-rContainer");
              self.rContainer.appendChild(buildWeekdays());
              if (!self.daysContainer) {
                  self.daysContainer = _dom.createElement("div", "flatpickr-days");
                  self.daysContainer.tabIndex = -1;
              }
              buildDays();
              self.rContainer.appendChild(self.daysContainer);
              self.innerContainer.appendChild(self.rContainer);
              fragment.appendChild(self.innerContainer);
          }
          if (self.config.enableTime) fragment.appendChild(buildTime());
          _dom.toggleClass(self.calendarContainer, "rangeMode", self.config.mode === "range");
          _dom.toggleClass(self.calendarContainer, "animate", self.config.animate === true);
          _dom.toggleClass(self.calendarContainer, "multiMonth", self.config.showMonths > 1);
          self.calendarContainer.appendChild(fragment);
          const customAppend = self.config.appendTo !== undefined && self.config.appendTo.nodeType !== undefined;
          if (self.config.inline || self.config.static) {
              self.calendarContainer.classList.add(self.config.inline ? "inline" : "static");
              if (self.config.inline) {
                  if (!customAppend && self.element.parentNode) self.element.parentNode.insertBefore(self.calendarContainer, self._input.nextSibling);
                  else if (self.config.appendTo !== undefined) self.config.appendTo.appendChild(self.calendarContainer);
              }
              if (self.config.static) {
                  const wrapper = _dom.createElement("div", "flatpickr-wrapper");
                  if (self.element.parentNode) self.element.parentNode.insertBefore(wrapper, self.element);
                  wrapper.appendChild(self.element);
                  if (self.altInput) wrapper.appendChild(self.altInput);
                  wrapper.appendChild(self.calendarContainer);
              }
          }
          if (!self.config.static && !self.config.inline) (self.config.appendTo !== undefined ? self.config.appendTo : window.document.body).appendChild(self.calendarContainer);
      }
      function createDay(className, date, dayNumber, i) {
          const dateIsEnabled = isEnabled(date, true), dayElement = _dom.createElement("span", "flatpickr-day " + className, date.getDate().toString());
          dayElement.dateObj = date;
          dayElement.$i = i;
          dayElement.setAttribute("aria-label", self.formatDate(date, self.config.ariaDateFormat));
          if (className.indexOf("hidden") === -1 && _dates.compareDates(date, self.now) === 0) {
              self.todayDateElem = dayElement;
              dayElement.classList.add("today");
              dayElement.setAttribute("aria-current", "date");
          }
          if (dateIsEnabled) {
              dayElement.tabIndex = -1;
              if (isDateSelected(date)) {
                  dayElement.classList.add("selected");
                  self.selectedDateElem = dayElement;
                  if (self.config.mode === "range") {
                      _dom.toggleClass(dayElement, "startRange", self.selectedDates[0] && _dates.compareDates(date, self.selectedDates[0], true) === 0);
                      _dom.toggleClass(dayElement, "endRange", self.selectedDates[1] && _dates.compareDates(date, self.selectedDates[1], true) === 0);
                      if (className === "nextMonthDay") dayElement.classList.add("inRange");
                  }
              }
          } else dayElement.classList.add("flatpickr-disabled");
          if (self.config.mode === "range") {
              if (isDateInRange(date) && !isDateSelected(date)) dayElement.classList.add("inRange");
          }
          if (self.weekNumbers && self.config.showMonths === 1 && className !== "prevMonthDay" && dayNumber % 7 === 1) self.weekNumbers.insertAdjacentHTML("beforeend", "<span class='flatpickr-day'>" + self.config.getWeek(date) + "</span>");
          triggerEvent("onDayCreate", dayElement);
          return dayElement;
      }
      function focusOnDayElem(targetNode) {
          targetNode.focus();
          if (self.config.mode === "range") onMouseOver(targetNode);
      }
      function getFirstAvailableDay(delta) {
          const startMonth = delta > 0 ? 0 : self.config.showMonths - 1;
          const endMonth = delta > 0 ? self.config.showMonths : -1;
          for(let m = startMonth; m != endMonth; m += delta){
              const month = self.daysContainer.children[m];
              const startIndex = delta > 0 ? 0 : month.children.length - 1;
              const endIndex = delta > 0 ? month.children.length : -1;
              for(let i = startIndex; i != endIndex; i += delta){
                  const c = month.children[i];
                  if (c.className.indexOf("hidden") === -1 && isEnabled(c.dateObj)) return c;
              }
          }
          return undefined;
      }
      function getNextAvailableDay(current, delta) {
          const givenMonth = current.className.indexOf("Month") === -1 ? current.dateObj.getMonth() : self.currentMonth;
          const endMonth = delta > 0 ? self.config.showMonths : -1;
          const loopDelta = delta > 0 ? 1 : -1;
          for(let m = givenMonth - self.currentMonth; m != endMonth; m += loopDelta){
              const month = self.daysContainer.children[m];
              const startIndex = givenMonth - self.currentMonth === m ? current.$i + delta : delta < 0 ? month.children.length - 1 : 0;
              const numMonthDays = month.children.length;
              for(let i = startIndex; i >= 0 && i < numMonthDays && i != (delta > 0 ? numMonthDays : -1); i += loopDelta){
                  const c = month.children[i];
                  if (c.className.indexOf("hidden") === -1 && isEnabled(c.dateObj) && Math.abs(current.$i - i) >= Math.abs(delta)) return focusOnDayElem(c);
              }
          }
          self.changeMonth(loopDelta);
          focusOnDay(getFirstAvailableDay(loopDelta), 0);
          return undefined;
      }
      function focusOnDay(current, offset) {
          const dayFocused = isInView(document.activeElement || document.body);
          const startElem = current !== undefined ? current : dayFocused ? document.activeElement : self.selectedDateElem !== undefined && isInView(self.selectedDateElem) ? self.selectedDateElem : self.todayDateElem !== undefined && isInView(self.todayDateElem) ? self.todayDateElem : getFirstAvailableDay(offset > 0 ? 1 : -1);
          if (startElem === undefined) self._input.focus();
          else if (!dayFocused) focusOnDayElem(startElem);
          else getNextAvailableDay(startElem, offset);
      }
      function buildMonthDays(year, month) {
          const firstOfMonth = (new Date(year, month, 1).getDay() - self.l10n.firstDayOfWeek + 7) % 7;
          const prevMonthDays = self.utils.getDaysInMonth((month - 1 + 12) % 12, year);
          const daysInMonth = self.utils.getDaysInMonth(month, year), days = window.document.createDocumentFragment(), isMultiMonth = self.config.showMonths > 1, prevMonthDayClass = isMultiMonth ? "prevMonthDay hidden" : "prevMonthDay", nextMonthDayClass = isMultiMonth ? "nextMonthDay hidden" : "nextMonthDay";
          let dayNumber = prevMonthDays + 1 - firstOfMonth, dayIndex = 0;
          for(; dayNumber <= prevMonthDays; dayNumber++, dayIndex++)days.appendChild(createDay(prevMonthDayClass, new Date(year, month - 1, dayNumber), dayNumber, dayIndex));
          for(dayNumber = 1; dayNumber <= daysInMonth; dayNumber++, dayIndex++)days.appendChild(createDay("", new Date(year, month, dayNumber), dayNumber, dayIndex));
          for(let dayNum = daysInMonth + 1; dayNum <= 42 - firstOfMonth && (self.config.showMonths === 1 || dayIndex % 7 !== 0); dayNum++, dayIndex++)days.appendChild(createDay(nextMonthDayClass, new Date(year, month + 1, dayNum % daysInMonth), dayNum, dayIndex));
          const dayContainer = _dom.createElement("div", "dayContainer");
          dayContainer.appendChild(days);
          return dayContainer;
      }
      function buildDays() {
          if (self.daysContainer === undefined) return;
          _dom.clearNode(self.daysContainer);
          if (self.weekNumbers) _dom.clearNode(self.weekNumbers);
          const frag = document.createDocumentFragment();
          for(let i = 0; i < self.config.showMonths; i++){
              const d = new Date(self.currentYear, self.currentMonth, 1);
              d.setMonth(self.currentMonth + i);
              frag.appendChild(buildMonthDays(d.getFullYear(), d.getMonth()));
          }
          self.daysContainer.appendChild(frag);
          self.days = self.daysContainer.firstChild;
          if (self.config.mode === "range" && self.selectedDates.length === 1) onMouseOver();
      }
      function buildMonthSwitch() {
          if (self.config.showMonths > 1 || self.config.monthSelectorType !== "dropdown") return;
          const shouldBuildMonth = function(month) {
              if (self.config.minDate !== undefined && self.currentYear === self.config.minDate.getFullYear() && month < self.config.minDate.getMonth()) return false;
              return !(self.config.maxDate !== undefined && self.currentYear === self.config.maxDate.getFullYear() && month > self.config.maxDate.getMonth());
          };
          self.monthsDropdownContainer.tabIndex = -1;
          self.monthsDropdownContainer.innerHTML = "";
          for(let i = 0; i < 12; i++){
              if (!shouldBuildMonth(i)) continue;
              const month = _dom.createElement("option", "flatpickr-monthDropdown-month");
              month.value = new Date(self.currentYear, i).getMonth().toString();
              month.textContent = _formatting.monthToStr(i, self.config.shorthandCurrentMonth, self.l10n);
              month.tabIndex = -1;
              if (self.currentMonth === i) month.selected = true;
              self.monthsDropdownContainer.appendChild(month);
          }
      }
      function buildMonth() {
          const container = _dom.createElement("div", "flatpickr-month");
          const monthNavFragment = window.document.createDocumentFragment();
          let monthElement;
          if (self.config.showMonths > 1 || self.config.monthSelectorType === "static") monthElement = _dom.createElement("span", "cur-month");
          else {
              self.monthsDropdownContainer = _dom.createElement("select", "flatpickr-monthDropdown-months");
              self.monthsDropdownContainer.setAttribute("aria-label", self.l10n.monthAriaLabel);
              bind(self.monthsDropdownContainer, "change", (e)=>{
                  const target = _dom.getEventTarget(e);
                  const selectedMonth = parseInt(target.value, 10);
                  self.changeMonth(selectedMonth - self.currentMonth);
                  triggerEvent("onMonthChange");
              });
              buildMonthSwitch();
              monthElement = self.monthsDropdownContainer;
          }
          const yearInput = _dom.createNumberInput("cur-year", {
              tabindex: "-1"
          });
          const yearElement = yearInput.getElementsByTagName("input")[0];
          yearElement.setAttribute("aria-label", self.l10n.yearAriaLabel);
          if (self.config.minDate) yearElement.setAttribute("min", self.config.minDate.getFullYear().toString());
          if (self.config.maxDate) {
              yearElement.setAttribute("max", self.config.maxDate.getFullYear().toString());
              yearElement.disabled = !!self.config.minDate && self.config.minDate.getFullYear() === self.config.maxDate.getFullYear();
          }
          const currentMonth = _dom.createElement("div", "flatpickr-current-month");
          currentMonth.appendChild(monthElement);
          currentMonth.appendChild(yearInput);
          monthNavFragment.appendChild(currentMonth);
          container.appendChild(monthNavFragment);
          return {
              container,
              yearElement,
              monthElement
          };
      }
      function buildMonths() {
          _dom.clearNode(self.monthNav);
          self.monthNav.appendChild(self.prevMonthNav);
          if (self.config.showMonths) {
              self.yearElements = [];
              self.monthElements = [];
          }
          for(let m = self.config.showMonths; m--;){
              const month = buildMonth();
              self.yearElements.push(month.yearElement);
              self.monthElements.push(month.monthElement);
              self.monthNav.appendChild(month.container);
          }
          self.monthNav.appendChild(self.nextMonthNav);
      }
      function buildMonthNav() {
          self.monthNav = _dom.createElement("div", "flatpickr-months");
          self.yearElements = [];
          self.monthElements = [];
          self.prevMonthNav = _dom.createElement("span", "flatpickr-prev-month");
          self.prevMonthNav.innerHTML = self.config.prevArrow;
          self.nextMonthNav = _dom.createElement("span", "flatpickr-next-month");
          self.nextMonthNav.innerHTML = self.config.nextArrow;
          buildMonths();
          Object.defineProperty(self, "_hidePrevMonthArrow", {
              get: ()=>self.__hidePrevMonthArrow
              ,
              set (bool) {
                  if (self.__hidePrevMonthArrow !== bool) {
                      _dom.toggleClass(self.prevMonthNav, "flatpickr-disabled", bool);
                      self.__hidePrevMonthArrow = bool;
                  }
              }
          });
          Object.defineProperty(self, "_hideNextMonthArrow", {
              get: ()=>self.__hideNextMonthArrow
              ,
              set (bool) {
                  if (self.__hideNextMonthArrow !== bool) {
                      _dom.toggleClass(self.nextMonthNav, "flatpickr-disabled", bool);
                      self.__hideNextMonthArrow = bool;
                  }
              }
          });
          self.currentYearElement = self.yearElements[0];
          updateNavigationCurrentMonth();
          return self.monthNav;
      }
      function buildTime() {
          self.calendarContainer.classList.add("hasTime");
          if (self.config.noCalendar) self.calendarContainer.classList.add("noCalendar");
          const defaults = _dates.getDefaultHours(self.config);
          self.timeContainer = _dom.createElement("div", "flatpickr-time");
          self.timeContainer.tabIndex = -1;
          const separator = _dom.createElement("span", "flatpickr-time-separator", ":");
          const hourInput = _dom.createNumberInput("flatpickr-hour", {
              "aria-label": self.l10n.hourAriaLabel
          });
          self.hourElement = hourInput.getElementsByTagName("input")[0];
          const minuteInput = _dom.createNumberInput("flatpickr-minute", {
              "aria-label": self.l10n.minuteAriaLabel
          });
          self.minuteElement = minuteInput.getElementsByTagName("input")[0];
          self.hourElement.tabIndex = self.minuteElement.tabIndex = -1;
          self.hourElement.value = _utils.pad(self.latestSelectedDateObj ? self.latestSelectedDateObj.getHours() : self.config.time_24hr ? defaults.hours : military2ampm(defaults.hours));
          self.minuteElement.value = _utils.pad(self.latestSelectedDateObj ? self.latestSelectedDateObj.getMinutes() : defaults.minutes);
          self.hourElement.setAttribute("step", self.config.hourIncrement.toString());
          self.minuteElement.setAttribute("step", self.config.minuteIncrement.toString());
          self.hourElement.setAttribute("min", self.config.time_24hr ? "0" : "1");
          self.hourElement.setAttribute("max", self.config.time_24hr ? "23" : "12");
          self.hourElement.setAttribute("maxlength", "2");
          self.minuteElement.setAttribute("min", "0");
          self.minuteElement.setAttribute("max", "59");
          self.minuteElement.setAttribute("maxlength", "2");
          self.timeContainer.appendChild(hourInput);
          self.timeContainer.appendChild(separator);
          self.timeContainer.appendChild(minuteInput);
          if (self.config.time_24hr) self.timeContainer.classList.add("time24hr");
          if (self.config.enableSeconds) {
              self.timeContainer.classList.add("hasSeconds");
              const secondInput = _dom.createNumberInput("flatpickr-second");
              self.secondElement = secondInput.getElementsByTagName("input")[0];
              self.secondElement.value = _utils.pad(self.latestSelectedDateObj ? self.latestSelectedDateObj.getSeconds() : defaults.seconds);
              self.secondElement.setAttribute("step", self.minuteElement.getAttribute("step"));
              self.secondElement.setAttribute("min", "0");
              self.secondElement.setAttribute("max", "59");
              self.secondElement.setAttribute("maxlength", "2");
              self.timeContainer.appendChild(_dom.createElement("span", "flatpickr-time-separator", ":"));
              self.timeContainer.appendChild(secondInput);
          }
          if (!self.config.time_24hr) {
              self.amPM = _dom.createElement("span", "flatpickr-am-pm", self.l10n.amPM[_utils.int((self.latestSelectedDateObj ? self.hourElement.value : self.config.defaultHour) > 11)]);
              self.amPM.title = self.l10n.toggleTitle;
              self.amPM.tabIndex = -1;
              self.timeContainer.appendChild(self.amPM);
          }
          return self.timeContainer;
      }
      function buildWeekdays() {
          if (!self.weekdayContainer) self.weekdayContainer = _dom.createElement("div", "flatpickr-weekdays");
          else _dom.clearNode(self.weekdayContainer);
          for(let i = self.config.showMonths; i--;){
              const container = _dom.createElement("div", "flatpickr-weekdaycontainer");
              self.weekdayContainer.appendChild(container);
          }
          updateWeekdays();
          return self.weekdayContainer;
      }
      function updateWeekdays() {
          if (!self.weekdayContainer) return;
          const firstDayOfWeek = self.l10n.firstDayOfWeek;
          let weekdays = [
              ...self.l10n.weekdays.shorthand
          ];
          if (firstDayOfWeek > 0 && firstDayOfWeek < weekdays.length) weekdays = [
              ...weekdays.splice(firstDayOfWeek, weekdays.length),
              ...weekdays.splice(0, firstDayOfWeek), 
          ];
          for(let i = self.config.showMonths; i--;)self.weekdayContainer.children[i].innerHTML = `
        <span class='flatpickr-weekday'>
          ${weekdays.join("</span><span class='flatpickr-weekday'>")}
        </span>
        `;
      }
      function buildWeeks() {
          self.calendarContainer.classList.add("hasWeeks");
          const weekWrapper = _dom.createElement("div", "flatpickr-weekwrapper");
          weekWrapper.appendChild(_dom.createElement("span", "flatpickr-weekday", self.l10n.weekAbbreviation));
          const weekNumbers = _dom.createElement("div", "flatpickr-weeks");
          weekWrapper.appendChild(weekNumbers);
          return {
              weekWrapper,
              weekNumbers
          };
      }
      function changeMonth(value, isOffset = true) {
          const delta = isOffset ? value : value - self.currentMonth;
          if (delta < 0 && self._hidePrevMonthArrow === true || delta > 0 && self._hideNextMonthArrow === true) return;
          self.currentMonth += delta;
          if (self.currentMonth < 0 || self.currentMonth > 11) {
              self.currentYear += self.currentMonth > 11 ? 1 : -1;
              self.currentMonth = (self.currentMonth + 12) % 12;
              triggerEvent("onYearChange");
              buildMonthSwitch();
          }
          buildDays();
          triggerEvent("onMonthChange");
          updateNavigationCurrentMonth();
      }
      function clear(triggerChangeEvent = true, toInitial = true) {
          self.input.value = "";
          if (self.altInput !== undefined) self.altInput.value = "";
          if (self.mobileInput !== undefined) self.mobileInput.value = "";
          self.selectedDates = [];
          self.latestSelectedDateObj = undefined;
          if (toInitial === true) {
              self.currentYear = self._initialDate.getFullYear();
              self.currentMonth = self._initialDate.getMonth();
          }
          if (self.config.enableTime === true) {
              const { hours , minutes , seconds  } = _dates.getDefaultHours(self.config);
              setHours(hours, minutes, seconds);
          }
          self.redraw();
          if (triggerChangeEvent) triggerEvent("onChange");
      }
      function close() {
          self.isOpen = false;
          if (!self.isMobile) {
              if (self.calendarContainer !== undefined) self.calendarContainer.classList.remove("open");
              if (self._input !== undefined) self._input.classList.remove("active");
          }
          triggerEvent("onClose");
      }
      function destroy() {
          if (self.config !== undefined) triggerEvent("onDestroy");
          for(let i = self._handlers.length; i--;)self._handlers[i].remove();
          self._handlers = [];
          if (self.mobileInput) {
              if (self.mobileInput.parentNode) self.mobileInput.parentNode.removeChild(self.mobileInput);
              self.mobileInput = undefined;
          } else if (self.calendarContainer && self.calendarContainer.parentNode) {
              if (self.config.static && self.calendarContainer.parentNode) {
                  const wrapper = self.calendarContainer.parentNode;
                  wrapper.lastChild && wrapper.removeChild(wrapper.lastChild);
                  if (wrapper.parentNode) {
                      while(wrapper.firstChild)wrapper.parentNode.insertBefore(wrapper.firstChild, wrapper);
                      wrapper.parentNode.removeChild(wrapper);
                  }
              } else self.calendarContainer.parentNode.removeChild(self.calendarContainer);
          }
          if (self.altInput) {
              self.input.type = "text";
              if (self.altInput.parentNode) self.altInput.parentNode.removeChild(self.altInput);
              delete self.altInput;
          }
          if (self.input) {
              self.input.type = self.input._type;
              self.input.classList.remove("flatpickr-input");
              self.input.removeAttribute("readonly");
          }
          [
              "_showTimeInput",
              "latestSelectedDateObj",
              "_hideNextMonthArrow",
              "_hidePrevMonthArrow",
              "__hideNextMonthArrow",
              "__hidePrevMonthArrow",
              "isMobile",
              "isOpen",
              "selectedDateElem",
              "minDateHasTime",
              "maxDateHasTime",
              "days",
              "daysContainer",
              "_input",
              "_positionElement",
              "innerContainer",
              "rContainer",
              "monthNav",
              "todayDateElem",
              "calendarContainer",
              "weekdayContainer",
              "prevMonthNav",
              "nextMonthNav",
              "monthsDropdownContainer",
              "currentMonthElement",
              "currentYearElement",
              "navigationCurrentMonth",
              "selectedDateElem",
              "config", 
          ].forEach((k)=>{
              try {
                  delete self[k];
              } catch (_) {
              }
          });
      }
      function isCalendarElem(elem) {
          if (self.config.appendTo && self.config.appendTo.contains(elem)) return true;
          return self.calendarContainer.contains(elem);
      }
      function documentClick(e) {
          if (self.isOpen && !self.config.inline) {
              const eventTarget = _dom.getEventTarget(e);
              const isCalendarElement = isCalendarElem(eventTarget);
              const isInput = eventTarget === self.input || eventTarget === self.altInput || self.element.contains(eventTarget) || e.path && e.path.indexOf && (~e.path.indexOf(self.input) || ~e.path.indexOf(self.altInput));
              const lostFocus = e.type === "blur" ? isInput && e.relatedTarget && !isCalendarElem(e.relatedTarget) : !isInput && !isCalendarElement && !isCalendarElem(e.relatedTarget);
              const isIgnored = !self.config.ignoredFocusElements.some((elem)=>elem.contains(eventTarget)
              );
              if (lostFocus && isIgnored) {
                  if (self.timeContainer !== undefined && self.minuteElement !== undefined && self.hourElement !== undefined && self.input.value !== "" && self.input.value !== undefined) updateTime();
                  self.close();
                  if (self.config && self.config.mode === "range" && self.selectedDates.length === 1) {
                      self.clear(false);
                      self.redraw();
                  }
              }
          }
      }
      function changeYear(newYear) {
          if (!newYear || self.config.minDate && newYear < self.config.minDate.getFullYear() || self.config.maxDate && newYear > self.config.maxDate.getFullYear()) return;
          const newYearNum = newYear, isNewYear = self.currentYear !== newYearNum;
          self.currentYear = newYearNum || self.currentYear;
          if (self.config.maxDate && self.currentYear === self.config.maxDate.getFullYear()) self.currentMonth = Math.min(self.config.maxDate.getMonth(), self.currentMonth);
          else if (self.config.minDate && self.currentYear === self.config.minDate.getFullYear()) self.currentMonth = Math.max(self.config.minDate.getMonth(), self.currentMonth);
          if (isNewYear) {
              self.redraw();
              triggerEvent("onYearChange");
              buildMonthSwitch();
          }
      }
      function isEnabled(date, timeless = true) {
          var _a;
          const dateToCheck = self.parseDate(date, undefined, timeless);
          if (self.config.minDate && dateToCheck && _dates.compareDates(dateToCheck, self.config.minDate, timeless !== undefined ? timeless : !self.minDateHasTime) < 0 || self.config.maxDate && dateToCheck && _dates.compareDates(dateToCheck, self.config.maxDate, timeless !== undefined ? timeless : !self.maxDateHasTime) > 0) return false;
          if (!self.config.enable && self.config.disable.length === 0) return true;
          if (dateToCheck === undefined) return false;
          const bool = !!self.config.enable, array = (_a = self.config.enable) !== null && _a !== void 0 ? _a : self.config.disable;
          for(let i = 0, d; i < array.length; i++){
              d = array[i];
              if (typeof d === "function" && d(dateToCheck)) return bool;
              else if (d instanceof Date && dateToCheck !== undefined && d.getTime() === dateToCheck.getTime()) return bool;
              else if (typeof d === "string") {
                  const parsed = self.parseDate(d, undefined, true);
                  return parsed && parsed.getTime() === dateToCheck.getTime() ? bool : !bool;
              } else if (typeof d === "object" && dateToCheck !== undefined && d.from && d.to && dateToCheck.getTime() >= d.from.getTime() && dateToCheck.getTime() <= d.to.getTime()) return bool;
          }
          return !bool;
      }
      function isInView(elem) {
          if (self.daysContainer !== undefined) return elem.className.indexOf("hidden") === -1 && elem.className.indexOf("flatpickr-disabled") === -1 && self.daysContainer.contains(elem);
          return false;
      }
      function onBlur(e) {
          const isInput = e.target === self._input;
          if (isInput && (self.selectedDates.length > 0 || self._input.value.length > 0) && !(e.relatedTarget && isCalendarElem(e.relatedTarget))) self.setDate(self._input.value, true, e.target === self.altInput ? self.config.altFormat : self.config.dateFormat);
      }
      function onKeyDown(e) {
          const eventTarget = _dom.getEventTarget(e);
          const isInput = self.config.wrap ? element1.contains(eventTarget) : eventTarget === self._input;
          const allowInput = self.config.allowInput;
          const allowKeydown = self.isOpen && (!allowInput || !isInput);
          const allowInlineKeydown = self.config.inline && isInput && !allowInput;
          if (e.keyCode === 13 && isInput) {
              if (allowInput) {
                  self.setDate(self._input.value, true, eventTarget === self.altInput ? self.config.altFormat : self.config.dateFormat);
                  return eventTarget.blur();
              } else self.open();
          } else if (isCalendarElem(eventTarget) || allowKeydown || allowInlineKeydown) {
              const isTimeObj = !!self.timeContainer && self.timeContainer.contains(eventTarget);
              switch(e.keyCode){
                  case 13:
                      if (isTimeObj) {
                          e.preventDefault();
                          updateTime();
                          focusAndClose();
                      } else selectDate(e);
                      break;
                  case 27:
                      e.preventDefault();
                      focusAndClose();
                      break;
                  case 8:
                  case 46:
                      if (isInput && !self.config.allowInput) {
                          e.preventDefault();
                          self.clear();
                      }
                      break;
                  case 37:
                  case 39:
                      if (!isTimeObj && !isInput) {
                          e.preventDefault();
                          if (self.daysContainer !== undefined && (allowInput === false || document.activeElement && isInView(document.activeElement))) {
                              const delta = e.keyCode === 39 ? 1 : -1;
                              if (!e.ctrlKey) focusOnDay(undefined, delta);
                              else {
                                  e.stopPropagation();
                                  changeMonth(delta);
                                  focusOnDay(getFirstAvailableDay(1), 0);
                              }
                          }
                      } else if (self.hourElement) self.hourElement.focus();
                      break;
                  case 38:
                  case 40:
                      e.preventDefault();
                      const delta = e.keyCode === 40 ? 1 : -1;
                      if (self.daysContainer && eventTarget.$i !== undefined || eventTarget === self.input || eventTarget === self.altInput) {
                          if (e.ctrlKey) {
                              e.stopPropagation();
                              changeYear(self.currentYear - delta);
                              focusOnDay(getFirstAvailableDay(1), 0);
                          } else if (!isTimeObj) focusOnDay(undefined, delta * 7);
                      } else if (eventTarget === self.currentYearElement) changeYear(self.currentYear - delta);
                      else if (self.config.enableTime) {
                          if (!isTimeObj && self.hourElement) self.hourElement.focus();
                          updateTime(e);
                          self._debouncedChange();
                      }
                      break;
                  case 9:
                      if (isTimeObj) {
                          const elems = [
                              self.hourElement,
                              self.minuteElement,
                              self.secondElement,
                              self.amPM, 
                          ].concat(self.pluginElements).filter((x)=>x
                          );
                          const i = elems.indexOf(eventTarget);
                          if (i !== -1) {
                              const target = elems[i + (e.shiftKey ? -1 : 1)];
                              e.preventDefault();
                              (target || self._input).focus();
                          }
                      } else if (!self.config.noCalendar && self.daysContainer && self.daysContainer.contains(eventTarget) && e.shiftKey) {
                          e.preventDefault();
                          self._input.focus();
                      }
                      break;
                  default:
                      break;
              }
          }
          if (self.amPM !== undefined && eventTarget === self.amPM) switch(e.key){
              case self.l10n.amPM[0].charAt(0):
              case self.l10n.amPM[0].charAt(0).toLowerCase():
                  self.amPM.textContent = self.l10n.amPM[0];
                  setHoursFromInputs();
                  updateValue();
                  break;
              case self.l10n.amPM[1].charAt(0):
              case self.l10n.amPM[1].charAt(0).toLowerCase():
                  self.amPM.textContent = self.l10n.amPM[1];
                  setHoursFromInputs();
                  updateValue();
                  break;
          }
          if (isInput || isCalendarElem(eventTarget)) triggerEvent("onKeyDown", e);
      }
      function onMouseOver(elem) {
          if (self.selectedDates.length !== 1 || elem && (!elem.classList.contains("flatpickr-day") || elem.classList.contains("flatpickr-disabled"))) return;
          const hoverDate = elem ? elem.dateObj.getTime() : self.days.firstElementChild.dateObj.getTime(), initialDate = self.parseDate(self.selectedDates[0], undefined, true).getTime(), rangeStartDate = Math.min(hoverDate, self.selectedDates[0].getTime()), rangeEndDate = Math.max(hoverDate, self.selectedDates[0].getTime());
          let containsDisabled = false;
          let minRange = 0, maxRange = 0;
          for(let t = rangeStartDate; t < rangeEndDate; t += _dates.duration.DAY)if (!isEnabled(new Date(t), true)) {
              containsDisabled = containsDisabled || t > rangeStartDate && t < rangeEndDate;
              if (t < initialDate && (!minRange || t > minRange)) minRange = t;
              else if (t > initialDate && (!maxRange || t < maxRange)) maxRange = t;
          }
          for(let m = 0; m < self.config.showMonths; m++){
              const month = self.daysContainer.children[m];
              for(let i = 0, l = month.children.length; i < l; i++){
                  const dayElem = month.children[i], date = dayElem.dateObj;
                  const timestamp = date.getTime();
                  const outOfRange = minRange > 0 && timestamp < minRange || maxRange > 0 && timestamp > maxRange;
                  if (outOfRange) {
                      dayElem.classList.add("notAllowed");
                      [
                          "inRange",
                          "startRange",
                          "endRange"
                      ].forEach((c)=>{
                          dayElem.classList.remove(c);
                      });
                      continue;
                  } else if (containsDisabled && !outOfRange) continue;
                  [
                      "startRange",
                      "inRange",
                      "endRange",
                      "notAllowed"
                  ].forEach((c)=>{
                      dayElem.classList.remove(c);
                  });
                  if (elem !== undefined) {
                      elem.classList.add(hoverDate <= self.selectedDates[0].getTime() ? "startRange" : "endRange");
                      if (initialDate < hoverDate && timestamp === initialDate) dayElem.classList.add("startRange");
                      else if (initialDate > hoverDate && timestamp === initialDate) dayElem.classList.add("endRange");
                      if (timestamp >= minRange && (maxRange === 0 || timestamp <= maxRange) && _dates.isBetween(timestamp, initialDate, hoverDate)) dayElem.classList.add("inRange");
                  }
              }
          }
      }
      function onResize() {
          if (self.isOpen && !self.config.static && !self.config.inline) positionCalendar();
      }
      function open(e, positionElement = self._positionElement) {
          if (self.isMobile === true) {
              if (e) {
                  e.preventDefault();
                  const eventTarget = _dom.getEventTarget(e);
                  if (eventTarget) eventTarget.blur();
              }
              if (self.mobileInput !== undefined) {
                  self.mobileInput.focus();
                  self.mobileInput.click();
              }
              triggerEvent("onOpen");
              return;
          } else if (self._input.disabled || self.config.inline) return;
          const wasOpen = self.isOpen;
          self.isOpen = true;
          if (!wasOpen) {
              self.calendarContainer.classList.add("open");
              self._input.classList.add("active");
              triggerEvent("onOpen");
              positionCalendar(positionElement);
          }
          if (self.config.enableTime === true && self.config.noCalendar === true) {
              if (self.config.allowInput === false && (e === undefined || !self.timeContainer.contains(e.relatedTarget))) setTimeout(()=>self.hourElement.select()
              , 50);
          }
      }
      function minMaxDateSetter(type) {
          return (date)=>{
              const dateObj = self.config[`_${type}Date`] = self.parseDate(date, self.config.dateFormat);
              const inverseDateObj = self.config[`_${type === "min" ? "max" : "min"}Date`];
              if (dateObj !== undefined) self[type === "min" ? "minDateHasTime" : "maxDateHasTime"] = dateObj.getHours() > 0 || dateObj.getMinutes() > 0 || dateObj.getSeconds() > 0;
              if (self.selectedDates) {
                  self.selectedDates = self.selectedDates.filter((d)=>isEnabled(d)
                  );
                  if (!self.selectedDates.length && type === "min") setHoursFromDate(dateObj);
                  updateValue();
              }
              if (self.daysContainer) {
                  redraw();
                  if (dateObj !== undefined) self.currentYearElement[type] = dateObj.getFullYear().toString();
                  else self.currentYearElement.removeAttribute(type);
                  self.currentYearElement.disabled = !!inverseDateObj && dateObj !== undefined && inverseDateObj.getFullYear() === dateObj.getFullYear();
              }
          };
      }
      function parseConfig() {
          const boolOpts = [
              "wrap",
              "weekNumbers",
              "allowInput",
              "allowInvalidPreload",
              "clickOpens",
              "time_24hr",
              "enableTime",
              "noCalendar",
              "altInput",
              "shorthandCurrentMonth",
              "inline",
              "static",
              "enableSeconds",
              "disableMobile", 
          ];
          const userConfig = Object.assign(Object.assign({
          }, JSON.parse(JSON.stringify(element1.dataset || {
          }))), instanceConfig);
          const formats = {
          };
          self.config.parseDate = userConfig.parseDate;
          self.config.formatDate = userConfig.formatDate;
          Object.defineProperty(self.config, "enable", {
              get: ()=>self.config._enable
              ,
              set: (dates)=>{
                  self.config._enable = parseDateRules(dates);
              }
          });
          Object.defineProperty(self.config, "disable", {
              get: ()=>self.config._disable
              ,
              set: (dates)=>{
                  self.config._disable = parseDateRules(dates);
              }
          });
          const timeMode = userConfig.mode === "time";
          if (!userConfig.dateFormat && (userConfig.enableTime || timeMode)) {
              const defaultDateFormat = flatpickr.defaultConfig.dateFormat || _options.defaults.dateFormat;
              formats.dateFormat = userConfig.noCalendar || timeMode ? "H:i" + (userConfig.enableSeconds ? ":S" : "") : defaultDateFormat + " H:i" + (userConfig.enableSeconds ? ":S" : "");
          }
          if (userConfig.altInput && (userConfig.enableTime || timeMode) && !userConfig.altFormat) {
              const defaultAltFormat = flatpickr.defaultConfig.altFormat || _options.defaults.altFormat;
              formats.altFormat = userConfig.noCalendar || timeMode ? "h:i" + (userConfig.enableSeconds ? ":S K" : " K") : defaultAltFormat + ` h:i${userConfig.enableSeconds ? ":S" : ""} K`;
          }
          Object.defineProperty(self.config, "minDate", {
              get: ()=>self.config._minDate
              ,
              set: minMaxDateSetter("min")
          });
          Object.defineProperty(self.config, "maxDate", {
              get: ()=>self.config._maxDate
              ,
              set: minMaxDateSetter("max")
          });
          const minMaxTimeSetter = (type)=>(val)=>{
                  self.config[type === "min" ? "_minTime" : "_maxTime"] = self.parseDate(val, "H:i:S");
              }
          ;
          Object.defineProperty(self.config, "minTime", {
              get: ()=>self.config._minTime
              ,
              set: minMaxTimeSetter("min")
          });
          Object.defineProperty(self.config, "maxTime", {
              get: ()=>self.config._maxTime
              ,
              set: minMaxTimeSetter("max")
          });
          if (userConfig.mode === "time") {
              self.config.noCalendar = true;
              self.config.enableTime = true;
          }
          Object.assign(self.config, formats, userConfig);
          for(let i = 0; i < boolOpts.length; i++)self.config[boolOpts[i]] = self.config[boolOpts[i]] === true || self.config[boolOpts[i]] === "true";
          _options.HOOKS.filter((hook)=>self.config[hook] !== undefined
          ).forEach((hook)=>{
              self.config[hook] = _utils.arrayify(self.config[hook] || []).map(bindToInstance);
          });
          self.isMobile = !self.config.disableMobile && !self.config.inline && self.config.mode === "single" && !self.config.disable.length && !self.config.enable && !self.config.weekNumbers && /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
          for(let i1 = 0; i1 < self.config.plugins.length; i1++){
              const pluginConf = self.config.plugins[i1](self) || {
              };
              for(const key in pluginConf){
                  if (_options.HOOKS.indexOf(key) > -1) self.config[key] = _utils.arrayify(pluginConf[key]).map(bindToInstance).concat(self.config[key]);
                  else if (typeof userConfig[key] === "undefined") self.config[key] = pluginConf[key];
              }
          }
          if (!userConfig.altInputClass) self.config.altInputClass = getInputElem().className + " " + self.config.altInputClass;
          triggerEvent("onParseConfig");
      }
      function getInputElem() {
          return self.config.wrap ? element1.querySelector("[data-input]") : element1;
      }
      function setupLocale() {
          if (typeof self.config.locale !== "object" && typeof flatpickr.l10ns[self.config.locale] === "undefined") self.config.errorHandler(new Error(`flatpickr: invalid locale ${self.config.locale}`));
          self.l10n = Object.assign(Object.assign({
          }, flatpickr.l10ns.default), typeof self.config.locale === "object" ? self.config.locale : self.config.locale !== "default" ? flatpickr.l10ns[self.config.locale] : undefined);
          _formatting.tokenRegex.K = `(${self.l10n.amPM[0]}|${self.l10n.amPM[1]}|${self.l10n.amPM[0].toLowerCase()}|${self.l10n.amPM[1].toLowerCase()})`;
          const userConfig = Object.assign(Object.assign({
          }, instanceConfig), JSON.parse(JSON.stringify(element1.dataset || {
          })));
          if (userConfig.time_24hr === undefined && flatpickr.defaultConfig.time_24hr === undefined) self.config.time_24hr = self.l10n.time_24hr;
          self.formatDate = _dates.createDateFormatter(self);
          self.parseDate = _dates.createDateParser({
              config: self.config,
              l10n: self.l10n
          });
      }
      function positionCalendar(customPositionElement) {
          if (typeof self.config.position === "function") return void self.config.position(self, customPositionElement);
          if (self.calendarContainer === undefined) return;
          triggerEvent("onPreCalendarPosition");
          const positionElement = customPositionElement || self._positionElement;
          const calendarHeight = Array.prototype.reduce.call(self.calendarContainer.children, (acc, child)=>acc + child.offsetHeight
          , 0), calendarWidth = self.calendarContainer.offsetWidth, configPos = self.config.position.split(" "), configPosVertical = configPos[0], configPosHorizontal = configPos.length > 1 ? configPos[1] : null, inputBounds = positionElement.getBoundingClientRect(), distanceFromBottom = window.innerHeight - inputBounds.bottom, showOnTop = configPosVertical === "above" || configPosVertical !== "below" && distanceFromBottom < calendarHeight && inputBounds.top > calendarHeight;
          const top = window.pageYOffset + inputBounds.top + (!showOnTop ? positionElement.offsetHeight + 2 : -calendarHeight - 2);
          _dom.toggleClass(self.calendarContainer, "arrowTop", !showOnTop);
          _dom.toggleClass(self.calendarContainer, "arrowBottom", showOnTop);
          if (self.config.inline) return;
          let left = window.pageXOffset + inputBounds.left;
          let isCenter = false;
          let isRight = false;
          if (configPosHorizontal === "center") {
              left -= (calendarWidth - inputBounds.width) / 2;
              isCenter = true;
          } else if (configPosHorizontal === "right") {
              left -= calendarWidth - inputBounds.width;
              isRight = true;
          }
          _dom.toggleClass(self.calendarContainer, "arrowLeft", !isCenter && !isRight);
          _dom.toggleClass(self.calendarContainer, "arrowCenter", isCenter);
          _dom.toggleClass(self.calendarContainer, "arrowRight", isRight);
          const right = window.document.body.offsetWidth - (window.pageXOffset + inputBounds.right);
          const rightMost = left + calendarWidth > window.document.body.offsetWidth;
          const centerMost = right + calendarWidth > window.document.body.offsetWidth;
          _dom.toggleClass(self.calendarContainer, "rightMost", rightMost);
          if (self.config.static) return;
          self.calendarContainer.style.top = `${top}px`;
          if (!rightMost) {
              self.calendarContainer.style.left = `${left}px`;
              self.calendarContainer.style.right = "auto";
          } else if (!centerMost) {
              self.calendarContainer.style.left = "auto";
              self.calendarContainer.style.right = `${right}px`;
          } else {
              const doc = getDocumentStyleSheet();
              if (doc === undefined) return;
              const bodyWidth = window.document.body.offsetWidth;
              const centerLeft = Math.max(0, bodyWidth / 2 - calendarWidth / 2);
              const centerBefore = ".flatpickr-calendar.centerMost:before";
              const centerAfter = ".flatpickr-calendar.centerMost:after";
              const centerIndex = doc.cssRules.length;
              const centerStyle = `{left:${inputBounds.left}px;right:auto;}`;
              _dom.toggleClass(self.calendarContainer, "rightMost", false);
              _dom.toggleClass(self.calendarContainer, "centerMost", true);
              doc.insertRule(`${centerBefore},${centerAfter}${centerStyle}`, centerIndex);
              self.calendarContainer.style.left = `${centerLeft}px`;
              self.calendarContainer.style.right = "auto";
          }
      }
      function getDocumentStyleSheet() {
          let editableSheet = null;
          for(let i = 0; i < document.styleSheets.length; i++){
              const sheet = document.styleSheets[i];
              try {
                  sheet.cssRules;
              } catch (err) {
                  continue;
              }
              editableSheet = sheet;
              break;
          }
          return editableSheet != null ? editableSheet : createStyleSheet();
      }
      function createStyleSheet() {
          const style = document.createElement("style");
          document.head.appendChild(style);
          return style.sheet;
      }
      function redraw() {
          if (self.config.noCalendar || self.isMobile) return;
          buildMonthSwitch();
          updateNavigationCurrentMonth();
          buildDays();
      }
      function focusAndClose() {
          self._input.focus();
          if (window.navigator.userAgent.indexOf("MSIE") !== -1 || navigator.msMaxTouchPoints !== undefined) setTimeout(self.close, 0);
          else self.close();
      }
      function selectDate(e) {
          e.preventDefault();
          e.stopPropagation();
          const isSelectable = (day)=>day.classList && day.classList.contains("flatpickr-day") && !day.classList.contains("flatpickr-disabled") && !day.classList.contains("notAllowed")
          ;
          const t = _dom.findParent(_dom.getEventTarget(e), isSelectable);
          if (t === undefined) return;
          const target = t;
          const selectedDate = self.latestSelectedDateObj = new Date(target.dateObj.getTime());
          const shouldChangeMonth = (selectedDate.getMonth() < self.currentMonth || selectedDate.getMonth() > self.currentMonth + self.config.showMonths - 1) && self.config.mode !== "range";
          self.selectedDateElem = target;
          if (self.config.mode === "single") self.selectedDates = [
              selectedDate
          ];
          else if (self.config.mode === "multiple") {
              const selectedIndex = isDateSelected(selectedDate);
              if (selectedIndex) self.selectedDates.splice(parseInt(selectedIndex), 1);
              else self.selectedDates.push(selectedDate);
          } else if (self.config.mode === "range") {
              if (self.selectedDates.length === 2) self.clear(false, false);
              self.latestSelectedDateObj = selectedDate;
              self.selectedDates.push(selectedDate);
              if (_dates.compareDates(selectedDate, self.selectedDates[0], true) !== 0) self.selectedDates.sort((a, b)=>a.getTime() - b.getTime()
              );
          }
          setHoursFromInputs();
          if (shouldChangeMonth) {
              const isNewYear = self.currentYear !== selectedDate.getFullYear();
              self.currentYear = selectedDate.getFullYear();
              self.currentMonth = selectedDate.getMonth();
              if (isNewYear) {
                  triggerEvent("onYearChange");
                  buildMonthSwitch();
              }
              triggerEvent("onMonthChange");
          }
          updateNavigationCurrentMonth();
          buildDays();
          updateValue();
          if (!shouldChangeMonth && self.config.mode !== "range" && self.config.showMonths === 1) focusOnDayElem(target);
          else if (self.selectedDateElem !== undefined && self.hourElement === undefined) self.selectedDateElem && self.selectedDateElem.focus();
          if (self.hourElement !== undefined) self.hourElement !== undefined && self.hourElement.focus();
          if (self.config.closeOnSelect) {
              const single = self.config.mode === "single" && !self.config.enableTime;
              const range = self.config.mode === "range" && self.selectedDates.length === 2 && !self.config.enableTime;
              if (single || range) focusAndClose();
          }
          triggerChange1();
      }
      const CALLBACKS = {
          locale: [
              setupLocale,
              updateWeekdays
          ],
          showMonths: [
              buildMonths,
              setCalendarWidth,
              buildWeekdays
          ],
          minDate: [
              jumpToDate
          ],
          maxDate: [
              jumpToDate
          ],
          clickOpens: [
              ()=>{
                  if (self.config.clickOpens === true) {
                      bind(self._input, "focus", self.open);
                      bind(self._input, "click", self.open);
                  } else {
                      self._input.removeEventListener("focus", self.open);
                      self._input.removeEventListener("click", self.open);
                  }
              }, 
          ]
      };
      function set(option, value) {
          if (option !== null && typeof option === "object") {
              Object.assign(self.config, option);
              for(const key in option)if (CALLBACKS[key] !== undefined) CALLBACKS[key].forEach((x)=>x()
              );
          } else {
              self.config[option] = value;
              if (CALLBACKS[option] !== undefined) CALLBACKS[option].forEach((x)=>x()
              );
              else if (_options.HOOKS.indexOf(option) > -1) self.config[option] = _utils.arrayify(value);
          }
          self.redraw();
          updateValue(true);
      }
      function setSelectedDate(inputDate, format) {
          let dates = [];
          if (inputDate instanceof Array) dates = inputDate.map((d)=>self.parseDate(d, format)
          );
          else if (inputDate instanceof Date || typeof inputDate === "number") dates = [
              self.parseDate(inputDate, format)
          ];
          else if (typeof inputDate === "string") switch(self.config.mode){
              case "single":
              case "time":
                  dates = [
                      self.parseDate(inputDate, format)
                  ];
                  break;
              case "multiple":
                  dates = inputDate.split(self.config.conjunction).map((date)=>self.parseDate(date, format)
                  );
                  break;
              case "range":
                  dates = inputDate.split(self.l10n.rangeSeparator).map((date)=>self.parseDate(date, format)
                  );
                  break;
              default:
                  break;
          }
          else self.config.errorHandler(new Error(`Invalid date supplied: ${JSON.stringify(inputDate)}`));
          self.selectedDates = self.config.allowInvalidPreload ? dates : dates.filter((d)=>d instanceof Date && isEnabled(d, false)
          );
          if (self.config.mode === "range") self.selectedDates.sort((a, b)=>a.getTime() - b.getTime()
          );
      }
      function setDate(date, triggerChange = false, format = self.config.dateFormat) {
          if (date !== 0 && !date || date instanceof Array && date.length === 0) return self.clear(triggerChange);
          setSelectedDate(date, format);
          self.latestSelectedDateObj = self.selectedDates[self.selectedDates.length - 1];
          self.redraw();
          jumpToDate(undefined, triggerChange);
          setHoursFromDate();
          if (self.selectedDates.length === 0) self.clear(false);
          updateValue(triggerChange);
          if (triggerChange) triggerEvent("onChange");
      }
      function parseDateRules(arr) {
          return arr.slice().map((rule)=>{
              if (typeof rule === "string" || typeof rule === "number" || rule instanceof Date) return self.parseDate(rule, undefined, true);
              else if (rule && typeof rule === "object" && rule.from && rule.to) return {
                  from: self.parseDate(rule.from, undefined),
                  to: self.parseDate(rule.to, undefined)
              };
              return rule;
          }).filter((x)=>x
          );
      }
      function setupDates() {
          self.selectedDates = [];
          self.now = self.parseDate(self.config.now) || new Date();
          const preloadedDate = self.config.defaultDate || ((self.input.nodeName === "INPUT" || self.input.nodeName === "TEXTAREA") && self.input.placeholder && self.input.value === self.input.placeholder ? null : self.input.value);
          if (preloadedDate) setSelectedDate(preloadedDate, self.config.dateFormat);
          self._initialDate = self.selectedDates.length > 0 ? self.selectedDates[0] : self.config.minDate && self.config.minDate.getTime() > self.now.getTime() ? self.config.minDate : self.config.maxDate && self.config.maxDate.getTime() < self.now.getTime() ? self.config.maxDate : self.now;
          self.currentYear = self._initialDate.getFullYear();
          self.currentMonth = self._initialDate.getMonth();
          if (self.selectedDates.length > 0) self.latestSelectedDateObj = self.selectedDates[0];
          if (self.config.minTime !== undefined) self.config.minTime = self.parseDate(self.config.minTime, "H:i");
          if (self.config.maxTime !== undefined) self.config.maxTime = self.parseDate(self.config.maxTime, "H:i");
          self.minDateHasTime = !!self.config.minDate && (self.config.minDate.getHours() > 0 || self.config.minDate.getMinutes() > 0 || self.config.minDate.getSeconds() > 0);
          self.maxDateHasTime = !!self.config.maxDate && (self.config.maxDate.getHours() > 0 || self.config.maxDate.getMinutes() > 0 || self.config.maxDate.getSeconds() > 0);
      }
      function setupInputs() {
          self.input = getInputElem();
          if (!self.input) {
              self.config.errorHandler(new Error("Invalid input element specified"));
              return;
          }
          self.input._type = self.input.type;
          self.input.type = "text";
          self.input.classList.add("flatpickr-input");
          self._input = self.input;
          if (self.config.altInput) {
              self.altInput = _dom.createElement(self.input.nodeName, self.config.altInputClass);
              self._input = self.altInput;
              self.altInput.placeholder = self.input.placeholder;
              self.altInput.disabled = self.input.disabled;
              self.altInput.required = self.input.required;
              self.altInput.tabIndex = self.input.tabIndex;
              self.altInput.type = "text";
              self.input.setAttribute("type", "hidden");
              if (!self.config.static && self.input.parentNode) self.input.parentNode.insertBefore(self.altInput, self.input.nextSibling);
          }
          if (!self.config.allowInput) self._input.setAttribute("readonly", "readonly");
          self._positionElement = self.config.positionElement || self._input;
      }
      function setupMobile() {
          const inputType = self.config.enableTime ? self.config.noCalendar ? "time" : "datetime-local" : "date";
          self.mobileInput = _dom.createElement("input", self.input.className + " flatpickr-mobile");
          self.mobileInput.tabIndex = 1;
          self.mobileInput.type = inputType;
          self.mobileInput.disabled = self.input.disabled;
          self.mobileInput.required = self.input.required;
          self.mobileInput.placeholder = self.input.placeholder;
          self.mobileFormatStr = inputType === "datetime-local" ? "Y-m-d\\TH:i:S" : inputType === "date" ? "Y-m-d" : "H:i:S";
          if (self.selectedDates.length > 0) self.mobileInput.defaultValue = self.mobileInput.value = self.formatDate(self.selectedDates[0], self.mobileFormatStr);
          if (self.config.minDate) self.mobileInput.min = self.formatDate(self.config.minDate, "Y-m-d");
          if (self.config.maxDate) self.mobileInput.max = self.formatDate(self.config.maxDate, "Y-m-d");
          if (self.input.getAttribute("step")) self.mobileInput.step = String(self.input.getAttribute("step"));
          self.input.type = "hidden";
          if (self.altInput !== undefined) self.altInput.type = "hidden";
          try {
              if (self.input.parentNode) self.input.parentNode.insertBefore(self.mobileInput, self.input.nextSibling);
          } catch (_a) {
          }
          bind(self.mobileInput, "change", (e)=>{
              self.setDate(_dom.getEventTarget(e).value, false, self.mobileFormatStr);
              triggerEvent("onChange");
              triggerEvent("onClose");
          });
      }
      function toggle(e) {
          if (self.isOpen === true) return self.close();
          self.open(e);
      }
      function triggerEvent(event, data) {
          if (self.config === undefined) return;
          const hooks = self.config[event];
          if (hooks !== undefined && hooks.length > 0) for(let i = 0; hooks[i] && i < hooks.length; i++)hooks[i](self.selectedDates, self.input.value, self, data);
          if (event === "onChange") {
              self.input.dispatchEvent(createEvent("change"));
              self.input.dispatchEvent(createEvent("input"));
          }
      }
      function createEvent(name) {
          const e = document.createEvent("Event");
          e.initEvent(name, true, true);
          return e;
      }
      function isDateSelected(date) {
          for(let i = 0; i < self.selectedDates.length; i++){
              if (_dates.compareDates(self.selectedDates[i], date) === 0) return "" + i;
          }
          return false;
      }
      function isDateInRange(date) {
          if (self.config.mode !== "range" || self.selectedDates.length < 2) return false;
          return _dates.compareDates(date, self.selectedDates[0]) >= 0 && _dates.compareDates(date, self.selectedDates[1]) <= 0;
      }
      function updateNavigationCurrentMonth() {
          if (self.config.noCalendar || self.isMobile || !self.monthNav) return;
          self.yearElements.forEach((yearElement, i)=>{
              const d = new Date(self.currentYear, self.currentMonth, 1);
              d.setMonth(self.currentMonth + i);
              if (self.config.showMonths > 1 || self.config.monthSelectorType === "static") self.monthElements[i].textContent = _formatting.monthToStr(d.getMonth(), self.config.shorthandCurrentMonth, self.l10n) + " ";
              else self.monthsDropdownContainer.value = d.getMonth().toString();
              yearElement.value = d.getFullYear().toString();
          });
          self._hidePrevMonthArrow = self.config.minDate !== undefined && (self.currentYear === self.config.minDate.getFullYear() ? self.currentMonth <= self.config.minDate.getMonth() : self.currentYear < self.config.minDate.getFullYear());
          self._hideNextMonthArrow = self.config.maxDate !== undefined && (self.currentYear === self.config.maxDate.getFullYear() ? self.currentMonth + 1 > self.config.maxDate.getMonth() : self.currentYear > self.config.maxDate.getFullYear());
      }
      function getDateStr(format) {
          return self.selectedDates.map((dObj)=>self.formatDate(dObj, format)
          ).filter((d, i, arr)=>self.config.mode !== "range" || self.config.enableTime || arr.indexOf(d) === i
          ).join(self.config.mode !== "range" ? self.config.conjunction : self.l10n.rangeSeparator);
      }
      function updateValue(triggerChange = true) {
          if (self.mobileInput !== undefined && self.mobileFormatStr) self.mobileInput.value = self.latestSelectedDateObj !== undefined ? self.formatDate(self.latestSelectedDateObj, self.mobileFormatStr) : "";
          self.input.value = getDateStr(self.config.dateFormat);
          if (self.altInput !== undefined) self.altInput.value = getDateStr(self.config.altFormat);
          if (triggerChange !== false) triggerEvent("onValueUpdate");
      }
      function onMonthNavClick(e) {
          const eventTarget = _dom.getEventTarget(e);
          const isPrevMonth = self.prevMonthNav.contains(eventTarget);
          const isNextMonth = self.nextMonthNav.contains(eventTarget);
          if (isPrevMonth || isNextMonth) changeMonth(isPrevMonth ? -1 : 1);
          else if (self.yearElements.indexOf(eventTarget) >= 0) eventTarget.select();
          else if (eventTarget.classList.contains("arrowUp")) self.changeYear(self.currentYear + 1);
          else if (eventTarget.classList.contains("arrowDown")) self.changeYear(self.currentYear - 1);
      }
      function timeWrapper(e) {
          e.preventDefault();
          const isKeyDown = e.type === "keydown", eventTarget = _dom.getEventTarget(e), input = eventTarget;
          if (self.amPM !== undefined && eventTarget === self.amPM) self.amPM.textContent = self.l10n.amPM[_utils.int(self.amPM.textContent === self.l10n.amPM[0])];
          const min = parseFloat(input.getAttribute("min")), max = parseFloat(input.getAttribute("max")), step = parseFloat(input.getAttribute("step")), curValue = parseInt(input.value, 10), delta = e.delta || (isKeyDown ? e.which === 38 ? 1 : -1 : 0);
          let newValue = curValue + step * delta;
          if (typeof input.value !== "undefined" && input.value.length === 2) {
              const isHourElem = input === self.hourElement, isMinuteElem = input === self.minuteElement;
              if (newValue < min) {
                  newValue = max + newValue + _utils.int(!isHourElem) + (_utils.int(isHourElem) && _utils.int(!self.amPM));
                  if (isMinuteElem) incrementNumInput(undefined, -1, self.hourElement);
              } else if (newValue > max) {
                  newValue = input === self.hourElement ? newValue - max - _utils.int(!self.amPM) : min;
                  if (isMinuteElem) incrementNumInput(undefined, 1, self.hourElement);
              }
              if (self.amPM && isHourElem && (step === 1 ? newValue + curValue === 23 : Math.abs(newValue - curValue) > step)) self.amPM.textContent = self.l10n.amPM[_utils.int(self.amPM.textContent === self.l10n.amPM[0])];
              input.value = _utils.pad(newValue);
          }
      }
      init();
      return self;
  }
  function _flatpickr(nodeList, config) {
      const nodes = Array.prototype.slice.call(nodeList).filter((x)=>x instanceof HTMLElement
      );
      const instances = [];
      for(let i = 0; i < nodes.length; i++){
          const node = nodes[i];
          try {
              if (node.getAttribute("data-fp-omit") !== null) continue;
              if (node._flatpickr !== undefined) {
                  node._flatpickr.destroy();
                  node._flatpickr = undefined;
              }
              node._flatpickr = FlatpickrInstance(node, config || {
              });
              instances.push(node._flatpickr);
          } catch (e) {
              console.error(e);
          }
      }
      return instances.length === 1 ? instances[0] : instances;
  }
  if (typeof HTMLElement !== "undefined" && typeof HTMLCollection !== "undefined" && typeof NodeList !== "undefined") {
      HTMLCollection.prototype.flatpickr = NodeList.prototype.flatpickr = function(config) {
          return _flatpickr(this, config);
      };
      HTMLElement.prototype.flatpickr = function(config) {
          return _flatpickr([
              this
          ], config);
      };
  }
  var flatpickr = function(selector, config) {
      if (typeof selector === "string") return _flatpickr(window.document.querySelectorAll(selector), config);
      else if (selector instanceof Node) return _flatpickr([
          selector
      ], config);
      else return _flatpickr(selector, config);
  };
  flatpickr.defaultConfig = {
  };
  flatpickr.l10ns = {
      en: Object.assign({
      }, _defaultDefault.default),
      default: Object.assign({
      }, _defaultDefault.default)
  };
  flatpickr.localize = (l10n)=>{
      flatpickr.l10ns.default = Object.assign(Object.assign({
      }, flatpickr.l10ns.default), l10n);
  };
  flatpickr.setDefaults = (config)=>{
      flatpickr.defaultConfig = Object.assign(Object.assign({
      }, flatpickr.defaultConfig), config);
  };
  flatpickr.parseDate = _dates.createDateParser({
  });
  flatpickr.formatDate = _dates.createDateFormatter({
  });
  flatpickr.compareDates = _dates.compareDates;
  if (typeof jQuery !== "undefined" && typeof jQuery.fn !== "undefined") jQuery.fn.flatpickr = function(config) {
      return _flatpickr(this, config);
  };
  Date.prototype.fp_incr = function(days) {
      return new Date(this.getFullYear(), this.getMonth(), this.getDate() + (typeof days === "string" ? parseInt(days, 10) : days));
  };
  if (typeof window !== "undefined") window.flatpickr = flatpickr;
  exports.default = flatpickr;
  
  },{"./types/options":"h2gY4","./l10n/default":"eDgV1","./utils":"c6tm8","./utils/dom":"8YAED","./utils/dates":"83MCj","./utils/formatting":"jt8kP","./utils/polyfills":"2PQGv","@parcel/transformer-js/src/esmodule-helpers.js":"6jXwo"}],"h2gY4":[function(require,module,exports) {
  var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  parcelHelpers.export(exports, "HOOKS", ()=>HOOKS
  );
  parcelHelpers.export(exports, "defaults", ()=>defaults
  );
  const HOOKS = [
      "onChange",
      "onClose",
      "onDayCreate",
      "onDestroy",
      "onKeyDown",
      "onMonthChange",
      "onOpen",
      "onParseConfig",
      "onReady",
      "onValueUpdate",
      "onYearChange",
      "onPreCalendarPosition", 
  ];
  const defaults = {
      _disable: [],
      allowInput: false,
      allowInvalidPreload: false,
      altFormat: "F j, Y",
      altInput: false,
      altInputClass: "form-control input",
      animate: typeof window === "object" && window.navigator.userAgent.indexOf("MSIE") === -1,
      ariaDateFormat: "F j, Y",
      autoFillDefaultTime: true,
      clickOpens: true,
      closeOnSelect: true,
      conjunction: ", ",
      dateFormat: "Y-m-d",
      defaultHour: 12,
      defaultMinute: 0,
      defaultSeconds: 0,
      disable: [],
      disableMobile: false,
      enableSeconds: false,
      enableTime: false,
      errorHandler: (err)=>typeof console !== "undefined" && console.warn(err)
      ,
      getWeek: (givenDate)=>{
          const date = new Date(givenDate.getTime());
          date.setHours(0, 0, 0, 0);
          date.setDate(date.getDate() + 3 - (date.getDay() + 6) % 7);
          var week1 = new Date(date.getFullYear(), 0, 4);
          return 1 + Math.round(((date.getTime() - week1.getTime()) / 86400000 - 3 + (week1.getDay() + 6) % 7) / 7);
      },
      hourIncrement: 1,
      ignoredFocusElements: [],
      inline: false,
      locale: "default",
      minuteIncrement: 5,
      mode: "single",
      monthSelectorType: "dropdown",
      nextArrow: "<svg version='1.1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' viewBox='0 0 17 17'><g></g><path d='M13.207 8.472l-7.854 7.854-0.707-0.707 7.146-7.146-7.146-7.148 0.707-0.707 7.854 7.854z' /></svg>",
      noCalendar: false,
      now: new Date(),
      onChange: [],
      onClose: [],
      onDayCreate: [],
      onDestroy: [],
      onKeyDown: [],
      onMonthChange: [],
      onOpen: [],
      onParseConfig: [],
      onReady: [],
      onValueUpdate: [],
      onYearChange: [],
      onPreCalendarPosition: [],
      plugins: [],
      position: "auto",
      positionElement: undefined,
      prevArrow: "<svg version='1.1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' viewBox='0 0 17 17'><g></g><path d='M5.207 8.471l7.146 7.147-0.707 0.707-7.853-7.854 7.854-7.853 0.707 0.707-7.147 7.146z' /></svg>",
      shorthandCurrentMonth: false,
      showMonths: 1,
      static: false,
      time_24hr: false,
      weekNumbers: false,
      wrap: false
  };
  
  },{"@parcel/transformer-js/src/esmodule-helpers.js":"6jXwo"}],"eDgV1":[function(require,module,exports) {
  var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  parcelHelpers.export(exports, "english", ()=>english
  );
  const english = {
      weekdays: {
          shorthand: [
              "Sun",
              "Mon",
              "Tue",
              "Wed",
              "Thu",
              "Fri",
              "Sat"
          ],
          longhand: [
              "Sunday",
              "Monday",
              "Tuesday",
              "Wednesday",
              "Thursday",
              "Friday",
              "Saturday", 
          ]
      },
      months: {
          shorthand: [
              "Jan",
              "Feb",
              "Mar",
              "Apr",
              "May",
              "Jun",
              "Jul",
              "Aug",
              "Sep",
              "Oct",
              "Nov",
              "Dec", 
          ],
          longhand: [
              "January",
              "February",
              "March",
              "April",
              "May",
              "June",
              "July",
              "August",
              "September",
              "October",
              "November",
              "December", 
          ]
      },
      daysInMonth: [
          31,
          28,
          31,
          30,
          31,
          30,
          31,
          31,
          30,
          31,
          30,
          31
      ],
      firstDayOfWeek: 0,
      ordinal: (nth)=>{
          const s = nth % 100;
          if (s > 3 && s < 21) return "th";
          switch(s % 10){
              case 1:
                  return "st";
              case 2:
                  return "nd";
              case 3:
                  return "rd";
              default:
                  return "th";
          }
      },
      rangeSeparator: " to ",
      weekAbbreviation: "Wk",
      scrollTitle: "Scroll to increment",
      toggleTitle: "Click to toggle",
      amPM: [
          "AM",
          "PM"
      ],
      yearAriaLabel: "Year",
      monthAriaLabel: "Month",
      hourAriaLabel: "Hour",
      minuteAriaLabel: "Minute",
      time_24hr: false
  };
  exports.default = english;
  
  },{"@parcel/transformer-js/src/esmodule-helpers.js":"6jXwo"}],"c6tm8":[function(require,module,exports) {
  var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  parcelHelpers.export(exports, "pad", ()=>pad
  );
  parcelHelpers.export(exports, "int", ()=>int
  );
  parcelHelpers.export(exports, "debounce", ()=>debounce
  );
  parcelHelpers.export(exports, "arrayify", ()=>arrayify
  );
  const pad = (number, length = 2)=>`000${number}`.slice(length * -1)
  ;
  const int = (bool)=>bool === true ? 1 : 0
  ;
  function debounce(fn, wait) {
      let t;
      return function() {
          clearTimeout(t);
          t = setTimeout(()=>fn.apply(this, arguments)
          , wait);
      };
  }
  const arrayify = (obj)=>obj instanceof Array ? obj : [
          obj
      ]
  ;
  
  },{"@parcel/transformer-js/src/esmodule-helpers.js":"6jXwo"}],"8YAED":[function(require,module,exports) {
  var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  parcelHelpers.export(exports, "toggleClass", ()=>toggleClass
  );
  parcelHelpers.export(exports, "createElement", ()=>createElement
  );
  parcelHelpers.export(exports, "clearNode", ()=>clearNode
  );
  parcelHelpers.export(exports, "findParent", ()=>findParent
  );
  parcelHelpers.export(exports, "createNumberInput", ()=>createNumberInput
  );
  parcelHelpers.export(exports, "getEventTarget", ()=>getEventTarget
  );
  function toggleClass(elem, className, bool) {
      if (bool === true) return elem.classList.add(className);
      elem.classList.remove(className);
  }
  function createElement(tag, className, content) {
      const e = window.document.createElement(tag);
      className = className || "";
      content = content || "";
      e.className = className;
      if (content !== undefined) e.textContent = content;
      return e;
  }
  function clearNode(node) {
      while(node.firstChild)node.removeChild(node.firstChild);
  }
  function findParent(node, condition) {
      if (condition(node)) return node;
      else if (node.parentNode) return findParent(node.parentNode, condition);
      return undefined;
  }
  function createNumberInput(inputClassName, opts) {
      const wrapper = createElement("div", "numInputWrapper"), numInput = createElement("input", "numInput " + inputClassName), arrowUp = createElement("span", "arrowUp"), arrowDown = createElement("span", "arrowDown");
      if (navigator.userAgent.indexOf("MSIE 9.0") === -1) numInput.type = "number";
      else {
          numInput.type = "text";
          numInput.pattern = "\\d*";
      }
      if (opts !== undefined) for(const key in opts)numInput.setAttribute(key, opts[key]);
      wrapper.appendChild(numInput);
      wrapper.appendChild(arrowUp);
      wrapper.appendChild(arrowDown);
      return wrapper;
  }
  function getEventTarget(event) {
      try {
          if (typeof event.composedPath === "function") {
              const path = event.composedPath();
              return path[0];
          }
          return event.target;
      } catch (error) {
          return event.target;
      }
  }
  
  },{"@parcel/transformer-js/src/esmodule-helpers.js":"6jXwo"}],"83MCj":[function(require,module,exports) {
  var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  parcelHelpers.export(exports, "createDateFormatter", ()=>createDateFormatter
  );
  parcelHelpers.export(exports, "createDateParser", ()=>createDateParser
  );
  parcelHelpers.export(exports, "compareDates", ()=>compareDates
  );
  parcelHelpers.export(exports, "compareTimes", ()=>compareTimes
  );
  parcelHelpers.export(exports, "isBetween", ()=>isBetween
  );
  parcelHelpers.export(exports, "duration", ()=>duration
  );
  parcelHelpers.export(exports, "getDefaultHours", ()=>getDefaultHours
  );
  var _formatting = require("./formatting");
  var _options = require("../types/options");
  var _default = require("../l10n/default");
  const createDateFormatter = ({ config =_options.defaults , l10n =_default.english , isMobile =false ,  })=>(dateObj, frmt, overrideLocale)=>{
          const locale = overrideLocale || l10n;
          if (config.formatDate !== undefined && !isMobile) return config.formatDate(dateObj, frmt, locale);
          return frmt.split("").map((c, i, arr)=>_formatting.formats[c] && arr[i - 1] !== "\\" ? _formatting.formats[c](dateObj, locale, config) : c !== "\\" ? c : ""
          ).join("");
      }
  ;
  const createDateParser = ({ config =_options.defaults , l10n =_default.english  })=>(date, givenFormat, timeless, customLocale)=>{
          if (date !== 0 && !date) return undefined;
          const locale = customLocale || l10n;
          let parsedDate;
          const dateOrig = date;
          if (date instanceof Date) parsedDate = new Date(date.getTime());
          else if (typeof date !== "string" && date.toFixed !== undefined) parsedDate = new Date(date);
          else if (typeof date === "string") {
              const format = givenFormat || (config || _options.defaults).dateFormat;
              const datestr = String(date).trim();
              if (datestr === "today") {
                  parsedDate = new Date();
                  timeless = true;
              } else if (/Z$/.test(datestr) || /GMT$/.test(datestr)) parsedDate = new Date(date);
              else if (config && config.parseDate) parsedDate = config.parseDate(date, format);
              else {
                  parsedDate = !config || !config.noCalendar ? new Date(new Date().getFullYear(), 0, 1, 0, 0, 0, 0) : new Date(new Date().setHours(0, 0, 0, 0));
                  let matched, ops = [];
                  for(let i = 0, matchIndex = 0, regexStr = ""; i < format.length; i++){
                      const token = format[i];
                      const isBackSlash = token === "\\";
                      const escaped = format[i - 1] === "\\" || isBackSlash;
                      if (_formatting.tokenRegex[token] && !escaped) {
                          regexStr += _formatting.tokenRegex[token];
                          const match = new RegExp(regexStr).exec(date);
                          if (match && (matched = true)) ops[token !== "Y" ? "push" : "unshift"]({
                              fn: _formatting.revFormat[token],
                              val: match[++matchIndex]
                          });
                      } else if (!isBackSlash) regexStr += ".";
                      ops.forEach(({ fn , val  })=>parsedDate = fn(parsedDate, val, locale) || parsedDate
                      );
                  }
                  parsedDate = matched ? parsedDate : undefined;
              }
          }
          if (!(parsedDate instanceof Date && !isNaN(parsedDate.getTime()))) {
              config.errorHandler(new Error(`Invalid date provided: ${dateOrig}`));
              return undefined;
          }
          if (timeless === true) parsedDate.setHours(0, 0, 0, 0);
          return parsedDate;
      }
  ;
  function compareDates(date1, date2, timeless = true) {
      if (timeless !== false) return new Date(date1.getTime()).setHours(0, 0, 0, 0) - new Date(date2.getTime()).setHours(0, 0, 0, 0);
      return date1.getTime() - date2.getTime();
  }
  function compareTimes(date1, date2) {
      return 3600 * (date1.getHours() - date2.getHours()) + 60 * (date1.getMinutes() - date2.getMinutes()) + date1.getSeconds() - date2.getSeconds();
  }
  const isBetween = (ts, ts1, ts2)=>{
      return ts > Math.min(ts1, ts2) && ts < Math.max(ts1, ts2);
  };
  const duration = {
      DAY: 86400000
  };
  function getDefaultHours(config) {
      let hours = config.defaultHour;
      let minutes = config.defaultMinute;
      let seconds = config.defaultSeconds;
      if (config.minDate !== undefined) {
          const minHour = config.minDate.getHours();
          const minMinutes = config.minDate.getMinutes();
          const minSeconds = config.minDate.getSeconds();
          if (hours < minHour) hours = minHour;
          if (hours === minHour && minutes < minMinutes) minutes = minMinutes;
          if (hours === minHour && minutes === minMinutes && seconds < minSeconds) seconds = config.minDate.getSeconds();
      }
      if (config.maxDate !== undefined) {
          const maxHr = config.maxDate.getHours();
          const maxMinutes = config.maxDate.getMinutes();
          hours = Math.min(hours, maxHr);
          if (hours === maxHr) minutes = Math.min(maxMinutes, minutes);
          if (hours === maxHr && minutes === maxMinutes) seconds = config.maxDate.getSeconds();
      }
      return {
          hours,
          minutes,
          seconds
      };
  }
  
  },{"./formatting":"jt8kP","../types/options":"h2gY4","../l10n/default":"eDgV1","@parcel/transformer-js/src/esmodule-helpers.js":"6jXwo"}],"jt8kP":[function(require,module,exports) {
  var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  parcelHelpers.export(exports, "monthToStr", ()=>monthToStr
  );
  parcelHelpers.export(exports, "revFormat", ()=>revFormat
  );
  parcelHelpers.export(exports, "tokenRegex", ()=>tokenRegex
  );
  parcelHelpers.export(exports, "formats", ()=>formats
  );
  var _utils = require("../utils");
  const doNothing = ()=>undefined
  ;
  const monthToStr = (monthNumber, shorthand, locale)=>locale.months[shorthand ? "shorthand" : "longhand"][monthNumber]
  ;
  const revFormat = {
      D: doNothing,
      F: function(dateObj, monthName, locale) {
          dateObj.setMonth(locale.months.longhand.indexOf(monthName));
      },
      G: (dateObj, hour)=>{
          dateObj.setHours(parseFloat(hour));
      },
      H: (dateObj, hour)=>{
          dateObj.setHours(parseFloat(hour));
      },
      J: (dateObj, day)=>{
          dateObj.setDate(parseFloat(day));
      },
      K: (dateObj, amPM, locale)=>{
          dateObj.setHours(dateObj.getHours() % 12 + 12 * _utils.int(new RegExp(locale.amPM[1], "i").test(amPM)));
      },
      M: function(dateObj, shortMonth, locale) {
          dateObj.setMonth(locale.months.shorthand.indexOf(shortMonth));
      },
      S: (dateObj, seconds)=>{
          dateObj.setSeconds(parseFloat(seconds));
      },
      U: (_, unixSeconds)=>new Date(parseFloat(unixSeconds) * 1000)
      ,
      W: function(dateObj, weekNum, locale) {
          const weekNumber = parseInt(weekNum);
          const date = new Date(dateObj.getFullYear(), 0, 2 + (weekNumber - 1) * 7, 0, 0, 0, 0);
          date.setDate(date.getDate() - date.getDay() + locale.firstDayOfWeek);
          return date;
      },
      Y: (dateObj, year)=>{
          dateObj.setFullYear(parseFloat(year));
      },
      Z: (_, ISODate)=>new Date(ISODate)
      ,
      d: (dateObj, day)=>{
          dateObj.setDate(parseFloat(day));
      },
      h: (dateObj, hour)=>{
          dateObj.setHours(parseFloat(hour));
      },
      i: (dateObj, minutes)=>{
          dateObj.setMinutes(parseFloat(minutes));
      },
      j: (dateObj, day)=>{
          dateObj.setDate(parseFloat(day));
      },
      l: doNothing,
      m: (dateObj, month)=>{
          dateObj.setMonth(parseFloat(month) - 1);
      },
      n: (dateObj, month)=>{
          dateObj.setMonth(parseFloat(month) - 1);
      },
      s: (dateObj, seconds)=>{
          dateObj.setSeconds(parseFloat(seconds));
      },
      u: (_, unixMillSeconds)=>new Date(parseFloat(unixMillSeconds))
      ,
      w: doNothing,
      y: (dateObj, year)=>{
          dateObj.setFullYear(2000 + parseFloat(year));
      }
  };
  const tokenRegex = {
      D: "(\\w+)",
      F: "(\\w+)",
      G: "(\\d\\d|\\d)",
      H: "(\\d\\d|\\d)",
      J: "(\\d\\d|\\d)\\w+",
      K: "",
      M: "(\\w+)",
      S: "(\\d\\d|\\d)",
      U: "(.+)",
      W: "(\\d\\d|\\d)",
      Y: "(\\d{4})",
      Z: "(.+)",
      d: "(\\d\\d|\\d)",
      h: "(\\d\\d|\\d)",
      i: "(\\d\\d|\\d)",
      j: "(\\d\\d|\\d)",
      l: "(\\w+)",
      m: "(\\d\\d|\\d)",
      n: "(\\d\\d|\\d)",
      s: "(\\d\\d|\\d)",
      u: "(.+)",
      w: "(\\d\\d|\\d)",
      y: "(\\d{2})"
  };
  const formats = {
      Z: (date)=>date.toISOString()
      ,
      D: function(date, locale, options) {
          return locale.weekdays.shorthand[formats.w(date, locale, options)];
      },
      F: function(date, locale, options) {
          return monthToStr(formats.n(date, locale, options) - 1, false, locale);
      },
      G: function(date, locale, options) {
          return _utils.pad(formats.h(date, locale, options));
      },
      H: (date)=>_utils.pad(date.getHours())
      ,
      J: function(date, locale) {
          return locale.ordinal !== undefined ? date.getDate() + locale.ordinal(date.getDate()) : date.getDate();
      },
      K: (date, locale)=>locale.amPM[_utils.int(date.getHours() > 11)]
      ,
      M: function(date, locale) {
          return monthToStr(date.getMonth(), true, locale);
      },
      S: (date)=>_utils.pad(date.getSeconds())
      ,
      U: (date)=>date.getTime() / 1000
      ,
      W: function(date, _, options) {
          return options.getWeek(date);
      },
      Y: (date)=>_utils.pad(date.getFullYear(), 4)
      ,
      d: (date)=>_utils.pad(date.getDate())
      ,
      h: (date)=>date.getHours() % 12 ? date.getHours() % 12 : 12
      ,
      i: (date)=>_utils.pad(date.getMinutes())
      ,
      j: (date)=>date.getDate()
      ,
      l: function(date, locale) {
          return locale.weekdays.longhand[date.getDay()];
      },
      m: (date)=>_utils.pad(date.getMonth() + 1)
      ,
      n: (date)=>date.getMonth() + 1
      ,
      s: (date)=>date.getSeconds()
      ,
      u: (date)=>date.getTime()
      ,
      w: (date)=>date.getDay()
      ,
      y: (date)=>String(date.getFullYear()).substring(2)
  };
  
  },{"../utils":"c6tm8","@parcel/transformer-js/src/esmodule-helpers.js":"6jXwo"}],"2PQGv":[function(require,module,exports) {
  "use strict";
  if (typeof Object.assign !== "function") Object.assign = function(target, ...args) {
      if (!target) throw TypeError("Cannot convert undefined or null to object");
      for (const source of args)if (source) Object.keys(source).forEach((key)=>target[key] = source[key]
      );
      return target;
  };
  
  },{}]},["89Gua","iGeph"], "iGeph", "parcelRequire15ff")
  
  //# sourceMappingURL=main.js.map
  